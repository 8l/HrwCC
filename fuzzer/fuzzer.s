# gas-assembler code generated by HrwCC

.section .text
.globl printUsage
.type printUsage, @function
printUsage:
	pushl	%ebp
	movl	%esp, %ebp
	subl	$0, %esp


	subl	$4, %esp
	movl	$symtab+0, 0(%esp)
	call	printf
	addl	$4, %esp
	subl	$4, %esp
	movl	$symtab+62, 0(%esp)
	call	printf
	addl	$4, %esp
	subl	$4, %esp
	movl	$symtab+124, 0(%esp)
	call	printf
	addl	$4, %esp
	subl	$4, %esp
	movl	$symtab+126, 0(%esp)
	call	printf
	addl	$4, %esp
	subl	$4, %esp
	movl	$symtab+134, 0(%esp)
	call	printf
	addl	$4, %esp
	subl	$4, %esp
	movl	$symtab+124, 0(%esp)
	call	printf
	addl	$4, %esp
	subl	$4, %esp
	movl	$symtab+155, 0(%esp)
	call	printf
	addl	$4, %esp
	subl	$4, %esp
	movl	$symtab+215, 0(%esp)
	call	printf
	addl	$4, %esp


printUsage_ret:
	movl	%ebp, %esp
	popl	%ebp
	ret




.globl main
.type main, @function
main:
	pushl	%ebp
	movl	%esp, %ebp
	subl	$13, %esp


	movl	%ebp, %eax
	addl	$8, %eax
	movl	(%eax), %eax
	pushl	%eax
	popl	%ebx
	cmpl	$1, %ebx
	movl	$1, %eax
	je	main_reltrue_1
	movl	$0, %eax
main_reltrue_1:
	testl	%eax, %eax
	jnz	main_ifbl_0
	jmp	main_elsebl_0
main_ifbl_0:
	movl	%ebp, %eax
	addl	$-4, %eax
	pushl	%eax
	popl	%ebx
	movl	$1000, (%ebx)
	jmp	main_endif_0

main_elsebl_0:

	movl	%ebp, %eax
	addl	$8, %eax
	movl	(%eax), %eax
	pushl	%eax
	popl	%ebx
	cmpl	$2, %ebx
	movl	$1, %eax
	je	main_reltrue_3
	movl	$0, %eax
main_reltrue_3:
	testl	%eax, %eax
	jnz	main_ifbl_2
	jmp	main_elsebl_2
main_ifbl_2:
	movl	%ebp, %eax
	addl	$-4, %eax
	pushl	%eax
	subl	$4, %esp
	pushl	$1
	movl	%ebp, %eax
	addl	$12, %eax
	movl	(%eax), %eax
	popl	%esi
	imull	$4, %esi
	addl	%esi, %eax
	movl	(%eax), %eax
	movl	%eax, 0(%esp)
	call	atoi
	addl	$4, %esp
	popl	%ebx
	movl	%eax, (%ebx)
	jmp	main_endif_2

main_elsebl_2:

	subl	$0, %esp
	call	printUsage
	addl	$0, %esp
	pushl	$0
	popl	%ebx
	subl	$1, %ebx
	pushl	%ebx
	popl	%eax
	jmp	main_ret
main_endif_2:

main_endif_0:

	subl	$4, %esp
	subl	$4, %esp
	movl	$0, 0(%esp)
	call	time
	addl	$4, %esp
	movl	%eax, 0(%esp)
	call	srand
	addl	$4, %esp
main_while_4:
	movl	$1, %eax
	testl	%eax, %eax
	jz	main_endwhile_4

	movl	%ebp, %eax
	addl	$-9, %eax
	pushl	%eax
	subl	$12, %esp
	movl	$0, 0(%esp)
	movl	%ebp, %eax
	addl	$-5, %eax
	movl	%eax, 4(%esp)
	movl	$1, 8(%esp)
	call	read
	addl	$12, %esp
	popl	%ebx
	movl	%eax, (%ebx)
	movl	%ebp, %eax
	addl	$-9, %eax
	movl	(%eax), %eax
	pushl	%eax
	popl	%ebx
	cmpl	$0, %ebx
	movl	$1, %eax
	je	main_reltrue_6
	movl	$0, %eax
main_reltrue_6:
	testl	%eax, %eax
	jnz	main_ifbl_5
	jmp	main_elsebl_5
main_ifbl_5:
	jmp	main_endwhile_4
	jmp	main_endif_5

main_elsebl_5:

main_endif_5:

	movl	%ebp, %eax
	addl	$-13, %eax
	pushl	%eax
	subl	$0, %esp
	call	rand
	addl	$0, %esp
	popl	%ebx
	movl	%eax, (%ebx)
	movl	%ebp, %eax
	addl	$-13, %eax
	pushl	%eax
	movl	%ebp, %eax
	addl	$-13, %eax
	movl	(%eax), %eax
	pushl	%eax
	pushl	$100000
	popl	%ebx
	addl	$1, %ebx
	pushl	%ebx
	popl	%eax
	movl	%eax, %ebx
	popl	%eax
	movl	$0, %edx
	idivl	%ebx
	pushl	%edx
	popl	%eax
	popl	%ebx
	movl	%eax, (%ebx)
	movl	%ebp, %eax
	addl	$-13, %eax
	movl	(%eax), %eax
	pushl	%eax
	movl	%ebp, %eax
	addl	$-4, %eax
	movl	(%eax), %eax
	popl	%ebx
	cmpl	%eax, %ebx
	movl	$1, %eax
	jle	main_reltrue_8
	movl	$0, %eax
main_reltrue_8:
	testl	%eax, %eax
	jnz	main_ifbl_7
	jmp	main_elsebl_7
main_ifbl_7:
	movl	%ebp, %eax
	addl	$-5, %eax
	pushl	%eax
	subl	$0, %esp
	call	rand
	addl	$0, %esp
	pushl	%eax
	movl	$128, %eax
	movl	%eax, %ebx
	popl	%eax
	movl	$0, %edx
	idivl	%ebx
	pushl	%edx
	popl	%eax
	popl	%ebx
	movb	%al, (%ebx)
	jmp	main_endif_7

main_elsebl_7:

main_endif_7:

	subl	$12, %esp
	movl	$1, 0(%esp)
	movl	%ebp, %eax
	addl	$-5, %eax
	movl	%eax, 4(%esp)
	movl	$1, 8(%esp)
	call	write
	addl	$12, %esp
	jmp	main_while_4
main_endwhile_4:

	movl	$0, %eax
	jmp	main_ret


main_ret:
	movl	%ebp, %esp
	popl	%ebp
	ret




# The symbol table 

.section .data
symtab:
	.string	"Fuzzer is a tool which pipes characters from stdin to stdout\n"
	.string	"and substitutes some characters with a specific probabiltiy.\n"
	.string	"\n"
	.string	"Usage:\n"
	.string	"    fuzzer [<prop>]\n"
	.string	"In the mean <prop> many characters out of 100.000 ones are\n"
	.string	"substituted. Default value: 1000\n"

