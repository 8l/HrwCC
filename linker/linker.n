# gas-assembler code generated by HrwCC

.section .text
	#debug: func-def: ( MarkersList * listPtr ) 
.globl Clear_MarkersList
.type Clear_MarkersList, @function
Clear_MarkersList:
	pushl	%ebp
	movl	%esp, %ebp
	subl	$0, %esp


	#debug: assignment: listPtr -> head = 0 ; 
	movl	%ebp, %eax
	addl	$8, %eax
	movl	(%eax), %eax
	addl	$0, %eax
	pushl	%eax
	popl	%ebx
	movl	$0, (%ebx)
	#debug: assignment: listPtr -> tail = 0 ; 
	movl	%ebp, %eax
	addl	$8, %eax
	movl	(%eax), %eax
	addl	$4, %eax
	pushl	%eax
	popl	%ebx
	movl	$0, (%ebx)


Clear_MarkersList_ret:
	movl	%ebp, %esp
	popl	%ebp
	ret




	#debug: func-def: ( MarkersList * listPtr , Marker * nodePtr ) 
.globl Is_Member_Of_MarkersList
.type Is_Member_Of_MarkersList, @function
Is_Member_Of_MarkersList:
	pushl	%ebp
	movl	%esp, %ebp
	subl	$4, %esp


	#debug: assignment: cur = listPtr -> head ; 
	movl	%ebp, %eax
	addl	$8, %eax
	movl	(%eax), %eax
	addl	$0, %eax
	movl	(%eax), %eax
	movl	%eax, -4(%ebp)
	#debug: while: cur != 0 
Is_Member_Of_MarkersList_while_0:
	pushl	-4(%ebp)
	popl	%ebx
	cmpl	$0, %ebx
	movl	$1, %eax
	jne	Is_Member_Of_MarkersList_reltrue_1
	movl	$0, %eax
Is_Member_Of_MarkersList_reltrue_1:
	testl	%eax, %eax
	jz	Is_Member_Of_MarkersList_endwhile_0

	#debug: if: cur == nodePtr 
	pushl	-4(%ebp)
	popl	%ebx
	cmpl	12(%ebp), %ebx
	movl	$1, %eax
	je	Is_Member_Of_MarkersList_reltrue_3
	movl	$0, %eax
Is_Member_Of_MarkersList_reltrue_3:
	testl	%eax, %eax
	jnz	Is_Member_Of_MarkersList_ifbl_2
	jmp	Is_Member_Of_MarkersList_elsebl_2
Is_Member_Of_MarkersList_ifbl_2:
	#debug: return: return 1 ; 
	movl	$1, %eax
	jmp	Is_Member_Of_MarkersList_ret
	jmp	Is_Member_Of_MarkersList_endif_2

Is_Member_Of_MarkersList_elsebl_2:

Is_Member_Of_MarkersList_endif_2:

	#debug: assignment: cur = cur -> nextMarkersList ; 
	movl	%ebp, %eax
	addl	$-4, %eax
	movl	(%eax), %eax
	addl	$136, %eax
	movl	(%eax), %eax
	movl	%eax, -4(%ebp)
	jmp	Is_Member_Of_MarkersList_while_0
Is_Member_Of_MarkersList_endwhile_0:

	#debug: return: return 0 ; 
	movl	$0, %eax
	jmp	Is_Member_Of_MarkersList_ret


Is_Member_Of_MarkersList_ret:
	movl	%ebp, %esp
	popl	%ebp
	ret




	#debug: func-def: ( MarkersList * listPtr ) 
.globl Get_Front_Of_MarkersList
.type Get_Front_Of_MarkersList, @function
Get_Front_Of_MarkersList:
	pushl	%ebp
	movl	%esp, %ebp
	subl	$0, %esp


	#debug: return: return listPtr -> head ; 
	movl	%ebp, %eax
	addl	$8, %eax
	movl	(%eax), %eax
	addl	$0, %eax
	movl	(%eax), %eax
	jmp	Get_Front_Of_MarkersList_ret


Get_Front_Of_MarkersList_ret:
	movl	%ebp, %esp
	popl	%ebp
	ret




	#debug: func-def: ( MarkersList * listPtr ) 
.globl Get_Back_Of_MarkersList
.type Get_Back_Of_MarkersList, @function
Get_Back_Of_MarkersList:
	pushl	%ebp
	movl	%esp, %ebp
	subl	$0, %esp


	#debug: return: return listPtr -> tail ; 
	movl	%ebp, %eax
	addl	$8, %eax
	movl	(%eax), %eax
	addl	$4, %eax
	movl	(%eax), %eax
	jmp	Get_Back_Of_MarkersList_ret


Get_Back_Of_MarkersList_ret:
	movl	%ebp, %esp
	popl	%ebp
	ret




	#debug: func-def: ( Marker * nodePtr ) 
.globl Get_Next_In_MarkersList
.type Get_Next_In_MarkersList, @function
Get_Next_In_MarkersList:
	pushl	%ebp
	movl	%esp, %ebp
	subl	$0, %esp


	#debug: return: return nodePtr -> nextMarkersList ; 
	movl	%ebp, %eax
	addl	$8, %eax
	movl	(%eax), %eax
	addl	$136, %eax
	movl	(%eax), %eax
	jmp	Get_Next_In_MarkersList_ret


Get_Next_In_MarkersList_ret:
	movl	%ebp, %esp
	popl	%ebp
	ret




	#debug: func-def: ( Marker * nodePtr , Marker * value ) 
.globl Set_Next_In_MarkersList
.type Set_Next_In_MarkersList, @function
Set_Next_In_MarkersList:
	pushl	%ebp
	movl	%esp, %ebp
	subl	$0, %esp


	#debug: assignment: nodePtr -> nextMarkersList = value ; 
	movl	%ebp, %eax
	addl	$8, %eax
	movl	(%eax), %eax
	addl	$136, %eax
	pushl	%eax
	movl	12(%ebp), %eax
	popl	%ebx
	movl	%eax, (%ebx)


Set_Next_In_MarkersList_ret:
	movl	%ebp, %esp
	popl	%ebp
	ret




	#debug: func-def: ( Marker * nodePtr ) 
.globl Get_Prev_In_MarkersList
.type Get_Prev_In_MarkersList, @function
Get_Prev_In_MarkersList:
	pushl	%ebp
	movl	%esp, %ebp
	subl	$0, %esp


	#debug: return: return nodePtr -> prevMarkersList ; 
	movl	%ebp, %eax
	addl	$8, %eax
	movl	(%eax), %eax
	addl	$132, %eax
	movl	(%eax), %eax
	jmp	Get_Prev_In_MarkersList_ret


Get_Prev_In_MarkersList_ret:
	movl	%ebp, %esp
	popl	%ebp
	ret




	#debug: func-def: ( Marker * nodePtr , Marker * value ) 
.globl Set_Prev_In_MarkersList
.type Set_Prev_In_MarkersList, @function
Set_Prev_In_MarkersList:
	pushl	%ebp
	movl	%esp, %ebp
	subl	$0, %esp


	#debug: assignment: nodePtr -> prevMarkersList = value ; 
	movl	%ebp, %eax
	addl	$8, %eax
	movl	(%eax), %eax
	addl	$132, %eax
	pushl	%eax
	movl	12(%ebp), %eax
	popl	%ebx
	movl	%eax, (%ebx)


Set_Prev_In_MarkersList_ret:
	movl	%ebp, %esp
	popl	%ebp
	ret




	#debug: func-def: ( MarkersList * listPtr , Marker * nodePtr ) 
.globl Add_To_Front_Of_MarkersList
.type Add_To_Front_Of_MarkersList, @function
Add_To_Front_Of_MarkersList:
	pushl	%ebp
	movl	%esp, %ebp
	subl	$0, %esp


	#debug: assignment: nodePtr -> prevMarkersList = 0 ; 
	movl	%ebp, %eax
	addl	$12, %eax
	movl	(%eax), %eax
	addl	$132, %eax
	pushl	%eax
	popl	%ebx
	movl	$0, (%ebx)
	#debug: if: listPtr -> head == 0 
	movl	%ebp, %eax
	addl	$8, %eax
	movl	(%eax), %eax
	addl	$0, %eax
	movl	(%eax), %eax
	pushl	%eax
	popl	%ebx
	cmpl	$0, %ebx
	movl	$1, %eax
	je	Add_To_Front_Of_MarkersList_reltrue_5
	movl	$0, %eax
Add_To_Front_Of_MarkersList_reltrue_5:
	testl	%eax, %eax
	jnz	Add_To_Front_Of_MarkersList_ifbl_4
	jmp	Add_To_Front_Of_MarkersList_elsebl_4
Add_To_Front_Of_MarkersList_ifbl_4:
	#debug: assignment: listPtr -> head = nodePtr ; 
	movl	%ebp, %eax
	addl	$8, %eax
	movl	(%eax), %eax
	addl	$0, %eax
	pushl	%eax
	movl	12(%ebp), %eax
	popl	%ebx
	movl	%eax, (%ebx)
	#debug: assignment: listPtr -> tail = nodePtr ; 
	movl	%ebp, %eax
	addl	$8, %eax
	movl	(%eax), %eax
	addl	$4, %eax
	pushl	%eax
	movl	12(%ebp), %eax
	popl	%ebx
	movl	%eax, (%ebx)
	#debug: assignment: nodePtr -> nextMarkersList = 0 ; 
	movl	%ebp, %eax
	addl	$12, %eax
	movl	(%eax), %eax
	addl	$136, %eax
	pushl	%eax
	popl	%ebx
	movl	$0, (%ebx)
	jmp	Add_To_Front_Of_MarkersList_endif_4

Add_To_Front_Of_MarkersList_elsebl_4:

	#debug: assignment: listPtr -> head -> prevMarkersList = nodePtr ; 
	movl	%ebp, %eax
	addl	$8, %eax
	movl	(%eax), %eax
	addl	$0, %eax
	movl	(%eax), %eax
	addl	$132, %eax
	pushl	%eax
	movl	12(%ebp), %eax
	popl	%ebx
	movl	%eax, (%ebx)
	#debug: assignment: nodePtr -> nextMarkersList = listPtr -> head ; 
	movl	%ebp, %eax
	addl	$12, %eax
	movl	(%eax), %eax
	addl	$136, %eax
	pushl	%eax
	movl	%ebp, %eax
	addl	$8, %eax
	movl	(%eax), %eax
	addl	$0, %eax
	movl	(%eax), %eax
	popl	%ebx
	movl	%eax, (%ebx)
	#debug: assignment: listPtr -> head = nodePtr ; 
	movl	%ebp, %eax
	addl	$8, %eax
	movl	(%eax), %eax
	addl	$0, %eax
	pushl	%eax
	movl	12(%ebp), %eax
	popl	%ebx
	movl	%eax, (%ebx)
Add_To_Front_Of_MarkersList_endif_4:



Add_To_Front_Of_MarkersList_ret:
	movl	%ebp, %esp
	popl	%ebp
	ret




	#debug: func-def: ( MarkersList * listPtr , Marker * nodePtr ) 
.globl Add_To_Back_Of_MarkersList
.type Add_To_Back_Of_MarkersList, @function
Add_To_Back_Of_MarkersList:
	pushl	%ebp
	movl	%esp, %ebp
	subl	$0, %esp


	#debug: assignment: nodePtr -> nextMarkersList = 0 ; 
	movl	%ebp, %eax
	addl	$12, %eax
	movl	(%eax), %eax
	addl	$136, %eax
	pushl	%eax
	popl	%ebx
	movl	$0, (%ebx)
	#debug: if: listPtr -> tail == 0 
	movl	%ebp, %eax
	addl	$8, %eax
	movl	(%eax), %eax
	addl	$4, %eax
	movl	(%eax), %eax
	pushl	%eax
	popl	%ebx
	cmpl	$0, %ebx
	movl	$1, %eax
	je	Add_To_Back_Of_MarkersList_reltrue_7
	movl	$0, %eax
Add_To_Back_Of_MarkersList_reltrue_7:
	testl	%eax, %eax
	jnz	Add_To_Back_Of_MarkersList_ifbl_6
	jmp	Add_To_Back_Of_MarkersList_elsebl_6
Add_To_Back_Of_MarkersList_ifbl_6:
	#debug: assignment: listPtr -> head = nodePtr ; 
	movl	%ebp, %eax
	addl	$8, %eax
	movl	(%eax), %eax
	addl	$0, %eax
	pushl	%eax
	movl	12(%ebp), %eax
	popl	%ebx
	movl	%eax, (%ebx)
	#debug: assignment: listPtr -> tail = nodePtr ; 
	movl	%ebp, %eax
	addl	$8, %eax
	movl	(%eax), %eax
	addl	$4, %eax
	pushl	%eax
	movl	12(%ebp), %eax
	popl	%ebx
	movl	%eax, (%ebx)
	#debug: assignment: nodePtr -> prevMarkersList = 0 ; 
	movl	%ebp, %eax
	addl	$12, %eax
	movl	(%eax), %eax
	addl	$132, %eax
	pushl	%eax
	popl	%ebx
	movl	$0, (%ebx)
	jmp	Add_To_Back_Of_MarkersList_endif_6

Add_To_Back_Of_MarkersList_elsebl_6:

	#debug: assignment: listPtr -> tail -> nextMarkersList = nodePtr ; 
	movl	%ebp, %eax
	addl	$8, %eax
	movl	(%eax), %eax
	addl	$4, %eax
	movl	(%eax), %eax
	addl	$136, %eax
	pushl	%eax
	movl	12(%ebp), %eax
	popl	%ebx
	movl	%eax, (%ebx)
	#debug: assignment: nodePtr -> prevMarkersList = listPtr -> tail ; 
	movl	%ebp, %eax
	addl	$12, %eax
	movl	(%eax), %eax
	addl	$132, %eax
	pushl	%eax
	movl	%ebp, %eax
	addl	$8, %eax
	movl	(%eax), %eax
	addl	$4, %eax
	movl	(%eax), %eax
	popl	%ebx
	movl	%eax, (%ebx)
	#debug: assignment: listPtr -> tail = nodePtr ; 
	movl	%ebp, %eax
	addl	$8, %eax
	movl	(%eax), %eax
	addl	$4, %eax
	pushl	%eax
	movl	12(%ebp), %eax
	popl	%ebx
	movl	%eax, (%ebx)
Add_To_Back_Of_MarkersList_endif_6:



Add_To_Back_Of_MarkersList_ret:
	movl	%ebp, %esp
	popl	%ebp
	ret




	#debug: func-def: ( Marker * nodePtr , Marker * nodePtrToAppend ) 
.globl Add_To_MarkersList_After
.type Add_To_MarkersList_After, @function
Add_To_MarkersList_After:
	pushl	%ebp
	movl	%esp, %ebp
	subl	$0, %esp


	#debug: assignment: nodePtrToAppend -> nextMarkersList = nodePtr -> nextMarkersList ; 
	movl	%ebp, %eax
	addl	$12, %eax
	movl	(%eax), %eax
	addl	$136, %eax
	pushl	%eax
	movl	%ebp, %eax
	addl	$8, %eax
	movl	(%eax), %eax
	addl	$136, %eax
	movl	(%eax), %eax
	popl	%ebx
	movl	%eax, (%ebx)
	#debug: assignment: nodePtr -> nextMarkersList = nodePtrToAppend ; 
	movl	%ebp, %eax
	addl	$8, %eax
	movl	(%eax), %eax
	addl	$136, %eax
	pushl	%eax
	movl	12(%ebp), %eax
	popl	%ebx
	movl	%eax, (%ebx)


Add_To_MarkersList_After_ret:
	movl	%ebp, %esp
	popl	%ebp
	ret




	#debug: func-def: ( MarkersList * listToModify , MarkersList * listToAppend ) 
.globl Append_MarkersList
.type Append_MarkersList, @function
Append_MarkersList:
	pushl	%ebp
	movl	%esp, %ebp
	subl	$0, %esp


	#debug: if: listToAppend -> head != 0 
	movl	%ebp, %eax
	addl	$12, %eax
	movl	(%eax), %eax
	addl	$0, %eax
	movl	(%eax), %eax
	pushl	%eax
	popl	%ebx
	cmpl	$0, %ebx
	movl	$1, %eax
	jne	Append_MarkersList_reltrue_9
	movl	$0, %eax
Append_MarkersList_reltrue_9:
	testl	%eax, %eax
	jnz	Append_MarkersList_ifbl_8
	jmp	Append_MarkersList_elsebl_8
Append_MarkersList_ifbl_8:
	#debug: if: listToModify -> head == 0 
	movl	%ebp, %eax
	addl	$8, %eax
	movl	(%eax), %eax
	addl	$0, %eax
	movl	(%eax), %eax
	pushl	%eax
	popl	%ebx
	cmpl	$0, %ebx
	movl	$1, %eax
	je	Append_MarkersList_reltrue_11
	movl	$0, %eax
Append_MarkersList_reltrue_11:
	testl	%eax, %eax
	jnz	Append_MarkersList_ifbl_10
	jmp	Append_MarkersList_elsebl_10
Append_MarkersList_ifbl_10:
	#debug: assignment: listToModify -> head = listToAppend -> head ; 
	movl	%ebp, %eax
	addl	$8, %eax
	movl	(%eax), %eax
	addl	$0, %eax
	pushl	%eax
	movl	%ebp, %eax
	addl	$12, %eax
	movl	(%eax), %eax
	addl	$0, %eax
	movl	(%eax), %eax
	popl	%ebx
	movl	%eax, (%ebx)
	#debug: assignment: listToModify -> tail = listToAppend -> tail ; 
	movl	%ebp, %eax
	addl	$8, %eax
	movl	(%eax), %eax
	addl	$4, %eax
	pushl	%eax
	movl	%ebp, %eax
	addl	$12, %eax
	movl	(%eax), %eax
	addl	$4, %eax
	movl	(%eax), %eax
	popl	%ebx
	movl	%eax, (%ebx)
	jmp	Append_MarkersList_endif_10

Append_MarkersList_elsebl_10:

	#debug: assignment: listToAppend -> head -> prevMarkersList = listToModify -> tail ; 
	movl	%ebp, %eax
	addl	$12, %eax
	movl	(%eax), %eax
	addl	$0, %eax
	movl	(%eax), %eax
	addl	$132, %eax
	pushl	%eax
	movl	%ebp, %eax
	addl	$8, %eax
	movl	(%eax), %eax
	addl	$4, %eax
	movl	(%eax), %eax
	popl	%ebx
	movl	%eax, (%ebx)
	#debug: assignment: listToModify -> tail -> nextMarkersList = listToAppend -> head ; 
	movl	%ebp, %eax
	addl	$8, %eax
	movl	(%eax), %eax
	addl	$4, %eax
	movl	(%eax), %eax
	addl	$136, %eax
	pushl	%eax
	movl	%ebp, %eax
	addl	$12, %eax
	movl	(%eax), %eax
	addl	$0, %eax
	movl	(%eax), %eax
	popl	%ebx
	movl	%eax, (%ebx)
	#debug: assignment: listToModify -> tail = listToAppend -> tail ; 
	movl	%ebp, %eax
	addl	$8, %eax
	movl	(%eax), %eax
	addl	$4, %eax
	pushl	%eax
	movl	%ebp, %eax
	addl	$12, %eax
	movl	(%eax), %eax
	addl	$4, %eax
	movl	(%eax), %eax
	popl	%ebx
	movl	%eax, (%ebx)
Append_MarkersList_endif_10:

	jmp	Append_MarkersList_endif_8

Append_MarkersList_elsebl_8:

Append_MarkersList_endif_8:



Append_MarkersList_ret:
	movl	%ebp, %esp
	popl	%ebp
	ret




	#debug: func-def: ( MarkersList * listPtr ) 
.globl Remove_From_Front_Of_MarkersList
.type Remove_From_Front_Of_MarkersList, @function
Remove_From_Front_Of_MarkersList:
	pushl	%ebp
	movl	%esp, %ebp
	subl	$4, %esp


	#debug: assignment: nodePtr = listPtr -> head ; 
	movl	%ebp, %eax
	addl	$8, %eax
	movl	(%eax), %eax
	addl	$0, %eax
	movl	(%eax), %eax
	movl	%eax, -4(%ebp)
	#debug: assignment: listPtr -> head = listPtr -> head -> nextMarkersList ; 
	movl	%ebp, %eax
	addl	$8, %eax
	movl	(%eax), %eax
	addl	$0, %eax
	pushl	%eax
	movl	%ebp, %eax
	addl	$8, %eax
	movl	(%eax), %eax
	addl	$0, %eax
	movl	(%eax), %eax
	addl	$136, %eax
	movl	(%eax), %eax
	popl	%ebx
	movl	%eax, (%ebx)
	#debug: if: listPtr -> head == 0 
	movl	%ebp, %eax
	addl	$8, %eax
	movl	(%eax), %eax
	addl	$0, %eax
	movl	(%eax), %eax
	pushl	%eax
	popl	%ebx
	cmpl	$0, %ebx
	movl	$1, %eax
	je	Remove_From_Front_Of_MarkersList_reltrue_13
	movl	$0, %eax
Remove_From_Front_Of_MarkersList_reltrue_13:
	testl	%eax, %eax
	jnz	Remove_From_Front_Of_MarkersList_ifbl_12
	jmp	Remove_From_Front_Of_MarkersList_elsebl_12
Remove_From_Front_Of_MarkersList_ifbl_12:
	#debug: assignment: listPtr -> tail = 0 ; 
	movl	%ebp, %eax
	addl	$8, %eax
	movl	(%eax), %eax
	addl	$4, %eax
	pushl	%eax
	popl	%ebx
	movl	$0, (%ebx)
	jmp	Remove_From_Front_Of_MarkersList_endif_12

Remove_From_Front_Of_MarkersList_elsebl_12:

	#debug: assignment: listPtr -> head -> prevMarkersList = 0 ; 
	movl	%ebp, %eax
	addl	$8, %eax
	movl	(%eax), %eax
	addl	$0, %eax
	movl	(%eax), %eax
	addl	$132, %eax
	pushl	%eax
	popl	%ebx
	movl	$0, (%ebx)
Remove_From_Front_Of_MarkersList_endif_12:

	#debug: return: return nodePtr ; 
	movl	-4(%ebp), %eax
	jmp	Remove_From_Front_Of_MarkersList_ret


Remove_From_Front_Of_MarkersList_ret:
	movl	%ebp, %esp
	popl	%ebp
	ret




	#debug: func-def: ( MarkersList * listPtr , Marker * nodePtr ) 
.globl Remove_From_MarkersList
.type Remove_From_MarkersList, @function
Remove_From_MarkersList:
	pushl	%ebp
	movl	%esp, %ebp
	subl	$0, %esp


	#debug: if: nodePtr -> prevMarkersList != 0 
	movl	%ebp, %eax
	addl	$12, %eax
	movl	(%eax), %eax
	addl	$132, %eax
	movl	(%eax), %eax
	pushl	%eax
	popl	%ebx
	cmpl	$0, %ebx
	movl	$1, %eax
	jne	Remove_From_MarkersList_reltrue_15
	movl	$0, %eax
Remove_From_MarkersList_reltrue_15:
	testl	%eax, %eax
	jnz	Remove_From_MarkersList_ifbl_14
	jmp	Remove_From_MarkersList_elsebl_14
Remove_From_MarkersList_ifbl_14:
	#debug: assignment: nodePtr -> prevMarkersList -> nextMarkersList = nodePtr -> nextMarkersList ; 
	movl	%ebp, %eax
	addl	$12, %eax
	movl	(%eax), %eax
	addl	$132, %eax
	movl	(%eax), %eax
	addl	$136, %eax
	pushl	%eax
	movl	%ebp, %eax
	addl	$12, %eax
	movl	(%eax), %eax
	addl	$136, %eax
	movl	(%eax), %eax
	popl	%ebx
	movl	%eax, (%ebx)
	jmp	Remove_From_MarkersList_endif_14

Remove_From_MarkersList_elsebl_14:

	#debug: assignment: listPtr -> head = nodePtr -> nextMarkersList ; 
	movl	%ebp, %eax
	addl	$8, %eax
	movl	(%eax), %eax
	addl	$0, %eax
	pushl	%eax
	movl	%ebp, %eax
	addl	$12, %eax
	movl	(%eax), %eax
	addl	$136, %eax
	movl	(%eax), %eax
	popl	%ebx
	movl	%eax, (%ebx)
Remove_From_MarkersList_endif_14:

	#debug: if: nodePtr -> nextMarkersList != 0 
	movl	%ebp, %eax
	addl	$12, %eax
	movl	(%eax), %eax
	addl	$136, %eax
	movl	(%eax), %eax
	pushl	%eax
	popl	%ebx
	cmpl	$0, %ebx
	movl	$1, %eax
	jne	Remove_From_MarkersList_reltrue_17
	movl	$0, %eax
Remove_From_MarkersList_reltrue_17:
	testl	%eax, %eax
	jnz	Remove_From_MarkersList_ifbl_16
	jmp	Remove_From_MarkersList_elsebl_16
Remove_From_MarkersList_ifbl_16:
	#debug: assignment: nodePtr -> nextMarkersList -> prevMarkersList = nodePtr -> prevMarkersList ; 
	movl	%ebp, %eax
	addl	$12, %eax
	movl	(%eax), %eax
	addl	$136, %eax
	movl	(%eax), %eax
	addl	$132, %eax
	pushl	%eax
	movl	%ebp, %eax
	addl	$12, %eax
	movl	(%eax), %eax
	addl	$132, %eax
	movl	(%eax), %eax
	popl	%ebx
	movl	%eax, (%ebx)
	jmp	Remove_From_MarkersList_endif_16

Remove_From_MarkersList_elsebl_16:

	#debug: assignment: listPtr -> tail = nodePtr -> prevMarkersList ; 
	movl	%ebp, %eax
	addl	$8, %eax
	movl	(%eax), %eax
	addl	$4, %eax
	pushl	%eax
	movl	%ebp, %eax
	addl	$12, %eax
	movl	(%eax), %eax
	addl	$132, %eax
	movl	(%eax), %eax
	popl	%ebx
	movl	%eax, (%ebx)
Remove_From_MarkersList_endif_16:



Remove_From_MarkersList_ret:
	movl	%ebp, %esp
	popl	%ebp
	ret




	#debug: func-def: ( MarkersList * listPtr ) 
.globl Is_MarkersList_Empty
.type Is_MarkersList_Empty, @function
Is_MarkersList_Empty:
	pushl	%ebp
	movl	%esp, %ebp
	subl	$0, %esp


	#debug: return: return listPtr -> head == 0 ; 
	movl	%ebp, %eax
	addl	$8, %eax
	movl	(%eax), %eax
	addl	$0, %eax
	movl	(%eax), %eax
	pushl	%eax
	popl	%ebx
	cmpl	$0, %ebx
	movl	$1, %eax
	je	Is_MarkersList_Empty_reltrue_18
	movl	$0, %eax
Is_MarkersList_Empty_reltrue_18:
	jmp	Is_MarkersList_Empty_ret


Is_MarkersList_Empty_ret:
	movl	%ebp, %esp
	popl	%ebp
	ret




	#debug: func-def: ( LinesList * listPtr ) 
.globl Clear_LinesList
.type Clear_LinesList, @function
Clear_LinesList:
	pushl	%ebp
	movl	%esp, %ebp
	subl	$0, %esp


	#debug: assignment: listPtr -> head = 0 ; 
	movl	%ebp, %eax
	addl	$8, %eax
	movl	(%eax), %eax
	addl	$0, %eax
	pushl	%eax
	popl	%ebx
	movl	$0, (%ebx)
	#debug: assignment: listPtr -> tail = 0 ; 
	movl	%ebp, %eax
	addl	$8, %eax
	movl	(%eax), %eax
	addl	$4, %eax
	pushl	%eax
	popl	%ebx
	movl	$0, (%ebx)


Clear_LinesList_ret:
	movl	%ebp, %esp
	popl	%ebp
	ret




	#debug: func-def: ( LinesList * listPtr , Line * nodePtr ) 
.globl Is_Member_Of_LinesList
.type Is_Member_Of_LinesList, @function
Is_Member_Of_LinesList:
	pushl	%ebp
	movl	%esp, %ebp
	subl	$4, %esp


	#debug: assignment: cur = listPtr -> head ; 
	movl	%ebp, %eax
	addl	$8, %eax
	movl	(%eax), %eax
	addl	$0, %eax
	movl	(%eax), %eax
	movl	%eax, -4(%ebp)
	#debug: while: cur != 0 
Is_Member_Of_LinesList_while_19:
	pushl	-4(%ebp)
	popl	%ebx
	cmpl	$0, %ebx
	movl	$1, %eax
	jne	Is_Member_Of_LinesList_reltrue_20
	movl	$0, %eax
Is_Member_Of_LinesList_reltrue_20:
	testl	%eax, %eax
	jz	Is_Member_Of_LinesList_endwhile_19

	#debug: if: cur == nodePtr 
	pushl	-4(%ebp)
	popl	%ebx
	cmpl	12(%ebp), %ebx
	movl	$1, %eax
	je	Is_Member_Of_LinesList_reltrue_22
	movl	$0, %eax
Is_Member_Of_LinesList_reltrue_22:
	testl	%eax, %eax
	jnz	Is_Member_Of_LinesList_ifbl_21
	jmp	Is_Member_Of_LinesList_elsebl_21
Is_Member_Of_LinesList_ifbl_21:
	#debug: return: return 1 ; 
	movl	$1, %eax
	jmp	Is_Member_Of_LinesList_ret
	jmp	Is_Member_Of_LinesList_endif_21

Is_Member_Of_LinesList_elsebl_21:

Is_Member_Of_LinesList_endif_21:

	#debug: assignment: cur = cur -> nextLinesList ; 
	movl	%ebp, %eax
	addl	$-4, %eax
	movl	(%eax), %eax
	addl	$548, %eax
	movl	(%eax), %eax
	movl	%eax, -4(%ebp)
	jmp	Is_Member_Of_LinesList_while_19
Is_Member_Of_LinesList_endwhile_19:

	#debug: return: return 0 ; 
	movl	$0, %eax
	jmp	Is_Member_Of_LinesList_ret


Is_Member_Of_LinesList_ret:
	movl	%ebp, %esp
	popl	%ebp
	ret




	#debug: func-def: ( LinesList * listPtr ) 
.globl Get_Front_Of_LinesList
.type Get_Front_Of_LinesList, @function
Get_Front_Of_LinesList:
	pushl	%ebp
	movl	%esp, %ebp
	subl	$0, %esp


	#debug: return: return listPtr -> head ; 
	movl	%ebp, %eax
	addl	$8, %eax
	movl	(%eax), %eax
	addl	$0, %eax
	movl	(%eax), %eax
	jmp	Get_Front_Of_LinesList_ret


Get_Front_Of_LinesList_ret:
	movl	%ebp, %esp
	popl	%ebp
	ret




	#debug: func-def: ( LinesList * listPtr ) 
.globl Get_Back_Of_LinesList
.type Get_Back_Of_LinesList, @function
Get_Back_Of_LinesList:
	pushl	%ebp
	movl	%esp, %ebp
	subl	$0, %esp


	#debug: return: return listPtr -> tail ; 
	movl	%ebp, %eax
	addl	$8, %eax
	movl	(%eax), %eax
	addl	$4, %eax
	movl	(%eax), %eax
	jmp	Get_Back_Of_LinesList_ret


Get_Back_Of_LinesList_ret:
	movl	%ebp, %esp
	popl	%ebp
	ret




	#debug: func-def: ( Line * nodePtr ) 
.globl Get_Next_In_LinesList
.type Get_Next_In_LinesList, @function
Get_Next_In_LinesList:
	pushl	%ebp
	movl	%esp, %ebp
	subl	$0, %esp


	#debug: return: return nodePtr -> nextLinesList ; 
	movl	%ebp, %eax
	addl	$8, %eax
	movl	(%eax), %eax
	addl	$548, %eax
	movl	(%eax), %eax
	jmp	Get_Next_In_LinesList_ret


Get_Next_In_LinesList_ret:
	movl	%ebp, %esp
	popl	%ebp
	ret




	#debug: func-def: ( Line * nodePtr , Line * value ) 
.globl Set_Next_In_LinesList
.type Set_Next_In_LinesList, @function
Set_Next_In_LinesList:
	pushl	%ebp
	movl	%esp, %ebp
	subl	$0, %esp


	#debug: assignment: nodePtr -> nextLinesList = value ; 
	movl	%ebp, %eax
	addl	$8, %eax
	movl	(%eax), %eax
	addl	$548, %eax
	pushl	%eax
	movl	12(%ebp), %eax
	popl	%ebx
	movl	%eax, (%ebx)


Set_Next_In_LinesList_ret:
	movl	%ebp, %esp
	popl	%ebp
	ret




	#debug: func-def: ( Line * nodePtr ) 
.globl Get_Prev_In_LinesList
.type Get_Prev_In_LinesList, @function
Get_Prev_In_LinesList:
	pushl	%ebp
	movl	%esp, %ebp
	subl	$0, %esp


	#debug: return: return nodePtr -> prevLinesList ; 
	movl	%ebp, %eax
	addl	$8, %eax
	movl	(%eax), %eax
	addl	$544, %eax
	movl	(%eax), %eax
	jmp	Get_Prev_In_LinesList_ret


Get_Prev_In_LinesList_ret:
	movl	%ebp, %esp
	popl	%ebp
	ret




	#debug: func-def: ( Line * nodePtr , Line * value ) 
.globl Set_Prev_In_LinesList
.type Set_Prev_In_LinesList, @function
Set_Prev_In_LinesList:
	pushl	%ebp
	movl	%esp, %ebp
	subl	$0, %esp


	#debug: assignment: nodePtr -> prevLinesList = value ; 
	movl	%ebp, %eax
	addl	$8, %eax
	movl	(%eax), %eax
	addl	$544, %eax
	pushl	%eax
	movl	12(%ebp), %eax
	popl	%ebx
	movl	%eax, (%ebx)


Set_Prev_In_LinesList_ret:
	movl	%ebp, %esp
	popl	%ebp
	ret




	#debug: func-def: ( LinesList * listPtr , Line * nodePtr ) 
.globl Add_To_Front_Of_LinesList
.type Add_To_Front_Of_LinesList, @function
Add_To_Front_Of_LinesList:
	pushl	%ebp
	movl	%esp, %ebp
	subl	$0, %esp


	#debug: assignment: nodePtr -> prevLinesList = 0 ; 
	movl	%ebp, %eax
	addl	$12, %eax
	movl	(%eax), %eax
	addl	$544, %eax
	pushl	%eax
	popl	%ebx
	movl	$0, (%ebx)
	#debug: if: listPtr -> head == 0 
	movl	%ebp, %eax
	addl	$8, %eax
	movl	(%eax), %eax
	addl	$0, %eax
	movl	(%eax), %eax
	pushl	%eax
	popl	%ebx
	cmpl	$0, %ebx
	movl	$1, %eax
	je	Add_To_Front_Of_LinesList_reltrue_24
	movl	$0, %eax
Add_To_Front_Of_LinesList_reltrue_24:
	testl	%eax, %eax
	jnz	Add_To_Front_Of_LinesList_ifbl_23
	jmp	Add_To_Front_Of_LinesList_elsebl_23
Add_To_Front_Of_LinesList_ifbl_23:
	#debug: assignment: listPtr -> head = nodePtr ; 
	movl	%ebp, %eax
	addl	$8, %eax
	movl	(%eax), %eax
	addl	$0, %eax
	pushl	%eax
	movl	12(%ebp), %eax
	popl	%ebx
	movl	%eax, (%ebx)
	#debug: assignment: listPtr -> tail = nodePtr ; 
	movl	%ebp, %eax
	addl	$8, %eax
	movl	(%eax), %eax
	addl	$4, %eax
	pushl	%eax
	movl	12(%ebp), %eax
	popl	%ebx
	movl	%eax, (%ebx)
	#debug: assignment: nodePtr -> nextLinesList = 0 ; 
	movl	%ebp, %eax
	addl	$12, %eax
	movl	(%eax), %eax
	addl	$548, %eax
	pushl	%eax
	popl	%ebx
	movl	$0, (%ebx)
	jmp	Add_To_Front_Of_LinesList_endif_23

Add_To_Front_Of_LinesList_elsebl_23:

	#debug: assignment: listPtr -> head -> prevLinesList = nodePtr ; 
	movl	%ebp, %eax
	addl	$8, %eax
	movl	(%eax), %eax
	addl	$0, %eax
	movl	(%eax), %eax
	addl	$544, %eax
	pushl	%eax
	movl	12(%ebp), %eax
	popl	%ebx
	movl	%eax, (%ebx)
	#debug: assignment: nodePtr -> nextLinesList = listPtr -> head ; 
	movl	%ebp, %eax
	addl	$12, %eax
	movl	(%eax), %eax
	addl	$548, %eax
	pushl	%eax
	movl	%ebp, %eax
	addl	$8, %eax
	movl	(%eax), %eax
	addl	$0, %eax
	movl	(%eax), %eax
	popl	%ebx
	movl	%eax, (%ebx)
	#debug: assignment: listPtr -> head = nodePtr ; 
	movl	%ebp, %eax
	addl	$8, %eax
	movl	(%eax), %eax
	addl	$0, %eax
	pushl	%eax
	movl	12(%ebp), %eax
	popl	%ebx
	movl	%eax, (%ebx)
Add_To_Front_Of_LinesList_endif_23:



Add_To_Front_Of_LinesList_ret:
	movl	%ebp, %esp
	popl	%ebp
	ret




	#debug: func-def: ( LinesList * listPtr , Line * nodePtr ) 
.globl Add_To_Back_Of_LinesList
.type Add_To_Back_Of_LinesList, @function
Add_To_Back_Of_LinesList:
	pushl	%ebp
	movl	%esp, %ebp
	subl	$0, %esp


	#debug: assignment: nodePtr -> nextLinesList = 0 ; 
	movl	%ebp, %eax
	addl	$12, %eax
	movl	(%eax), %eax
	addl	$548, %eax
	pushl	%eax
	popl	%ebx
	movl	$0, (%ebx)
	#debug: if: listPtr -> tail == 0 
	movl	%ebp, %eax
	addl	$8, %eax
	movl	(%eax), %eax
	addl	$4, %eax
	movl	(%eax), %eax
	pushl	%eax
	popl	%ebx
	cmpl	$0, %ebx
	movl	$1, %eax
	je	Add_To_Back_Of_LinesList_reltrue_26
	movl	$0, %eax
Add_To_Back_Of_LinesList_reltrue_26:
	testl	%eax, %eax
	jnz	Add_To_Back_Of_LinesList_ifbl_25
	jmp	Add_To_Back_Of_LinesList_elsebl_25
Add_To_Back_Of_LinesList_ifbl_25:
	#debug: assignment: listPtr -> head = nodePtr ; 
	movl	%ebp, %eax
	addl	$8, %eax
	movl	(%eax), %eax
	addl	$0, %eax
	pushl	%eax
	movl	12(%ebp), %eax
	popl	%ebx
	movl	%eax, (%ebx)
	#debug: assignment: listPtr -> tail = nodePtr ; 
	movl	%ebp, %eax
	addl	$8, %eax
	movl	(%eax), %eax
	addl	$4, %eax
	pushl	%eax
	movl	12(%ebp), %eax
	popl	%ebx
	movl	%eax, (%ebx)
	#debug: assignment: nodePtr -> prevLinesList = 0 ; 
	movl	%ebp, %eax
	addl	$12, %eax
	movl	(%eax), %eax
	addl	$544, %eax
	pushl	%eax
	popl	%ebx
	movl	$0, (%ebx)
	jmp	Add_To_Back_Of_LinesList_endif_25

Add_To_Back_Of_LinesList_elsebl_25:

	#debug: assignment: listPtr -> tail -> nextLinesList = nodePtr ; 
	movl	%ebp, %eax
	addl	$8, %eax
	movl	(%eax), %eax
	addl	$4, %eax
	movl	(%eax), %eax
	addl	$548, %eax
	pushl	%eax
	movl	12(%ebp), %eax
	popl	%ebx
	movl	%eax, (%ebx)
	#debug: assignment: nodePtr -> prevLinesList = listPtr -> tail ; 
	movl	%ebp, %eax
	addl	$12, %eax
	movl	(%eax), %eax
	addl	$544, %eax
	pushl	%eax
	movl	%ebp, %eax
	addl	$8, %eax
	movl	(%eax), %eax
	addl	$4, %eax
	movl	(%eax), %eax
	popl	%ebx
	movl	%eax, (%ebx)
	#debug: assignment: listPtr -> tail = nodePtr ; 
	movl	%ebp, %eax
	addl	$8, %eax
	movl	(%eax), %eax
	addl	$4, %eax
	pushl	%eax
	movl	12(%ebp), %eax
	popl	%ebx
	movl	%eax, (%ebx)
Add_To_Back_Of_LinesList_endif_25:



Add_To_Back_Of_LinesList_ret:
	movl	%ebp, %esp
	popl	%ebp
	ret




	#debug: func-def: ( Line * nodePtr , Line * nodePtrToAppend ) 
.globl Add_To_LinesList_After
.type Add_To_LinesList_After, @function
Add_To_LinesList_After:
	pushl	%ebp
	movl	%esp, %ebp
	subl	$0, %esp


	#debug: assignment: nodePtrToAppend -> nextLinesList = nodePtr -> nextLinesList ; 
	movl	%ebp, %eax
	addl	$12, %eax
	movl	(%eax), %eax
	addl	$548, %eax
	pushl	%eax
	movl	%ebp, %eax
	addl	$8, %eax
	movl	(%eax), %eax
	addl	$548, %eax
	movl	(%eax), %eax
	popl	%ebx
	movl	%eax, (%ebx)
	#debug: assignment: nodePtr -> nextLinesList = nodePtrToAppend ; 
	movl	%ebp, %eax
	addl	$8, %eax
	movl	(%eax), %eax
	addl	$548, %eax
	pushl	%eax
	movl	12(%ebp), %eax
	popl	%ebx
	movl	%eax, (%ebx)


Add_To_LinesList_After_ret:
	movl	%ebp, %esp
	popl	%ebp
	ret




	#debug: func-def: ( LinesList * listToModify , LinesList * listToAppend ) 
.globl Append_LinesList
.type Append_LinesList, @function
Append_LinesList:
	pushl	%ebp
	movl	%esp, %ebp
	subl	$0, %esp


	#debug: if: listToAppend -> head != 0 
	movl	%ebp, %eax
	addl	$12, %eax
	movl	(%eax), %eax
	addl	$0, %eax
	movl	(%eax), %eax
	pushl	%eax
	popl	%ebx
	cmpl	$0, %ebx
	movl	$1, %eax
	jne	Append_LinesList_reltrue_28
	movl	$0, %eax
Append_LinesList_reltrue_28:
	testl	%eax, %eax
	jnz	Append_LinesList_ifbl_27
	jmp	Append_LinesList_elsebl_27
Append_LinesList_ifbl_27:
	#debug: if: listToModify -> head == 0 
	movl	%ebp, %eax
	addl	$8, %eax
	movl	(%eax), %eax
	addl	$0, %eax
	movl	(%eax), %eax
	pushl	%eax
	popl	%ebx
	cmpl	$0, %ebx
	movl	$1, %eax
	je	Append_LinesList_reltrue_30
	movl	$0, %eax
Append_LinesList_reltrue_30:
	testl	%eax, %eax
	jnz	Append_LinesList_ifbl_29
	jmp	Append_LinesList_elsebl_29
Append_LinesList_ifbl_29:
	#debug: assignment: listToModify -> head = listToAppend -> head ; 
	movl	%ebp, %eax
	addl	$8, %eax
	movl	(%eax), %eax
	addl	$0, %eax
	pushl	%eax
	movl	%ebp, %eax
	addl	$12, %eax
	movl	(%eax), %eax
	addl	$0, %eax
	movl	(%eax), %eax
	popl	%ebx
	movl	%eax, (%ebx)
	#debug: assignment: listToModify -> tail = listToAppend -> tail ; 
	movl	%ebp, %eax
	addl	$8, %eax
	movl	(%eax), %eax
	addl	$4, %eax
	pushl	%eax
	movl	%ebp, %eax
	addl	$12, %eax
	movl	(%eax), %eax
	addl	$4, %eax
	movl	(%eax), %eax
	popl	%ebx
	movl	%eax, (%ebx)
	jmp	Append_LinesList_endif_29

Append_LinesList_elsebl_29:

	#debug: assignment: listToAppend -> head -> prevLinesList = listToModify -> tail ; 
	movl	%ebp, %eax
	addl	$12, %eax
	movl	(%eax), %eax
	addl	$0, %eax
	movl	(%eax), %eax
	addl	$544, %eax
	pushl	%eax
	movl	%ebp, %eax
	addl	$8, %eax
	movl	(%eax), %eax
	addl	$4, %eax
	movl	(%eax), %eax
	popl	%ebx
	movl	%eax, (%ebx)
	#debug: assignment: listToModify -> tail -> nextLinesList = listToAppend -> head ; 
	movl	%ebp, %eax
	addl	$8, %eax
	movl	(%eax), %eax
	addl	$4, %eax
	movl	(%eax), %eax
	addl	$548, %eax
	pushl	%eax
	movl	%ebp, %eax
	addl	$12, %eax
	movl	(%eax), %eax
	addl	$0, %eax
	movl	(%eax), %eax
	popl	%ebx
	movl	%eax, (%ebx)
	#debug: assignment: listToModify -> tail = listToAppend -> tail ; 
	movl	%ebp, %eax
	addl	$8, %eax
	movl	(%eax), %eax
	addl	$4, %eax
	pushl	%eax
	movl	%ebp, %eax
	addl	$12, %eax
	movl	(%eax), %eax
	addl	$4, %eax
	movl	(%eax), %eax
	popl	%ebx
	movl	%eax, (%ebx)
Append_LinesList_endif_29:

	jmp	Append_LinesList_endif_27

Append_LinesList_elsebl_27:

Append_LinesList_endif_27:



Append_LinesList_ret:
	movl	%ebp, %esp
	popl	%ebp
	ret




	#debug: func-def: ( LinesList * listPtr ) 
.globl Remove_From_Front_Of_LinesList
.type Remove_From_Front_Of_LinesList, @function
Remove_From_Front_Of_LinesList:
	pushl	%ebp
	movl	%esp, %ebp
	subl	$4, %esp


	#debug: assignment: nodePtr = listPtr -> head ; 
	movl	%ebp, %eax
	addl	$8, %eax
	movl	(%eax), %eax
	addl	$0, %eax
	movl	(%eax), %eax
	movl	%eax, -4(%ebp)
	#debug: assignment: listPtr -> head = listPtr -> head -> nextLinesList ; 
	movl	%ebp, %eax
	addl	$8, %eax
	movl	(%eax), %eax
	addl	$0, %eax
	pushl	%eax
	movl	%ebp, %eax
	addl	$8, %eax
	movl	(%eax), %eax
	addl	$0, %eax
	movl	(%eax), %eax
	addl	$548, %eax
	movl	(%eax), %eax
	popl	%ebx
	movl	%eax, (%ebx)
	#debug: if: listPtr -> head == 0 
	movl	%ebp, %eax
	addl	$8, %eax
	movl	(%eax), %eax
	addl	$0, %eax
	movl	(%eax), %eax
	pushl	%eax
	popl	%ebx
	cmpl	$0, %ebx
	movl	$1, %eax
	je	Remove_From_Front_Of_LinesList_reltrue_32
	movl	$0, %eax
Remove_From_Front_Of_LinesList_reltrue_32:
	testl	%eax, %eax
	jnz	Remove_From_Front_Of_LinesList_ifbl_31
	jmp	Remove_From_Front_Of_LinesList_elsebl_31
Remove_From_Front_Of_LinesList_ifbl_31:
	#debug: assignment: listPtr -> tail = 0 ; 
	movl	%ebp, %eax
	addl	$8, %eax
	movl	(%eax), %eax
	addl	$4, %eax
	pushl	%eax
	popl	%ebx
	movl	$0, (%ebx)
	jmp	Remove_From_Front_Of_LinesList_endif_31

Remove_From_Front_Of_LinesList_elsebl_31:

	#debug: assignment: listPtr -> head -> prevLinesList = 0 ; 
	movl	%ebp, %eax
	addl	$8, %eax
	movl	(%eax), %eax
	addl	$0, %eax
	movl	(%eax), %eax
	addl	$544, %eax
	pushl	%eax
	popl	%ebx
	movl	$0, (%ebx)
Remove_From_Front_Of_LinesList_endif_31:

	#debug: return: return nodePtr ; 
	movl	-4(%ebp), %eax
	jmp	Remove_From_Front_Of_LinesList_ret


Remove_From_Front_Of_LinesList_ret:
	movl	%ebp, %esp
	popl	%ebp
	ret




	#debug: func-def: ( LinesList * listPtr , Line * nodePtr ) 
.globl Remove_From_LinesList
.type Remove_From_LinesList, @function
Remove_From_LinesList:
	pushl	%ebp
	movl	%esp, %ebp
	subl	$0, %esp


	#debug: if: nodePtr -> prevLinesList != 0 
	movl	%ebp, %eax
	addl	$12, %eax
	movl	(%eax), %eax
	addl	$544, %eax
	movl	(%eax), %eax
	pushl	%eax
	popl	%ebx
	cmpl	$0, %ebx
	movl	$1, %eax
	jne	Remove_From_LinesList_reltrue_34
	movl	$0, %eax
Remove_From_LinesList_reltrue_34:
	testl	%eax, %eax
	jnz	Remove_From_LinesList_ifbl_33
	jmp	Remove_From_LinesList_elsebl_33
Remove_From_LinesList_ifbl_33:
	#debug: assignment: nodePtr -> prevLinesList -> nextLinesList = nodePtr -> nextLinesList ; 
	movl	%ebp, %eax
	addl	$12, %eax
	movl	(%eax), %eax
	addl	$544, %eax
	movl	(%eax), %eax
	addl	$548, %eax
	pushl	%eax
	movl	%ebp, %eax
	addl	$12, %eax
	movl	(%eax), %eax
	addl	$548, %eax
	movl	(%eax), %eax
	popl	%ebx
	movl	%eax, (%ebx)
	jmp	Remove_From_LinesList_endif_33

Remove_From_LinesList_elsebl_33:

	#debug: assignment: listPtr -> head = nodePtr -> nextLinesList ; 
	movl	%ebp, %eax
	addl	$8, %eax
	movl	(%eax), %eax
	addl	$0, %eax
	pushl	%eax
	movl	%ebp, %eax
	addl	$12, %eax
	movl	(%eax), %eax
	addl	$548, %eax
	movl	(%eax), %eax
	popl	%ebx
	movl	%eax, (%ebx)
Remove_From_LinesList_endif_33:

	#debug: if: nodePtr -> nextLinesList != 0 
	movl	%ebp, %eax
	addl	$12, %eax
	movl	(%eax), %eax
	addl	$548, %eax
	movl	(%eax), %eax
	pushl	%eax
	popl	%ebx
	cmpl	$0, %ebx
	movl	$1, %eax
	jne	Remove_From_LinesList_reltrue_36
	movl	$0, %eax
Remove_From_LinesList_reltrue_36:
	testl	%eax, %eax
	jnz	Remove_From_LinesList_ifbl_35
	jmp	Remove_From_LinesList_elsebl_35
Remove_From_LinesList_ifbl_35:
	#debug: assignment: nodePtr -> nextLinesList -> prevLinesList = nodePtr -> prevLinesList ; 
	movl	%ebp, %eax
	addl	$12, %eax
	movl	(%eax), %eax
	addl	$548, %eax
	movl	(%eax), %eax
	addl	$544, %eax
	pushl	%eax
	movl	%ebp, %eax
	addl	$12, %eax
	movl	(%eax), %eax
	addl	$544, %eax
	movl	(%eax), %eax
	popl	%ebx
	movl	%eax, (%ebx)
	jmp	Remove_From_LinesList_endif_35

Remove_From_LinesList_elsebl_35:

	#debug: assignment: listPtr -> tail = nodePtr -> prevLinesList ; 
	movl	%ebp, %eax
	addl	$8, %eax
	movl	(%eax), %eax
	addl	$4, %eax
	pushl	%eax
	movl	%ebp, %eax
	addl	$12, %eax
	movl	(%eax), %eax
	addl	$544, %eax
	movl	(%eax), %eax
	popl	%ebx
	movl	%eax, (%ebx)
Remove_From_LinesList_endif_35:



Remove_From_LinesList_ret:
	movl	%ebp, %esp
	popl	%ebp
	ret




	#debug: func-def: ( LinesList * listPtr ) 
.globl Is_LinesList_Empty
.type Is_LinesList_Empty, @function
Is_LinesList_Empty:
	pushl	%ebp
	movl	%esp, %ebp
	subl	$0, %esp


	#debug: return: return listPtr -> head == 0 ; 
	movl	%ebp, %eax
	addl	$8, %eax
	movl	(%eax), %eax
	addl	$0, %eax
	movl	(%eax), %eax
	pushl	%eax
	popl	%ebx
	cmpl	$0, %ebx
	movl	$1, %eax
	je	Is_LinesList_Empty_reltrue_37
	movl	$0, %eax
Is_LinesList_Empty_reltrue_37:
	jmp	Is_LinesList_Empty_ret


Is_LinesList_Empty_ret:
	movl	%ebp, %esp
	popl	%ebp
	ret




	#debug: func-def: ( FilesList * listPtr ) 
.globl Clear_FilesList
.type Clear_FilesList, @function
Clear_FilesList:
	pushl	%ebp
	movl	%esp, %ebp
	subl	$0, %esp


	#debug: assignment: listPtr -> head = 0 ; 
	movl	%ebp, %eax
	addl	$8, %eax
	movl	(%eax), %eax
	addl	$0, %eax
	pushl	%eax
	popl	%ebx
	movl	$0, (%ebx)
	#debug: assignment: listPtr -> tail = 0 ; 
	movl	%ebp, %eax
	addl	$8, %eax
	movl	(%eax), %eax
	addl	$4, %eax
	pushl	%eax
	popl	%ebx
	movl	$0, (%ebx)


Clear_FilesList_ret:
	movl	%ebp, %esp
	popl	%ebp
	ret




	#debug: func-def: ( FilesList * listPtr , File * nodePtr ) 
.globl Is_Member_Of_FilesList
.type Is_Member_Of_FilesList, @function
Is_Member_Of_FilesList:
	pushl	%ebp
	movl	%esp, %ebp
	subl	$4, %esp


	#debug: assignment: cur = listPtr -> head ; 
	movl	%ebp, %eax
	addl	$8, %eax
	movl	(%eax), %eax
	addl	$0, %eax
	movl	(%eax), %eax
	movl	%eax, -4(%ebp)
	#debug: while: cur != 0 
Is_Member_Of_FilesList_while_38:
	pushl	-4(%ebp)
	popl	%ebx
	cmpl	$0, %ebx
	movl	$1, %eax
	jne	Is_Member_Of_FilesList_reltrue_39
	movl	$0, %eax
Is_Member_Of_FilesList_reltrue_39:
	testl	%eax, %eax
	jz	Is_Member_Of_FilesList_endwhile_38

	#debug: if: cur == nodePtr 
	pushl	-4(%ebp)
	popl	%ebx
	cmpl	12(%ebp), %ebx
	movl	$1, %eax
	je	Is_Member_Of_FilesList_reltrue_41
	movl	$0, %eax
Is_Member_Of_FilesList_reltrue_41:
	testl	%eax, %eax
	jnz	Is_Member_Of_FilesList_ifbl_40
	jmp	Is_Member_Of_FilesList_elsebl_40
Is_Member_Of_FilesList_ifbl_40:
	#debug: return: return 1 ; 
	movl	$1, %eax
	jmp	Is_Member_Of_FilesList_ret
	jmp	Is_Member_Of_FilesList_endif_40

Is_Member_Of_FilesList_elsebl_40:

Is_Member_Of_FilesList_endif_40:

	#debug: assignment: cur = cur -> nextFilesList ; 
	movl	%ebp, %eax
	addl	$-4, %eax
	movl	(%eax), %eax
	addl	$276, %eax
	movl	(%eax), %eax
	movl	%eax, -4(%ebp)
	jmp	Is_Member_Of_FilesList_while_38
Is_Member_Of_FilesList_endwhile_38:

	#debug: return: return 0 ; 
	movl	$0, %eax
	jmp	Is_Member_Of_FilesList_ret


Is_Member_Of_FilesList_ret:
	movl	%ebp, %esp
	popl	%ebp
	ret




	#debug: func-def: ( FilesList * listPtr ) 
.globl Get_Front_Of_FilesList
.type Get_Front_Of_FilesList, @function
Get_Front_Of_FilesList:
	pushl	%ebp
	movl	%esp, %ebp
	subl	$0, %esp


	#debug: return: return listPtr -> head ; 
	movl	%ebp, %eax
	addl	$8, %eax
	movl	(%eax), %eax
	addl	$0, %eax
	movl	(%eax), %eax
	jmp	Get_Front_Of_FilesList_ret


Get_Front_Of_FilesList_ret:
	movl	%ebp, %esp
	popl	%ebp
	ret




	#debug: func-def: ( FilesList * listPtr ) 
.globl Get_Back_Of_FilesList
.type Get_Back_Of_FilesList, @function
Get_Back_Of_FilesList:
	pushl	%ebp
	movl	%esp, %ebp
	subl	$0, %esp


	#debug: return: return listPtr -> tail ; 
	movl	%ebp, %eax
	addl	$8, %eax
	movl	(%eax), %eax
	addl	$4, %eax
	movl	(%eax), %eax
	jmp	Get_Back_Of_FilesList_ret


Get_Back_Of_FilesList_ret:
	movl	%ebp, %esp
	popl	%ebp
	ret




	#debug: func-def: ( File * nodePtr ) 
.globl Get_Next_In_FilesList
.type Get_Next_In_FilesList, @function
Get_Next_In_FilesList:
	pushl	%ebp
	movl	%esp, %ebp
	subl	$0, %esp


	#debug: return: return nodePtr -> nextFilesList ; 
	movl	%ebp, %eax
	addl	$8, %eax
	movl	(%eax), %eax
	addl	$276, %eax
	movl	(%eax), %eax
	jmp	Get_Next_In_FilesList_ret


Get_Next_In_FilesList_ret:
	movl	%ebp, %esp
	popl	%ebp
	ret




	#debug: func-def: ( File * nodePtr , File * value ) 
.globl Set_Next_In_FilesList
.type Set_Next_In_FilesList, @function
Set_Next_In_FilesList:
	pushl	%ebp
	movl	%esp, %ebp
	subl	$0, %esp


	#debug: assignment: nodePtr -> nextFilesList = value ; 
	movl	%ebp, %eax
	addl	$8, %eax
	movl	(%eax), %eax
	addl	$276, %eax
	pushl	%eax
	movl	12(%ebp), %eax
	popl	%ebx
	movl	%eax, (%ebx)


Set_Next_In_FilesList_ret:
	movl	%ebp, %esp
	popl	%ebp
	ret




	#debug: func-def: ( File * nodePtr ) 
.globl Get_Prev_In_FilesList
.type Get_Prev_In_FilesList, @function
Get_Prev_In_FilesList:
	pushl	%ebp
	movl	%esp, %ebp
	subl	$0, %esp


	#debug: return: return nodePtr -> prevFilesList ; 
	movl	%ebp, %eax
	addl	$8, %eax
	movl	(%eax), %eax
	addl	$272, %eax
	movl	(%eax), %eax
	jmp	Get_Prev_In_FilesList_ret


Get_Prev_In_FilesList_ret:
	movl	%ebp, %esp
	popl	%ebp
	ret




	#debug: func-def: ( File * nodePtr , File * value ) 
.globl Set_Prev_In_FilesList
.type Set_Prev_In_FilesList, @function
Set_Prev_In_FilesList:
	pushl	%ebp
	movl	%esp, %ebp
	subl	$0, %esp


	#debug: assignment: nodePtr -> prevFilesList = value ; 
	movl	%ebp, %eax
	addl	$8, %eax
	movl	(%eax), %eax
	addl	$272, %eax
	pushl	%eax
	movl	12(%ebp), %eax
	popl	%ebx
	movl	%eax, (%ebx)


Set_Prev_In_FilesList_ret:
	movl	%ebp, %esp
	popl	%ebp
	ret




	#debug: func-def: ( FilesList * listPtr , File * nodePtr ) 
.globl Add_To_Front_Of_FilesList
.type Add_To_Front_Of_FilesList, @function
Add_To_Front_Of_FilesList:
	pushl	%ebp
	movl	%esp, %ebp
	subl	$0, %esp


	#debug: assignment: nodePtr -> prevFilesList = 0 ; 
	movl	%ebp, %eax
	addl	$12, %eax
	movl	(%eax), %eax
	addl	$272, %eax
	pushl	%eax
	popl	%ebx
	movl	$0, (%ebx)
	#debug: if: listPtr -> head == 0 
	movl	%ebp, %eax
	addl	$8, %eax
	movl	(%eax), %eax
	addl	$0, %eax
	movl	(%eax), %eax
	pushl	%eax
	popl	%ebx
	cmpl	$0, %ebx
	movl	$1, %eax
	je	Add_To_Front_Of_FilesList_reltrue_43
	movl	$0, %eax
Add_To_Front_Of_FilesList_reltrue_43:
	testl	%eax, %eax
	jnz	Add_To_Front_Of_FilesList_ifbl_42
	jmp	Add_To_Front_Of_FilesList_elsebl_42
Add_To_Front_Of_FilesList_ifbl_42:
	#debug: assignment: listPtr -> head = nodePtr ; 
	movl	%ebp, %eax
	addl	$8, %eax
	movl	(%eax), %eax
	addl	$0, %eax
	pushl	%eax
	movl	12(%ebp), %eax
	popl	%ebx
	movl	%eax, (%ebx)
	#debug: assignment: listPtr -> tail = nodePtr ; 
	movl	%ebp, %eax
	addl	$8, %eax
	movl	(%eax), %eax
	addl	$4, %eax
	pushl	%eax
	movl	12(%ebp), %eax
	popl	%ebx
	movl	%eax, (%ebx)
	#debug: assignment: nodePtr -> nextFilesList = 0 ; 
	movl	%ebp, %eax
	addl	$12, %eax
	movl	(%eax), %eax
	addl	$276, %eax
	pushl	%eax
	popl	%ebx
	movl	$0, (%ebx)
	jmp	Add_To_Front_Of_FilesList_endif_42

Add_To_Front_Of_FilesList_elsebl_42:

	#debug: assignment: listPtr -> head -> prevFilesList = nodePtr ; 
	movl	%ebp, %eax
	addl	$8, %eax
	movl	(%eax), %eax
	addl	$0, %eax
	movl	(%eax), %eax
	addl	$272, %eax
	pushl	%eax
	movl	12(%ebp), %eax
	popl	%ebx
	movl	%eax, (%ebx)
	#debug: assignment: nodePtr -> nextFilesList = listPtr -> head ; 
	movl	%ebp, %eax
	addl	$12, %eax
	movl	(%eax), %eax
	addl	$276, %eax
	pushl	%eax
	movl	%ebp, %eax
	addl	$8, %eax
	movl	(%eax), %eax
	addl	$0, %eax
	movl	(%eax), %eax
	popl	%ebx
	movl	%eax, (%ebx)
	#debug: assignment: listPtr -> head = nodePtr ; 
	movl	%ebp, %eax
	addl	$8, %eax
	movl	(%eax), %eax
	addl	$0, %eax
	pushl	%eax
	movl	12(%ebp), %eax
	popl	%ebx
	movl	%eax, (%ebx)
Add_To_Front_Of_FilesList_endif_42:



Add_To_Front_Of_FilesList_ret:
	movl	%ebp, %esp
	popl	%ebp
	ret




	#debug: func-def: ( FilesList * listPtr , File * nodePtr ) 
.globl Add_To_Back_Of_FilesList
.type Add_To_Back_Of_FilesList, @function
Add_To_Back_Of_FilesList:
	pushl	%ebp
	movl	%esp, %ebp
	subl	$0, %esp


	#debug: assignment: nodePtr -> nextFilesList = 0 ; 
	movl	%ebp, %eax
	addl	$12, %eax
	movl	(%eax), %eax
	addl	$276, %eax
	pushl	%eax
	popl	%ebx
	movl	$0, (%ebx)
	#debug: if: listPtr -> tail == 0 
	movl	%ebp, %eax
	addl	$8, %eax
	movl	(%eax), %eax
	addl	$4, %eax
	movl	(%eax), %eax
	pushl	%eax
	popl	%ebx
	cmpl	$0, %ebx
	movl	$1, %eax
	je	Add_To_Back_Of_FilesList_reltrue_45
	movl	$0, %eax
Add_To_Back_Of_FilesList_reltrue_45:
	testl	%eax, %eax
	jnz	Add_To_Back_Of_FilesList_ifbl_44
	jmp	Add_To_Back_Of_FilesList_elsebl_44
Add_To_Back_Of_FilesList_ifbl_44:
	#debug: assignment: listPtr -> head = nodePtr ; 
	movl	%ebp, %eax
	addl	$8, %eax
	movl	(%eax), %eax
	addl	$0, %eax
	pushl	%eax
	movl	12(%ebp), %eax
	popl	%ebx
	movl	%eax, (%ebx)
	#debug: assignment: listPtr -> tail = nodePtr ; 
	movl	%ebp, %eax
	addl	$8, %eax
	movl	(%eax), %eax
	addl	$4, %eax
	pushl	%eax
	movl	12(%ebp), %eax
	popl	%ebx
	movl	%eax, (%ebx)
	#debug: assignment: nodePtr -> prevFilesList = 0 ; 
	movl	%ebp, %eax
	addl	$12, %eax
	movl	(%eax), %eax
	addl	$272, %eax
	pushl	%eax
	popl	%ebx
	movl	$0, (%ebx)
	jmp	Add_To_Back_Of_FilesList_endif_44

Add_To_Back_Of_FilesList_elsebl_44:

	#debug: assignment: listPtr -> tail -> nextFilesList = nodePtr ; 
	movl	%ebp, %eax
	addl	$8, %eax
	movl	(%eax), %eax
	addl	$4, %eax
	movl	(%eax), %eax
	addl	$276, %eax
	pushl	%eax
	movl	12(%ebp), %eax
	popl	%ebx
	movl	%eax, (%ebx)
	#debug: assignment: nodePtr -> prevFilesList = listPtr -> tail ; 
	movl	%ebp, %eax
	addl	$12, %eax
	movl	(%eax), %eax
	addl	$272, %eax
	pushl	%eax
	movl	%ebp, %eax
	addl	$8, %eax
	movl	(%eax), %eax
	addl	$4, %eax
	movl	(%eax), %eax
	popl	%ebx
	movl	%eax, (%ebx)
	#debug: assignment: listPtr -> tail = nodePtr ; 
	movl	%ebp, %eax
	addl	$8, %eax
	movl	(%eax), %eax
	addl	$4, %eax
	pushl	%eax
	movl	12(%ebp), %eax
	popl	%ebx
	movl	%eax, (%ebx)
Add_To_Back_Of_FilesList_endif_44:



Add_To_Back_Of_FilesList_ret:
	movl	%ebp, %esp
	popl	%ebp
	ret




	#debug: func-def: ( File * nodePtr , File * nodePtrToAppend ) 
.globl Add_To_FilesList_After
.type Add_To_FilesList_After, @function
Add_To_FilesList_After:
	pushl	%ebp
	movl	%esp, %ebp
	subl	$0, %esp


	#debug: assignment: nodePtrToAppend -> nextFilesList = nodePtr -> nextFilesList ; 
	movl	%ebp, %eax
	addl	$12, %eax
	movl	(%eax), %eax
	addl	$276, %eax
	pushl	%eax
	movl	%ebp, %eax
	addl	$8, %eax
	movl	(%eax), %eax
	addl	$276, %eax
	movl	(%eax), %eax
	popl	%ebx
	movl	%eax, (%ebx)
	#debug: assignment: nodePtr -> nextFilesList = nodePtrToAppend ; 
	movl	%ebp, %eax
	addl	$8, %eax
	movl	(%eax), %eax
	addl	$276, %eax
	pushl	%eax
	movl	12(%ebp), %eax
	popl	%ebx
	movl	%eax, (%ebx)


Add_To_FilesList_After_ret:
	movl	%ebp, %esp
	popl	%ebp
	ret




	#debug: func-def: ( FilesList * listToModify , FilesList * listToAppend ) 
.globl Append_FilesList
.type Append_FilesList, @function
Append_FilesList:
	pushl	%ebp
	movl	%esp, %ebp
	subl	$0, %esp


	#debug: if: listToAppend -> head != 0 
	movl	%ebp, %eax
	addl	$12, %eax
	movl	(%eax), %eax
	addl	$0, %eax
	movl	(%eax), %eax
	pushl	%eax
	popl	%ebx
	cmpl	$0, %ebx
	movl	$1, %eax
	jne	Append_FilesList_reltrue_47
	movl	$0, %eax
Append_FilesList_reltrue_47:
	testl	%eax, %eax
	jnz	Append_FilesList_ifbl_46
	jmp	Append_FilesList_elsebl_46
Append_FilesList_ifbl_46:
	#debug: if: listToModify -> head == 0 
	movl	%ebp, %eax
	addl	$8, %eax
	movl	(%eax), %eax
	addl	$0, %eax
	movl	(%eax), %eax
	pushl	%eax
	popl	%ebx
	cmpl	$0, %ebx
	movl	$1, %eax
	je	Append_FilesList_reltrue_49
	movl	$0, %eax
Append_FilesList_reltrue_49:
	testl	%eax, %eax
	jnz	Append_FilesList_ifbl_48
	jmp	Append_FilesList_elsebl_48
Append_FilesList_ifbl_48:
	#debug: assignment: listToModify -> head = listToAppend -> head ; 
	movl	%ebp, %eax
	addl	$8, %eax
	movl	(%eax), %eax
	addl	$0, %eax
	pushl	%eax
	movl	%ebp, %eax
	addl	$12, %eax
	movl	(%eax), %eax
	addl	$0, %eax
	movl	(%eax), %eax
	popl	%ebx
	movl	%eax, (%ebx)
	#debug: assignment: listToModify -> tail = listToAppend -> tail ; 
	movl	%ebp, %eax
	addl	$8, %eax
	movl	(%eax), %eax
	addl	$4, %eax
	pushl	%eax
	movl	%ebp, %eax
	addl	$12, %eax
	movl	(%eax), %eax
	addl	$4, %eax
	movl	(%eax), %eax
	popl	%ebx
	movl	%eax, (%ebx)
	jmp	Append_FilesList_endif_48

Append_FilesList_elsebl_48:

	#debug: assignment: listToAppend -> head -> prevFilesList = listToModify -> tail ; 
	movl	%ebp, %eax
	addl	$12, %eax
	movl	(%eax), %eax
	addl	$0, %eax
	movl	(%eax), %eax
	addl	$272, %eax
	pushl	%eax
	movl	%ebp, %eax
	addl	$8, %eax
	movl	(%eax), %eax
	addl	$4, %eax
	movl	(%eax), %eax
	popl	%ebx
	movl	%eax, (%ebx)
	#debug: assignment: listToModify -> tail -> nextFilesList = listToAppend -> head ; 
	movl	%ebp, %eax
	addl	$8, %eax
	movl	(%eax), %eax
	addl	$4, %eax
	movl	(%eax), %eax
	addl	$276, %eax
	pushl	%eax
	movl	%ebp, %eax
	addl	$12, %eax
	movl	(%eax), %eax
	addl	$0, %eax
	movl	(%eax), %eax
	popl	%ebx
	movl	%eax, (%ebx)
	#debug: assignment: listToModify -> tail = listToAppend -> tail ; 
	movl	%ebp, %eax
	addl	$8, %eax
	movl	(%eax), %eax
	addl	$4, %eax
	pushl	%eax
	movl	%ebp, %eax
	addl	$12, %eax
	movl	(%eax), %eax
	addl	$4, %eax
	movl	(%eax), %eax
	popl	%ebx
	movl	%eax, (%ebx)
Append_FilesList_endif_48:

	jmp	Append_FilesList_endif_46

Append_FilesList_elsebl_46:

Append_FilesList_endif_46:



Append_FilesList_ret:
	movl	%ebp, %esp
	popl	%ebp
	ret




	#debug: func-def: ( FilesList * listPtr ) 
.globl Remove_From_Front_Of_FilesList
.type Remove_From_Front_Of_FilesList, @function
Remove_From_Front_Of_FilesList:
	pushl	%ebp
	movl	%esp, %ebp
	subl	$4, %esp


	#debug: assignment: nodePtr = listPtr -> head ; 
	movl	%ebp, %eax
	addl	$8, %eax
	movl	(%eax), %eax
	addl	$0, %eax
	movl	(%eax), %eax
	movl	%eax, -4(%ebp)
	#debug: assignment: listPtr -> head = listPtr -> head -> nextFilesList ; 
	movl	%ebp, %eax
	addl	$8, %eax
	movl	(%eax), %eax
	addl	$0, %eax
	pushl	%eax
	movl	%ebp, %eax
	addl	$8, %eax
	movl	(%eax), %eax
	addl	$0, %eax
	movl	(%eax), %eax
	addl	$276, %eax
	movl	(%eax), %eax
	popl	%ebx
	movl	%eax, (%ebx)
	#debug: if: listPtr -> head == 0 
	movl	%ebp, %eax
	addl	$8, %eax
	movl	(%eax), %eax
	addl	$0, %eax
	movl	(%eax), %eax
	pushl	%eax
	popl	%ebx
	cmpl	$0, %ebx
	movl	$1, %eax
	je	Remove_From_Front_Of_FilesList_reltrue_51
	movl	$0, %eax
Remove_From_Front_Of_FilesList_reltrue_51:
	testl	%eax, %eax
	jnz	Remove_From_Front_Of_FilesList_ifbl_50
	jmp	Remove_From_Front_Of_FilesList_elsebl_50
Remove_From_Front_Of_FilesList_ifbl_50:
	#debug: assignment: listPtr -> tail = 0 ; 
	movl	%ebp, %eax
	addl	$8, %eax
	movl	(%eax), %eax
	addl	$4, %eax
	pushl	%eax
	popl	%ebx
	movl	$0, (%ebx)
	jmp	Remove_From_Front_Of_FilesList_endif_50

Remove_From_Front_Of_FilesList_elsebl_50:

	#debug: assignment: listPtr -> head -> prevFilesList = 0 ; 
	movl	%ebp, %eax
	addl	$8, %eax
	movl	(%eax), %eax
	addl	$0, %eax
	movl	(%eax), %eax
	addl	$272, %eax
	pushl	%eax
	popl	%ebx
	movl	$0, (%ebx)
Remove_From_Front_Of_FilesList_endif_50:

	#debug: return: return nodePtr ; 
	movl	-4(%ebp), %eax
	jmp	Remove_From_Front_Of_FilesList_ret


Remove_From_Front_Of_FilesList_ret:
	movl	%ebp, %esp
	popl	%ebp
	ret




	#debug: func-def: ( FilesList * listPtr , File * nodePtr ) 
.globl Remove_From_FilesList
.type Remove_From_FilesList, @function
Remove_From_FilesList:
	pushl	%ebp
	movl	%esp, %ebp
	subl	$0, %esp


	#debug: if: nodePtr -> prevFilesList != 0 
	movl	%ebp, %eax
	addl	$12, %eax
	movl	(%eax), %eax
	addl	$272, %eax
	movl	(%eax), %eax
	pushl	%eax
	popl	%ebx
	cmpl	$0, %ebx
	movl	$1, %eax
	jne	Remove_From_FilesList_reltrue_53
	movl	$0, %eax
Remove_From_FilesList_reltrue_53:
	testl	%eax, %eax
	jnz	Remove_From_FilesList_ifbl_52
	jmp	Remove_From_FilesList_elsebl_52
Remove_From_FilesList_ifbl_52:
	#debug: assignment: nodePtr -> prevFilesList -> nextFilesList = nodePtr -> nextFilesList ; 
	movl	%ebp, %eax
	addl	$12, %eax
	movl	(%eax), %eax
	addl	$272, %eax
	movl	(%eax), %eax
	addl	$276, %eax
	pushl	%eax
	movl	%ebp, %eax
	addl	$12, %eax
	movl	(%eax), %eax
	addl	$276, %eax
	movl	(%eax), %eax
	popl	%ebx
	movl	%eax, (%ebx)
	jmp	Remove_From_FilesList_endif_52

Remove_From_FilesList_elsebl_52:

	#debug: assignment: listPtr -> head = nodePtr -> nextFilesList ; 
	movl	%ebp, %eax
	addl	$8, %eax
	movl	(%eax), %eax
	addl	$0, %eax
	pushl	%eax
	movl	%ebp, %eax
	addl	$12, %eax
	movl	(%eax), %eax
	addl	$276, %eax
	movl	(%eax), %eax
	popl	%ebx
	movl	%eax, (%ebx)
Remove_From_FilesList_endif_52:

	#debug: if: nodePtr -> nextFilesList != 0 
	movl	%ebp, %eax
	addl	$12, %eax
	movl	(%eax), %eax
	addl	$276, %eax
	movl	(%eax), %eax
	pushl	%eax
	popl	%ebx
	cmpl	$0, %ebx
	movl	$1, %eax
	jne	Remove_From_FilesList_reltrue_55
	movl	$0, %eax
Remove_From_FilesList_reltrue_55:
	testl	%eax, %eax
	jnz	Remove_From_FilesList_ifbl_54
	jmp	Remove_From_FilesList_elsebl_54
Remove_From_FilesList_ifbl_54:
	#debug: assignment: nodePtr -> nextFilesList -> prevFilesList = nodePtr -> prevFilesList ; 
	movl	%ebp, %eax
	addl	$12, %eax
	movl	(%eax), %eax
	addl	$276, %eax
	movl	(%eax), %eax
	addl	$272, %eax
	pushl	%eax
	movl	%ebp, %eax
	addl	$12, %eax
	movl	(%eax), %eax
	addl	$272, %eax
	movl	(%eax), %eax
	popl	%ebx
	movl	%eax, (%ebx)
	jmp	Remove_From_FilesList_endif_54

Remove_From_FilesList_elsebl_54:

	#debug: assignment: listPtr -> tail = nodePtr -> prevFilesList ; 
	movl	%ebp, %eax
	addl	$8, %eax
	movl	(%eax), %eax
	addl	$4, %eax
	pushl	%eax
	movl	%ebp, %eax
	addl	$12, %eax
	movl	(%eax), %eax
	addl	$272, %eax
	movl	(%eax), %eax
	popl	%ebx
	movl	%eax, (%ebx)
Remove_From_FilesList_endif_54:



Remove_From_FilesList_ret:
	movl	%ebp, %esp
	popl	%ebp
	ret




	#debug: func-def: ( FilesList * listPtr ) 
.globl Is_FilesList_Empty
.type Is_FilesList_Empty, @function
Is_FilesList_Empty:
	pushl	%ebp
	movl	%esp, %ebp
	subl	$0, %esp


	#debug: return: return listPtr -> head == 0 ; 
	movl	%ebp, %eax
	addl	$8, %eax
	movl	(%eax), %eax
	addl	$0, %eax
	movl	(%eax), %eax
	pushl	%eax
	popl	%ebx
	cmpl	$0, %ebx
	movl	$1, %eax
	je	Is_FilesList_Empty_reltrue_56
	movl	$0, %eax
Is_FilesList_Empty_reltrue_56:
	jmp	Is_FilesList_Empty_ret


Is_FilesList_Empty_ret:
	movl	%ebp, %esp
	popl	%ebp
	ret




	#debug: func-def: ( linker * instance ) 
.globl linker_create
.type linker_create, @function
linker_create:
	pushl	%ebp
	movl	%esp, %ebp
	subl	$21381, %esp


	#debug: assignment: instance -> initiated = 1 ; 
	movl	%ebp, %eax
	addl	$8, %eax
	movl	(%eax), %eax
	addl	$0, %eax
	pushl	%eax
	popl	%ebx
	movl	$1, (%ebx)
	#debug: assignment: instance -> output_fh = - 1 ; 
	movl	%ebp, %eax
	addl	$8, %eax
	movl	(%eax), %eax
	addl	$4, %eax
	pushl	%eax
	pushl	$0
	popl	%ebx
	subl	$1, %ebx
	pushl	%ebx
	popl	%eax
	popl	%ebx
	movl	%eax, (%ebx)
	#debug: assignment: instance -> text_addr = 3 ; 
	movl	%ebp, %eax
	addl	$8, %eax
	movl	(%eax), %eax
	addl	$48, %eax
	pushl	%eax
	popl	%ebx
	movl	$3, (%ebx)
	#debug: assignment: instance -> data_addr = 0 ; 
	movl	%ebp, %eax
	addl	$8, %eax
	movl	(%eax), %eax
	addl	$52, %eax
	pushl	%eax
	popl	%ebx
	movl	$0, (%ebx)
	#debug: func-call: Clear_MarkersList ( & instance -> globls ) 
	subl	$4, %esp
	movl	%ebp, %eax
	addl	$8, %eax
	movl	(%eax), %eax
	addl	$8, %eax
	movl	%eax, 0(%esp)
	call	Clear_MarkersList
	addl	$4, %esp
	#debug: func-call: Clear_MarkersList ( & instance -> restricted ) 
	subl	$4, %esp
	movl	%ebp, %eax
	addl	$8, %eax
	movl	(%eax), %eax
	addl	$16, %eax
	movl	%eax, 0(%esp)
	call	Clear_MarkersList
	addl	$4, %esp
	#debug: func-call: Clear_LinesList ( & instance -> text_section ) 
	subl	$4, %esp
	movl	%ebp, %eax
	addl	$8, %eax
	movl	(%eax), %eax
	addl	$32, %eax
	movl	%eax, 0(%esp)
	call	Clear_LinesList
	addl	$4, %esp
	#debug: func-call: Clear_LinesList ( & instance -> data_section ) 
	subl	$4, %esp
	movl	%ebp, %eax
	addl	$8, %eax
	movl	(%eax), %eax
	addl	$40, %eax
	movl	%eax, 0(%esp)
	call	Clear_LinesList
	addl	$4, %esp
	#debug: func-call: Clear_FilesList ( & instance -> files ) 
	subl	$4, %esp
	movl	%ebp, %eax
	addl	$8, %eax
	movl	(%eax), %eax
	addl	$24, %eax
	movl	%eax, 0(%esp)
	call	Clear_FilesList
	addl	$4, %esp
	#debug: func-call: preproc_create ( & preproc , "../include/hrwcccomp.h" ) 
	subl	$8, %esp
	movl	%ebp, %eax
	addl	$-20740, %eax
	movl	%eax, 0(%esp)
	movl	$symtab+0, 4(%esp)
	call	preproc_create
	addl	$8, %esp
	#debug: func-call: preproc_addDefine ( & preproc , "__HRWCC__" ) 
	subl	$8, %esp
	movl	%ebp, %eax
	addl	$-20740, %eax
	movl	%eax, 0(%esp)
	movl	$symtab+23, 4(%esp)
	call	preproc_addDefine
	addl	$8, %esp
	#debug: func-call: scanner_init ( & scanner , & preproc ) 
	subl	$8, %esp
	movl	%ebp, %eax
	addl	$-20761, %eax
	movl	%eax, 0(%esp)
	movl	%ebp, %eax
	addl	$-20740, %eax
	movl	%eax, 4(%esp)
	call	scanner_init
	addl	$8, %esp
	#debug: func-call: parser_init ( & parser , & scanner ) 
	subl	$8, %esp
	movl	%ebp, %eax
	addl	$-21357, %eax
	movl	%eax, 0(%esp)
	movl	%ebp, %eax
	addl	$-20761, %eax
	movl	%eax, 4(%esp)
	call	parser_init
	addl	$8, %esp
	#debug: func-call: symbol_CreateSymbolTable ( & parser , & symtable ) 
	subl	$8, %esp
	movl	%ebp, %eax
	addl	$-21357, %eax
	movl	%eax, 0(%esp)
	movl	%ebp, %eax
	addl	$-21373, %eax
	movl	%eax, 4(%esp)
	call	symbol_CreateSymbolTable
	addl	$8, %esp
	#debug: func-call: parser_setSymbolTable ( & parser , & symtable ) 
	subl	$8, %esp
	movl	%ebp, %eax
	addl	$-21357, %eax
	movl	%eax, 0(%esp)
	movl	%ebp, %eax
	addl	$-21373, %eax
	movl	%eax, 4(%esp)
	call	parser_setSymbolTable
	addl	$8, %esp
	#debug: assignment: tree = syntax_CreateTreeNode ( ) ; 
	subl	$0, %esp
	call	syntax_CreateTreeNode
	addl	$0, %esp
	movl	%eax, -21377(%ebp)
	#debug: func-call: parser_buildSyntaxTree ( & parser , tree ) 
	subl	$8, %esp
	movl	%ebp, %eax
	addl	$-21357, %eax
	movl	%eax, 0(%esp)
	movl	-21377(%ebp), %eax
	movl	%eax, 4(%esp)
	call	parser_buildSyntaxTree
	addl	$8, %esp
	#debug: assignment: functions_count = symbol_CountFunctions ( & symtable ) ; 
	subl	$4, %esp
	movl	%ebp, %eax
	addl	$-21373, %eax
	movl	%eax, 0(%esp)
	call	symbol_CountFunctions
	addl	$4, %esp
	movl	%eax, -8(%ebp)
	#debug: assignment: idx = 0 ; 
	movl	$0, -4(%ebp)
	#debug: while: idx < functions_count 
linker_create_while_57:
	pushl	-4(%ebp)
	popl	%ebx
	cmpl	-8(%ebp), %ebx
	movl	$1, %eax
	jl	linker_create_reltrue_58
	movl	$0, %eax
linker_create_reltrue_58:
	testl	%eax, %eax
	jz	linker_create_endwhile_57

	#debug: assignment: node = symbol_GetFunction ( & symtable , idx ) ; 
	subl	$8, %esp
	movl	%ebp, %eax
	addl	$-21373, %eax
	movl	%eax, 0(%esp)
	movl	-4(%ebp), %eax
	movl	%eax, 4(%esp)
	call	symbol_GetFunction
	addl	$8, %esp
	movl	%eax, -21381(%ebp)
	#debug: assignment: marker = malloc ( sizeof ( Marker ) ) ; 
	subl	$4, %esp
	movl	$140, 0(%esp)
	call	malloc
	addl	$4, %esp
	movl	%eax, -12(%ebp)
	#debug: if: marker == 0 
	pushl	-12(%ebp)
	popl	%ebx
	cmpl	$0, %ebx
	movl	$1, %eax
	je	linker_create_reltrue_60
	movl	$0, %eax
linker_create_reltrue_60:
	testl	%eax, %eax
	jnz	linker_create_ifbl_59
	jmp	linker_create_elsebl_59
linker_create_ifbl_59:
	#debug: return: return - 20003 ; 
	pushl	$0
	popl	%ebx
	subl	$20003, %ebx
	pushl	%ebx
	popl	%eax
	jmp	linker_create_ret
	jmp	linker_create_endif_59

linker_create_elsebl_59:

linker_create_endif_59:

	#debug: func-call: memset ( marker , 0 , sizeof ( Marker ) ) 
	subl	$12, %esp
	movl	-12(%ebp), %eax
	movl	%eax, 0(%esp)
	movl	$0, 4(%esp)
	movl	$140, 8(%esp)
	call	memset
	addl	$12, %esp
	#debug: func-call: strcpy ( marker -> name , node -> name . content ) 
	subl	$8, %esp
	movl	%ebp, %eax
	addl	$-12, %eax
	movl	(%eax), %eax
	addl	$0, %eax
	movl	%eax, 0(%esp)
	movl	%ebp, %eax
	addl	$-21381, %eax
	movl	(%eax), %eax
	addl	$0, %eax
	addl	$16, %eax
	movl	%eax, 4(%esp)
	call	strcpy
	addl	$8, %esp
	#debug: func-call: Add_To_Front_Of_MarkersList ( & instance -> restricted , marker ) 
	subl	$8, %esp
	movl	%ebp, %eax
	addl	$8, %eax
	movl	(%eax), %eax
	addl	$16, %eax
	movl	%eax, 0(%esp)
	movl	-12(%ebp), %eax
	movl	%eax, 4(%esp)
	call	Add_To_Front_Of_MarkersList
	addl	$8, %esp
	#debug: assignment: idx = idx + 1 ; 
	pushl	-4(%ebp)
	popl	%ebx
	addl	$1, %ebx
	pushl	%ebx
	popl	%eax
	movl	%eax, -4(%ebp)
	jmp	linker_create_while_57
linker_create_endwhile_57:

	#debug: func-call: syntax_FreeSyntaxTree ( tree ) 
	subl	$4, %esp
	movl	-21377(%ebp), %eax
	movl	%eax, 0(%esp)
	call	syntax_FreeSyntaxTree
	addl	$4, %esp
	#debug: func-call: symbol_destroy ( & symtable ) 
	subl	$4, %esp
	movl	%ebp, %eax
	addl	$-21373, %eax
	movl	%eax, 0(%esp)
	call	symbol_destroy
	addl	$4, %esp
	#debug: func-call: preproc_destroy ( & preproc ) 
	subl	$4, %esp
	movl	%ebp, %eax
	addl	$-20740, %eax
	movl	%eax, 0(%esp)
	call	preproc_destroy
	addl	$4, %esp
	#debug: return: return 0 ; 
	movl	$0, %eax
	jmp	linker_create_ret


linker_create_ret:
	movl	%ebp, %esp
	popl	%ebp
	ret




	#debug: func-def: ( linker * instance ) 
.globl linker_destroy
.type linker_destroy, @function
linker_destroy:
	pushl	%ebp
	movl	%esp, %ebp
	subl	$0, %esp


	#debug: if: instance -> initiated != 1 
	movl	%ebp, %eax
	addl	$8, %eax
	movl	(%eax), %eax
	addl	$0, %eax
	movl	(%eax), %eax
	pushl	%eax
	popl	%ebx
	cmpl	$1, %ebx
	movl	$1, %eax
	jne	linker_destroy_reltrue_62
	movl	$0, %eax
linker_destroy_reltrue_62:
	testl	%eax, %eax
	jnz	linker_destroy_ifbl_61
	jmp	linker_destroy_elsebl_61
linker_destroy_ifbl_61:
	#debug: return: return - 20000 ; 
	pushl	$0
	popl	%ebx
	subl	$20000, %ebx
	pushl	%ebx
	popl	%eax
	jmp	linker_destroy_ret
	jmp	linker_destroy_endif_61

linker_destroy_elsebl_61:

linker_destroy_endif_61:

	#debug: func-call: freeMarkersList ( & instance -> globls ) 
	subl	$4, %esp
	movl	%ebp, %eax
	addl	$8, %eax
	movl	(%eax), %eax
	addl	$8, %eax
	movl	%eax, 0(%esp)
	call	freeMarkersList
	addl	$4, %esp
	#debug: func-call: freeMarkersList ( & instance -> restricted ) 
	subl	$4, %esp
	movl	%ebp, %eax
	addl	$8, %eax
	movl	(%eax), %eax
	addl	$16, %eax
	movl	%eax, 0(%esp)
	call	freeMarkersList
	addl	$4, %esp
	#debug: func-call: freeLinesList ( & instance -> text_section ) 
	subl	$4, %esp
	movl	%ebp, %eax
	addl	$8, %eax
	movl	(%eax), %eax
	addl	$32, %eax
	movl	%eax, 0(%esp)
	call	freeLinesList
	addl	$4, %esp
	#debug: func-call: freeLinesList ( & instance -> data_section ) 
	subl	$4, %esp
	movl	%ebp, %eax
	addl	$8, %eax
	movl	(%eax), %eax
	addl	$40, %eax
	movl	%eax, 0(%esp)
	call	freeLinesList
	addl	$4, %esp
	#debug: func-call: freeFilesList ( & instance -> files ) 
	subl	$4, %esp
	movl	%ebp, %eax
	addl	$8, %eax
	movl	(%eax), %eax
	addl	$24, %eax
	movl	%eax, 0(%esp)
	call	freeFilesList
	addl	$4, %esp
	#debug: return: return 0 ; 
	movl	$0, %eax
	jmp	linker_destroy_ret


linker_destroy_ret:
	movl	%ebp, %esp
	popl	%ebp
	ret




	#debug: func-def: ( MarkersList * list , char * marker_name ) 
.globl findInMarkersList
.type findInMarkersList, @function
findInMarkersList:
	pushl	%ebp
	movl	%esp, %ebp
	subl	$4, %esp


	#debug: assignment: curr_marker = Get_Front_Of_MarkersList ( list ) ; 
	subl	$4, %esp
	movl	8(%ebp), %eax
	movl	%eax, 0(%esp)
	call	Get_Front_Of_MarkersList
	addl	$4, %esp
	movl	%eax, -4(%ebp)
	#debug: while: curr_marker != 0 
findInMarkersList_while_63:
	pushl	-4(%ebp)
	popl	%ebx
	cmpl	$0, %ebx
	movl	$1, %eax
	jne	findInMarkersList_reltrue_64
	movl	$0, %eax
findInMarkersList_reltrue_64:
	testl	%eax, %eax
	jz	findInMarkersList_endwhile_63

	#debug: if: strcmp ( marker_name , curr_marker -> name ) == 0 
	subl	$8, %esp
	movl	12(%ebp), %eax
	movl	%eax, 0(%esp)
	movl	%ebp, %eax
	addl	$-4, %eax
	movl	(%eax), %eax
	addl	$0, %eax
	movl	%eax, 4(%esp)
	call	strcmp
	addl	$8, %esp
	pushl	%eax
	popl	%ebx
	cmpl	$0, %ebx
	movl	$1, %eax
	je	findInMarkersList_reltrue_66
	movl	$0, %eax
findInMarkersList_reltrue_66:
	testl	%eax, %eax
	jnz	findInMarkersList_ifbl_65
	jmp	findInMarkersList_elsebl_65
findInMarkersList_ifbl_65:
	#debug: return: return curr_marker ; 
	movl	-4(%ebp), %eax
	jmp	findInMarkersList_ret
	jmp	findInMarkersList_endif_65

findInMarkersList_elsebl_65:

findInMarkersList_endif_65:

	#debug: assignment: curr_marker = Get_Next_In_MarkersList ( curr_marker ) ; 
	subl	$4, %esp
	movl	-4(%ebp), %eax
	movl	%eax, 0(%esp)
	call	Get_Next_In_MarkersList
	addl	$4, %esp
	movl	%eax, -4(%ebp)
	jmp	findInMarkersList_while_63
findInMarkersList_endwhile_63:

	#debug: return: return 0 ; 
	movl	$0, %eax
	jmp	findInMarkersList_ret


findInMarkersList_ret:
	movl	%ebp, %esp
	popl	%ebp
	ret




	#debug: func-def: ( MarkersList * list , char * marker_name ) 
.globl getMarkerAddr
.type getMarkerAddr, @function
getMarkerAddr:
	pushl	%ebp
	movl	%esp, %ebp
	subl	$4, %esp


	#debug: assignment: marker = findInMarkersList ( list , marker_name ) ; 
	subl	$8, %esp
	movl	8(%ebp), %eax
	movl	%eax, 0(%esp)
	movl	12(%ebp), %eax
	movl	%eax, 4(%esp)
	call	findInMarkersList
	addl	$8, %esp
	movl	%eax, -4(%ebp)
	#debug: if: marker != 0 
	pushl	-4(%ebp)
	popl	%ebx
	cmpl	$0, %ebx
	movl	$1, %eax
	jne	getMarkerAddr_reltrue_68
	movl	$0, %eax
getMarkerAddr_reltrue_68:
	testl	%eax, %eax
	jnz	getMarkerAddr_ifbl_67
	jmp	getMarkerAddr_elsebl_67
getMarkerAddr_ifbl_67:
	#debug: return: return marker -> addr ; 
	movl	%ebp, %eax
	addl	$-4, %eax
	movl	(%eax), %eax
	addl	$128, %eax
	movl	(%eax), %eax
	jmp	getMarkerAddr_ret
	jmp	getMarkerAddr_endif_67

getMarkerAddr_elsebl_67:

getMarkerAddr_endif_67:

	#debug: return: return - 1 ; 
	pushl	$0
	popl	%ebx
	subl	$1, %ebx
	pushl	%ebx
	popl	%eax
	jmp	getMarkerAddr_ret


getMarkerAddr_ret:
	movl	%ebp, %esp
	popl	%ebp
	ret




	#debug: func-def: ( linker * instance , Line * line ) 
.globl isMarkerLine
.type isMarkerLine, @function
isMarkerLine:
	pushl	%ebp
	movl	%esp, %ebp
	subl	$136, %esp


	#debug: assignment: line_pos = line -> pos ; 
	movl	%ebp, %eax
	addl	$12, %eax
	movl	(%eax), %eax
	addl	$516, %eax
	movl	(%eax), %eax
	movl	%eax, -8(%ebp)
	#debug: assignment: result = getNextIdentifierInLine ( instance , line , identifier ) ; 
	subl	$12, %esp
	movl	8(%ebp), %eax
	movl	%eax, 0(%esp)
	movl	12(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%ebp, %eax
	addl	$-136, %eax
	movl	%eax, 8(%esp)
	call	getNextIdentifierInLine
	addl	$12, %esp
	movl	%eax, -4(%ebp)
	#debug: if: result < 0 
	pushl	-4(%ebp)
	popl	%ebx
	cmpl	$0, %ebx
	movl	$1, %eax
	jl	isMarkerLine_reltrue_70
	movl	$0, %eax
isMarkerLine_reltrue_70:
	testl	%eax, %eax
	jnz	isMarkerLine_ifbl_69
	jmp	isMarkerLine_elsebl_69
isMarkerLine_ifbl_69:
	#debug: return: return result ; 
	movl	-4(%ebp), %eax
	jmp	isMarkerLine_ret
	jmp	isMarkerLine_endif_69

isMarkerLine_elsebl_69:

	#debug: if: result == 0 
	pushl	-4(%ebp)
	popl	%ebx
	cmpl	$0, %ebx
	movl	$1, %eax
	je	isMarkerLine_reltrue_72
	movl	$0, %eax
isMarkerLine_reltrue_72:
	testl	%eax, %eax
	jnz	isMarkerLine_ifbl_71
	jmp	isMarkerLine_elsebl_71
isMarkerLine_ifbl_71:
	#debug: return: return 0 ; 
	movl	$0, %eax
	jmp	isMarkerLine_ret
	jmp	isMarkerLine_endif_71

isMarkerLine_elsebl_71:

	#debug: func-call: lnk_disposeWhitespace ( line ) 
	subl	$4, %esp
	movl	12(%ebp), %eax
	movl	%eax, 0(%esp)
	call	lnk_disposeWhitespace
	addl	$4, %esp
	#debug: if: line -> buffer [ line -> pos ] == ':' 
	movl	%ebp, %eax
	addl	$12, %eax
	movl	(%eax), %eax
	addl	$516, %eax
	movl	(%eax), %eax
	pushl	%eax
	movl	%ebp, %eax
	addl	$12, %eax
	movl	(%eax), %eax
	addl	$0, %eax
	popl	%esi
	addl	%esi, %eax
	movb	(%eax), %al
	movsbl	%al, %eax
	pushl	%eax
	popl	%ebx
	cmpl	$58, %ebx
	movl	$1, %eax
	je	isMarkerLine_reltrue_74
	movl	$0, %eax
isMarkerLine_reltrue_74:
	testl	%eax, %eax
	jnz	isMarkerLine_ifbl_73
	jmp	isMarkerLine_elsebl_73
isMarkerLine_ifbl_73:
	#debug: assignment: line -> pos = line_pos ; 
	movl	%ebp, %eax
	addl	$12, %eax
	movl	(%eax), %eax
	addl	$516, %eax
	pushl	%eax
	movl	-8(%ebp), %eax
	popl	%ebx
	movl	%eax, (%ebx)
	#debug: return: return 1 ; 
	movl	$1, %eax
	jmp	isMarkerLine_ret
	jmp	isMarkerLine_endif_73

isMarkerLine_elsebl_73:

isMarkerLine_endif_73:

	#debug: assignment: line -> pos = line_pos ; 
	movl	%ebp, %eax
	addl	$12, %eax
	movl	(%eax), %eax
	addl	$516, %eax
	pushl	%eax
	movl	-8(%ebp), %eax
	popl	%ebx
	movl	%eax, (%ebx)
	#debug: return: return 0 ; 
	movl	$0, %eax
	jmp	isMarkerLine_ret
isMarkerLine_endif_71:

isMarkerLine_endif_69:

	#debug: return: return 0 ; 
	movl	$0, %eax
	jmp	isMarkerLine_ret


isMarkerLine_ret:
	movl	%ebp, %esp
	popl	%ebp
	ret




	#debug: func-def: ( linker * instance , Line * line , MarkersList * list , int addr ) 
.globl addMarker
.type addMarker, @function
addMarker:
	pushl	%ebp
	movl	%esp, %ebp
	subl	$140, %esp


	#debug: assignment: result = getNextIdentifierInLine ( instance , line , identifier ) ; 
	subl	$12, %esp
	movl	8(%ebp), %eax
	movl	%eax, 0(%esp)
	movl	12(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%ebp, %eax
	addl	$-132, %eax
	movl	%eax, 8(%esp)
	call	getNextIdentifierInLine
	addl	$12, %esp
	movl	%eax, -4(%ebp)
	#debug: if: result < 0 
	pushl	-4(%ebp)
	popl	%ebx
	cmpl	$0, %ebx
	movl	$1, %eax
	jl	addMarker_reltrue_76
	movl	$0, %eax
addMarker_reltrue_76:
	testl	%eax, %eax
	jnz	addMarker_ifbl_75
	jmp	addMarker_elsebl_75
addMarker_ifbl_75:
	#debug: return: return result ; 
	movl	-4(%ebp), %eax
	jmp	addMarker_ret
	jmp	addMarker_endif_75

addMarker_elsebl_75:

	#debug: if: result == 0 
	pushl	-4(%ebp)
	popl	%ebx
	cmpl	$0, %ebx
	movl	$1, %eax
	je	addMarker_reltrue_78
	movl	$0, %eax
addMarker_reltrue_78:
	testl	%eax, %eax
	jnz	addMarker_ifbl_77
	jmp	addMarker_elsebl_77
addMarker_ifbl_77:
	#debug: return: return 0 ; 
	movl	$0, %eax
	jmp	addMarker_ret
	jmp	addMarker_endif_77

addMarker_elsebl_77:

	#debug: assignment: curr_marker = Get_Front_Of_MarkersList ( list ) ; 
	subl	$4, %esp
	movl	16(%ebp), %eax
	movl	%eax, 0(%esp)
	call	Get_Front_Of_MarkersList
	addl	$4, %esp
	movl	%eax, -140(%ebp)
	#debug: while: curr_marker != 0 
addMarker_while_79:
	pushl	-140(%ebp)
	popl	%ebx
	cmpl	$0, %ebx
	movl	$1, %eax
	jne	addMarker_reltrue_80
	movl	$0, %eax
addMarker_reltrue_80:
	testl	%eax, %eax
	jz	addMarker_endwhile_79

	#debug: if: strcmp ( curr_marker -> name , identifier ) == 0 
	subl	$8, %esp
	movl	%ebp, %eax
	addl	$-140, %eax
	movl	(%eax), %eax
	addl	$0, %eax
	movl	%eax, 0(%esp)
	movl	%ebp, %eax
	addl	$-132, %eax
	movl	%eax, 4(%esp)
	call	strcmp
	addl	$8, %esp
	pushl	%eax
	popl	%ebx
	cmpl	$0, %ebx
	movl	$1, %eax
	je	addMarker_reltrue_82
	movl	$0, %eax
addMarker_reltrue_82:
	testl	%eax, %eax
	jnz	addMarker_ifbl_81
	jmp	addMarker_elsebl_81
addMarker_ifbl_81:
	#debug: func-call: printf ( "LINKER_WARNING: marker [%s] already defined before - ignoring this one...\n" , curr_marker -> name ) 
	subl	$8, %esp
	movl	$symtab+33, 0(%esp)
	movl	%ebp, %eax
	addl	$-140, %eax
	movl	(%eax), %eax
	addl	$0, %eax
	movl	%eax, 4(%esp)
	call	printf
	addl	$8, %esp
	#debug: return: return 0 ; 
	movl	$0, %eax
	jmp	addMarker_ret
	jmp	addMarker_endif_81

addMarker_elsebl_81:

addMarker_endif_81:

	#debug: assignment: curr_marker = Get_Next_In_MarkersList ( curr_marker ) ; 
	subl	$4, %esp
	movl	-140(%ebp), %eax
	movl	%eax, 0(%esp)
	call	Get_Next_In_MarkersList
	addl	$4, %esp
	movl	%eax, -140(%ebp)
	jmp	addMarker_while_79
addMarker_endwhile_79:

	#debug: assignment: new_marker = malloc ( sizeof ( Marker ) ) ; 
	subl	$4, %esp
	movl	$140, 0(%esp)
	call	malloc
	addl	$4, %esp
	movl	%eax, -136(%ebp)
	#debug: if: new_marker == 0 
	pushl	-136(%ebp)
	popl	%ebx
	cmpl	$0, %ebx
	movl	$1, %eax
	je	addMarker_reltrue_84
	movl	$0, %eax
addMarker_reltrue_84:
	testl	%eax, %eax
	jnz	addMarker_ifbl_83
	jmp	addMarker_elsebl_83
addMarker_ifbl_83:
	#debug: return: return - 20003 ; 
	pushl	$0
	popl	%ebx
	subl	$20003, %ebx
	pushl	%ebx
	popl	%eax
	jmp	addMarker_ret
	jmp	addMarker_endif_83

addMarker_elsebl_83:

addMarker_endif_83:

	#debug: func-call: memset ( new_marker -> name , 0 , 128 ) 
	subl	$12, %esp
	movl	%ebp, %eax
	addl	$-136, %eax
	movl	(%eax), %eax
	addl	$0, %eax
	movl	%eax, 0(%esp)
	movl	$0, 4(%esp)
	movl	$128, 8(%esp)
	call	memset
	addl	$12, %esp
	#debug: func-call: strcpy ( new_marker -> name , identifier ) 
	subl	$8, %esp
	movl	%ebp, %eax
	addl	$-136, %eax
	movl	(%eax), %eax
	addl	$0, %eax
	movl	%eax, 0(%esp)
	movl	%ebp, %eax
	addl	$-132, %eax
	movl	%eax, 4(%esp)
	call	strcpy
	addl	$8, %esp
	#debug: assignment: new_marker -> addr = addr ; 
	movl	%ebp, %eax
	addl	$-136, %eax
	movl	(%eax), %eax
	addl	$128, %eax
	pushl	%eax
	movl	20(%ebp), %eax
	popl	%ebx
	movl	%eax, (%ebx)
	#debug: func-call: Add_To_Front_Of_MarkersList ( list , new_marker ) 
	subl	$8, %esp
	movl	16(%ebp), %eax
	movl	%eax, 0(%esp)
	movl	-136(%ebp), %eax
	movl	%eax, 4(%esp)
	call	Add_To_Front_Of_MarkersList
	addl	$8, %esp
addMarker_endif_77:

addMarker_endif_75:

	#debug: return: return 0 ; 
	movl	$0, %eax
	jmp	addMarker_ret


addMarker_ret:
	movl	%ebp, %esp
	popl	%ebp
	ret




	#debug: func-def: ( MarkersList * list ) 
.globl printMarkersList
.type printMarkersList, @function
printMarkersList:
	pushl	%ebp
	movl	%esp, %ebp
	subl	$4, %esp


	#debug: assignment: curr_marker = Get_Front_Of_MarkersList ( list ) ; 
	subl	$4, %esp
	movl	8(%ebp), %eax
	movl	%eax, 0(%esp)
	call	Get_Front_Of_MarkersList
	addl	$4, %esp
	movl	%eax, -4(%ebp)
	#debug: while: curr_marker != 0 
printMarkersList_while_85:
	pushl	-4(%ebp)
	popl	%ebx
	cmpl	$0, %ebx
	movl	$1, %eax
	jne	printMarkersList_reltrue_86
	movl	$0, %eax
printMarkersList_reltrue_86:
	testl	%eax, %eax
	jz	printMarkersList_endwhile_85

	#debug: func-call: printf ( "marker: [%s:" , curr_marker -> name ) 
	subl	$8, %esp
	movl	$symtab+108, 0(%esp)
	movl	%ebp, %eax
	addl	$-4, %eax
	movl	(%eax), %eax
	addl	$0, %eax
	movl	%eax, 4(%esp)
	call	printf
	addl	$8, %esp
	#debug: func-call: printf ( "%d]\n" , curr_marker -> addr ) 
	subl	$8, %esp
	movl	$symtab+121, 0(%esp)
	movl	%ebp, %eax
	addl	$-4, %eax
	movl	(%eax), %eax
	addl	$128, %eax
	movl	(%eax), %eax
	movl	%eax, 4(%esp)
	call	printf
	addl	$8, %esp
	#debug: assignment: curr_marker = Get_Next_In_MarkersList ( curr_marker ) ; 
	subl	$4, %esp
	movl	-4(%ebp), %eax
	movl	%eax, 0(%esp)
	call	Get_Next_In_MarkersList
	addl	$4, %esp
	movl	%eax, -4(%ebp)
	jmp	printMarkersList_while_85
printMarkersList_endwhile_85:



printMarkersList_ret:
	movl	%ebp, %esp
	popl	%ebp
	ret




	#debug: func-def: ( LinesList * list ) 
.globl printLinesList
.type printLinesList, @function
printLinesList:
	pushl	%ebp
	movl	%esp, %ebp
	subl	$4, %esp


	#debug: assignment: curr = Get_Front_Of_LinesList ( list ) ; 
	subl	$4, %esp
	movl	8(%ebp), %eax
	movl	%eax, 0(%esp)
	call	Get_Front_Of_LinesList
	addl	$4, %esp
	movl	%eax, -4(%ebp)
	#debug: while: curr != 0 
printLinesList_while_87:
	pushl	-4(%ebp)
	popl	%ebx
	cmpl	$0, %ebx
	movl	$1, %eax
	jne	printLinesList_reltrue_88
	movl	$0, %eax
printLinesList_reltrue_88:
	testl	%eax, %eax
	jz	printLinesList_endwhile_87

	#debug: func-call: printf ( "{%s}:" , curr -> buffer ) 
	subl	$8, %esp
	movl	$symtab+126, 0(%esp)
	movl	%ebp, %eax
	addl	$-4, %eax
	movl	(%eax), %eax
	addl	$0, %eax
	movl	%eax, 4(%esp)
	call	printf
	addl	$8, %esp
	#debug: func-call: printf ( "%d:" , curr -> line_no ) 
	subl	$8, %esp
	movl	$symtab+132, 0(%esp)
	movl	%ebp, %eax
	addl	$-4, %eax
	movl	(%eax), %eax
	addl	$540, %eax
	movl	(%eax), %eax
	movl	%eax, 4(%esp)
	call	printf
	addl	$8, %esp
	#debug: func-call: printf ( "%d\n" , curr -> addr ) 
	subl	$8, %esp
	movl	$symtab+136, 0(%esp)
	movl	%ebp, %eax
	addl	$-4, %eax
	movl	(%eax), %eax
	addl	$532, %eax
	movl	(%eax), %eax
	movl	%eax, 4(%esp)
	call	printf
	addl	$8, %esp
	#debug: assignment: curr = Get_Next_In_LinesList ( curr ) ; 
	subl	$4, %esp
	movl	-4(%ebp), %eax
	movl	%eax, 0(%esp)
	call	Get_Next_In_LinesList
	addl	$4, %esp
	movl	%eax, -4(%ebp)
	jmp	printLinesList_while_87
printLinesList_endwhile_87:



printLinesList_ret:
	movl	%ebp, %esp
	popl	%ebp
	ret




	#debug: func-def: ( MarkersList * globls , MarkersList * local_markers ) 
.globl syncGloblsWithMarkers
.type syncGloblsWithMarkers, @function
syncGloblsWithMarkers:
	pushl	%ebp
	movl	%esp, %ebp
	subl	$16, %esp


	#debug: assignment: globl_marker = Get_Front_Of_MarkersList ( globls ) ; 
	subl	$4, %esp
	movl	8(%ebp), %eax
	movl	%eax, 0(%esp)
	call	Get_Front_Of_MarkersList
	addl	$4, %esp
	movl	%eax, -8(%ebp)
	#debug: while: globl_marker != 0 
syncGloblsWithMarkers_while_89:
	pushl	-8(%ebp)
	popl	%ebx
	cmpl	$0, %ebx
	movl	$1, %eax
	jne	syncGloblsWithMarkers_reltrue_90
	movl	$0, %eax
syncGloblsWithMarkers_reltrue_90:
	testl	%eax, %eax
	jz	syncGloblsWithMarkers_endwhile_89

	#debug: assignment: cmp_marker = Get_Front_Of_MarkersList ( local_markers ) ; 
	subl	$4, %esp
	movl	12(%ebp), %eax
	movl	%eax, 0(%esp)
	call	Get_Front_Of_MarkersList
	addl	$4, %esp
	movl	%eax, -12(%ebp)
	#debug: while: cmp_marker != 0 
syncGloblsWithMarkers_while_91:
	pushl	-12(%ebp)
	popl	%ebx
	cmpl	$0, %ebx
	movl	$1, %eax
	jne	syncGloblsWithMarkers_reltrue_92
	movl	$0, %eax
syncGloblsWithMarkers_reltrue_92:
	testl	%eax, %eax
	jz	syncGloblsWithMarkers_endwhile_91

	#debug: if: strcmp ( cmp_marker -> name , globl_marker -> name ) == 0 
	subl	$8, %esp
	movl	%ebp, %eax
	addl	$-12, %eax
	movl	(%eax), %eax
	addl	$0, %eax
	movl	%eax, 0(%esp)
	movl	%ebp, %eax
	addl	$-8, %eax
	movl	(%eax), %eax
	addl	$0, %eax
	movl	%eax, 4(%esp)
	call	strcmp
	addl	$8, %esp
	pushl	%eax
	popl	%ebx
	cmpl	$0, %ebx
	movl	$1, %eax
	je	syncGloblsWithMarkers_reltrue_94
	movl	$0, %eax
syncGloblsWithMarkers_reltrue_94:
	testl	%eax, %eax
	jnz	syncGloblsWithMarkers_ifbl_93
	jmp	syncGloblsWithMarkers_elsebl_93
syncGloblsWithMarkers_ifbl_93:
	#debug: if: globl_marker -> addr != - 1 
	movl	%ebp, %eax
	addl	$-8, %eax
	movl	(%eax), %eax
	addl	$128, %eax
	movl	(%eax), %eax
	pushl	%eax
	pushl	$0
	popl	%ebx
	subl	$1, %ebx
	pushl	%ebx
	popl	%eax
	popl	%ebx
	cmpl	%eax, %ebx
	movl	$1, %eax
	jne	syncGloblsWithMarkers_reltrue_96
	movl	$0, %eax
syncGloblsWithMarkers_reltrue_96:
	testl	%eax, %eax
	jnz	syncGloblsWithMarkers_ifbl_95
	jmp	syncGloblsWithMarkers_elsebl_95
syncGloblsWithMarkers_ifbl_95:
	#debug: func-call: printf ( "LINKER_WARNING: .globl [%s] definition already found before - ignoring this one...\n" , globl_marker -> name ) 
	subl	$8, %esp
	movl	$symtab+140, 0(%esp)
	movl	%ebp, %eax
	addl	$-8, %eax
	movl	(%eax), %eax
	addl	$0, %eax
	movl	%eax, 4(%esp)
	call	printf
	addl	$8, %esp
	jmp	syncGloblsWithMarkers_endif_95

syncGloblsWithMarkers_elsebl_95:

	#debug: assignment: globl_marker -> addr = cmp_marker -> addr ; 
	movl	%ebp, %eax
	addl	$-8, %eax
	movl	(%eax), %eax
	addl	$128, %eax
	pushl	%eax
	movl	%ebp, %eax
	addl	$-12, %eax
	movl	(%eax), %eax
	addl	$128, %eax
	movl	(%eax), %eax
	popl	%ebx
	movl	%eax, (%ebx)
syncGloblsWithMarkers_endif_95:

	jmp	syncGloblsWithMarkers_endwhile_91
	jmp	syncGloblsWithMarkers_endif_93

syncGloblsWithMarkers_elsebl_93:

syncGloblsWithMarkers_endif_93:

	#debug: assignment: cmp_marker = Get_Next_In_MarkersList ( cmp_marker ) ; 
	subl	$4, %esp
	movl	-12(%ebp), %eax
	movl	%eax, 0(%esp)
	call	Get_Next_In_MarkersList
	addl	$4, %esp
	movl	%eax, -12(%ebp)
	jmp	syncGloblsWithMarkers_while_91
syncGloblsWithMarkers_endwhile_91:

	#debug: assignment: delete_marker = 0 ; 
	movl	$0, -4(%ebp)
	#debug: if: globl_marker -> addr == - 1 
	movl	%ebp, %eax
	addl	$-8, %eax
	movl	(%eax), %eax
	addl	$128, %eax
	movl	(%eax), %eax
	pushl	%eax
	pushl	$0
	popl	%ebx
	subl	$1, %ebx
	pushl	%ebx
	popl	%eax
	popl	%ebx
	cmpl	%eax, %ebx
	movl	$1, %eax
	je	syncGloblsWithMarkers_reltrue_98
	movl	$0, %eax
syncGloblsWithMarkers_reltrue_98:
	testl	%eax, %eax
	jnz	syncGloblsWithMarkers_ifbl_97
	jmp	syncGloblsWithMarkers_elsebl_97
syncGloblsWithMarkers_ifbl_97:
	#debug: func-call: printf ( "LINKER_WARNING: .globl [%s] definition was not found - this label will not be available in other files!\n" , globl_marker -> name ) 
	subl	$8, %esp
	movl	$symtab+224, 0(%esp)
	movl	%ebp, %eax
	addl	$-8, %eax
	movl	(%eax), %eax
	addl	$0, %eax
	movl	%eax, 4(%esp)
	call	printf
	addl	$8, %esp
	#debug: assignment: delete_marker = 1 ; 
	movl	$1, -4(%ebp)
	jmp	syncGloblsWithMarkers_endif_97

syncGloblsWithMarkers_elsebl_97:

syncGloblsWithMarkers_endif_97:

	#debug: assignment: del_marker = globl_marker ; 
	movl	-8(%ebp), %eax
	movl	%eax, -16(%ebp)
	#debug: assignment: globl_marker = Get_Next_In_MarkersList ( globl_marker ) ; 
	subl	$4, %esp
	movl	-8(%ebp), %eax
	movl	%eax, 0(%esp)
	call	Get_Next_In_MarkersList
	addl	$4, %esp
	movl	%eax, -8(%ebp)
	#debug: if: delete_marker == 1 
	pushl	-4(%ebp)
	popl	%ebx
	cmpl	$1, %ebx
	movl	$1, %eax
	je	syncGloblsWithMarkers_reltrue_100
	movl	$0, %eax
syncGloblsWithMarkers_reltrue_100:
	testl	%eax, %eax
	jnz	syncGloblsWithMarkers_ifbl_99
	jmp	syncGloblsWithMarkers_elsebl_99
syncGloblsWithMarkers_ifbl_99:
	#debug: func-call: Remove_From_MarkersList ( globls , del_marker ) 
	subl	$8, %esp
	movl	8(%ebp), %eax
	movl	%eax, 0(%esp)
	movl	-16(%ebp), %eax
	movl	%eax, 4(%esp)
	call	Remove_From_MarkersList
	addl	$8, %esp
	jmp	syncGloblsWithMarkers_endif_99

syncGloblsWithMarkers_elsebl_99:

syncGloblsWithMarkers_endif_99:

	jmp	syncGloblsWithMarkers_while_89
syncGloblsWithMarkers_endwhile_89:



syncGloblsWithMarkers_ret:
	movl	%ebp, %esp
	popl	%ebp
	ret




	#debug: func-def: ( linker * instance , Line * line ) 
.globl getSizeIdentifier
.type getSizeIdentifier, @function
getSizeIdentifier:
	pushl	%ebp
	movl	%esp, %ebp
	subl	$12, %esp


	#debug: func-call: memset ( size_buffer , 0 , 8 ) 
	subl	$12, %esp
	movl	%ebp, %eax
	addl	$-12, %eax
	movl	%eax, 0(%esp)
	movl	$0, 4(%esp)
	movl	$8, 8(%esp)
	call	memset
	addl	$12, %esp
	#debug: assignment: idx = 0 ; 
	movl	$0, -4(%ebp)
	#debug: while: isdigit ( line -> buffer [ line -> pos ] ) && idx < 8 
getSizeIdentifier_while_101:
	subl	$4, %esp
	movl	%ebp, %eax
	addl	$12, %eax
	movl	(%eax), %eax
	addl	$516, %eax
	movl	(%eax), %eax
	pushl	%eax
	movl	%ebp, %eax
	addl	$12, %eax
	movl	(%eax), %eax
	addl	$0, %eax
	popl	%esi
	addl	%esi, %eax
	movb	(%eax), %al
	movsbl	%al, %eax
	movl	%eax, 0(%esp)
	call	isdigit
	addl	$4, %esp
	testl	%eax, %eax
	jz	getSizeIdentifier_logtermfalse_102
	pushl	-4(%ebp)
	popl	%ebx
	cmpl	$8, %ebx
	movl	$1, %eax
	jl	getSizeIdentifier_reltrue_103
	movl	$0, %eax
getSizeIdentifier_reltrue_103:
	testl	%eax, %eax
	jz	getSizeIdentifier_logtermfalse_102
	movl	$1, %eax
	jmp	getSizeIdentifier_logtermtrue_102
getSizeIdentifier_logtermfalse_102:
	movl	$0, %eax
getSizeIdentifier_logtermtrue_102:
	testl	%eax, %eax
	jz	getSizeIdentifier_endwhile_101

	#debug: assignment: size_buffer [ idx ] = line -> buffer [ line -> pos ] ; 
	pushl	-4(%ebp)
	movl	%ebp, %eax
	addl	$12, %eax
	movl	(%eax), %eax
	addl	$516, %eax
	movl	(%eax), %eax
	pushl	%eax
	movl	%ebp, %eax
	addl	$12, %eax
	movl	(%eax), %eax
	addl	$0, %eax
	popl	%esi
	addl	%esi, %eax
	movb	(%eax), %al
	popl	%esi
	movb	%al, -12(%ebp, %esi, 1)
	#debug: assignment: line -> pos = line -> pos + 1 ; 
	movl	%ebp, %eax
	addl	$12, %eax
	movl	(%eax), %eax
	addl	$516, %eax
	pushl	%eax
	movl	%ebp, %eax
	addl	$12, %eax
	movl	(%eax), %eax
	addl	$516, %eax
	movl	(%eax), %eax
	pushl	%eax
	popl	%ebx
	addl	$1, %ebx
	pushl	%ebx
	popl	%eax
	popl	%ebx
	movl	%eax, (%ebx)
	#debug: assignment: idx = idx + 1 ; 
	pushl	-4(%ebp)
	popl	%ebx
	addl	$1, %ebx
	pushl	%ebx
	popl	%eax
	movl	%eax, -4(%ebp)
	jmp	getSizeIdentifier_while_101
getSizeIdentifier_endwhile_101:

	#debug: return: return atoi ( size_buffer ) ; 
	subl	$4, %esp
	movl	%ebp, %eax
	addl	$-12, %eax
	movl	%eax, 0(%esp)
	call	atoi
	addl	$4, %esp
	jmp	getSizeIdentifier_ret


getSizeIdentifier_ret:
	movl	%ebp, %esp
	popl	%ebp
	ret




	#debug: func-def: ( linker * instance , Line * line ) 
.globl getStringSize
.type getStringSize, @function
getStringSize:
	pushl	%ebp
	movl	%esp, %ebp
	subl	$4, %esp


	#debug: if: line -> buffer [ line -> pos ] != '"' 
	movl	%ebp, %eax
	addl	$12, %eax
	movl	(%eax), %eax
	addl	$516, %eax
	movl	(%eax), %eax
	pushl	%eax
	movl	%ebp, %eax
	addl	$12, %eax
	movl	(%eax), %eax
	addl	$0, %eax
	popl	%esi
	addl	%esi, %eax
	movb	(%eax), %al
	movsbl	%al, %eax
	pushl	%eax
	popl	%ebx
	cmpl	$34, %ebx
	movl	$1, %eax
	jne	getStringSize_reltrue_105
	movl	$0, %eax
getStringSize_reltrue_105:
	testl	%eax, %eax
	jnz	getStringSize_ifbl_104
	jmp	getStringSize_elsebl_104
getStringSize_ifbl_104:
	#debug: func-call: printf ( "LINKER_ERROR: unrecognized .string type [%s:" , getFilename ( instance , line -> file_id ) ) 
	subl	$8, %esp
	movl	$symtab+329, 0(%esp)
	subl	$8, %esp
	movl	8(%ebp), %eax
	movl	%eax, 0(%esp)
	movl	%ebp, %eax
	addl	$12, %eax
	movl	(%eax), %eax
	addl	$536, %eax
	movl	(%eax), %eax
	movl	%eax, 4(%esp)
	call	getFilename
	addl	$8, %esp
	movl	%eax, 4(%esp)
	call	printf
	addl	$8, %esp
	#debug: func-call: printf ( "%d] - ignoring\n" , line -> line_no ) 
	subl	$8, %esp
	movl	$symtab+374, 0(%esp)
	movl	%ebp, %eax
	addl	$12, %eax
	movl	(%eax), %eax
	addl	$540, %eax
	movl	(%eax), %eax
	movl	%eax, 4(%esp)
	call	printf
	addl	$8, %esp
	#debug: return: return - 1 ; 
	pushl	$0
	popl	%ebx
	subl	$1, %ebx
	pushl	%ebx
	popl	%eax
	jmp	getStringSize_ret
	jmp	getStringSize_endif_104

getStringSize_elsebl_104:

getStringSize_endif_104:

	#debug: assignment: line -> pos = line -> pos + 1 ; 
	movl	%ebp, %eax
	addl	$12, %eax
	movl	(%eax), %eax
	addl	$516, %eax
	pushl	%eax
	movl	%ebp, %eax
	addl	$12, %eax
	movl	(%eax), %eax
	addl	$516, %eax
	movl	(%eax), %eax
	pushl	%eax
	popl	%ebx
	addl	$1, %ebx
	pushl	%ebx
	popl	%eax
	popl	%ebx
	movl	%eax, (%ebx)
	#debug: assignment: size = 1 ; 
	movl	$1, -4(%ebp)
	#debug: while: line -> buffer [ line -> pos ] != '"' && line -> pos < line -> length 
getStringSize_while_106:
	movl	%ebp, %eax
	addl	$12, %eax
	movl	(%eax), %eax
	addl	$516, %eax
	movl	(%eax), %eax
	pushl	%eax
	movl	%ebp, %eax
	addl	$12, %eax
	movl	(%eax), %eax
	addl	$0, %eax
	popl	%esi
	addl	%esi, %eax
	movb	(%eax), %al
	movsbl	%al, %eax
	pushl	%eax
	popl	%ebx
	cmpl	$34, %ebx
	movl	$1, %eax
	jne	getStringSize_reltrue_108
	movl	$0, %eax
getStringSize_reltrue_108:
	testl	%eax, %eax
	jz	getStringSize_logtermfalse_107
	movl	%ebp, %eax
	addl	$12, %eax
	movl	(%eax), %eax
	addl	$516, %eax
	movl	(%eax), %eax
	pushl	%eax
	movl	%ebp, %eax
	addl	$12, %eax
	movl	(%eax), %eax
	addl	$512, %eax
	movl	(%eax), %eax
	popl	%ebx
	cmpl	%eax, %ebx
	movl	$1, %eax
	jl	getStringSize_reltrue_109
	movl	$0, %eax
getStringSize_reltrue_109:
	testl	%eax, %eax
	jz	getStringSize_logtermfalse_107
	movl	$1, %eax
	jmp	getStringSize_logtermtrue_107
getStringSize_logtermfalse_107:
	movl	$0, %eax
getStringSize_logtermtrue_107:
	testl	%eax, %eax
	jz	getStringSize_endwhile_106

	#debug: if: line -> buffer [ line -> pos ] == '\\' 
	movl	%ebp, %eax
	addl	$12, %eax
	movl	(%eax), %eax
	addl	$516, %eax
	movl	(%eax), %eax
	pushl	%eax
	movl	%ebp, %eax
	addl	$12, %eax
	movl	(%eax), %eax
	addl	$0, %eax
	popl	%esi
	addl	%esi, %eax
	movb	(%eax), %al
	movsbl	%al, %eax
	pushl	%eax
	popl	%ebx
	cmpl	$92, %ebx
	movl	$1, %eax
	je	getStringSize_reltrue_111
	movl	$0, %eax
getStringSize_reltrue_111:
	testl	%eax, %eax
	jnz	getStringSize_ifbl_110
	jmp	getStringSize_elsebl_110
getStringSize_ifbl_110:
	#debug: assignment: line -> pos = line -> pos + 1 ; 
	movl	%ebp, %eax
	addl	$12, %eax
	movl	(%eax), %eax
	addl	$516, %eax
	pushl	%eax
	movl	%ebp, %eax
	addl	$12, %eax
	movl	(%eax), %eax
	addl	$516, %eax
	movl	(%eax), %eax
	pushl	%eax
	popl	%ebx
	addl	$1, %ebx
	pushl	%ebx
	popl	%eax
	popl	%ebx
	movl	%eax, (%ebx)
	jmp	getStringSize_endif_110

getStringSize_elsebl_110:

getStringSize_endif_110:

	#debug: assignment: size = size + 1 ; 
	pushl	-4(%ebp)
	popl	%ebx
	addl	$1, %ebx
	pushl	%ebx
	popl	%eax
	movl	%eax, -4(%ebp)
	#debug: assignment: line -> pos = line -> pos + 1 ; 
	movl	%ebp, %eax
	addl	$12, %eax
	movl	(%eax), %eax
	addl	$516, %eax
	pushl	%eax
	movl	%ebp, %eax
	addl	$12, %eax
	movl	(%eax), %eax
	addl	$516, %eax
	movl	(%eax), %eax
	pushl	%eax
	popl	%ebx
	addl	$1, %ebx
	pushl	%ebx
	popl	%eax
	popl	%ebx
	movl	%eax, (%ebx)
	jmp	getStringSize_while_106
getStringSize_endwhile_106:

	#debug: return: return size ; 
	movl	-4(%ebp), %eax
	jmp	getStringSize_ret


getStringSize_ret:
	movl	%ebp, %esp
	popl	%ebp
	ret




	#debug: func-def: ( linker * instance , File * file , int fh , MarkersList * list ) 
.globl parseSourceFile
.type parseSourceFile, @function
parseSourceFile:
	pushl	%ebp
	movl	%esp, %ebp
	subl	$568, %esp


	#debug: assignment: line . file_id = file -> id ; 
	movl	%ebp, %eax
	addl	$-568, %eax
	addl	$536, %eax
	pushl	%eax
	movl	%ebp, %eax
	addl	$12, %eax
	movl	(%eax), %eax
	addl	$0, %eax
	movl	(%eax), %eax
	popl	%ebx
	movl	%eax, (%ebx)
	#debug: assignment: line . line_no = 0 ; 
	movl	%ebp, %eax
	addl	$-568, %eax
	addl	$540, %eax
	pushl	%eax
	popl	%ebx
	movl	$0, (%ebx)
	#debug: assignment: is_text_section = 0 ; 
	movl	$0, -8(%ebp)
	#debug: assignment: is_data_section = 0 ; 
	movl	$0, -12(%ebp)
	#debug: while: readLine ( instance , fh , & line ) >= 0 
parseSourceFile_while_112:
	subl	$12, %esp
	movl	8(%ebp), %eax
	movl	%eax, 0(%esp)
	movl	16(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%ebp, %eax
	addl	$-568, %eax
	movl	%eax, 8(%esp)
	call	readLine
	addl	$12, %esp
	pushl	%eax
	popl	%ebx
	cmpl	$0, %ebx
	movl	$1, %eax
	jge	parseSourceFile_reltrue_113
	movl	$0, %eax
parseSourceFile_reltrue_113:
	testl	%eax, %eax
	jz	parseSourceFile_endwhile_112

	#debug: assignment: line . line_no = line . line_no + 1 ; 
	movl	%ebp, %eax
	addl	$-568, %eax
	addl	$540, %eax
	pushl	%eax
	movl	%ebp, %eax
	addl	$-568, %eax
	addl	$540, %eax
	movl	(%eax), %eax
	pushl	%eax
	popl	%ebx
	addl	$1, %ebx
	pushl	%ebx
	popl	%eax
	popl	%ebx
	movl	%eax, (%ebx)
	#debug: func-call: lnk_disposeWhitespace ( & line ) 
	subl	$4, %esp
	movl	%ebp, %eax
	addl	$-568, %eax
	movl	%eax, 0(%esp)
	call	lnk_disposeWhitespace
	addl	$4, %esp
	#debug: assignment: line . is_debug_line = 0 ; 
	movl	%ebp, %eax
	addl	$-568, %eax
	addl	$520, %eax
	pushl	%eax
	popl	%ebx
	movl	$0, (%ebx)
	#debug: assignment: line . is_globl_line = 0 ; 
	movl	%ebp, %eax
	addl	$-568, %eax
	addl	$524, %eax
	pushl	%eax
	popl	%ebx
	movl	$0, (%ebx)
	#debug: assignment: line . is_marker_line = 0 ; 
	movl	%ebp, %eax
	addl	$-568, %eax
	addl	$528, %eax
	pushl	%eax
	popl	%ebx
	movl	$0, (%ebx)
	#debug: if: substrcmp ( line . buffer , line . pos , ".section" ) == 0 
	subl	$12, %esp
	movl	%ebp, %eax
	addl	$-568, %eax
	addl	$0, %eax
	movl	%eax, 0(%esp)
	movl	%ebp, %eax
	addl	$-568, %eax
	addl	$516, %eax
	movl	(%eax), %eax
	movl	%eax, 4(%esp)
	movl	$symtab+390, 8(%esp)
	call	substrcmp
	addl	$12, %esp
	pushl	%eax
	popl	%ebx
	cmpl	$0, %ebx
	movl	$1, %eax
	je	parseSourceFile_reltrue_115
	movl	$0, %eax
parseSourceFile_reltrue_115:
	testl	%eax, %eax
	jnz	parseSourceFile_ifbl_114
	jmp	parseSourceFile_elsebl_114
parseSourceFile_ifbl_114:
	#debug: assignment: line . pos = line . pos + 8 ; 
	movl	%ebp, %eax
	addl	$-568, %eax
	addl	$516, %eax
	pushl	%eax
	movl	%ebp, %eax
	addl	$-568, %eax
	addl	$516, %eax
	movl	(%eax), %eax
	pushl	%eax
	popl	%ebx
	addl	$8, %ebx
	pushl	%ebx
	popl	%eax
	popl	%ebx
	movl	%eax, (%ebx)
	#debug: func-call: lnk_disposeWhitespace ( & line ) 
	subl	$4, %esp
	movl	%ebp, %eax
	addl	$-568, %eax
	movl	%eax, 0(%esp)
	call	lnk_disposeWhitespace
	addl	$4, %esp
	#debug: assignment: is_text_section = 0 ; 
	movl	$0, -8(%ebp)
	#debug: assignment: is_data_section = 0 ; 
	movl	$0, -12(%ebp)
	#debug: if: substrcmp ( line . buffer , line . pos , ".text" ) == 0 
	subl	$12, %esp
	movl	%ebp, %eax
	addl	$-568, %eax
	addl	$0, %eax
	movl	%eax, 0(%esp)
	movl	%ebp, %eax
	addl	$-568, %eax
	addl	$516, %eax
	movl	(%eax), %eax
	movl	%eax, 4(%esp)
	movl	$symtab+399, 8(%esp)
	call	substrcmp
	addl	$12, %esp
	pushl	%eax
	popl	%ebx
	cmpl	$0, %ebx
	movl	$1, %eax
	je	parseSourceFile_reltrue_117
	movl	$0, %eax
parseSourceFile_reltrue_117:
	testl	%eax, %eax
	jnz	parseSourceFile_ifbl_116
	jmp	parseSourceFile_elsebl_116
parseSourceFile_ifbl_116:
	#debug: assignment: is_text_section = 1 ; 
	movl	$1, -8(%ebp)
	jmp	parseSourceFile_endif_116

parseSourceFile_elsebl_116:

	#debug: if: substrcmp ( line . buffer , line . pos , ".data" ) == 0 
	subl	$12, %esp
	movl	%ebp, %eax
	addl	$-568, %eax
	addl	$0, %eax
	movl	%eax, 0(%esp)
	movl	%ebp, %eax
	addl	$-568, %eax
	addl	$516, %eax
	movl	(%eax), %eax
	movl	%eax, 4(%esp)
	movl	$symtab+405, 8(%esp)
	call	substrcmp
	addl	$12, %esp
	pushl	%eax
	popl	%ebx
	cmpl	$0, %ebx
	movl	$1, %eax
	je	parseSourceFile_reltrue_119
	movl	$0, %eax
parseSourceFile_reltrue_119:
	testl	%eax, %eax
	jnz	parseSourceFile_ifbl_118
	jmp	parseSourceFile_elsebl_118
parseSourceFile_ifbl_118:
	#debug: assignment: is_data_section = 1 ; 
	movl	$1, -12(%ebp)
	jmp	parseSourceFile_endif_118

parseSourceFile_elsebl_118:

	#debug: func-call: printf ( "LINKER_WARNING: invalid .section statement [%s:" , getFilename ( instance , line . file_id ) ) 
	subl	$8, %esp
	movl	$symtab+411, 0(%esp)
	subl	$8, %esp
	movl	8(%ebp), %eax
	movl	%eax, 0(%esp)
	movl	%ebp, %eax
	addl	$-568, %eax
	addl	$536, %eax
	movl	(%eax), %eax
	movl	%eax, 4(%esp)
	call	getFilename
	addl	$8, %esp
	movl	%eax, 4(%esp)
	call	printf
	addl	$8, %esp
	#debug: func-call: printf ( "%d] - ignoring following lines till a valid section\n" , line . line_no ) 
	subl	$8, %esp
	movl	$symtab+459, 0(%esp)
	movl	%ebp, %eax
	addl	$-568, %eax
	addl	$540, %eax
	movl	(%eax), %eax
	movl	%eax, 4(%esp)
	call	printf
	addl	$8, %esp
parseSourceFile_endif_118:

parseSourceFile_endif_116:

	jmp	parseSourceFile_while_112
	jmp	parseSourceFile_endif_114

parseSourceFile_elsebl_114:

	#debug: if: substrcmp ( line . buffer , line . pos , ".globl" ) == 0 
	subl	$12, %esp
	movl	%ebp, %eax
	addl	$-568, %eax
	addl	$0, %eax
	movl	%eax, 0(%esp)
	movl	%ebp, %eax
	addl	$-568, %eax
	addl	$516, %eax
	movl	(%eax), %eax
	movl	%eax, 4(%esp)
	movl	$symtab+512, 8(%esp)
	call	substrcmp
	addl	$12, %esp
	pushl	%eax
	popl	%ebx
	cmpl	$0, %ebx
	movl	$1, %eax
	je	parseSourceFile_reltrue_121
	movl	$0, %eax
parseSourceFile_reltrue_121:
	testl	%eax, %eax
	jnz	parseSourceFile_ifbl_120
	jmp	parseSourceFile_elsebl_120
parseSourceFile_ifbl_120:
	#debug: assignment: line . is_globl_line = 1 ; 
	movl	%ebp, %eax
	addl	$-568, %eax
	addl	$524, %eax
	pushl	%eax
	popl	%ebx
	movl	$1, (%ebx)
	jmp	parseSourceFile_endif_120

parseSourceFile_elsebl_120:

	#debug: if: is_data_section == 0 && substrcmp ( line . buffer , line . pos , "." ) == 0 
	pushl	-12(%ebp)
	popl	%ebx
	cmpl	$0, %ebx
	movl	$1, %eax
	je	parseSourceFile_reltrue_124
	movl	$0, %eax
parseSourceFile_reltrue_124:
	testl	%eax, %eax
	jz	parseSourceFile_logtermfalse_123
	subl	$12, %esp
	movl	%ebp, %eax
	addl	$-568, %eax
	addl	$0, %eax
	movl	%eax, 0(%esp)
	movl	%ebp, %eax
	addl	$-568, %eax
	addl	$516, %eax
	movl	(%eax), %eax
	movl	%eax, 4(%esp)
	movl	$symtab+519, 8(%esp)
	call	substrcmp
	addl	$12, %esp
	pushl	%eax
	popl	%ebx
	cmpl	$0, %ebx
	movl	$1, %eax
	je	parseSourceFile_reltrue_125
	movl	$0, %eax
parseSourceFile_reltrue_125:
	testl	%eax, %eax
	jz	parseSourceFile_logtermfalse_123
	movl	$1, %eax
	jmp	parseSourceFile_logtermtrue_123
parseSourceFile_logtermfalse_123:
	movl	$0, %eax
parseSourceFile_logtermtrue_123:
	testl	%eax, %eax
	jnz	parseSourceFile_ifbl_122
	jmp	parseSourceFile_elsebl_122
parseSourceFile_ifbl_122:
	#debug: assignment: line . is_debug_line = 1 ; 
	movl	%ebp, %eax
	addl	$-568, %eax
	addl	$520, %eax
	pushl	%eax
	popl	%ebx
	movl	$1, (%ebx)
	#debug: func-call: commentLine ( instance , & line , 0 ) 
	subl	$12, %esp
	movl	8(%ebp), %eax
	movl	%eax, 0(%esp)
	movl	%ebp, %eax
	addl	$-568, %eax
	movl	%eax, 4(%esp)
	movl	$0, 8(%esp)
	call	commentLine
	addl	$12, %esp
	jmp	parseSourceFile_endif_122

parseSourceFile_elsebl_122:

parseSourceFile_endif_122:

parseSourceFile_endif_120:

parseSourceFile_endif_114:

	#debug: if: line . length == 0 || line . pos == line . length 
	movl	%ebp, %eax
	addl	$-568, %eax
	addl	$512, %eax
	movl	(%eax), %eax
	pushl	%eax
	popl	%ebx
	cmpl	$0, %ebx
	movl	$1, %eax
	je	parseSourceFile_reltrue_128
	movl	$0, %eax
parseSourceFile_reltrue_128:
	testl	%eax, %eax
	jnz	parseSourceFile_logexprtrue_127
	movl	%ebp, %eax
	addl	$-568, %eax
	addl	$516, %eax
	movl	(%eax), %eax
	pushl	%eax
	movl	%ebp, %eax
	addl	$-568, %eax
	addl	$512, %eax
	movl	(%eax), %eax
	popl	%ebx
	cmpl	%eax, %ebx
	movl	$1, %eax
	je	parseSourceFile_reltrue_129
	movl	$0, %eax
parseSourceFile_reltrue_129:
	testl	%eax, %eax
	jnz	parseSourceFile_logexprtrue_127
	movl	$0, %eax
	jmp	parseSourceFile_logexprfalse_127
parseSourceFile_logexprtrue_127:
	movl	$1, %eax
parseSourceFile_logexprfalse_127:
	testl	%eax, %eax
	jnz	parseSourceFile_ifbl_126
	jmp	parseSourceFile_elsebl_126
parseSourceFile_ifbl_126:
	#debug: assignment: line . is_debug_line = 1 ; 
	movl	%ebp, %eax
	addl	$-568, %eax
	addl	$520, %eax
	pushl	%eax
	popl	%ebx
	movl	$1, (%ebx)
	jmp	parseSourceFile_endif_126

parseSourceFile_elsebl_126:

parseSourceFile_endif_126:

	#debug: if: line . buffer [ line . pos ] == '#' 
	movl	%ebp, %eax
	addl	$-568, %eax
	addl	$516, %eax
	movl	(%eax), %eax
	pushl	%eax
	movl	%ebp, %eax
	addl	$-568, %eax
	addl	$0, %eax
	popl	%esi
	addl	%esi, %eax
	movb	(%eax), %al
	movsbl	%al, %eax
	pushl	%eax
	popl	%ebx
	cmpl	$35, %ebx
	movl	$1, %eax
	je	parseSourceFile_reltrue_131
	movl	$0, %eax
parseSourceFile_reltrue_131:
	testl	%eax, %eax
	jnz	parseSourceFile_ifbl_130
	jmp	parseSourceFile_elsebl_130
parseSourceFile_ifbl_130:
	#debug: assignment: line . is_debug_line = 1 ; 
	movl	%ebp, %eax
	addl	$-568, %eax
	addl	$520, %eax
	pushl	%eax
	popl	%ebx
	movl	$1, (%ebx)
	jmp	parseSourceFile_endif_130

parseSourceFile_elsebl_130:

parseSourceFile_endif_130:

	#debug: if: file -> add_debug_symbols != 1 
	movl	%ebp, %eax
	addl	$12, %eax
	movl	(%eax), %eax
	addl	$260, %eax
	movl	(%eax), %eax
	pushl	%eax
	popl	%ebx
	cmpl	$1, %ebx
	movl	$1, %eax
	jne	parseSourceFile_reltrue_133
	movl	$0, %eax
parseSourceFile_reltrue_133:
	testl	%eax, %eax
	jnz	parseSourceFile_ifbl_132
	jmp	parseSourceFile_elsebl_132
parseSourceFile_ifbl_132:
	#debug: if: line . is_debug_line == 1 
	movl	%ebp, %eax
	addl	$-568, %eax
	addl	$520, %eax
	movl	(%eax), %eax
	pushl	%eax
	popl	%ebx
	cmpl	$1, %ebx
	movl	$1, %eax
	je	parseSourceFile_reltrue_135
	movl	$0, %eax
parseSourceFile_reltrue_135:
	testl	%eax, %eax
	jnz	parseSourceFile_ifbl_134
	jmp	parseSourceFile_elsebl_134
parseSourceFile_ifbl_134:
	jmp	parseSourceFile_while_112
	jmp	parseSourceFile_endif_134

parseSourceFile_elsebl_134:

parseSourceFile_endif_134:

	#debug: func-call: disposeComments ( & line ) 
	subl	$4, %esp
	movl	%ebp, %eax
	addl	$-568, %eax
	movl	%eax, 0(%esp)
	call	disposeComments
	addl	$4, %esp
	jmp	parseSourceFile_endif_132

parseSourceFile_elsebl_132:

parseSourceFile_endif_132:

	#debug: assignment: line . is_marker_line = isMarkerLine ( instance , & line ) ; 
	movl	%ebp, %eax
	addl	$-568, %eax
	addl	$528, %eax
	pushl	%eax
	subl	$8, %esp
	movl	8(%ebp), %eax
	movl	%eax, 0(%esp)
	movl	%ebp, %eax
	addl	$-568, %eax
	movl	%eax, 4(%esp)
	call	isMarkerLine
	addl	$8, %esp
	popl	%ebx
	movl	%eax, (%ebx)
	#debug: if: is_text_section == 1 
	pushl	-8(%ebp)
	popl	%ebx
	cmpl	$1, %ebx
	movl	$1, %eax
	je	parseSourceFile_reltrue_137
	movl	$0, %eax
parseSourceFile_reltrue_137:
	testl	%eax, %eax
	jnz	parseSourceFile_ifbl_136
	jmp	parseSourceFile_elsebl_136
parseSourceFile_ifbl_136:
	#debug: assignment: line . addr = instance -> text_addr ; 
	movl	%ebp, %eax
	addl	$-568, %eax
	addl	$532, %eax
	pushl	%eax
	movl	%ebp, %eax
	addl	$8, %eax
	movl	(%eax), %eax
	addl	$48, %eax
	movl	(%eax), %eax
	popl	%ebx
	movl	%eax, (%ebx)
	#debug: if: line . is_debug_line == 0 && line . is_globl_line == 0 && line . is_marker_line == 0 
	movl	%ebp, %eax
	addl	$-568, %eax
	addl	$520, %eax
	movl	(%eax), %eax
	pushl	%eax
	popl	%ebx
	cmpl	$0, %ebx
	movl	$1, %eax
	je	parseSourceFile_reltrue_140
	movl	$0, %eax
parseSourceFile_reltrue_140:
	testl	%eax, %eax
	jz	parseSourceFile_logtermfalse_139
	movl	%ebp, %eax
	addl	$-568, %eax
	addl	$524, %eax
	movl	(%eax), %eax
	pushl	%eax
	popl	%ebx
	cmpl	$0, %ebx
	movl	$1, %eax
	je	parseSourceFile_reltrue_141
	movl	$0, %eax
parseSourceFile_reltrue_141:
	testl	%eax, %eax
	jz	parseSourceFile_logtermfalse_139
	movl	%ebp, %eax
	addl	$-568, %eax
	addl	$528, %eax
	movl	(%eax), %eax
	pushl	%eax
	popl	%ebx
	cmpl	$0, %ebx
	movl	$1, %eax
	je	parseSourceFile_reltrue_142
	movl	$0, %eax
parseSourceFile_reltrue_142:
	testl	%eax, %eax
	jz	parseSourceFile_logtermfalse_139
	movl	$1, %eax
	jmp	parseSourceFile_logtermtrue_139
parseSourceFile_logtermfalse_139:
	movl	$0, %eax
parseSourceFile_logtermtrue_139:
	testl	%eax, %eax
	jnz	parseSourceFile_ifbl_138
	jmp	parseSourceFile_elsebl_138
parseSourceFile_ifbl_138:
	#debug: assignment: instance -> text_addr = instance -> text_addr + 1 ; 
	movl	%ebp, %eax
	addl	$8, %eax
	movl	(%eax), %eax
	addl	$48, %eax
	pushl	%eax
	movl	%ebp, %eax
	addl	$8, %eax
	movl	(%eax), %eax
	addl	$48, %eax
	movl	(%eax), %eax
	pushl	%eax
	popl	%ebx
	addl	$1, %ebx
	pushl	%ebx
	popl	%eax
	popl	%ebx
	movl	%eax, (%ebx)
	jmp	parseSourceFile_endif_138

parseSourceFile_elsebl_138:

parseSourceFile_endif_138:

	#debug: assignment: result = addLine ( & instance -> text_section , & line ) ; 
	subl	$8, %esp
	movl	%ebp, %eax
	addl	$8, %eax
	movl	(%eax), %eax
	addl	$32, %eax
	movl	%eax, 0(%esp)
	movl	%ebp, %eax
	addl	$-568, %eax
	movl	%eax, 4(%esp)
	call	addLine
	addl	$8, %esp
	movl	%eax, -4(%ebp)
	#debug: if: result != 0 
	pushl	-4(%ebp)
	popl	%ebx
	cmpl	$0, %ebx
	movl	$1, %eax
	jne	parseSourceFile_reltrue_144
	movl	$0, %eax
parseSourceFile_reltrue_144:
	testl	%eax, %eax
	jnz	parseSourceFile_ifbl_143
	jmp	parseSourceFile_elsebl_143
parseSourceFile_ifbl_143:
	#debug: return: return - 20003 ; 
	pushl	$0
	popl	%ebx
	subl	$20003, %ebx
	pushl	%ebx
	popl	%eax
	jmp	parseSourceFile_ret
	jmp	parseSourceFile_endif_143

parseSourceFile_elsebl_143:

parseSourceFile_endif_143:

	jmp	parseSourceFile_endif_136

parseSourceFile_elsebl_136:

	#debug: if: is_data_section == 1 
	pushl	-12(%ebp)
	popl	%ebx
	cmpl	$1, %ebx
	movl	$1, %eax
	je	parseSourceFile_reltrue_146
	movl	$0, %eax
parseSourceFile_reltrue_146:
	testl	%eax, %eax
	jnz	parseSourceFile_ifbl_145
	jmp	parseSourceFile_elsebl_145
parseSourceFile_ifbl_145:
	#debug: assignment: line . addr = instance -> data_addr ; 
	movl	%ebp, %eax
	addl	$-568, %eax
	addl	$532, %eax
	pushl	%eax
	movl	%ebp, %eax
	addl	$8, %eax
	movl	(%eax), %eax
	addl	$52, %eax
	movl	(%eax), %eax
	popl	%ebx
	movl	%eax, (%ebx)
	#debug: assignment: data_size = 0 ; 
	movl	$0, -16(%ebp)
	#debug: if: substrcmp ( line . buffer , line . pos , "." ) != 0 
	subl	$12, %esp
	movl	%ebp, %eax
	addl	$-568, %eax
	addl	$0, %eax
	movl	%eax, 0(%esp)
	movl	%ebp, %eax
	addl	$-568, %eax
	addl	$516, %eax
	movl	(%eax), %eax
	movl	%eax, 4(%esp)
	movl	$symtab+519, 8(%esp)
	call	substrcmp
	addl	$12, %esp
	pushl	%eax
	popl	%ebx
	cmpl	$0, %ebx
	movl	$1, %eax
	jne	parseSourceFile_reltrue_148
	movl	$0, %eax
parseSourceFile_reltrue_148:
	testl	%eax, %eax
	jnz	parseSourceFile_ifbl_147
	jmp	parseSourceFile_elsebl_147
parseSourceFile_ifbl_147:
	jmp	parseSourceFile_endif_147

parseSourceFile_elsebl_147:

	#debug: if: substrcmp ( line . buffer , line . pos , ".string" ) == 0 
	subl	$12, %esp
	movl	%ebp, %eax
	addl	$-568, %eax
	addl	$0, %eax
	movl	%eax, 0(%esp)
	movl	%ebp, %eax
	addl	$-568, %eax
	addl	$516, %eax
	movl	(%eax), %eax
	movl	%eax, 4(%esp)
	movl	$symtab+521, 8(%esp)
	call	substrcmp
	addl	$12, %esp
	pushl	%eax
	popl	%ebx
	cmpl	$0, %ebx
	movl	$1, %eax
	je	parseSourceFile_reltrue_150
	movl	$0, %eax
parseSourceFile_reltrue_150:
	testl	%eax, %eax
	jnz	parseSourceFile_ifbl_149
	jmp	parseSourceFile_elsebl_149
parseSourceFile_ifbl_149:
	#debug: assignment: line . pos = line . pos + 7 ; 
	movl	%ebp, %eax
	addl	$-568, %eax
	addl	$516, %eax
	pushl	%eax
	movl	%ebp, %eax
	addl	$-568, %eax
	addl	$516, %eax
	movl	(%eax), %eax
	pushl	%eax
	popl	%ebx
	addl	$7, %ebx
	pushl	%ebx
	popl	%eax
	popl	%ebx
	movl	%eax, (%ebx)
	#debug: func-call: lnk_disposeWhitespace ( & line ) 
	subl	$4, %esp
	movl	%ebp, %eax
	addl	$-568, %eax
	movl	%eax, 0(%esp)
	call	lnk_disposeWhitespace
	addl	$4, %esp
	#debug: assignment: data_size = getStringSize ( instance , & line ) ; 
	subl	$8, %esp
	movl	8(%ebp), %eax
	movl	%eax, 0(%esp)
	movl	%ebp, %eax
	addl	$-568, %eax
	movl	%eax, 4(%esp)
	call	getStringSize
	addl	$8, %esp
	movl	%eax, -16(%ebp)
	jmp	parseSourceFile_endif_149

parseSourceFile_elsebl_149:

	#debug: if: substrcmp ( line . buffer , line . pos , ".byte" ) == 0 
	subl	$12, %esp
	movl	%ebp, %eax
	addl	$-568, %eax
	addl	$0, %eax
	movl	%eax, 0(%esp)
	movl	%ebp, %eax
	addl	$-568, %eax
	addl	$516, %eax
	movl	(%eax), %eax
	movl	%eax, 4(%esp)
	movl	$symtab+529, 8(%esp)
	call	substrcmp
	addl	$12, %esp
	pushl	%eax
	popl	%ebx
	cmpl	$0, %ebx
	movl	$1, %eax
	je	parseSourceFile_reltrue_152
	movl	$0, %eax
parseSourceFile_reltrue_152:
	testl	%eax, %eax
	jnz	parseSourceFile_ifbl_151
	jmp	parseSourceFile_elsebl_151
parseSourceFile_ifbl_151:
	#debug: assignment: data_size = sizeof ( char ) ; 
	movl	$1, -16(%ebp)
	jmp	parseSourceFile_endif_151

parseSourceFile_elsebl_151:

	#debug: if: substrcmp ( line . buffer , line . pos , ".long" ) == 0 
	subl	$12, %esp
	movl	%ebp, %eax
	addl	$-568, %eax
	addl	$0, %eax
	movl	%eax, 0(%esp)
	movl	%ebp, %eax
	addl	$-568, %eax
	addl	$516, %eax
	movl	(%eax), %eax
	movl	%eax, 4(%esp)
	movl	$symtab+535, 8(%esp)
	call	substrcmp
	addl	$12, %esp
	pushl	%eax
	popl	%ebx
	cmpl	$0, %ebx
	movl	$1, %eax
	je	parseSourceFile_reltrue_154
	movl	$0, %eax
parseSourceFile_reltrue_154:
	testl	%eax, %eax
	jnz	parseSourceFile_ifbl_153
	jmp	parseSourceFile_elsebl_153
parseSourceFile_ifbl_153:
	#debug: assignment: data_size = sizeof ( int ) ; 
	movl	$4, -16(%ebp)
	jmp	parseSourceFile_endif_153

parseSourceFile_elsebl_153:

	#debug: if: substrcmp ( line . buffer , line . pos , ".rept" ) == 0 
	subl	$12, %esp
	movl	%ebp, %eax
	addl	$-568, %eax
	addl	$0, %eax
	movl	%eax, 0(%esp)
	movl	%ebp, %eax
	addl	$-568, %eax
	addl	$516, %eax
	movl	(%eax), %eax
	movl	%eax, 4(%esp)
	movl	$symtab+541, 8(%esp)
	call	substrcmp
	addl	$12, %esp
	pushl	%eax
	popl	%ebx
	cmpl	$0, %ebx
	movl	$1, %eax
	je	parseSourceFile_reltrue_156
	movl	$0, %eax
parseSourceFile_reltrue_156:
	testl	%eax, %eax
	jnz	parseSourceFile_ifbl_155
	jmp	parseSourceFile_elsebl_155
parseSourceFile_ifbl_155:
	#debug: assignment: line . pos = line . pos + 5 ; 
	movl	%ebp, %eax
	addl	$-568, %eax
	addl	$516, %eax
	pushl	%eax
	movl	%ebp, %eax
	addl	$-568, %eax
	addl	$516, %eax
	movl	(%eax), %eax
	pushl	%eax
	popl	%ebx
	addl	$5, %ebx
	pushl	%ebx
	popl	%eax
	popl	%ebx
	movl	%eax, (%ebx)
	#debug: func-call: lnk_disposeWhitespace ( & line ) 
	subl	$4, %esp
	movl	%ebp, %eax
	addl	$-568, %eax
	movl	%eax, 0(%esp)
	call	lnk_disposeWhitespace
	addl	$4, %esp
	#debug: assignment: data_size = getSizeIdentifier ( instance , & line ) ; 
	subl	$8, %esp
	movl	8(%ebp), %eax
	movl	%eax, 0(%esp)
	movl	%ebp, %eax
	addl	$-568, %eax
	movl	%eax, 4(%esp)
	call	getSizeIdentifier
	addl	$8, %esp
	movl	%eax, -16(%ebp)
	#debug: func-call: addLine ( & instance -> data_section , & line ) 
	subl	$8, %esp
	movl	%ebp, %eax
	addl	$8, %eax
	movl	(%eax), %eax
	addl	$40, %eax
	movl	%eax, 0(%esp)
	movl	%ebp, %eax
	addl	$-568, %eax
	movl	%eax, 4(%esp)
	call	addLine
	addl	$8, %esp
	#debug: while: readLine ( instance , fh , & line ) >= 0 
parseSourceFile_while_157:
	subl	$12, %esp
	movl	8(%ebp), %eax
	movl	%eax, 0(%esp)
	movl	16(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%ebp, %eax
	addl	$-568, %eax
	movl	%eax, 8(%esp)
	call	readLine
	addl	$12, %esp
	pushl	%eax
	popl	%ebx
	cmpl	$0, %ebx
	movl	$1, %eax
	jge	parseSourceFile_reltrue_158
	movl	$0, %eax
parseSourceFile_reltrue_158:
	testl	%eax, %eax
	jz	parseSourceFile_endwhile_157

	#debug: func-call: lnk_disposeWhitespace ( & line ) 
	subl	$4, %esp
	movl	%ebp, %eax
	addl	$-568, %eax
	movl	%eax, 0(%esp)
	call	lnk_disposeWhitespace
	addl	$4, %esp
	#debug: if: substrcmp ( line . buffer , line . pos , ".endr" ) == 0 
	subl	$12, %esp
	movl	%ebp, %eax
	addl	$-568, %eax
	addl	$0, %eax
	movl	%eax, 0(%esp)
	movl	%ebp, %eax
	addl	$-568, %eax
	addl	$516, %eax
	movl	(%eax), %eax
	movl	%eax, 4(%esp)
	movl	$symtab+547, 8(%esp)
	call	substrcmp
	addl	$12, %esp
	pushl	%eax
	popl	%ebx
	cmpl	$0, %ebx
	movl	$1, %eax
	je	parseSourceFile_reltrue_160
	movl	$0, %eax
parseSourceFile_reltrue_160:
	testl	%eax, %eax
	jnz	parseSourceFile_ifbl_159
	jmp	parseSourceFile_elsebl_159
parseSourceFile_ifbl_159:
	jmp	parseSourceFile_endwhile_157
	jmp	parseSourceFile_endif_159

parseSourceFile_elsebl_159:

parseSourceFile_endif_159:

	#debug: func-call: addLine ( & instance -> data_section , & line ) 
	subl	$8, %esp
	movl	%ebp, %eax
	addl	$8, %eax
	movl	(%eax), %eax
	addl	$40, %eax
	movl	%eax, 0(%esp)
	movl	%ebp, %eax
	addl	$-568, %eax
	movl	%eax, 4(%esp)
	call	addLine
	addl	$8, %esp
	jmp	parseSourceFile_while_157
parseSourceFile_endwhile_157:

	jmp	parseSourceFile_endif_155

parseSourceFile_elsebl_155:

	#debug: func-call: printf ( "LINKER_ERROR: unrecognized data type [%s:" , getFilename ( instance , line . file_id ) ) 
	subl	$8, %esp
	movl	$symtab+553, 0(%esp)
	subl	$8, %esp
	movl	8(%ebp), %eax
	movl	%eax, 0(%esp)
	movl	%ebp, %eax
	addl	$-568, %eax
	addl	$536, %eax
	movl	(%eax), %eax
	movl	%eax, 4(%esp)
	call	getFilename
	addl	$8, %esp
	movl	%eax, 4(%esp)
	call	printf
	addl	$8, %esp
	#debug: func-call: printf ( "%d] - ignoring\n" , line . line_no ) 
	subl	$8, %esp
	movl	$symtab+374, 0(%esp)
	movl	%ebp, %eax
	addl	$-568, %eax
	addl	$540, %eax
	movl	(%eax), %eax
	movl	%eax, 4(%esp)
	call	printf
	addl	$8, %esp
	#debug: return: return - 1 ; 
	pushl	$0
	popl	%ebx
	subl	$1, %ebx
	pushl	%ebx
	popl	%eax
	jmp	parseSourceFile_ret
parseSourceFile_endif_155:

parseSourceFile_endif_153:

parseSourceFile_endif_151:

parseSourceFile_endif_149:

parseSourceFile_endif_147:

	#debug: if: data_size < 0 
	pushl	-16(%ebp)
	popl	%ebx
	cmpl	$0, %ebx
	movl	$1, %eax
	jl	parseSourceFile_reltrue_162
	movl	$0, %eax
parseSourceFile_reltrue_162:
	testl	%eax, %eax
	jnz	parseSourceFile_ifbl_161
	jmp	parseSourceFile_elsebl_161
parseSourceFile_ifbl_161:
	#debug: return: return data_size ; 
	movl	-16(%ebp), %eax
	jmp	parseSourceFile_ret
	jmp	parseSourceFile_endif_161

parseSourceFile_elsebl_161:

parseSourceFile_endif_161:

	#debug: assignment: instance -> data_addr = instance -> data_addr + data_size ; 
	movl	%ebp, %eax
	addl	$8, %eax
	movl	(%eax), %eax
	addl	$52, %eax
	pushl	%eax
	movl	%ebp, %eax
	addl	$8, %eax
	movl	(%eax), %eax
	addl	$52, %eax
	movl	(%eax), %eax
	pushl	%eax
	popl	%ebx
	addl	-16(%ebp), %ebx
	pushl	%ebx
	popl	%eax
	popl	%ebx
	movl	%eax, (%ebx)
	#debug: func-call: addLine ( & instance -> data_section , & line ) 
	subl	$8, %esp
	movl	%ebp, %eax
	addl	$8, %eax
	movl	(%eax), %eax
	addl	$40, %eax
	movl	%eax, 0(%esp)
	movl	%ebp, %eax
	addl	$-568, %eax
	movl	%eax, 4(%esp)
	call	addLine
	addl	$8, %esp
	#debug: if: result != 0 
	pushl	-4(%ebp)
	popl	%ebx
	cmpl	$0, %ebx
	movl	$1, %eax
	jne	parseSourceFile_reltrue_164
	movl	$0, %eax
parseSourceFile_reltrue_164:
	testl	%eax, %eax
	jnz	parseSourceFile_ifbl_163
	jmp	parseSourceFile_elsebl_163
parseSourceFile_ifbl_163:
	#debug: return: return - 20003 ; 
	pushl	$0
	popl	%ebx
	subl	$20003, %ebx
	pushl	%ebx
	popl	%eax
	jmp	parseSourceFile_ret
	jmp	parseSourceFile_endif_163

parseSourceFile_elsebl_163:

parseSourceFile_endif_163:

	jmp	parseSourceFile_endif_145

parseSourceFile_elsebl_145:

parseSourceFile_endif_145:

parseSourceFile_endif_136:

	jmp	parseSourceFile_while_112
parseSourceFile_endwhile_112:

	#debug: return: return 0 ; 
	movl	$0, %eax
	jmp	parseSourceFile_ret


parseSourceFile_ret:
	movl	%ebp, %esp
	popl	%ebp
	ret




	#debug: func-def: ( linker * instance , char * file_name , int add_debugging_symbols ) 
.globl linker_appendFile
.type linker_appendFile, @function
linker_appendFile:
	pushl	%ebp
	movl	%esp, %ebp
	subl	$16, %esp


	#debug: if: instance -> initiated != 1 
	movl	%ebp, %eax
	addl	$8, %eax
	movl	(%eax), %eax
	addl	$0, %eax
	movl	(%eax), %eax
	pushl	%eax
	popl	%ebx
	cmpl	$1, %ebx
	movl	$1, %eax
	jne	linker_appendFile_reltrue_166
	movl	$0, %eax
linker_appendFile_reltrue_166:
	testl	%eax, %eax
	jnz	linker_appendFile_ifbl_165
	jmp	linker_appendFile_elsebl_165
linker_appendFile_ifbl_165:
	#debug: return: return - 20000 ; 
	pushl	$0
	popl	%ebx
	subl	$20000, %ebx
	pushl	%ebx
	popl	%eax
	jmp	linker_appendFile_ret
	jmp	linker_appendFile_endif_165

linker_appendFile_elsebl_165:

linker_appendFile_endif_165:

	#debug: assignment: fh = open ( file_name , 0 , 0 ) ; 
	subl	$12, %esp
	movl	12(%ebp), %eax
	movl	%eax, 0(%esp)
	movl	$0, 4(%esp)
	movl	$0, 8(%esp)
	call	open
	addl	$12, %esp
	movl	%eax, -4(%ebp)
	#debug: if: fh < 0 
	pushl	-4(%ebp)
	popl	%ebx
	cmpl	$0, %ebx
	movl	$1, %eax
	jl	linker_appendFile_reltrue_168
	movl	$0, %eax
linker_appendFile_reltrue_168:
	testl	%eax, %eax
	jnz	linker_appendFile_ifbl_167
	jmp	linker_appendFile_elsebl_167
linker_appendFile_ifbl_167:
	#debug: return: return - 20002 ; 
	pushl	$0
	popl	%ebx
	subl	$20002, %ebx
	pushl	%ebx
	popl	%eax
	jmp	linker_appendFile_ret
	jmp	linker_appendFile_endif_167

linker_appendFile_elsebl_167:

linker_appendFile_endif_167:

	#debug: assignment: new_file = addFileToList ( instance , file_name ) ; 
	subl	$8, %esp
	movl	8(%ebp), %eax
	movl	%eax, 0(%esp)
	movl	12(%ebp), %eax
	movl	%eax, 4(%esp)
	call	addFileToList
	addl	$8, %esp
	movl	%eax, -12(%ebp)
	#debug: if: new_file == 0 
	pushl	-12(%ebp)
	popl	%ebx
	cmpl	$0, %ebx
	movl	$1, %eax
	je	linker_appendFile_reltrue_170
	movl	$0, %eax
linker_appendFile_reltrue_170:
	testl	%eax, %eax
	jnz	linker_appendFile_ifbl_169
	jmp	linker_appendFile_elsebl_169
linker_appendFile_ifbl_169:
	#debug: return: return - 20003 ; 
	pushl	$0
	popl	%ebx
	subl	$20003, %ebx
	pushl	%ebx
	popl	%eax
	jmp	linker_appendFile_ret
	jmp	linker_appendFile_endif_169

linker_appendFile_elsebl_169:

linker_appendFile_endif_169:

	#debug: assignment: new_file -> add_debug_symbols = add_debugging_symbols ; 
	movl	%ebp, %eax
	addl	$-12, %eax
	movl	(%eax), %eax
	addl	$260, %eax
	pushl	%eax
	movl	16(%ebp), %eax
	popl	%ebx
	movl	%eax, (%ebx)
	#debug: assignment: local_markers = & new_file -> markers ; 
	movl	%ebp, %eax
	addl	$-12, %eax
	movl	(%eax), %eax
	addl	$264, %eax
	movl	%eax, -16(%ebp)
	#debug: if: local_markers == 0 
	pushl	-16(%ebp)
	popl	%ebx
	cmpl	$0, %ebx
	movl	$1, %eax
	je	linker_appendFile_reltrue_172
	movl	$0, %eax
linker_appendFile_reltrue_172:
	testl	%eax, %eax
	jnz	linker_appendFile_ifbl_171
	jmp	linker_appendFile_elsebl_171
linker_appendFile_ifbl_171:
	#debug: return: return - 20003 ; 
	pushl	$0
	popl	%ebx
	subl	$20003, %ebx
	pushl	%ebx
	popl	%eax
	jmp	linker_appendFile_ret
	jmp	linker_appendFile_endif_171

linker_appendFile_elsebl_171:

linker_appendFile_endif_171:

	#debug: assignment: result = parseSourceFile ( instance , new_file , fh , local_markers ) ; 
	subl	$16, %esp
	movl	8(%ebp), %eax
	movl	%eax, 0(%esp)
	movl	-12(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-4(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	-16(%ebp), %eax
	movl	%eax, 12(%esp)
	call	parseSourceFile
	addl	$16, %esp
	movl	%eax, -8(%ebp)
	#debug: if: result < 0 
	pushl	-8(%ebp)
	popl	%ebx
	cmpl	$0, %ebx
	movl	$1, %eax
	jl	linker_appendFile_reltrue_174
	movl	$0, %eax
linker_appendFile_reltrue_174:
	testl	%eax, %eax
	jnz	linker_appendFile_ifbl_173
	jmp	linker_appendFile_elsebl_173
linker_appendFile_ifbl_173:
	#debug: return: return result ; 
	movl	-8(%ebp), %eax
	jmp	linker_appendFile_ret
	jmp	linker_appendFile_endif_173

linker_appendFile_elsebl_173:

linker_appendFile_endif_173:

	#debug: func-call: close ( fh ) 
	subl	$4, %esp
	movl	-4(%ebp), %eax
	movl	%eax, 0(%esp)
	call	close
	addl	$4, %esp
	#debug: return: return 0 ; 
	movl	$0, %eax
	jmp	linker_appendFile_ret


linker_appendFile_ret:
	movl	%ebp, %esp
	popl	%ebp
	ret




	#debug: func-def: ( linker * instance , File * file , LinesList * lines ) 
.globl resolveMarkers
.type resolveMarkers, @function
resolveMarkers:
	pushl	%ebp
	movl	%esp, %ebp
	subl	$34, %esp


	#debug: assignment: curr_line = Get_Front_Of_LinesList ( lines ) ; 
	subl	$4, %esp
	movl	16(%ebp), %eax
	movl	%eax, 0(%esp)
	call	Get_Front_Of_LinesList
	addl	$4, %esp
	movl	%eax, -30(%ebp)
	#debug: while: curr_line != 0 
resolveMarkers_while_175:
	pushl	-30(%ebp)
	popl	%ebx
	cmpl	$0, %ebx
	movl	$1, %eax
	jne	resolveMarkers_reltrue_176
	movl	$0, %eax
resolveMarkers_reltrue_176:
	testl	%eax, %eax
	jz	resolveMarkers_endwhile_175

	#debug: assignment: delete_line = 0 ; 
	movl	$0, -26(%ebp)
	#debug: if: curr_line -> file_id == file -> id && ( curr_line -> is_marker_line == 1 || curr_line -> is_globl_line == 1 ) 
	movl	%ebp, %eax
	addl	$-30, %eax
	movl	(%eax), %eax
	addl	$536, %eax
	movl	(%eax), %eax
	pushl	%eax
	movl	%ebp, %eax
	addl	$12, %eax
	movl	(%eax), %eax
	addl	$0, %eax
	movl	(%eax), %eax
	popl	%ebx
	cmpl	%eax, %ebx
	movl	$1, %eax
	je	resolveMarkers_reltrue_179
	movl	$0, %eax
resolveMarkers_reltrue_179:
	testl	%eax, %eax
	jz	resolveMarkers_logtermfalse_178
	movl	%ebp, %eax
	addl	$-30, %eax
	movl	(%eax), %eax
	addl	$528, %eax
	movl	(%eax), %eax
	pushl	%eax
	popl	%ebx
	cmpl	$1, %ebx
	movl	$1, %eax
	je	resolveMarkers_reltrue_181
	movl	$0, %eax
resolveMarkers_reltrue_181:
	testl	%eax, %eax
	jnz	resolveMarkers_logexprtrue_180
	movl	%ebp, %eax
	addl	$-30, %eax
	movl	(%eax), %eax
	addl	$524, %eax
	movl	(%eax), %eax
	pushl	%eax
	popl	%ebx
	cmpl	$1, %ebx
	movl	$1, %eax
	je	resolveMarkers_reltrue_182
	movl	$0, %eax
resolveMarkers_reltrue_182:
	testl	%eax, %eax
	jnz	resolveMarkers_logexprtrue_180
	movl	$0, %eax
	jmp	resolveMarkers_logexprfalse_180
resolveMarkers_logexprtrue_180:
	movl	$1, %eax
resolveMarkers_logexprfalse_180:
	testl	%eax, %eax
	jz	resolveMarkers_logtermfalse_178
	movl	$1, %eax
	jmp	resolveMarkers_logtermtrue_178
resolveMarkers_logtermfalse_178:
	movl	$0, %eax
resolveMarkers_logtermtrue_178:
	testl	%eax, %eax
	jnz	resolveMarkers_ifbl_177
	jmp	resolveMarkers_elsebl_177
resolveMarkers_ifbl_177:
	#debug: assignment: curr_line -> pos = 0 ; 
	movl	%ebp, %eax
	addl	$-30, %eax
	movl	(%eax), %eax
	addl	$516, %eax
	pushl	%eax
	popl	%ebx
	movl	$0, (%ebx)
	#debug: func-call: lnk_disposeWhitespace ( curr_line ) 
	subl	$4, %esp
	movl	-30(%ebp), %eax
	movl	%eax, 0(%esp)
	call	lnk_disposeWhitespace
	addl	$4, %esp
	#debug: if: curr_line -> is_globl_line == 1 
	movl	%ebp, %eax
	addl	$-30, %eax
	movl	(%eax), %eax
	addl	$524, %eax
	movl	(%eax), %eax
	pushl	%eax
	popl	%ebx
	cmpl	$1, %ebx
	movl	$1, %eax
	je	resolveMarkers_reltrue_184
	movl	$0, %eax
resolveMarkers_reltrue_184:
	testl	%eax, %eax
	jnz	resolveMarkers_ifbl_183
	jmp	resolveMarkers_elsebl_183
resolveMarkers_ifbl_183:
	#debug: assignment: curr_line -> pos = curr_line -> pos + 6 ; 
	movl	%ebp, %eax
	addl	$-30, %eax
	movl	(%eax), %eax
	addl	$516, %eax
	pushl	%eax
	movl	%ebp, %eax
	addl	$-30, %eax
	movl	(%eax), %eax
	addl	$516, %eax
	movl	(%eax), %eax
	pushl	%eax
	popl	%ebx
	addl	$6, %ebx
	pushl	%ebx
	popl	%eax
	popl	%ebx
	movl	%eax, (%ebx)
	#debug: func-call: lnk_disposeWhitespace ( curr_line ) 
	subl	$4, %esp
	movl	-30(%ebp), %eax
	movl	%eax, 0(%esp)
	call	lnk_disposeWhitespace
	addl	$4, %esp
	#debug: assignment: result = addMarker ( instance , curr_line , & instance -> globls , - 1 ) ; 
	subl	$16, %esp
	movl	8(%ebp), %eax
	movl	%eax, 0(%esp)
	movl	-30(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%ebp, %eax
	addl	$8, %eax
	movl	(%eax), %eax
	addl	$8, %eax
	movl	%eax, 8(%esp)
	pushl	$0
	popl	%ebx
	subl	$1, %ebx
	pushl	%ebx
	popl	%eax
	movl	%eax, 12(%esp)
	call	addMarker
	addl	$16, %esp
	movl	%eax, -4(%ebp)
	#debug: if: result != 0 
	pushl	-4(%ebp)
	popl	%ebx
	cmpl	$0, %ebx
	movl	$1, %eax
	jne	resolveMarkers_reltrue_186
	movl	$0, %eax
resolveMarkers_reltrue_186:
	testl	%eax, %eax
	jnz	resolveMarkers_ifbl_185
	jmp	resolveMarkers_elsebl_185
resolveMarkers_ifbl_185:
	#debug: return: return result ; 
	movl	-4(%ebp), %eax
	jmp	resolveMarkers_ret
	jmp	resolveMarkers_endif_185

resolveMarkers_elsebl_185:

resolveMarkers_endif_185:

	jmp	resolveMarkers_endif_183

resolveMarkers_elsebl_183:

	#debug: assignment: result = addMarker ( instance , curr_line , & file -> markers , curr_line -> addr ) ; 
	subl	$16, %esp
	movl	8(%ebp), %eax
	movl	%eax, 0(%esp)
	movl	-30(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%ebp, %eax
	addl	$12, %eax
	movl	(%eax), %eax
	addl	$264, %eax
	movl	%eax, 8(%esp)
	movl	%ebp, %eax
	addl	$-30, %eax
	movl	(%eax), %eax
	addl	$532, %eax
	movl	(%eax), %eax
	movl	%eax, 12(%esp)
	call	addMarker
	addl	$16, %esp
	movl	%eax, -4(%ebp)
	#debug: if: result != 0 
	pushl	-4(%ebp)
	popl	%ebx
	cmpl	$0, %ebx
	movl	$1, %eax
	jne	resolveMarkers_reltrue_188
	movl	$0, %eax
resolveMarkers_reltrue_188:
	testl	%eax, %eax
	jnz	resolveMarkers_ifbl_187
	jmp	resolveMarkers_elsebl_187
resolveMarkers_ifbl_187:
	#debug: return: return result ; 
	movl	-4(%ebp), %eax
	jmp	resolveMarkers_ret
	jmp	resolveMarkers_endif_187

resolveMarkers_elsebl_187:

resolveMarkers_endif_187:

resolveMarkers_endif_183:

	#debug: if: file -> add_debug_symbols != 1 
	movl	%ebp, %eax
	addl	$12, %eax
	movl	(%eax), %eax
	addl	$260, %eax
	movl	(%eax), %eax
	pushl	%eax
	popl	%ebx
	cmpl	$1, %ebx
	movl	$1, %eax
	jne	resolveMarkers_reltrue_190
	movl	$0, %eax
resolveMarkers_reltrue_190:
	testl	%eax, %eax
	jnz	resolveMarkers_ifbl_189
	jmp	resolveMarkers_elsebl_189
resolveMarkers_ifbl_189:
	#debug: assignment: delete_line = 1 ; 
	movl	$1, -26(%ebp)
	jmp	resolveMarkers_endif_189

resolveMarkers_elsebl_189:

	#debug: assignment: curr_line -> is_debug_line = 1 ; 
	movl	%ebp, %eax
	addl	$-30, %eax
	movl	(%eax), %eax
	addl	$520, %eax
	pushl	%eax
	popl	%ebx
	movl	$1, (%ebx)
	#debug: func-call: memset ( addr_info , 0 , 8 + 4 ) 
	subl	$12, %esp
	movl	%ebp, %eax
	addl	$-14, %eax
	movl	%eax, 0(%esp)
	movl	$0, 4(%esp)
	pushl	$8
	popl	%ebx
	addl	$4, %ebx
	pushl	%ebx
	popl	%eax
	movl	%eax, 8(%esp)
	call	memset
	addl	$12, %esp
	#debug: func-call: memset ( addr_buffer , 0 , 8 ) 
	subl	$12, %esp
	movl	%ebp, %eax
	addl	$-22, %eax
	movl	%eax, 0(%esp)
	movl	$0, 4(%esp)
	movl	$8, 8(%esp)
	call	memset
	addl	$12, %esp
	#debug: func-call: strcat ( addr_info , " [@" ) 
	subl	$8, %esp
	movl	%ebp, %eax
	addl	$-14, %eax
	movl	%eax, 0(%esp)
	movl	$symtab+595, 4(%esp)
	call	strcat
	addl	$8, %esp
	#debug: func-call: strcat ( addr_info , convertAddr ( addr_buffer , curr_line -> addr ) ) 
	subl	$8, %esp
	movl	%ebp, %eax
	addl	$-14, %eax
	movl	%eax, 0(%esp)
	subl	$8, %esp
	movl	%ebp, %eax
	addl	$-22, %eax
	movl	%eax, 0(%esp)
	movl	%ebp, %eax
	addl	$-30, %eax
	movl	(%eax), %eax
	addl	$532, %eax
	movl	(%eax), %eax
	movl	%eax, 4(%esp)
	call	convertAddr
	addl	$8, %esp
	movl	%eax, 4(%esp)
	call	strcat
	addl	$8, %esp
	#debug: func-call: strcat ( addr_info , "]" ) 
	subl	$8, %esp
	movl	%ebp, %eax
	addl	$-14, %eax
	movl	%eax, 0(%esp)
	movl	$symtab+599, 4(%esp)
	call	strcat
	addl	$8, %esp
	#debug: func-call: commentLine ( instance , curr_line , addr_info ) 
	subl	$12, %esp
	movl	8(%ebp), %eax
	movl	%eax, 0(%esp)
	movl	-30(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%ebp, %eax
	addl	$-14, %eax
	movl	%eax, 8(%esp)
	call	commentLine
	addl	$12, %esp
resolveMarkers_endif_189:

	jmp	resolveMarkers_endif_177

resolveMarkers_elsebl_177:

resolveMarkers_endif_177:

	#debug: assignment: line_to_del = curr_line ; 
	movl	-30(%ebp), %eax
	movl	%eax, -34(%ebp)
	#debug: assignment: curr_line = Get_Next_In_LinesList ( curr_line ) ; 
	subl	$4, %esp
	movl	-30(%ebp), %eax
	movl	%eax, 0(%esp)
	call	Get_Next_In_LinesList
	addl	$4, %esp
	movl	%eax, -30(%ebp)
	#debug: if: delete_line == 1 
	pushl	-26(%ebp)
	popl	%ebx
	cmpl	$1, %ebx
	movl	$1, %eax
	je	resolveMarkers_reltrue_192
	movl	$0, %eax
resolveMarkers_reltrue_192:
	testl	%eax, %eax
	jnz	resolveMarkers_ifbl_191
	jmp	resolveMarkers_elsebl_191
resolveMarkers_ifbl_191:
	#debug: func-call: Remove_From_LinesList ( lines , line_to_del ) 
	subl	$8, %esp
	movl	16(%ebp), %eax
	movl	%eax, 0(%esp)
	movl	-34(%ebp), %eax
	movl	%eax, 4(%esp)
	call	Remove_From_LinesList
	addl	$8, %esp
	jmp	resolveMarkers_endif_191

resolveMarkers_elsebl_191:

resolveMarkers_endif_191:

	jmp	resolveMarkers_while_175
resolveMarkers_endwhile_175:

	#debug: return: return 0 ; 
	movl	$0, %eax
	jmp	resolveMarkers_ret


resolveMarkers_ret:
	movl	%ebp, %esp
	popl	%ebp
	ret




	#debug: func-def: ( linker * instance ) 
.globl resolveFileMarkers
.type resolveFileMarkers, @function
resolveFileMarkers:
	pushl	%ebp
	movl	%esp, %ebp
	subl	$8, %esp


	#debug: assignment: curr_file = Get_Front_Of_FilesList ( & instance -> files ) ; 
	subl	$4, %esp
	movl	%ebp, %eax
	addl	$8, %eax
	movl	(%eax), %eax
	addl	$24, %eax
	movl	%eax, 0(%esp)
	call	Get_Front_Of_FilesList
	addl	$4, %esp
	movl	%eax, -8(%ebp)
	#debug: while: curr_file != 0 
resolveFileMarkers_while_193:
	pushl	-8(%ebp)
	popl	%ebx
	cmpl	$0, %ebx
	movl	$1, %eax
	jne	resolveFileMarkers_reltrue_194
	movl	$0, %eax
resolveFileMarkers_reltrue_194:
	testl	%eax, %eax
	jz	resolveFileMarkers_endwhile_193

	#debug: func-call: Clear_MarkersList ( & curr_file -> markers ) 
	subl	$4, %esp
	movl	%ebp, %eax
	addl	$-8, %eax
	movl	(%eax), %eax
	addl	$264, %eax
	movl	%eax, 0(%esp)
	call	Clear_MarkersList
	addl	$4, %esp
	#debug: assignment: result = resolveMarkers ( instance , curr_file , & instance -> text_section ) ; 
	subl	$12, %esp
	movl	8(%ebp), %eax
	movl	%eax, 0(%esp)
	movl	-8(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%ebp, %eax
	addl	$8, %eax
	movl	(%eax), %eax
	addl	$32, %eax
	movl	%eax, 8(%esp)
	call	resolveMarkers
	addl	$12, %esp
	movl	%eax, -4(%ebp)
	#debug: if: result != 0 
	pushl	-4(%ebp)
	popl	%ebx
	cmpl	$0, %ebx
	movl	$1, %eax
	jne	resolveFileMarkers_reltrue_196
	movl	$0, %eax
resolveFileMarkers_reltrue_196:
	testl	%eax, %eax
	jnz	resolveFileMarkers_ifbl_195
	jmp	resolveFileMarkers_elsebl_195
resolveFileMarkers_ifbl_195:
	#debug: return: return result ; 
	movl	-4(%ebp), %eax
	jmp	resolveFileMarkers_ret
	jmp	resolveFileMarkers_endif_195

resolveFileMarkers_elsebl_195:

resolveFileMarkers_endif_195:

	#debug: assignment: result = resolveMarkers ( instance , curr_file , & instance -> data_section ) ; 
	subl	$12, %esp
	movl	8(%ebp), %eax
	movl	%eax, 0(%esp)
	movl	-8(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%ebp, %eax
	addl	$8, %eax
	movl	(%eax), %eax
	addl	$40, %eax
	movl	%eax, 8(%esp)
	call	resolveMarkers
	addl	$12, %esp
	movl	%eax, -4(%ebp)
	#debug: if: result != 0 
	pushl	-4(%ebp)
	popl	%ebx
	cmpl	$0, %ebx
	movl	$1, %eax
	jne	resolveFileMarkers_reltrue_198
	movl	$0, %eax
resolveFileMarkers_reltrue_198:
	testl	%eax, %eax
	jnz	resolveFileMarkers_ifbl_197
	jmp	resolveFileMarkers_elsebl_197
resolveFileMarkers_ifbl_197:
	#debug: return: return result ; 
	movl	-4(%ebp), %eax
	jmp	resolveFileMarkers_ret
	jmp	resolveFileMarkers_endif_197

resolveFileMarkers_elsebl_197:

resolveFileMarkers_endif_197:

	#debug: func-call: syncGloblsWithMarkers ( & instance -> globls , & curr_file -> markers ) 
	subl	$8, %esp
	movl	%ebp, %eax
	addl	$8, %eax
	movl	(%eax), %eax
	addl	$8, %eax
	movl	%eax, 0(%esp)
	movl	%ebp, %eax
	addl	$-8, %eax
	movl	(%eax), %eax
	addl	$264, %eax
	movl	%eax, 4(%esp)
	call	syncGloblsWithMarkers
	addl	$8, %esp
	#debug: assignment: curr_file = Get_Next_In_FilesList ( curr_file ) ; 
	subl	$4, %esp
	movl	-8(%ebp), %eax
	movl	%eax, 0(%esp)
	call	Get_Next_In_FilesList
	addl	$4, %esp
	movl	%eax, -8(%ebp)
	jmp	resolveFileMarkers_while_193
resolveFileMarkers_endwhile_193:

	#debug: return: return 0 ; 
	movl	$0, %eax
	jmp	resolveFileMarkers_ret


resolveFileMarkers_ret:
	movl	%ebp, %esp
	popl	%ebp
	ret




	#debug: func-def: ( linker * instance , Line * src_line , Line * result_line , MarkersList * markers_list ) 
.globl replaceNextMarker
.type replaceNextMarker, @function
replaceNextMarker:
	pushl	%ebp
	movl	%esp, %ebp
	subl	$152, %esp


	#debug: assignment: dollar_found = 0 ; 
	movl	$0, -12(%ebp)
	#debug: if: src_line -> buffer [ src_line -> pos ] == '$' 
	movl	%ebp, %eax
	addl	$12, %eax
	movl	(%eax), %eax
	addl	$516, %eax
	movl	(%eax), %eax
	pushl	%eax
	movl	%ebp, %eax
	addl	$12, %eax
	movl	(%eax), %eax
	addl	$0, %eax
	popl	%esi
	addl	%esi, %eax
	movb	(%eax), %al
	movsbl	%al, %eax
	pushl	%eax
	popl	%ebx
	cmpl	$36, %ebx
	movl	$1, %eax
	je	replaceNextMarker_reltrue_200
	movl	$0, %eax
replaceNextMarker_reltrue_200:
	testl	%eax, %eax
	jnz	replaceNextMarker_ifbl_199
	jmp	replaceNextMarker_elsebl_199
replaceNextMarker_ifbl_199:
	#debug: assignment: result_line -> buffer [ result_line -> pos ] = src_line -> buffer [ src_line -> pos ] ; 
	movl	%ebp, %eax
	addl	$16, %eax
	movl	(%eax), %eax
	addl	$516, %eax
	movl	(%eax), %eax
	pushl	%eax
	movl	%ebp, %eax
	addl	$16, %eax
	movl	(%eax), %eax
	addl	$0, %eax
	popl	%esi
	addl	%esi, %eax
	pushl	%eax
	movl	%ebp, %eax
	addl	$12, %eax
	movl	(%eax), %eax
	addl	$516, %eax
	movl	(%eax), %eax
	pushl	%eax
	movl	%ebp, %eax
	addl	$12, %eax
	movl	(%eax), %eax
	addl	$0, %eax
	popl	%esi
	addl	%esi, %eax
	movb	(%eax), %al
	popl	%ebx
	movb	%al, (%ebx)
	#debug: assignment: result_line -> pos = result_line -> pos + 1 ; 
	movl	%ebp, %eax
	addl	$16, %eax
	movl	(%eax), %eax
	addl	$516, %eax
	pushl	%eax
	movl	%ebp, %eax
	addl	$16, %eax
	movl	(%eax), %eax
	addl	$516, %eax
	movl	(%eax), %eax
	pushl	%eax
	popl	%ebx
	addl	$1, %ebx
	pushl	%ebx
	popl	%eax
	popl	%ebx
	movl	%eax, (%ebx)
	#debug: assignment: src_line -> pos = src_line -> pos + 1 ; 
	movl	%ebp, %eax
	addl	$12, %eax
	movl	(%eax), %eax
	addl	$516, %eax
	pushl	%eax
	movl	%ebp, %eax
	addl	$12, %eax
	movl	(%eax), %eax
	addl	$516, %eax
	movl	(%eax), %eax
	pushl	%eax
	popl	%ebx
	addl	$1, %ebx
	pushl	%ebx
	popl	%eax
	popl	%ebx
	movl	%eax, (%ebx)
	#debug: assignment: dollar_found = 1 ; 
	movl	$1, -12(%ebp)
	jmp	replaceNextMarker_endif_199

replaceNextMarker_elsebl_199:

replaceNextMarker_endif_199:

	#debug: assignment: result = getNextIdentifierInLine ( instance , src_line , label_buffer ) ; 
	subl	$12, %esp
	movl	8(%ebp), %eax
	movl	%eax, 0(%esp)
	movl	12(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%ebp, %eax
	addl	$-148, %eax
	movl	%eax, 8(%esp)
	call	getNextIdentifierInLine
	addl	$12, %esp
	movl	%eax, -4(%ebp)
	#debug: if: result == 1 
	pushl	-4(%ebp)
	popl	%ebx
	cmpl	$1, %ebx
	movl	$1, %eax
	je	replaceNextMarker_reltrue_202
	movl	$0, %eax
replaceNextMarker_reltrue_202:
	testl	%eax, %eax
	jnz	replaceNextMarker_ifbl_201
	jmp	replaceNextMarker_elsebl_201
replaceNextMarker_ifbl_201:
	#debug: assignment: marker = findInMarkersList ( & instance -> restricted , label_buffer ) ; 
	subl	$8, %esp
	movl	%ebp, %eax
	addl	$8, %eax
	movl	(%eax), %eax
	addl	$16, %eax
	movl	%eax, 0(%esp)
	movl	%ebp, %eax
	addl	$-148, %eax
	movl	%eax, 4(%esp)
	call	findInMarkersList
	addl	$8, %esp
	movl	%eax, -152(%ebp)
	#debug: if: marker != 0 
	pushl	-152(%ebp)
	popl	%ebx
	cmpl	$0, %ebx
	movl	$1, %eax
	jne	replaceNextMarker_reltrue_204
	movl	$0, %eax
replaceNextMarker_reltrue_204:
	testl	%eax, %eax
	jnz	replaceNextMarker_ifbl_203
	jmp	replaceNextMarker_elsebl_203
replaceNextMarker_ifbl_203:
	#debug: func-call: strcat ( result_line -> buffer , label_buffer ) 
	subl	$8, %esp
	movl	%ebp, %eax
	addl	$16, %eax
	movl	(%eax), %eax
	addl	$0, %eax
	movl	%eax, 0(%esp)
	movl	%ebp, %eax
	addl	$-148, %eax
	movl	%eax, 4(%esp)
	call	strcat
	addl	$8, %esp
	#debug: assignment: result_line -> pos = result_line -> pos + strlen ( label_buffer ) ; 
	movl	%ebp, %eax
	addl	$16, %eax
	movl	(%eax), %eax
	addl	$516, %eax
	pushl	%eax
	movl	%ebp, %eax
	addl	$16, %eax
	movl	(%eax), %eax
	addl	$516, %eax
	movl	(%eax), %eax
	pushl	%eax
	subl	$4, %esp
	movl	%ebp, %eax
	addl	$-148, %eax
	movl	%eax, 0(%esp)
	call	strlen
	addl	$4, %esp
	popl	%ebx
	addl	%eax, %ebx
	pushl	%ebx
	popl	%eax
	popl	%ebx
	movl	%eax, (%ebx)
	#debug: return: return 0 ; 
	movl	$0, %eax
	jmp	replaceNextMarker_ret
	jmp	replaceNextMarker_endif_203

replaceNextMarker_elsebl_203:

	#debug: assignment: addr = getMarkerAddr ( markers_list , label_buffer ) ; 
	subl	$8, %esp
	movl	20(%ebp), %eax
	movl	%eax, 0(%esp)
	movl	%ebp, %eax
	addl	$-148, %eax
	movl	%eax, 4(%esp)
	call	getMarkerAddr
	addl	$8, %esp
	movl	%eax, -8(%ebp)
	#debug: if: addr == - 1 
	pushl	-8(%ebp)
	pushl	$0
	popl	%ebx
	subl	$1, %ebx
	pushl	%ebx
	popl	%eax
	popl	%ebx
	cmpl	%eax, %ebx
	movl	$1, %eax
	je	replaceNextMarker_reltrue_206
	movl	$0, %eax
replaceNextMarker_reltrue_206:
	testl	%eax, %eax
	jnz	replaceNextMarker_ifbl_205
	jmp	replaceNextMarker_elsebl_205
replaceNextMarker_ifbl_205:
	#debug: assignment: addr = getMarkerAddr ( & instance -> globls , label_buffer ) ; 
	subl	$8, %esp
	movl	%ebp, %eax
	addl	$8, %eax
	movl	(%eax), %eax
	addl	$8, %eax
	movl	%eax, 0(%esp)
	movl	%ebp, %eax
	addl	$-148, %eax
	movl	%eax, 4(%esp)
	call	getMarkerAddr
	addl	$8, %esp
	movl	%eax, -8(%ebp)
	#debug: if: addr == - 1 
	pushl	-8(%ebp)
	pushl	$0
	popl	%ebx
	subl	$1, %ebx
	pushl	%ebx
	popl	%eax
	popl	%ebx
	cmpl	%eax, %ebx
	movl	$1, %eax
	je	replaceNextMarker_reltrue_208
	movl	$0, %eax
replaceNextMarker_reltrue_208:
	testl	%eax, %eax
	jnz	replaceNextMarker_ifbl_207
	jmp	replaceNextMarker_elsebl_207
replaceNextMarker_ifbl_207:
	#debug: func-call: printf ( "LINKER_ERROR: Could not resolve marker [%s] - no definition found... " , label_buffer ) 
	subl	$8, %esp
	movl	$symtab+601, 0(%esp)
	movl	%ebp, %eax
	addl	$-148, %eax
	movl	%eax, 4(%esp)
	call	printf
	addl	$8, %esp
	#debug: func-call: printf ( "[%s" , getFilename ( instance , src_line -> file_id ) ) 
	subl	$8, %esp
	movl	$symtab+671, 0(%esp)
	subl	$8, %esp
	movl	8(%ebp), %eax
	movl	%eax, 0(%esp)
	movl	%ebp, %eax
	addl	$12, %eax
	movl	(%eax), %eax
	addl	$536, %eax
	movl	(%eax), %eax
	movl	%eax, 4(%esp)
	call	getFilename
	addl	$8, %esp
	movl	%eax, 4(%esp)
	call	printf
	addl	$8, %esp
	#debug: func-call: printf ( ":%d]\n" , src_line -> line_no ) 
	subl	$8, %esp
	movl	$symtab+675, 0(%esp)
	movl	%ebp, %eax
	addl	$12, %eax
	movl	(%eax), %eax
	addl	$540, %eax
	movl	(%eax), %eax
	movl	%eax, 4(%esp)
	call	printf
	addl	$8, %esp
	#debug: return: return - 1 ; 
	pushl	$0
	popl	%ebx
	subl	$1, %ebx
	pushl	%ebx
	popl	%eax
	jmp	replaceNextMarker_ret
	jmp	replaceNextMarker_endif_207

replaceNextMarker_elsebl_207:

replaceNextMarker_endif_207:

	jmp	replaceNextMarker_endif_205

replaceNextMarker_elsebl_205:

replaceNextMarker_endif_205:

	#debug: if: src_line -> buffer [ src_line -> pos ] == '+' 
	movl	%ebp, %eax
	addl	$12, %eax
	movl	(%eax), %eax
	addl	$516, %eax
	movl	(%eax), %eax
	pushl	%eax
	movl	%ebp, %eax
	addl	$12, %eax
	movl	(%eax), %eax
	addl	$0, %eax
	popl	%esi
	addl	%esi, %eax
	movb	(%eax), %al
	movsbl	%al, %eax
	pushl	%eax
	popl	%ebx
	cmpl	$43, %ebx
	movl	$1, %eax
	je	replaceNextMarker_reltrue_210
	movl	$0, %eax
replaceNextMarker_reltrue_210:
	testl	%eax, %eax
	jnz	replaceNextMarker_ifbl_209
	jmp	replaceNextMarker_elsebl_209
replaceNextMarker_ifbl_209:
	#debug: assignment: src_line -> pos = src_line -> pos + 1 ; 
	movl	%ebp, %eax
	addl	$12, %eax
	movl	(%eax), %eax
	addl	$516, %eax
	pushl	%eax
	movl	%ebp, %eax
	addl	$12, %eax
	movl	(%eax), %eax
	addl	$516, %eax
	movl	(%eax), %eax
	pushl	%eax
	popl	%ebx
	addl	$1, %ebx
	pushl	%ebx
	popl	%eax
	popl	%ebx
	movl	%eax, (%ebx)
	#debug: assignment: addr = addr + getSizeIdentifier ( instance , src_line ) ; 
	pushl	-8(%ebp)
	subl	$8, %esp
	movl	8(%ebp), %eax
	movl	%eax, 0(%esp)
	movl	12(%ebp), %eax
	movl	%eax, 4(%esp)
	call	getSizeIdentifier
	addl	$8, %esp
	popl	%ebx
	addl	%eax, %ebx
	pushl	%ebx
	popl	%eax
	movl	%eax, -8(%ebp)
	jmp	replaceNextMarker_endif_209

replaceNextMarker_elsebl_209:

replaceNextMarker_endif_209:

	#debug: func-call: strcat ( result_line -> buffer , convertAddr ( addr_buffer , addr ) ) 
	subl	$8, %esp
	movl	%ebp, %eax
	addl	$16, %eax
	movl	(%eax), %eax
	addl	$0, %eax
	movl	%eax, 0(%esp)
	subl	$8, %esp
	movl	%ebp, %eax
	addl	$-20, %eax
	movl	%eax, 0(%esp)
	movl	-8(%ebp), %eax
	movl	%eax, 4(%esp)
	call	convertAddr
	addl	$8, %esp
	movl	%eax, 4(%esp)
	call	strcat
	addl	$8, %esp
	#debug: assignment: result_line -> pos = strlen ( result_line -> buffer ) ; 
	movl	%ebp, %eax
	addl	$16, %eax
	movl	(%eax), %eax
	addl	$516, %eax
	pushl	%eax
	subl	$4, %esp
	movl	%ebp, %eax
	addl	$16, %eax
	movl	(%eax), %eax
	addl	$0, %eax
	movl	%eax, 0(%esp)
	call	strlen
	addl	$4, %esp
	popl	%ebx
	movl	%eax, (%ebx)
replaceNextMarker_endif_203:

	jmp	replaceNextMarker_endif_201

replaceNextMarker_elsebl_201:

	#debug: if: dollar_found == 1 && result == 0 
	pushl	-12(%ebp)
	popl	%ebx
	cmpl	$1, %ebx
	movl	$1, %eax
	je	replaceNextMarker_reltrue_213
	movl	$0, %eax
replaceNextMarker_reltrue_213:
	testl	%eax, %eax
	jz	replaceNextMarker_logtermfalse_212
	pushl	-4(%ebp)
	popl	%ebx
	cmpl	$0, %ebx
	movl	$1, %eax
	je	replaceNextMarker_reltrue_214
	movl	$0, %eax
replaceNextMarker_reltrue_214:
	testl	%eax, %eax
	jz	replaceNextMarker_logtermfalse_212
	movl	$1, %eax
	jmp	replaceNextMarker_logtermtrue_212
replaceNextMarker_logtermfalse_212:
	movl	$0, %eax
replaceNextMarker_logtermtrue_212:
	testl	%eax, %eax
	jnz	replaceNextMarker_ifbl_211
	jmp	replaceNextMarker_elsebl_211
replaceNextMarker_ifbl_211:
	#debug: while: src_line -> buffer [ src_line -> pos ] != ',' && src_line -> pos <= src_line -> length 
replaceNextMarker_while_215:
	movl	%ebp, %eax
	addl	$12, %eax
	movl	(%eax), %eax
	addl	$516, %eax
	movl	(%eax), %eax
	pushl	%eax
	movl	%ebp, %eax
	addl	$12, %eax
	movl	(%eax), %eax
	addl	$0, %eax
	popl	%esi
	addl	%esi, %eax
	movb	(%eax), %al
	movsbl	%al, %eax
	pushl	%eax
	popl	%ebx
	cmpl	$44, %ebx
	movl	$1, %eax
	jne	replaceNextMarker_reltrue_217
	movl	$0, %eax
replaceNextMarker_reltrue_217:
	testl	%eax, %eax
	jz	replaceNextMarker_logtermfalse_216
	movl	%ebp, %eax
	addl	$12, %eax
	movl	(%eax), %eax
	addl	$516, %eax
	movl	(%eax), %eax
	pushl	%eax
	movl	%ebp, %eax
	addl	$12, %eax
	movl	(%eax), %eax
	addl	$512, %eax
	movl	(%eax), %eax
	popl	%ebx
	cmpl	%eax, %ebx
	movl	$1, %eax
	jle	replaceNextMarker_reltrue_218
	movl	$0, %eax
replaceNextMarker_reltrue_218:
	testl	%eax, %eax
	jz	replaceNextMarker_logtermfalse_216
	movl	$1, %eax
	jmp	replaceNextMarker_logtermtrue_216
replaceNextMarker_logtermfalse_216:
	movl	$0, %eax
replaceNextMarker_logtermtrue_216:
	testl	%eax, %eax
	jz	replaceNextMarker_endwhile_215

	#debug: assignment: result_line -> buffer [ result_line -> pos ] = src_line -> buffer [ src_line -> pos ] ; 
	movl	%ebp, %eax
	addl	$16, %eax
	movl	(%eax), %eax
	addl	$516, %eax
	movl	(%eax), %eax
	pushl	%eax
	movl	%ebp, %eax
	addl	$16, %eax
	movl	(%eax), %eax
	addl	$0, %eax
	popl	%esi
	addl	%esi, %eax
	pushl	%eax
	movl	%ebp, %eax
	addl	$12, %eax
	movl	(%eax), %eax
	addl	$516, %eax
	movl	(%eax), %eax
	pushl	%eax
	movl	%ebp, %eax
	addl	$12, %eax
	movl	(%eax), %eax
	addl	$0, %eax
	popl	%esi
	addl	%esi, %eax
	movb	(%eax), %al
	popl	%ebx
	movb	%al, (%ebx)
	#debug: assignment: result_line -> pos = result_line -> pos + 1 ; 
	movl	%ebp, %eax
	addl	$16, %eax
	movl	(%eax), %eax
	addl	$516, %eax
	pushl	%eax
	movl	%ebp, %eax
	addl	$16, %eax
	movl	(%eax), %eax
	addl	$516, %eax
	movl	(%eax), %eax
	pushl	%eax
	popl	%ebx
	addl	$1, %ebx
	pushl	%ebx
	popl	%eax
	popl	%ebx
	movl	%eax, (%ebx)
	#debug: assignment: src_line -> pos = src_line -> pos + 1 ; 
	movl	%ebp, %eax
	addl	$12, %eax
	movl	(%eax), %eax
	addl	$516, %eax
	pushl	%eax
	movl	%ebp, %eax
	addl	$12, %eax
	movl	(%eax), %eax
	addl	$516, %eax
	movl	(%eax), %eax
	pushl	%eax
	popl	%ebx
	addl	$1, %ebx
	pushl	%ebx
	popl	%eax
	popl	%ebx
	movl	%eax, (%ebx)
	jmp	replaceNextMarker_while_215
replaceNextMarker_endwhile_215:

	jmp	replaceNextMarker_endif_211

replaceNextMarker_elsebl_211:

replaceNextMarker_endif_211:

replaceNextMarker_endif_201:

	#debug: return: return 0 ; 
	movl	$0, %eax
	jmp	replaceNextMarker_ret


replaceNextMarker_ret:
	movl	%ebp, %esp
	popl	%ebp
	ret




	#debug: func-def: ( linker * instance , Line * result_line , Line * src_line , MarkersList * markers_list ) 
.globl replaceMarkers
.type replaceMarkers, @function
replaceMarkers:
	pushl	%ebp
	movl	%esp, %ebp
	subl	$132, %esp


	#debug: func-call: memcpy ( result_line , src_line , sizeof ( Line ) ) 
	subl	$12, %esp
	movl	12(%ebp), %eax
	movl	%eax, 0(%esp)
	movl	16(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	$552, 8(%esp)
	call	memcpy
	addl	$12, %esp
	#debug: if: src_line -> pos == src_line -> length || src_line -> is_debug_line == 1 
	movl	%ebp, %eax
	addl	$16, %eax
	movl	(%eax), %eax
	addl	$516, %eax
	movl	(%eax), %eax
	pushl	%eax
	movl	%ebp, %eax
	addl	$16, %eax
	movl	(%eax), %eax
	addl	$512, %eax
	movl	(%eax), %eax
	popl	%ebx
	cmpl	%eax, %ebx
	movl	$1, %eax
	je	replaceMarkers_reltrue_221
	movl	$0, %eax
replaceMarkers_reltrue_221:
	testl	%eax, %eax
	jnz	replaceMarkers_logexprtrue_220
	movl	%ebp, %eax
	addl	$16, %eax
	movl	(%eax), %eax
	addl	$520, %eax
	movl	(%eax), %eax
	pushl	%eax
	popl	%ebx
	cmpl	$1, %ebx
	movl	$1, %eax
	je	replaceMarkers_reltrue_222
	movl	$0, %eax
replaceMarkers_reltrue_222:
	testl	%eax, %eax
	jnz	replaceMarkers_logexprtrue_220
	movl	$0, %eax
	jmp	replaceMarkers_logexprfalse_220
replaceMarkers_logexprtrue_220:
	movl	$1, %eax
replaceMarkers_logexprfalse_220:
	testl	%eax, %eax
	jnz	replaceMarkers_ifbl_219
	jmp	replaceMarkers_elsebl_219
replaceMarkers_ifbl_219:
	#debug: return: return 0 ; 
	movl	$0, %eax
	jmp	replaceMarkers_ret
	jmp	replaceMarkers_endif_219

replaceMarkers_elsebl_219:

replaceMarkers_endif_219:

	#debug: func-call: lnk_disposeWhitespace ( src_line ) 
	subl	$4, %esp
	movl	16(%ebp), %eax
	movl	%eax, 0(%esp)
	call	lnk_disposeWhitespace
	addl	$4, %esp
	#debug: assignment: result = getNextIdentifierInLine ( instance , src_line , opcode ) ; 
	subl	$12, %esp
	movl	8(%ebp), %eax
	movl	%eax, 0(%esp)
	movl	16(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%ebp, %eax
	addl	$-132, %eax
	movl	%eax, 8(%esp)
	call	getNextIdentifierInLine
	addl	$12, %esp
	movl	%eax, -4(%ebp)
	#debug: if: result < 0 
	pushl	-4(%ebp)
	popl	%ebx
	cmpl	$0, %ebx
	movl	$1, %eax
	jl	replaceMarkers_reltrue_224
	movl	$0, %eax
replaceMarkers_reltrue_224:
	testl	%eax, %eax
	jnz	replaceMarkers_ifbl_223
	jmp	replaceMarkers_elsebl_223
replaceMarkers_ifbl_223:
	#debug: return: return result ; 
	movl	-4(%ebp), %eax
	jmp	replaceMarkers_ret
	jmp	replaceMarkers_endif_223

replaceMarkers_elsebl_223:

	#debug: if: result == 0 
	pushl	-4(%ebp)
	popl	%ebx
	cmpl	$0, %ebx
	movl	$1, %eax
	je	replaceMarkers_reltrue_226
	movl	$0, %eax
replaceMarkers_reltrue_226:
	testl	%eax, %eax
	jnz	replaceMarkers_ifbl_225
	jmp	replaceMarkers_elsebl_225
replaceMarkers_ifbl_225:
	#debug: func-call: printf ( "LINKER_ERROR: Line [%s] " , src_line -> buffer ) 
	subl	$8, %esp
	movl	$symtab+681, 0(%esp)
	movl	%ebp, %eax
	addl	$16, %eax
	movl	(%eax), %eax
	addl	$0, %eax
	movl	%eax, 4(%esp)
	call	printf
	addl	$8, %esp
	#debug: func-call: printf ( "is malformed! [%s:" , getFilename ( instance , src_line -> file_id ) ) 
	subl	$8, %esp
	movl	$symtab+706, 0(%esp)
	subl	$8, %esp
	movl	8(%ebp), %eax
	movl	%eax, 0(%esp)
	movl	%ebp, %eax
	addl	$16, %eax
	movl	(%eax), %eax
	addl	$536, %eax
	movl	(%eax), %eax
	movl	%eax, 4(%esp)
	call	getFilename
	addl	$8, %esp
	movl	%eax, 4(%esp)
	call	printf
	addl	$8, %esp
	#debug: func-call: printf ( "%d]\n" , src_line -> line_no ) 
	subl	$8, %esp
	movl	$symtab+121, 0(%esp)
	movl	%ebp, %eax
	addl	$16, %eax
	movl	(%eax), %eax
	addl	$540, %eax
	movl	(%eax), %eax
	movl	%eax, 4(%esp)
	call	printf
	addl	$8, %esp
	#debug: return: return - 1 ; 
	pushl	$0
	popl	%ebx
	subl	$1, %ebx
	pushl	%ebx
	popl	%eax
	jmp	replaceMarkers_ret
	jmp	replaceMarkers_endif_225

replaceMarkers_elsebl_225:

	#debug: func-call: lnk_disposeWhitespace ( src_line ) 
	subl	$4, %esp
	movl	16(%ebp), %eax
	movl	%eax, 0(%esp)
	call	lnk_disposeWhitespace
	addl	$4, %esp
	#debug: func-call: memset ( result_line -> buffer , 0 , 512 ) 
	subl	$12, %esp
	movl	%ebp, %eax
	addl	$12, %eax
	movl	(%eax), %eax
	addl	$0, %eax
	movl	%eax, 0(%esp)
	movl	$0, 4(%esp)
	movl	$512, 8(%esp)
	call	memset
	addl	$12, %esp
	#debug: func-call: memcpy ( result_line -> buffer , src_line -> buffer , src_line -> pos ) 
	subl	$12, %esp
	movl	%ebp, %eax
	addl	$12, %eax
	movl	(%eax), %eax
	addl	$0, %eax
	movl	%eax, 0(%esp)
	movl	%ebp, %eax
	addl	$16, %eax
	movl	(%eax), %eax
	addl	$0, %eax
	movl	%eax, 4(%esp)
	movl	%ebp, %eax
	addl	$16, %eax
	movl	(%eax), %eax
	addl	$516, %eax
	movl	(%eax), %eax
	movl	%eax, 8(%esp)
	call	memcpy
	addl	$12, %esp
	#debug: assignment: result_line -> pos = src_line -> pos ; 
	movl	%ebp, %eax
	addl	$12, %eax
	movl	(%eax), %eax
	addl	$516, %eax
	pushl	%eax
	movl	%ebp, %eax
	addl	$16, %eax
	movl	(%eax), %eax
	addl	$516, %eax
	movl	(%eax), %eax
	popl	%ebx
	movl	%eax, (%ebx)
	#debug: assignment: result = replaceNextMarker ( instance , src_line , result_line , markers_list ) ; 
	subl	$16, %esp
	movl	8(%ebp), %eax
	movl	%eax, 0(%esp)
	movl	16(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	12(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	20(%ebp), %eax
	movl	%eax, 12(%esp)
	call	replaceNextMarker
	addl	$16, %esp
	movl	%eax, -4(%ebp)
	#debug: if: result != 0 
	pushl	-4(%ebp)
	popl	%ebx
	cmpl	$0, %ebx
	movl	$1, %eax
	jne	replaceMarkers_reltrue_228
	movl	$0, %eax
replaceMarkers_reltrue_228:
	testl	%eax, %eax
	jnz	replaceMarkers_ifbl_227
	jmp	replaceMarkers_elsebl_227
replaceMarkers_ifbl_227:
	#debug: return: return result ; 
	movl	-4(%ebp), %eax
	jmp	replaceMarkers_ret
	jmp	replaceMarkers_endif_227

replaceMarkers_elsebl_227:

replaceMarkers_endif_227:

	#debug: while: src_line -> buffer [ src_line -> pos ] != ',' && src_line -> pos <= src_line -> length 
replaceMarkers_while_229:
	movl	%ebp, %eax
	addl	$16, %eax
	movl	(%eax), %eax
	addl	$516, %eax
	movl	(%eax), %eax
	pushl	%eax
	movl	%ebp, %eax
	addl	$16, %eax
	movl	(%eax), %eax
	addl	$0, %eax
	popl	%esi
	addl	%esi, %eax
	movb	(%eax), %al
	movsbl	%al, %eax
	pushl	%eax
	popl	%ebx
	cmpl	$44, %ebx
	movl	$1, %eax
	jne	replaceMarkers_reltrue_231
	movl	$0, %eax
replaceMarkers_reltrue_231:
	testl	%eax, %eax
	jz	replaceMarkers_logtermfalse_230
	movl	%ebp, %eax
	addl	$16, %eax
	movl	(%eax), %eax
	addl	$516, %eax
	movl	(%eax), %eax
	pushl	%eax
	movl	%ebp, %eax
	addl	$16, %eax
	movl	(%eax), %eax
	addl	$512, %eax
	movl	(%eax), %eax
	popl	%ebx
	cmpl	%eax, %ebx
	movl	$1, %eax
	jle	replaceMarkers_reltrue_232
	movl	$0, %eax
replaceMarkers_reltrue_232:
	testl	%eax, %eax
	jz	replaceMarkers_logtermfalse_230
	movl	$1, %eax
	jmp	replaceMarkers_logtermtrue_230
replaceMarkers_logtermfalse_230:
	movl	$0, %eax
replaceMarkers_logtermtrue_230:
	testl	%eax, %eax
	jz	replaceMarkers_endwhile_229

	#debug: assignment: result_line -> buffer [ result_line -> pos ] = src_line -> buffer [ src_line -> pos ] ; 
	movl	%ebp, %eax
	addl	$12, %eax
	movl	(%eax), %eax
	addl	$516, %eax
	movl	(%eax), %eax
	pushl	%eax
	movl	%ebp, %eax
	addl	$12, %eax
	movl	(%eax), %eax
	addl	$0, %eax
	popl	%esi
	addl	%esi, %eax
	pushl	%eax
	movl	%ebp, %eax
	addl	$16, %eax
	movl	(%eax), %eax
	addl	$516, %eax
	movl	(%eax), %eax
	pushl	%eax
	movl	%ebp, %eax
	addl	$16, %eax
	movl	(%eax), %eax
	addl	$0, %eax
	popl	%esi
	addl	%esi, %eax
	movb	(%eax), %al
	popl	%ebx
	movb	%al, (%ebx)
	#debug: assignment: result_line -> pos = result_line -> pos + 1 ; 
	movl	%ebp, %eax
	addl	$12, %eax
	movl	(%eax), %eax
	addl	$516, %eax
	pushl	%eax
	movl	%ebp, %eax
	addl	$12, %eax
	movl	(%eax), %eax
	addl	$516, %eax
	movl	(%eax), %eax
	pushl	%eax
	popl	%ebx
	addl	$1, %ebx
	pushl	%ebx
	popl	%eax
	popl	%ebx
	movl	%eax, (%ebx)
	#debug: assignment: src_line -> pos = src_line -> pos + 1 ; 
	movl	%ebp, %eax
	addl	$16, %eax
	movl	(%eax), %eax
	addl	$516, %eax
	pushl	%eax
	movl	%ebp, %eax
	addl	$16, %eax
	movl	(%eax), %eax
	addl	$516, %eax
	movl	(%eax), %eax
	pushl	%eax
	popl	%ebx
	addl	$1, %ebx
	pushl	%ebx
	popl	%eax
	popl	%ebx
	movl	%eax, (%ebx)
	jmp	replaceMarkers_while_229
replaceMarkers_endwhile_229:

	#debug: if: src_line -> pos == src_line -> length 
	movl	%ebp, %eax
	addl	$16, %eax
	movl	(%eax), %eax
	addl	$516, %eax
	movl	(%eax), %eax
	pushl	%eax
	movl	%ebp, %eax
	addl	$16, %eax
	movl	(%eax), %eax
	addl	$512, %eax
	movl	(%eax), %eax
	popl	%ebx
	cmpl	%eax, %ebx
	movl	$1, %eax
	je	replaceMarkers_reltrue_234
	movl	$0, %eax
replaceMarkers_reltrue_234:
	testl	%eax, %eax
	jnz	replaceMarkers_ifbl_233
	jmp	replaceMarkers_elsebl_233
replaceMarkers_ifbl_233:
	#debug: return: return 0 ; 
	movl	$0, %eax
	jmp	replaceMarkers_ret
	jmp	replaceMarkers_endif_233

replaceMarkers_elsebl_233:

	#debug: assignment: result_line -> buffer [ result_line -> pos ] = src_line -> buffer [ src_line -> pos ] ; 
	movl	%ebp, %eax
	addl	$12, %eax
	movl	(%eax), %eax
	addl	$516, %eax
	movl	(%eax), %eax
	pushl	%eax
	movl	%ebp, %eax
	addl	$12, %eax
	movl	(%eax), %eax
	addl	$0, %eax
	popl	%esi
	addl	%esi, %eax
	pushl	%eax
	movl	%ebp, %eax
	addl	$16, %eax
	movl	(%eax), %eax
	addl	$516, %eax
	movl	(%eax), %eax
	pushl	%eax
	movl	%ebp, %eax
	addl	$16, %eax
	movl	(%eax), %eax
	addl	$0, %eax
	popl	%esi
	addl	%esi, %eax
	movb	(%eax), %al
	popl	%ebx
	movb	%al, (%ebx)
	#debug: assignment: result_line -> pos = result_line -> pos + 1 ; 
	movl	%ebp, %eax
	addl	$12, %eax
	movl	(%eax), %eax
	addl	$516, %eax
	pushl	%eax
	movl	%ebp, %eax
	addl	$12, %eax
	movl	(%eax), %eax
	addl	$516, %eax
	movl	(%eax), %eax
	pushl	%eax
	popl	%ebx
	addl	$1, %ebx
	pushl	%ebx
	popl	%eax
	popl	%ebx
	movl	%eax, (%ebx)
	#debug: assignment: src_line -> pos = src_line -> pos + 1 ; 
	movl	%ebp, %eax
	addl	$16, %eax
	movl	(%eax), %eax
	addl	$516, %eax
	pushl	%eax
	movl	%ebp, %eax
	addl	$16, %eax
	movl	(%eax), %eax
	addl	$516, %eax
	movl	(%eax), %eax
	pushl	%eax
	popl	%ebx
	addl	$1, %ebx
	pushl	%ebx
	popl	%eax
	popl	%ebx
	movl	%eax, (%ebx)
replaceMarkers_endif_233:

	#debug: func-call: lnk_disposeWhitespace ( src_line ) 
	subl	$4, %esp
	movl	16(%ebp), %eax
	movl	%eax, 0(%esp)
	call	lnk_disposeWhitespace
	addl	$4, %esp
	#debug: assignment: result = replaceNextMarker ( instance , src_line , result_line , markers_list ) ; 
	subl	$16, %esp
	movl	8(%ebp), %eax
	movl	%eax, 0(%esp)
	movl	16(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	12(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	20(%ebp), %eax
	movl	%eax, 12(%esp)
	call	replaceNextMarker
	addl	$16, %esp
	movl	%eax, -4(%ebp)
	#debug: if: result != 0 
	pushl	-4(%ebp)
	popl	%ebx
	cmpl	$0, %ebx
	movl	$1, %eax
	jne	replaceMarkers_reltrue_236
	movl	$0, %eax
replaceMarkers_reltrue_236:
	testl	%eax, %eax
	jnz	replaceMarkers_ifbl_235
	jmp	replaceMarkers_elsebl_235
replaceMarkers_ifbl_235:
	#debug: return: return result ; 
	movl	-4(%ebp), %eax
	jmp	replaceMarkers_ret
	jmp	replaceMarkers_endif_235

replaceMarkers_elsebl_235:

replaceMarkers_endif_235:

	#debug: while: src_line -> pos <= src_line -> length 
replaceMarkers_while_237:
	movl	%ebp, %eax
	addl	$16, %eax
	movl	(%eax), %eax
	addl	$516, %eax
	movl	(%eax), %eax
	pushl	%eax
	movl	%ebp, %eax
	addl	$16, %eax
	movl	(%eax), %eax
	addl	$512, %eax
	movl	(%eax), %eax
	popl	%ebx
	cmpl	%eax, %ebx
	movl	$1, %eax
	jle	replaceMarkers_reltrue_238
	movl	$0, %eax
replaceMarkers_reltrue_238:
	testl	%eax, %eax
	jz	replaceMarkers_endwhile_237

	#debug: assignment: result_line -> buffer [ result_line -> pos ] = src_line -> buffer [ src_line -> pos ] ; 
	movl	%ebp, %eax
	addl	$12, %eax
	movl	(%eax), %eax
	addl	$516, %eax
	movl	(%eax), %eax
	pushl	%eax
	movl	%ebp, %eax
	addl	$12, %eax
	movl	(%eax), %eax
	addl	$0, %eax
	popl	%esi
	addl	%esi, %eax
	pushl	%eax
	movl	%ebp, %eax
	addl	$16, %eax
	movl	(%eax), %eax
	addl	$516, %eax
	movl	(%eax), %eax
	pushl	%eax
	movl	%ebp, %eax
	addl	$16, %eax
	movl	(%eax), %eax
	addl	$0, %eax
	popl	%esi
	addl	%esi, %eax
	movb	(%eax), %al
	popl	%ebx
	movb	%al, (%ebx)
	#debug: assignment: result_line -> pos = result_line -> pos + 1 ; 
	movl	%ebp, %eax
	addl	$12, %eax
	movl	(%eax), %eax
	addl	$516, %eax
	pushl	%eax
	movl	%ebp, %eax
	addl	$12, %eax
	movl	(%eax), %eax
	addl	$516, %eax
	movl	(%eax), %eax
	pushl	%eax
	popl	%ebx
	addl	$1, %ebx
	pushl	%ebx
	popl	%eax
	popl	%ebx
	movl	%eax, (%ebx)
	#debug: assignment: src_line -> pos = src_line -> pos + 1 ; 
	movl	%ebp, %eax
	addl	$16, %eax
	movl	(%eax), %eax
	addl	$516, %eax
	pushl	%eax
	movl	%ebp, %eax
	addl	$16, %eax
	movl	(%eax), %eax
	addl	$516, %eax
	movl	(%eax), %eax
	pushl	%eax
	popl	%ebx
	addl	$1, %ebx
	pushl	%ebx
	popl	%eax
	popl	%ebx
	movl	%eax, (%ebx)
	jmp	replaceMarkers_while_237
replaceMarkers_endwhile_237:

replaceMarkers_endif_225:

replaceMarkers_endif_223:

	#debug: return: return 0 ; 
	movl	$0, %eax
	jmp	replaceMarkers_ret


replaceMarkers_ret:
	movl	%ebp, %esp
	popl	%ebp
	ret




	#debug: func-def: ( LinesList * lines , int base_addr ) 
.globl updateLinesAddresses
.type updateLinesAddresses, @function
updateLinesAddresses:
	pushl	%ebp
	movl	%esp, %ebp
	subl	$4, %esp


	#debug: assignment: curr_line = Get_Front_Of_LinesList ( lines ) ; 
	subl	$4, %esp
	movl	8(%ebp), %eax
	movl	%eax, 0(%esp)
	call	Get_Front_Of_LinesList
	addl	$4, %esp
	movl	%eax, -4(%ebp)
	#debug: while: curr_line != 0 
updateLinesAddresses_while_239:
	pushl	-4(%ebp)
	popl	%ebx
	cmpl	$0, %ebx
	movl	$1, %eax
	jne	updateLinesAddresses_reltrue_240
	movl	$0, %eax
updateLinesAddresses_reltrue_240:
	testl	%eax, %eax
	jz	updateLinesAddresses_endwhile_239

	#debug: assignment: curr_line -> addr = curr_line -> addr + base_addr ; 
	movl	%ebp, %eax
	addl	$-4, %eax
	movl	(%eax), %eax
	addl	$532, %eax
	pushl	%eax
	movl	%ebp, %eax
	addl	$-4, %eax
	movl	(%eax), %eax
	addl	$532, %eax
	movl	(%eax), %eax
	pushl	%eax
	popl	%ebx
	addl	12(%ebp), %ebx
	pushl	%ebx
	popl	%eax
	popl	%ebx
	movl	%eax, (%ebx)
	#debug: assignment: curr_line = Get_Next_In_LinesList ( curr_line ) ; 
	subl	$4, %esp
	movl	-4(%ebp), %eax
	movl	%eax, 0(%esp)
	call	Get_Next_In_LinesList
	addl	$4, %esp
	movl	%eax, -4(%ebp)
	jmp	updateLinesAddresses_while_239
updateLinesAddresses_endwhile_239:



updateLinesAddresses_ret:
	movl	%ebp, %esp
	popl	%ebp
	ret




	#debug: func-def: ( char * buffer ) 
.globl escapeBufferCharacters
.type escapeBufferCharacters, @function
escapeBufferCharacters:
	pushl	%ebp
	movl	%esp, %ebp
	subl	$13, %esp


	#debug: assignment: idx = 0 ; 
	movl	$0, -4(%ebp)
	#debug: assignment: buffer_length = strlen ( buffer ) ; 
	subl	$4, %esp
	movl	8(%ebp), %eax
	movl	%eax, 0(%esp)
	call	strlen
	addl	$4, %esp
	movl	%eax, -12(%ebp)
	#debug: while: idx < buffer_length 
escapeBufferCharacters_while_241:
	pushl	-4(%ebp)
	popl	%ebx
	cmpl	-12(%ebp), %ebx
	movl	$1, %eax
	jl	escapeBufferCharacters_reltrue_242
	movl	$0, %eax
escapeBufferCharacters_reltrue_242:
	testl	%eax, %eax
	jz	escapeBufferCharacters_endwhile_241

	#debug: if: buffer [ idx ] == '\\' 
	pushl	-4(%ebp)
	movl	%ebp, %eax
	addl	$8, %eax
	movl	(%eax), %eax
	popl	%esi
	addl	%esi, %eax
	movb	(%eax), %al
	movsbl	%al, %eax
	pushl	%eax
	popl	%ebx
	cmpl	$92, %ebx
	movl	$1, %eax
	je	escapeBufferCharacters_reltrue_244
	movl	$0, %eax
escapeBufferCharacters_reltrue_244:
	testl	%eax, %eax
	jnz	escapeBufferCharacters_ifbl_243
	jmp	escapeBufferCharacters_elsebl_243
escapeBufferCharacters_ifbl_243:
	#debug: assignment: next = buffer [ idx + 1 ] ; 
	pushl	-4(%ebp)
	popl	%ebx
	addl	$1, %ebx
	pushl	%ebx
	popl	%eax
	pushl	%eax
	movl	%ebp, %eax
	addl	$8, %eax
	movl	(%eax), %eax
	popl	%esi
	addl	%esi, %eax
	movb	(%eax), %al
	movb	%al, -13(%ebp)
	#debug: if: ! ( next == 'n' || next == 'r' || next == 't' || next == '\\' || next == 'b' || next == '\'' || next == '\"' || next == '0' ) 
	movsbl	-13(%ebp), %eax
	pushl	%eax
	popl	%ebx
	cmpl	$110, %ebx
	movl	$1, %eax
	je	escapeBufferCharacters_reltrue_248
	movl	$0, %eax
escapeBufferCharacters_reltrue_248:
	testl	%eax, %eax
	jnz	escapeBufferCharacters_logexprtrue_247
	movsbl	-13(%ebp), %eax
	pushl	%eax
	popl	%ebx
	cmpl	$114, %ebx
	movl	$1, %eax
	je	escapeBufferCharacters_reltrue_249
	movl	$0, %eax
escapeBufferCharacters_reltrue_249:
	testl	%eax, %eax
	jnz	escapeBufferCharacters_logexprtrue_247
	movsbl	-13(%ebp), %eax
	pushl	%eax
	popl	%ebx
	cmpl	$116, %ebx
	movl	$1, %eax
	je	escapeBufferCharacters_reltrue_250
	movl	$0, %eax
escapeBufferCharacters_reltrue_250:
	testl	%eax, %eax
	jnz	escapeBufferCharacters_logexprtrue_247
	movsbl	-13(%ebp), %eax
	pushl	%eax
	popl	%ebx
	cmpl	$92, %ebx
	movl	$1, %eax
	je	escapeBufferCharacters_reltrue_251
	movl	$0, %eax
escapeBufferCharacters_reltrue_251:
	testl	%eax, %eax
	jnz	escapeBufferCharacters_logexprtrue_247
	movsbl	-13(%ebp), %eax
	pushl	%eax
	popl	%ebx
	cmpl	$98, %ebx
	movl	$1, %eax
	je	escapeBufferCharacters_reltrue_252
	movl	$0, %eax
escapeBufferCharacters_reltrue_252:
	testl	%eax, %eax
	jnz	escapeBufferCharacters_logexprtrue_247
	movsbl	-13(%ebp), %eax
	pushl	%eax
	popl	%ebx
	cmpl	$39, %ebx
	movl	$1, %eax
	je	escapeBufferCharacters_reltrue_253
	movl	$0, %eax
escapeBufferCharacters_reltrue_253:
	testl	%eax, %eax
	jnz	escapeBufferCharacters_logexprtrue_247
	movsbl	-13(%ebp), %eax
	pushl	%eax
	popl	%ebx
	cmpl	$34, %ebx
	movl	$1, %eax
	je	escapeBufferCharacters_reltrue_254
	movl	$0, %eax
escapeBufferCharacters_reltrue_254:
	testl	%eax, %eax
	jnz	escapeBufferCharacters_logexprtrue_247
	movsbl	-13(%ebp), %eax
	pushl	%eax
	popl	%ebx
	cmpl	$48, %ebx
	movl	$1, %eax
	je	escapeBufferCharacters_reltrue_255
	movl	$0, %eax
escapeBufferCharacters_reltrue_255:
	testl	%eax, %eax
	jnz	escapeBufferCharacters_logexprtrue_247
	movl	$0, %eax
	jmp	escapeBufferCharacters_logexprfalse_247
escapeBufferCharacters_logexprtrue_247:
	movl	$1, %eax
escapeBufferCharacters_logexprfalse_247:
	testl	%eax, %eax
	movl	$1, %eax
	jz	escapeBufferCharacters_logfactfalse_246
	movl	$0, %eax
escapeBufferCharacters_logfactfalse_246:
	testl	%eax, %eax
	jnz	escapeBufferCharacters_ifbl_245
	jmp	escapeBufferCharacters_elsebl_245
escapeBufferCharacters_ifbl_245:
	#debug: assignment: idy = idx ; 
	movl	-4(%ebp), %eax
	movl	%eax, -8(%ebp)
	#debug: while: idy < buffer_length 
escapeBufferCharacters_while_256:
	pushl	-8(%ebp)
	popl	%ebx
	cmpl	-12(%ebp), %ebx
	movl	$1, %eax
	jl	escapeBufferCharacters_reltrue_257
	movl	$0, %eax
escapeBufferCharacters_reltrue_257:
	testl	%eax, %eax
	jz	escapeBufferCharacters_endwhile_256

	#debug: assignment: buffer [ idy ] = buffer [ idy + 1 ] ; 
	pushl	-8(%ebp)
	movl	%ebp, %eax
	addl	$8, %eax
	movl	(%eax), %eax
	popl	%esi
	addl	%esi, %eax
	pushl	%eax
	pushl	-8(%ebp)
	popl	%ebx
	addl	$1, %ebx
	pushl	%ebx
	popl	%eax
	pushl	%eax
	movl	%ebp, %eax
	addl	$8, %eax
	movl	(%eax), %eax
	popl	%esi
	addl	%esi, %eax
	movb	(%eax), %al
	popl	%ebx
	movb	%al, (%ebx)
	#debug: assignment: buffer [ idy + 1 ] = '\0' ; 
	pushl	-8(%ebp)
	popl	%ebx
	addl	$1, %ebx
	pushl	%ebx
	popl	%eax
	pushl	%eax
	movl	%ebp, %eax
	addl	$8, %eax
	movl	(%eax), %eax
	popl	%esi
	addl	%esi, %eax
	pushl	%eax
	popl	%ebx
	movb	$0, (%ebx)
	#debug: assignment: idy = idy + 1 ; 
	pushl	-8(%ebp)
	popl	%ebx
	addl	$1, %ebx
	pushl	%ebx
	popl	%eax
	movl	%eax, -8(%ebp)
	jmp	escapeBufferCharacters_while_256
escapeBufferCharacters_endwhile_256:

	jmp	escapeBufferCharacters_endif_245

escapeBufferCharacters_elsebl_245:

escapeBufferCharacters_endif_245:

	jmp	escapeBufferCharacters_endif_243

escapeBufferCharacters_elsebl_243:

escapeBufferCharacters_endif_243:

	#debug: assignment: idx = idx + 1 ; 
	pushl	-4(%ebp)
	popl	%ebx
	addl	$1, %ebx
	pushl	%ebx
	popl	%eax
	movl	%eax, -4(%ebp)
	jmp	escapeBufferCharacters_while_241
escapeBufferCharacters_endwhile_241:



escapeBufferCharacters_ret:
	movl	%ebp, %esp
	popl	%ebp
	ret




	#debug: func-def: ( linker * instance , char * output_filename ) 
.globl linker_produce
.type linker_produce, @function
linker_produce:
	pushl	%ebp
	movl	%esp, %ebp
	subl	$584, %esp


	#debug: if: instance -> initiated != 1 
	movl	%ebp, %eax
	addl	$8, %eax
	movl	(%eax), %eax
	addl	$0, %eax
	movl	(%eax), %eax
	pushl	%eax
	popl	%ebx
	cmpl	$1, %ebx
	movl	$1, %eax
	jne	linker_produce_reltrue_259
	movl	$0, %eax
linker_produce_reltrue_259:
	testl	%eax, %eax
	jnz	linker_produce_ifbl_258
	jmp	linker_produce_elsebl_258
linker_produce_ifbl_258:
	#debug: return: return - 20000 ; 
	pushl	$0
	popl	%ebx
	subl	$20000, %ebx
	pushl	%ebx
	popl	%eax
	jmp	linker_produce_ret
	jmp	linker_produce_endif_258

linker_produce_elsebl_258:

linker_produce_endif_258:

	#debug: func-call: updateLinesAddresses ( & instance -> data_section , instance -> text_addr ) 
	subl	$8, %esp
	movl	%ebp, %eax
	addl	$8, %eax
	movl	(%eax), %eax
	addl	$40, %eax
	movl	%eax, 0(%esp)
	movl	%ebp, %eax
	addl	$8, %eax
	movl	(%eax), %eax
	addl	$48, %eax
	movl	(%eax), %eax
	movl	%eax, 4(%esp)
	call	updateLinesAddresses
	addl	$8, %esp
	#debug: assignment: result = resolveFileMarkers ( instance ) ; 
	subl	$4, %esp
	movl	8(%ebp), %eax
	movl	%eax, 0(%esp)
	call	resolveFileMarkers
	addl	$4, %esp
	movl	%eax, -12(%ebp)
	#debug: if: result != 0 
	pushl	-12(%ebp)
	popl	%ebx
	cmpl	$0, %ebx
	movl	$1, %eax
	jne	linker_produce_reltrue_261
	movl	$0, %eax
linker_produce_reltrue_261:
	testl	%eax, %eax
	jnz	linker_produce_ifbl_260
	jmp	linker_produce_elsebl_260
linker_produce_ifbl_260:
	#debug: return: return result ; 
	movl	-12(%ebp), %eax
	jmp	linker_produce_ret
	jmp	linker_produce_endif_260

linker_produce_elsebl_260:

linker_produce_endif_260:

	#debug: assignment: fh = open ( output_filename , 64 | 1 | 512 , 0777 ) ; 
	subl	$12, %esp
	movl	12(%ebp), %eax
	movl	%eax, 0(%esp)
	pushl	$64
	popl	%ebx
	orl	$1, %ebx
	pushl	%ebx
	popl	%ebx
	orl	$512, %ebx
	pushl	%ebx
	popl	%eax
	movl	%eax, 4(%esp)
	movl	$0777, 8(%esp)
	call	open
	addl	$12, %esp
	movl	%eax, -4(%ebp)
	#debug: if: fh < 0 
	pushl	-4(%ebp)
	popl	%ebx
	cmpl	$0, %ebx
	movl	$1, %eax
	jl	linker_produce_reltrue_263
	movl	$0, %eax
linker_produce_reltrue_263:
	testl	%eax, %eax
	jnz	linker_produce_ifbl_262
	jmp	linker_produce_elsebl_262
linker_produce_ifbl_262:
	#debug: return: return - 20001 ; 
	pushl	$0
	popl	%ebx
	subl	$20001, %ebx
	pushl	%ebx
	popl	%eax
	jmp	linker_produce_ret
	jmp	linker_produce_endif_262

linker_produce_elsebl_262:

linker_produce_endif_262:

	#debug: assignment: instance -> output_fh = fh ; 
	movl	%ebp, %eax
	addl	$8, %eax
	movl	(%eax), %eax
	addl	$4, %eax
	pushl	%eax
	movl	-4(%ebp), %eax
	popl	%ebx
	movl	%eax, (%ebx)
	#debug: func-call: appendOutput ( instance , "# linked executable code generated by HRWCC\n\n" ) 
	subl	$8, %esp
	movl	8(%ebp), %eax
	movl	%eax, 0(%esp)
	movl	$symtab+725, 4(%esp)
	call	appendOutput
	addl	$8, %esp
	#debug: assignment: entry_addr = getMarkerAddr ( & instance -> globls , "main" ) ; 
	subl	$8, %esp
	movl	%ebp, %eax
	addl	$8, %eax
	movl	(%eax), %eax
	addl	$8, %eax
	movl	%eax, 0(%esp)
	movl	$symtab+771, 4(%esp)
	call	getMarkerAddr
	addl	$8, %esp
	movl	%eax, -8(%ebp)
	#debug: if: entry_addr < 0 
	pushl	-8(%ebp)
	popl	%ebx
	cmpl	$0, %ebx
	movl	$1, %eax
	jl	linker_produce_reltrue_265
	movl	$0, %eax
linker_produce_reltrue_265:
	testl	%eax, %eax
	jnz	linker_produce_ifbl_264
	jmp	linker_produce_elsebl_264
linker_produce_ifbl_264:
	#debug: func-call: printf ( "LINKER_ERROR: reference to entry point (%s) missing!\n" , "main" ) 
	subl	$8, %esp
	movl	$symtab+776, 0(%esp)
	movl	$symtab+771, 4(%esp)
	call	printf
	addl	$8, %esp
	#debug: return: return - 20004 ; 
	pushl	$0
	popl	%ebx
	subl	$20004, %ebx
	pushl	%ebx
	popl	%eax
	jmp	linker_produce_ret
	jmp	linker_produce_endif_264

linker_produce_elsebl_264:

linker_produce_endif_264:

	#debug: func-call: appendOutput ( instance , ".section .text\n\n" ) 
	subl	$8, %esp
	movl	8(%ebp), %eax
	movl	%eax, 0(%esp)
	movl	$symtab+830, 4(%esp)
	call	appendOutput
	addl	$8, %esp
	#debug: func-call: appendOutput ( instance , "call " ) 
	subl	$8, %esp
	movl	8(%ebp), %eax
	movl	%eax, 0(%esp)
	movl	$symtab+847, 4(%esp)
	call	appendOutput
	addl	$8, %esp
	#debug: func-call: appendOutput ( instance , convertAddr ( addr_buffer , entry_addr ) ) 
	subl	$8, %esp
	movl	8(%ebp), %eax
	movl	%eax, 0(%esp)
	subl	$8, %esp
	movl	%ebp, %eax
	addl	$-584, %eax
	movl	%eax, 0(%esp)
	movl	-8(%ebp), %eax
	movl	%eax, 4(%esp)
	call	convertAddr
	addl	$8, %esp
	movl	%eax, 4(%esp)
	call	appendOutput
	addl	$8, %esp
	#debug: func-call: appendOutput ( instance , "\n" ) 
	subl	$8, %esp
	movl	8(%ebp), %eax
	movl	%eax, 0(%esp)
	movl	$symtab+853, 4(%esp)
	call	appendOutput
	addl	$8, %esp
	#debug: func-call: appendOutput ( instance , "pushl %eax\n" ) 
	subl	$8, %esp
	movl	8(%ebp), %eax
	movl	%eax, 0(%esp)
	movl	$symtab+855, 4(%esp)
	call	appendOutput
	addl	$8, %esp
	#debug: func-call: appendOutput ( instance , "call exit\n\n" ) 
	subl	$8, %esp
	movl	8(%ebp), %eax
	movl	%eax, 0(%esp)
	movl	$symtab+867, 4(%esp)
	call	appendOutput
	addl	$8, %esp
	#debug: assignment: last_file_id = - 1 ; 
	pushl	$0
	popl	%ebx
	subl	$1, %ebx
	pushl	%ebx
	popl	%eax
	movl	%eax, -16(%ebp)
	#debug: assignment: line = Get_Front_Of_LinesList ( & instance -> text_section ) ; 
	subl	$4, %esp
	movl	%ebp, %eax
	addl	$8, %eax
	movl	(%eax), %eax
	addl	$32, %eax
	movl	%eax, 0(%esp)
	call	Get_Front_Of_LinesList
	addl	$4, %esp
	movl	%eax, -20(%ebp)
	#debug: while: line != 0 
linker_produce_while_266:
	pushl	-20(%ebp)
	popl	%ebx
	cmpl	$0, %ebx
	movl	$1, %eax
	jne	linker_produce_reltrue_267
	movl	$0, %eax
linker_produce_reltrue_267:
	testl	%eax, %eax
	jz	linker_produce_endwhile_266

	#debug: if: last_file_id != line -> file_id 
	pushl	-16(%ebp)
	movl	%ebp, %eax
	addl	$-20, %eax
	movl	(%eax), %eax
	addl	$536, %eax
	movl	(%eax), %eax
	popl	%ebx
	cmpl	%eax, %ebx
	movl	$1, %eax
	jne	linker_produce_reltrue_269
	movl	$0, %eax
linker_produce_reltrue_269:
	testl	%eax, %eax
	jnz	linker_produce_ifbl_268
	jmp	linker_produce_elsebl_268
linker_produce_ifbl_268:
	#debug: assignment: curr_file = getFileOfList ( instance , line -> file_id ) ; 
	subl	$8, %esp
	movl	8(%ebp), %eax
	movl	%eax, 0(%esp)
	movl	%ebp, %eax
	addl	$-20, %eax
	movl	(%eax), %eax
	addl	$536, %eax
	movl	(%eax), %eax
	movl	%eax, 4(%esp)
	call	getFileOfList
	addl	$8, %esp
	movl	%eax, -576(%ebp)
	jmp	linker_produce_endif_268

linker_produce_elsebl_268:

linker_produce_endif_268:

	#debug: assignment: result = replaceMarkers ( instance , & replaced_line , line , & curr_file -> markers ) ; 
	subl	$16, %esp
	movl	8(%ebp), %eax
	movl	%eax, 0(%esp)
	movl	%ebp, %eax
	addl	$-572, %eax
	movl	%eax, 4(%esp)
	movl	-20(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	%ebp, %eax
	addl	$-576, %eax
	movl	(%eax), %eax
	addl	$264, %eax
	movl	%eax, 12(%esp)
	call	replaceMarkers
	addl	$16, %esp
	movl	%eax, -12(%ebp)
	#debug: if: result != 0 
	pushl	-12(%ebp)
	popl	%ebx
	cmpl	$0, %ebx
	movl	$1, %eax
	jne	linker_produce_reltrue_271
	movl	$0, %eax
linker_produce_reltrue_271:
	testl	%eax, %eax
	jnz	linker_produce_ifbl_270
	jmp	linker_produce_elsebl_270
linker_produce_ifbl_270:
	#debug: return: return result ; 
	movl	-12(%ebp), %eax
	jmp	linker_produce_ret
	jmp	linker_produce_endif_270

linker_produce_elsebl_270:

linker_produce_endif_270:

	#debug: func-call: appendOutput ( instance , replaced_line . buffer ) 
	subl	$8, %esp
	movl	8(%ebp), %eax
	movl	%eax, 0(%esp)
	movl	%ebp, %eax
	addl	$-572, %eax
	addl	$0, %eax
	movl	%eax, 4(%esp)
	call	appendOutput
	addl	$8, %esp
	#debug: func-call: appendOutput ( instance , "\n" ) 
	subl	$8, %esp
	movl	8(%ebp), %eax
	movl	%eax, 0(%esp)
	movl	$symtab+853, 4(%esp)
	call	appendOutput
	addl	$8, %esp
	#debug: assignment: last_file_id = line -> file_id ; 
	movl	%ebp, %eax
	addl	$-20, %eax
	movl	(%eax), %eax
	addl	$536, %eax
	movl	(%eax), %eax
	movl	%eax, -16(%ebp)
	#debug: assignment: line = Get_Next_In_LinesList ( line ) ; 
	subl	$4, %esp
	movl	-20(%ebp), %eax
	movl	%eax, 0(%esp)
	call	Get_Next_In_LinesList
	addl	$4, %esp
	movl	%eax, -20(%ebp)
	jmp	linker_produce_while_266
linker_produce_endwhile_266:

	#debug: func-call: appendOutput ( instance , "\n.section .data\n\n" ) 
	subl	$8, %esp
	movl	8(%ebp), %eax
	movl	%eax, 0(%esp)
	movl	$symtab+879, 4(%esp)
	call	appendOutput
	addl	$8, %esp
	#debug: assignment: line = Get_Front_Of_LinesList ( & instance -> data_section ) ; 
	subl	$4, %esp
	movl	%ebp, %eax
	addl	$8, %eax
	movl	(%eax), %eax
	addl	$40, %eax
	movl	%eax, 0(%esp)
	call	Get_Front_Of_LinesList
	addl	$4, %esp
	movl	%eax, -20(%ebp)
	#debug: while: line != 0 
linker_produce_while_272:
	pushl	-20(%ebp)
	popl	%ebx
	cmpl	$0, %ebx
	movl	$1, %eax
	jne	linker_produce_reltrue_273
	movl	$0, %eax
linker_produce_reltrue_273:
	testl	%eax, %eax
	jz	linker_produce_endwhile_272

	#debug: func-call: escapeBufferCharacters ( line -> buffer ) 
	subl	$4, %esp
	movl	%ebp, %eax
	addl	$-20, %eax
	movl	(%eax), %eax
	addl	$0, %eax
	movl	%eax, 0(%esp)
	call	escapeBufferCharacters
	addl	$4, %esp
	#debug: func-call: appendOutput ( instance , line -> buffer ) 
	subl	$8, %esp
	movl	8(%ebp), %eax
	movl	%eax, 0(%esp)
	movl	%ebp, %eax
	addl	$-20, %eax
	movl	(%eax), %eax
	addl	$0, %eax
	movl	%eax, 4(%esp)
	call	appendOutput
	addl	$8, %esp
	#debug: func-call: appendOutput ( instance , "\n" ) 
	subl	$8, %esp
	movl	8(%ebp), %eax
	movl	%eax, 0(%esp)
	movl	$symtab+853, 4(%esp)
	call	appendOutput
	addl	$8, %esp
	#debug: assignment: line = Get_Next_In_LinesList ( line ) ; 
	subl	$4, %esp
	movl	-20(%ebp), %eax
	movl	%eax, 0(%esp)
	call	Get_Next_In_LinesList
	addl	$4, %esp
	movl	%eax, -20(%ebp)
	jmp	linker_produce_while_272
linker_produce_endwhile_272:

	#debug: return: return 0 ; 
	movl	$0, %eax
	jmp	linker_produce_ret


linker_produce_ret:
	movl	%ebp, %esp
	popl	%ebp
	ret




# The symbol table 

.section .data
symtab:
	.string	"../include/hrwcccomp.h"
	.string	"__HRWCC__"
	.string	"LINKER_WARNING: marker [%s] already defined before - ignoring this one...\n"
	.string	"marker: [%s:"
	.string	"%d]\n"
	.string	"{%s}:"
	.string	"%d:"
	.string	"%d\n"
	.string	"LINKER_WARNING: .globl [%s] definition already found before - ignoring this one...\n"
	.string	"LINKER_WARNING: .globl [%s] definition was not found - this label will not be available in other files!\n"
	.string	"LINKER_ERROR: unrecognized .string type [%s:"
	.string	"%d] - ignoring\n"
	.string	".section"
	.string	".text"
	.string	".data"
	.string	"LINKER_WARNING: invalid .section statement [%s:"
	.string	"%d] - ignoring following lines till a valid section\n"
	.string	".globl"
	.string	"."
	.string	".string"
	.string	".byte"
	.string	".long"
	.string	".rept"
	.string	".endr"
	.string	"LINKER_ERROR: unrecognized data type [%s:"
	.string	" [@"
	.string	"]"
	.string	"LINKER_ERROR: Could not resolve marker [%s] - no definition found... "
	.string	"[%s"
	.string	":%d]\n"
	.string	"LINKER_ERROR: Line [%s] "
	.string	"is malformed! [%s:"
	.string	"# linked executable code generated by HRWCC\n\n"
	.string	"main"
	.string	"LINKER_ERROR: reference to entry point (%s) missing!\n"
	.string	".section .text\n\n"
	.string	"call "
	.string	"\n"
	.string	"pushl %eax\n"
	.string	"call exit\n\n"
	.string	"\n.section .data\n\n"

