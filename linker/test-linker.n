# gas-assembler code generated by HrwCC

.section .text
	#debug: func-def: ( int argc , char * * argv ) 
.globl main
.type main, @function
main:
	pushl	%ebp
	movl	%esp, %ebp
	subl	$64, %esp


	#debug: if: linker_create ( & instance ) < 0 
	subl	$4, %esp
	movl	%ebp, %eax
	addl	$-64, %eax
	movl	%eax, 0(%esp)
	call	linker_create
	addl	$4, %esp
	pushl	%eax
	popl	%ebx
	cmpl	$0, %ebx
	movl	$1, %eax
	jl	main_reltrue_1
	movl	$0, %eax
main_reltrue_1:
	testl	%eax, %eax
	jnz	main_ifbl_0
	jmp	main_elsebl_0
main_ifbl_0:
	#debug: func-call: puts ( "Could not initialize linker\n" ) 
	subl	$4, %esp
	movl	$symtab+0, 0(%esp)
	call	puts
	addl	$4, %esp
	#debug: func-call: exit ( 1 ) 
	subl	$4, %esp
	movl	$1, 0(%esp)
	call	exit
	addl	$4, %esp
	jmp	main_endif_0

main_elsebl_0:

main_endif_0:

	#debug: assignment: infile_fd = open ( "testfiles/test.n" , 0 , 0 ) ; 
	subl	$12, %esp
	movl	$symtab+29, 0(%esp)
	movl	$0, 4(%esp)
	movl	$0, 8(%esp)
	call	open
	addl	$12, %esp
	movl	%eax, -4(%ebp)
	#debug: assignment: outfile_fd = open ( "testfiles/test.s" , 64 | 512 | 1 , 6 * 8 * 8 + 4 * 8 + 4 ) ; 
	subl	$12, %esp
	movl	$symtab+46, 0(%esp)
	pushl	$64
	popl	%ebx
	orl	$512, %ebx
	pushl	%ebx
	popl	%ebx
	orl	$1, %ebx
	pushl	%ebx
	popl	%eax
	movl	%eax, 4(%esp)
	pushl	$6
	popl	%ebx
	imull	$8, %ebx
	pushl	%ebx
	popl	%ebx
	imull	$8, %ebx
	pushl	%ebx
	popl	%eax
	pushl	%eax
	pushl	$4
	popl	%ebx
	imull	$8, %ebx
	pushl	%ebx
	popl	%eax
	popl	%ebx
	addl	%eax, %ebx
	pushl	%ebx
	popl	%ebx
	addl	$4, %ebx
	pushl	%ebx
	popl	%eax
	movl	%eax, 8(%esp)
	call	open
	addl	$12, %esp
	movl	%eax, -8(%ebp)
	#debug: if: infile_fd < 0 || outfile_fd < 0 
	pushl	-4(%ebp)
	popl	%ebx
	cmpl	$0, %ebx
	movl	$1, %eax
	jl	main_reltrue_4
	movl	$0, %eax
main_reltrue_4:
	testl	%eax, %eax
	jnz	main_logexprtrue_3
	pushl	-8(%ebp)
	popl	%ebx
	cmpl	$0, %ebx
	movl	$1, %eax
	jl	main_reltrue_5
	movl	$0, %eax
main_reltrue_5:
	testl	%eax, %eax
	jnz	main_logexprtrue_3
	movl	$0, %eax
	jmp	main_logexprfalse_3
main_logexprtrue_3:
	movl	$1, %eax
main_logexprfalse_3:
	testl	%eax, %eax
	jnz	main_ifbl_2
	jmp	main_elsebl_2
main_ifbl_2:
	#debug: func-call: linker_destroy ( & instance ) 
	subl	$4, %esp
	movl	%ebp, %eax
	addl	$-64, %eax
	movl	%eax, 0(%esp)
	call	linker_destroy
	addl	$4, %esp
	#debug: func-call: puts ( "Could not open file\n" ) 
	subl	$4, %esp
	movl	$symtab+63, 0(%esp)
	call	puts
	addl	$4, %esp
	#debug: func-call: exit ( 1 ) 
	subl	$4, %esp
	movl	$1, 0(%esp)
	call	exit
	addl	$4, %esp
	jmp	main_endif_2

main_elsebl_2:

main_endif_2:

	#debug: if: asmopt_execute ( infile_fd , outfile_fd ) < 0 
	subl	$8, %esp
	movl	-4(%ebp), %eax
	movl	%eax, 0(%esp)
	movl	-8(%ebp), %eax
	movl	%eax, 4(%esp)
	call	asmopt_execute
	addl	$8, %esp
	pushl	%eax
	popl	%ebx
	cmpl	$0, %ebx
	movl	$1, %eax
	jl	main_reltrue_7
	movl	$0, %eax
main_reltrue_7:
	testl	%eax, %eax
	jnz	main_ifbl_6
	jmp	main_elsebl_6
main_ifbl_6:
	#debug: func-call: linker_destroy ( & instance ) 
	subl	$4, %esp
	movl	%ebp, %eax
	addl	$-64, %eax
	movl	%eax, 0(%esp)
	call	linker_destroy
	addl	$4, %esp
	#debug: func-call: puts ( "Could not optimize file\n" ) 
	subl	$4, %esp
	movl	$symtab+84, 0(%esp)
	call	puts
	addl	$4, %esp
	#debug: func-call: exit ( 1 ) 
	subl	$4, %esp
	movl	$1, 0(%esp)
	call	exit
	addl	$4, %esp
	jmp	main_endif_6

main_elsebl_6:

main_endif_6:

	#debug: if: linker_appendFile ( & instance , "testfiles/test.s" , 1 ) < 0 
	subl	$12, %esp
	movl	%ebp, %eax
	addl	$-64, %eax
	movl	%eax, 0(%esp)
	movl	$symtab+46, 4(%esp)
	movl	$1, 8(%esp)
	call	linker_appendFile
	addl	$12, %esp
	pushl	%eax
	popl	%ebx
	cmpl	$0, %ebx
	movl	$1, %eax
	jl	main_reltrue_9
	movl	$0, %eax
main_reltrue_9:
	testl	%eax, %eax
	jnz	main_ifbl_8
	jmp	main_elsebl_8
main_ifbl_8:
	#debug: func-call: linker_destroy ( & instance ) 
	subl	$4, %esp
	movl	%ebp, %eax
	addl	$-64, %eax
	movl	%eax, 0(%esp)
	call	linker_destroy
	addl	$4, %esp
	#debug: func-call: puts ( "Could not append file\n" ) 
	subl	$4, %esp
	movl	$symtab+109, 0(%esp)
	call	puts
	addl	$4, %esp
	#debug: func-call: exit ( 1 ) 
	subl	$4, %esp
	movl	$1, 0(%esp)
	call	exit
	addl	$4, %esp
	jmp	main_endif_8

main_elsebl_8:

main_endif_8:

	#debug: if: linker_appendFile ( & instance , "testfiles/output.s" , 1 ) < 0 
	subl	$12, %esp
	movl	%ebp, %eax
	addl	$-64, %eax
	movl	%eax, 0(%esp)
	movl	$symtab+132, 4(%esp)
	movl	$1, 8(%esp)
	call	linker_appendFile
	addl	$12, %esp
	pushl	%eax
	popl	%ebx
	cmpl	$0, %ebx
	movl	$1, %eax
	jl	main_reltrue_11
	movl	$0, %eax
main_reltrue_11:
	testl	%eax, %eax
	jnz	main_ifbl_10
	jmp	main_elsebl_10
main_ifbl_10:
	#debug: func-call: linker_destroy ( & instance ) 
	subl	$4, %esp
	movl	%ebp, %eax
	addl	$-64, %eax
	movl	%eax, 0(%esp)
	call	linker_destroy
	addl	$4, %esp
	#debug: func-call: puts ( "Could not append file\n" ) 
	subl	$4, %esp
	movl	$symtab+109, 0(%esp)
	call	puts
	addl	$4, %esp
	#debug: func-call: exit ( 1 ) 
	subl	$4, %esp
	movl	$1, 0(%esp)
	call	exit
	addl	$4, %esp
	jmp	main_endif_10

main_elsebl_10:

main_endif_10:

	#debug: if: linker_produce ( & instance , "output.exe" ) < 0 
	subl	$8, %esp
	movl	%ebp, %eax
	addl	$-64, %eax
	movl	%eax, 0(%esp)
	movl	$symtab+151, 4(%esp)
	call	linker_produce
	addl	$8, %esp
	pushl	%eax
	popl	%ebx
	cmpl	$0, %ebx
	movl	$1, %eax
	jl	main_reltrue_13
	movl	$0, %eax
main_reltrue_13:
	testl	%eax, %eax
	jnz	main_ifbl_12
	jmp	main_elsebl_12
main_ifbl_12:
	#debug: func-call: linker_destroy ( & instance ) 
	subl	$4, %esp
	movl	%ebp, %eax
	addl	$-64, %eax
	movl	%eax, 0(%esp)
	call	linker_destroy
	addl	$4, %esp
	#debug: func-call: puts ( "Could not produce exec file\n" ) 
	subl	$4, %esp
	movl	$symtab+162, 0(%esp)
	call	puts
	addl	$4, %esp
	#debug: func-call: exit ( 1 ) 
	subl	$4, %esp
	movl	$1, 0(%esp)
	call	exit
	addl	$4, %esp
	jmp	main_endif_12

main_elsebl_12:

main_endif_12:

	#debug: func-call: linker_destroy ( & instance ) 
	subl	$4, %esp
	movl	%ebp, %eax
	addl	$-64, %eax
	movl	%eax, 0(%esp)
	call	linker_destroy
	addl	$4, %esp
	#debug: return: return 0 ; 
	movl	$0, %eax
	jmp	main_ret


main_ret:
	movl	%ebp, %esp
	popl	%ebp
	ret




# The symbol table 

.section .data
symtab:
	.string	"Could not initialize linker\n"
	.string	"testfiles/test.n"
	.string	"testfiles/test.s"
	.string	"Could not open file\n"
	.string	"Could not optimize file\n"
	.string	"Could not append file\n"
	.string	"testfiles/output.s"
	.string	"output.exe"
	.string	"Could not produce exec file\n"

