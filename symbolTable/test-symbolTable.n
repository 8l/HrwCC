# gas-assembler code generated by HrwCC

.section .text
	#debug: func-def: ( ) 
.globl test_Sizeof
.type test_Sizeof, @function
test_Sizeof:
	pushl	%ebp
	movl	%esp, %ebp
	subl	$21521, %esp


	#debug: func-call: puts ( "\n\nTest sizeof.c\n" ) 
	subl	$4, %esp
	movl	$symtab+0, 0(%esp)
	call	puts
	addl	$4, %esp
	#debug: func-call: puts ( "Create preproc..." ) 
	subl	$4, %esp
	movl	$symtab+17, 0(%esp)
	call	puts
	addl	$4, %esp
	#debug: if: preproc_create ( & testpreproc , "testdata/sizeof.c" ) 
	subl	$8, %esp
	movl	%ebp, %eax
	addl	$-20728, %eax
	movl	%eax, 0(%esp)
	movl	$symtab+35, 4(%esp)
	call	preproc_create
	addl	$8, %esp
	testl	%eax, %eax
	jnz	test_Sizeof_ifbl_0
	jmp	test_Sizeof_elsebl_0
test_Sizeof_ifbl_0:
	#debug: return: return ; 
	jmp	test_Sizeof_ret
	jmp	test_Sizeof_endif_0

test_Sizeof_elsebl_0:

test_Sizeof_endif_0:

	#debug: func-call: puts ( "Init scanner..." ) 
	subl	$4, %esp
	movl	$symtab+53, 0(%esp)
	call	puts
	addl	$4, %esp
	#debug: func-call: scanner_init ( & testscanner , & testpreproc ) 
	subl	$8, %esp
	movl	%ebp, %eax
	addl	$-20749, %eax
	movl	%eax, 0(%esp)
	movl	%ebp, %eax
	addl	$-20728, %eax
	movl	%eax, 4(%esp)
	call	scanner_init
	addl	$8, %esp
	#debug: func-call: puts ( "Init parser..." ) 
	subl	$4, %esp
	movl	$symtab+69, 0(%esp)
	call	puts
	addl	$4, %esp
	#debug: func-call: parser_init ( & testparser , & testscanner ) 
	subl	$8, %esp
	movl	%ebp, %eax
	addl	$-21345, %eax
	movl	%eax, 0(%esp)
	movl	%ebp, %eax
	addl	$-20749, %eax
	movl	%eax, 4(%esp)
	call	parser_init
	addl	$8, %esp
	#debug: func-call: puts ( "Create symbol table...\n" ) 
	subl	$4, %esp
	movl	$symtab+84, 0(%esp)
	call	puts
	addl	$4, %esp
	#debug: func-call: symbol_CreateSymbolTable ( & testparser , & testsymtable ) 
	subl	$8, %esp
	movl	%ebp, %eax
	addl	$-21345, %eax
	movl	%eax, 0(%esp)
	movl	%ebp, %eax
	addl	$-21361, %eax
	movl	%eax, 4(%esp)
	call	symbol_CreateSymbolTable
	addl	$8, %esp
	#debug: assignment: tree = syntax_CreateTreeNode ( ) ; 
	subl	$0, %esp
	call	syntax_CreateTreeNode
	addl	$0, %esp
	movl	%eax, -21365(%ebp)
	#debug: func-call: parser_buildSyntaxTree ( & testparser , tree ) 
	subl	$8, %esp
	movl	%ebp, %eax
	addl	$-21345, %eax
	movl	%eax, 0(%esp)
	movl	-21365(%ebp), %eax
	movl	%eax, 4(%esp)
	call	parser_buildSyntaxTree
	addl	$8, %esp
	#debug: if: testparser . cnterrors > 0 
	movl	%ebp, %eax
	addl	$-21345, %eax
	addl	$12, %eax
	movl	(%eax), %eax
	pushl	%eax
	popl	%ebx
	cmpl	$0, %ebx
	movl	$1, %eax
	jg	test_Sizeof_reltrue_2
	movl	$0, %eax
test_Sizeof_reltrue_2:
	testl	%eax, %eax
	jnz	test_Sizeof_ifbl_1
	jmp	test_Sizeof_elsebl_1
test_Sizeof_ifbl_1:
	#debug: func-call: printf ( "Detected %d errors.\n" , testparser . cnterrors ) 
	subl	$8, %esp
	movl	$symtab+108, 0(%esp)
	movl	%ebp, %eax
	addl	$-21345, %eax
	addl	$12, %eax
	movl	(%eax), %eax
	movl	%eax, 4(%esp)
	call	printf
	addl	$8, %esp
	#debug: return: return ; 
	jmp	test_Sizeof_ret
	jmp	test_Sizeof_endif_1

test_Sizeof_elsebl_1:

test_Sizeof_endif_1:

	#debug: assignment: tmp = syntax_GetChild ( tree , 0 ) ; 
	subl	$8, %esp
	movl	-21365(%ebp), %eax
	movl	%eax, 0(%esp)
	movl	$0, 4(%esp)
	call	syntax_GetChild
	addl	$8, %esp
	movl	%eax, -21373(%ebp)
	#debug: func-call: symbol_DefineGlobalVariable ( & testsymtable , tmp ) 
	subl	$8, %esp
	movl	%ebp, %eax
	addl	$-21361, %eax
	movl	%eax, 0(%esp)
	movl	-21373(%ebp), %eax
	movl	%eax, 4(%esp)
	call	symbol_DefineGlobalVariable
	addl	$8, %esp
	#debug: assignment: tmp = syntax_GetChild ( tree , 1 ) ; 
	subl	$8, %esp
	movl	-21365(%ebp), %eax
	movl	%eax, 0(%esp)
	movl	$1, 4(%esp)
	call	syntax_GetChild
	addl	$8, %esp
	movl	%eax, -21373(%ebp)
	#debug: func-call: symbol_DefineGlobalVariable ( & testsymtable , tmp ) 
	subl	$8, %esp
	movl	%ebp, %eax
	addl	$-21361, %eax
	movl	%eax, 0(%esp)
	movl	-21373(%ebp), %eax
	movl	%eax, 4(%esp)
	call	symbol_DefineGlobalVariable
	addl	$8, %esp
	#debug: assignment: tmp = syntax_GetChild ( tree , 2 ) ; 
	subl	$8, %esp
	movl	-21365(%ebp), %eax
	movl	%eax, 0(%esp)
	movl	$2, 4(%esp)
	call	syntax_GetChild
	addl	$8, %esp
	movl	%eax, -21373(%ebp)
	#debug: func-call: symbol_DefineGlobalVariable ( & testsymtable , tmp ) 
	subl	$8, %esp
	movl	%ebp, %eax
	addl	$-21361, %eax
	movl	%eax, 0(%esp)
	movl	-21373(%ebp), %eax
	movl	%eax, 4(%esp)
	call	symbol_DefineGlobalVariable
	addl	$8, %esp
	#debug: assignment: tmp = syntax_GetChild ( tree , 3 ) ; 
	subl	$8, %esp
	movl	-21365(%ebp), %eax
	movl	%eax, 0(%esp)
	movl	$3, 4(%esp)
	call	syntax_GetChild
	addl	$8, %esp
	movl	%eax, -21373(%ebp)
	#debug: func-call: symbol_DefineStruct ( & testsymtable , tmp ) 
	subl	$8, %esp
	movl	%ebp, %eax
	addl	$-21361, %eax
	movl	%eax, 0(%esp)
	movl	-21373(%ebp), %eax
	movl	%eax, 4(%esp)
	call	symbol_DefineStruct
	addl	$8, %esp
	#debug: assignment: tmp = syntax_GetChild ( tree , 4 ) ; 
	subl	$8, %esp
	movl	-21365(%ebp), %eax
	movl	%eax, 0(%esp)
	movl	$4, 4(%esp)
	call	syntax_GetChild
	addl	$8, %esp
	movl	%eax, -21373(%ebp)
	#debug: func-call: symbol_DefineStruct ( & testsymtable , tmp ) 
	subl	$8, %esp
	movl	%ebp, %eax
	addl	$-21361, %eax
	movl	%eax, 0(%esp)
	movl	-21373(%ebp), %eax
	movl	%eax, 4(%esp)
	call	symbol_DefineStruct
	addl	$8, %esp
	#debug: assignment: tmp = syntax_GetChild ( tree , 5 ) ; 
	subl	$8, %esp
	movl	-21365(%ebp), %eax
	movl	%eax, 0(%esp)
	movl	$5, 4(%esp)
	call	syntax_GetChild
	addl	$8, %esp
	movl	%eax, -21373(%ebp)
	#debug: func-call: symbol_DefineGlobalVariable ( & testsymtable , tmp ) 
	subl	$8, %esp
	movl	%ebp, %eax
	addl	$-21361, %eax
	movl	%eax, 0(%esp)
	movl	-21373(%ebp), %eax
	movl	%eax, 4(%esp)
	call	symbol_DefineGlobalVariable
	addl	$8, %esp
	#debug: assignment: tmp = syntax_GetChild ( tree , 6 ) ; 
	subl	$8, %esp
	movl	-21365(%ebp), %eax
	movl	%eax, 0(%esp)
	movl	$6, 4(%esp)
	call	syntax_GetChild
	addl	$8, %esp
	movl	%eax, -21373(%ebp)
	#debug: func-call: symbol_DefineGlobalVariable ( & testsymtable , tmp ) 
	subl	$8, %esp
	movl	%ebp, %eax
	addl	$-21361, %eax
	movl	%eax, 0(%esp)
	movl	-21373(%ebp), %eax
	movl	%eax, 4(%esp)
	call	symbol_DefineGlobalVariable
	addl	$8, %esp
	#debug: assignment: tmp = syntax_GetChild ( tree , 7 ) ; 
	subl	$8, %esp
	movl	-21365(%ebp), %eax
	movl	%eax, 0(%esp)
	movl	$7, 4(%esp)
	call	syntax_GetChild
	addl	$8, %esp
	movl	%eax, -21373(%ebp)
	#debug: func-call: symbol_DefineGlobalVariable ( & testsymtable , tmp ) 
	subl	$8, %esp
	movl	%ebp, %eax
	addl	$-21361, %eax
	movl	%eax, 0(%esp)
	movl	-21373(%ebp), %eax
	movl	%eax, 4(%esp)
	call	symbol_DefineGlobalVariable
	addl	$8, %esp
	#debug: assignment: tmp = syntax_GetChild ( tree , 8 ) ; 
	subl	$8, %esp
	movl	-21365(%ebp), %eax
	movl	%eax, 0(%esp)
	movl	$8, 4(%esp)
	call	syntax_GetChild
	addl	$8, %esp
	movl	%eax, -21373(%ebp)
	#debug: func-call: symbol_DefineGlobalVariable ( & testsymtable , tmp ) 
	subl	$8, %esp
	movl	%ebp, %eax
	addl	$-21361, %eax
	movl	%eax, 0(%esp)
	movl	-21373(%ebp), %eax
	movl	%eax, 4(%esp)
	call	symbol_DefineGlobalVariable
	addl	$8, %esp
	#debug: assignment: tmp = syntax_GetChild ( tree , 9 ) ; 
	subl	$8, %esp
	movl	-21365(%ebp), %eax
	movl	%eax, 0(%esp)
	movl	$9, 4(%esp)
	call	syntax_GetChild
	addl	$8, %esp
	movl	%eax, -21373(%ebp)
	#debug: func-call: symbol_DefineGlobalVariable ( & testsymtable , tmp ) 
	subl	$8, %esp
	movl	%ebp, %eax
	addl	$-21361, %eax
	movl	%eax, 0(%esp)
	movl	-21373(%ebp), %eax
	movl	%eax, 4(%esp)
	call	symbol_DefineGlobalVariable
	addl	$8, %esp
	#debug: assignment: tmp = syntax_GetChild ( tree , 10 ) ; 
	subl	$8, %esp
	movl	-21365(%ebp), %eax
	movl	%eax, 0(%esp)
	movl	$10, 4(%esp)
	call	syntax_GetChild
	addl	$8, %esp
	movl	%eax, -21373(%ebp)
	#debug: func-call: symbol_DefineFunction ( & testsymtable , tmp ) 
	subl	$8, %esp
	movl	%ebp, %eax
	addl	$-21361, %eax
	movl	%eax, 0(%esp)
	movl	-21373(%ebp), %eax
	movl	%eax, 4(%esp)
	call	symbol_DefineFunction
	addl	$8, %esp
	#debug: assignment: body = syntax_GetChild ( tmp , 2 ) ; 
	subl	$8, %esp
	movl	-21373(%ebp), %eax
	movl	%eax, 0(%esp)
	movl	$2, 4(%esp)
	call	syntax_GetChild
	addl	$8, %esp
	movl	%eax, -21369(%ebp)
	#debug: assignment: tmp = syntax_GetChild ( body , 1 ) ; 
	subl	$8, %esp
	movl	-21369(%ebp), %eax
	movl	%eax, 0(%esp)
	movl	$1, 4(%esp)
	call	syntax_GetChild
	addl	$8, %esp
	movl	%eax, -21373(%ebp)
	#debug: func-call: symbol_DefineLocalVariable ( & testsymtable , tmp ) 
	subl	$8, %esp
	movl	%ebp, %eax
	addl	$-21361, %eax
	movl	%eax, 0(%esp)
	movl	-21373(%ebp), %eax
	movl	%eax, 4(%esp)
	call	symbol_DefineLocalVariable
	addl	$8, %esp
	#debug: assignment: tmp = syntax_GetChild ( body , 2 ) ; 
	subl	$8, %esp
	movl	-21369(%ebp), %eax
	movl	%eax, 0(%esp)
	movl	$2, 4(%esp)
	call	syntax_GetChild
	addl	$8, %esp
	movl	%eax, -21373(%ebp)
	#debug: func-call: symbol_DefineLocalVariable ( & testsymtable , tmp ) 
	subl	$8, %esp
	movl	%ebp, %eax
	addl	$-21361, %eax
	movl	%eax, 0(%esp)
	movl	-21373(%ebp), %eax
	movl	%eax, 4(%esp)
	call	symbol_DefineLocalVariable
	addl	$8, %esp
	#debug: assignment: tmp = syntax_GetChild ( body , 3 ) ; 
	subl	$8, %esp
	movl	-21369(%ebp), %eax
	movl	%eax, 0(%esp)
	movl	$3, 4(%esp)
	call	syntax_GetChild
	addl	$8, %esp
	movl	%eax, -21373(%ebp)
	#debug: func-call: symbol_DefineLocalVariable ( & testsymtable , tmp ) 
	subl	$8, %esp
	movl	%ebp, %eax
	addl	$-21361, %eax
	movl	%eax, 0(%esp)
	movl	-21373(%ebp), %eax
	movl	%eax, 4(%esp)
	call	symbol_DefineLocalVariable
	addl	$8, %esp
	#debug: assignment: tmp = syntax_GetChild ( body , 4 ) ; 
	subl	$8, %esp
	movl	-21369(%ebp), %eax
	movl	%eax, 0(%esp)
	movl	$4, 4(%esp)
	call	syntax_GetChild
	addl	$8, %esp
	movl	%eax, -21373(%ebp)
	#debug: func-call: symbol_DefineLocalVariable ( & testsymtable , tmp ) 
	subl	$8, %esp
	movl	%ebp, %eax
	addl	$-21361, %eax
	movl	%eax, 0(%esp)
	movl	-21373(%ebp), %eax
	movl	%eax, 4(%esp)
	call	symbol_DefineLocalVariable
	addl	$8, %esp
	#debug: assignment: tmp = syntax_GetChild ( body , 5 ) ; 
	subl	$8, %esp
	movl	-21369(%ebp), %eax
	movl	%eax, 0(%esp)
	movl	$5, 4(%esp)
	call	syntax_GetChild
	addl	$8, %esp
	movl	%eax, -21373(%ebp)
	#debug: func-call: symbol_DefineLocalVariable ( & testsymtable , tmp ) 
	subl	$8, %esp
	movl	%ebp, %eax
	addl	$-21361, %eax
	movl	%eax, 0(%esp)
	movl	-21373(%ebp), %eax
	movl	%eax, 4(%esp)
	call	symbol_DefineLocalVariable
	addl	$8, %esp
	#debug: assignment: tmp = syntax_GetChild ( body , 6 ) ; 
	subl	$8, %esp
	movl	-21369(%ebp), %eax
	movl	%eax, 0(%esp)
	movl	$6, 4(%esp)
	call	syntax_GetChild
	addl	$8, %esp
	movl	%eax, -21373(%ebp)
	#debug: func-call: symbol_DefineLocalVariable ( & testsymtable , tmp ) 
	subl	$8, %esp
	movl	%ebp, %eax
	addl	$-21361, %eax
	movl	%eax, 0(%esp)
	movl	-21373(%ebp), %eax
	movl	%eax, 4(%esp)
	call	symbol_DefineLocalVariable
	addl	$8, %esp
	#debug: assignment: tmp = syntax_GetChild ( body , 7 ) ; 
	subl	$8, %esp
	movl	-21369(%ebp), %eax
	movl	%eax, 0(%esp)
	movl	$7, 4(%esp)
	call	syntax_GetChild
	addl	$8, %esp
	movl	%eax, -21373(%ebp)
	#debug: assignment: tmp = syntax_GetChild ( tmp , 0 ) ; 
	subl	$8, %esp
	movl	-21373(%ebp), %eax
	movl	%eax, 0(%esp)
	movl	$0, 4(%esp)
	call	syntax_GetChild
	addl	$8, %esp
	movl	%eax, -21373(%ebp)
	#debug: assignment: tmp = syntax_GetChild ( tmp , 0 ) ; 
	subl	$8, %esp
	movl	-21373(%ebp), %eax
	movl	%eax, 0(%esp)
	movl	$0, 4(%esp)
	call	syntax_GetChild
	addl	$8, %esp
	movl	%eax, -21373(%ebp)
	#debug: assignment: tmp = syntax_GetChild ( tmp , 2 ) ; 
	subl	$8, %esp
	movl	-21373(%ebp), %eax
	movl	%eax, 0(%esp)
	movl	$2, 4(%esp)
	call	syntax_GetChild
	addl	$8, %esp
	movl	%eax, -21373(%ebp)
	#debug: assignment: tmp = syntax_GetChild ( tmp , 0 ) ; 
	subl	$8, %esp
	movl	-21373(%ebp), %eax
	movl	%eax, 0(%esp)
	movl	$0, 4(%esp)
	call	syntax_GetChild
	addl	$8, %esp
	movl	%eax, -21373(%ebp)
	#debug: assignment: tmp = syntax_GetChild ( tmp , 0 ) ; 
	subl	$8, %esp
	movl	-21373(%ebp), %eax
	movl	%eax, 0(%esp)
	movl	$0, 4(%esp)
	call	syntax_GetChild
	addl	$8, %esp
	movl	%eax, -21373(%ebp)
	#debug: assignment: tmp = syntax_GetChild ( tmp , 0 ) ; 
	subl	$8, %esp
	movl	-21373(%ebp), %eax
	movl	%eax, 0(%esp)
	movl	$0, 4(%esp)
	call	syntax_GetChild
	addl	$8, %esp
	movl	%eax, -21373(%ebp)
	#debug: assignment: tmp = syntax_GetChild ( tmp , 0 ) ; 
	subl	$8, %esp
	movl	-21373(%ebp), %eax
	movl	%eax, 0(%esp)
	movl	$0, 4(%esp)
	call	syntax_GetChild
	addl	$8, %esp
	movl	%eax, -21373(%ebp)
	#debug: assignment: tmp = syntax_GetChild ( tmp , 0 ) ; 
	subl	$8, %esp
	movl	-21373(%ebp), %eax
	movl	%eax, 0(%esp)
	movl	$0, 4(%esp)
	call	syntax_GetChild
	addl	$8, %esp
	movl	%eax, -21373(%ebp)
	#debug: assignment: tmp = syntax_GetChild ( tmp , 0 ) ; 
	subl	$8, %esp
	movl	-21373(%ebp), %eax
	movl	%eax, 0(%esp)
	movl	$0, 4(%esp)
	call	syntax_GetChild
	addl	$8, %esp
	movl	%eax, -21373(%ebp)
	#debug: assignment: tmp = syntax_GetChild ( tmp , 0 ) ; 
	subl	$8, %esp
	movl	-21373(%ebp), %eax
	movl	%eax, 0(%esp)
	movl	$0, 4(%esp)
	call	syntax_GetChild
	addl	$8, %esp
	movl	%eax, -21373(%ebp)
	#debug: assignment: tmp = syntax_GetChild ( tmp , 0 ) ; 
	subl	$8, %esp
	movl	-21373(%ebp), %eax
	movl	%eax, 0(%esp)
	movl	$0, 4(%esp)
	call	syntax_GetChild
	addl	$8, %esp
	movl	%eax, -21373(%ebp)
	#debug: func-call: symbol_DefineString ( & testsymtable , tmp ) 
	subl	$8, %esp
	movl	%ebp, %eax
	addl	$-21361, %eax
	movl	%eax, 0(%esp)
	movl	-21373(%ebp), %eax
	movl	%eax, 4(%esp)
	call	symbol_DefineString
	addl	$8, %esp
	#debug: func-call: printf ( "Sizeof %s" , tmp -> tok . content ) 
	subl	$8, %esp
	movl	$symtab+129, 0(%esp)
	movl	%ebp, %eax
	addl	$-21373, %eax
	movl	(%eax), %eax
	addl	$8, %eax
	addl	$16, %eax
	movl	%eax, 4(%esp)
	call	printf
	addl	$8, %esp
	#debug: func-call: printf ( ": %d\n" , symbol_Sizeof_String ( & testsymtable , tmp ) ) 
	subl	$8, %esp
	movl	$symtab+139, 0(%esp)
	subl	$8, %esp
	movl	%ebp, %eax
	addl	$-21361, %eax
	movl	%eax, 0(%esp)
	movl	-21373(%ebp), %eax
	movl	%eax, 4(%esp)
	call	symbol_Sizeof_String
	addl	$8, %esp
	movl	%eax, 4(%esp)
	call	printf
	addl	$8, %esp
	#debug: assignment: tok . type = 43 ; 
	movl	%ebp, %eax
	addl	$-21517, %eax
	addl	$0, %eax
	pushl	%eax
	popl	%ebx
	movl	$43, (%ebx)
	#debug: func-call: strcpy ( tok . content , "a" ) 
	subl	$8, %esp
	movl	%ebp, %eax
	addl	$-21517, %eax
	addl	$16, %eax
	movl	%eax, 0(%esp)
	movl	$symtab+145, 4(%esp)
	call	strcpy
	addl	$8, %esp
	#debug: assignment: node = symbol_FindVariable ( & testsymtable , tok ) ; 
	subl	$148, %esp
	movl	%ebp, %eax
	addl	$-21361, %eax
	movl	%eax, 0(%esp)
	movl	%ebp, %eax
	addl	$-21517, %eax
	movl	%esp, %ebx
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	call	symbol_FindVariable
	addl	$148, %esp
	movl	%eax, -21521(%ebp)
	#debug: func-call: printf ( "\nType of variable \"a\": %d\n" , node -> type ) 
	subl	$8, %esp
	movl	$symtab+147, 0(%esp)
	movl	%ebp, %eax
	addl	$-21521, %eax
	movl	(%eax), %eax
	addl	$144, %eax
	movl	(%eax), %eax
	movl	%eax, 4(%esp)
	call	printf
	addl	$8, %esp
	#debug: func-call: strcpy ( tok . content , "mystruct" ) 
	subl	$8, %esp
	movl	%ebp, %eax
	addl	$-21517, %eax
	addl	$16, %eax
	movl	%eax, 0(%esp)
	movl	$symtab+174, 4(%esp)
	call	strcpy
	addl	$8, %esp
	#debug: assignment: node = symbol_FindStruct ( & testsymtable , tok ) ; 
	subl	$148, %esp
	movl	%ebp, %eax
	addl	$-21361, %eax
	movl	%eax, 0(%esp)
	movl	%ebp, %eax
	addl	$-21517, %eax
	movl	%esp, %ebx
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	call	symbol_FindStruct
	addl	$148, %esp
	movl	%eax, -21521(%ebp)
	#debug: func-call: strcpy ( tok . content , "c" ) 
	subl	$8, %esp
	movl	%ebp, %eax
	addl	$-21517, %eax
	addl	$16, %eax
	movl	%eax, 0(%esp)
	movl	$symtab+183, 4(%esp)
	call	strcpy
	addl	$8, %esp
	#debug: func-call: printf ( "Offset of 'c' in 'mystruct': %d\n" , symbol_GetOffsetInStruct ( & testsymtable , node , tok ) ) 
	subl	$8, %esp
	movl	$symtab+185, 0(%esp)
	subl	$152, %esp
	movl	%ebp, %eax
	addl	$-21361, %eax
	movl	%eax, 0(%esp)
	movl	-21521(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%ebp, %eax
	addl	$-21517, %eax
	movl	%esp, %ebx
	addl	$8, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	call	symbol_GetOffsetInStruct
	addl	$152, %esp
	movl	%eax, 4(%esp)
	call	printf
	addl	$8, %esp
	#debug: func-call: strcpy ( tok . content , "b" ) 
	subl	$8, %esp
	movl	%ebp, %eax
	addl	$-21517, %eax
	addl	$16, %eax
	movl	%eax, 0(%esp)
	movl	$symtab+218, 4(%esp)
	call	strcpy
	addl	$8, %esp
	#debug: assignment: node = symbol_FindGlobalVariable ( & testsymtable , tok ) ; 
	subl	$148, %esp
	movl	%ebp, %eax
	addl	$-21361, %eax
	movl	%eax, 0(%esp)
	movl	%ebp, %eax
	addl	$-21517, %eax
	movl	%esp, %ebx
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	call	symbol_FindGlobalVariable
	addl	$148, %esp
	movl	%eax, -21521(%ebp)
	#debug: func-call: printf ( "Offset of 'b' in globals: %d\n" , symbol_GetGlobalOffset ( & testsymtable , node ) ) 
	subl	$8, %esp
	movl	$symtab+220, 0(%esp)
	subl	$8, %esp
	movl	%ebp, %eax
	addl	$-21361, %eax
	movl	%eax, 0(%esp)
	movl	-21521(%ebp), %eax
	movl	%eax, 4(%esp)
	call	symbol_GetGlobalOffset
	addl	$8, %esp
	movl	%eax, 4(%esp)
	call	printf
	addl	$8, %esp
	#debug: func-call: strcpy ( tok . content , "b" ) 
	subl	$8, %esp
	movl	%ebp, %eax
	addl	$-21517, %eax
	addl	$16, %eax
	movl	%eax, 0(%esp)
	movl	$symtab+218, 4(%esp)
	call	strcpy
	addl	$8, %esp
	#debug: assignment: node = symbol_FindNonGlobalVariable ( & testsymtable , tok ) ; 
	subl	$148, %esp
	movl	%ebp, %eax
	addl	$-21361, %eax
	movl	%eax, 0(%esp)
	movl	%ebp, %eax
	addl	$-21517, %eax
	movl	%esp, %ebx
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	call	symbol_FindNonGlobalVariable
	addl	$148, %esp
	movl	%eax, -21521(%ebp)
	#debug: func-call: printf ( "Offset of 'b' in non-globals: %d\n" , symbol_GetNonGlobalOffset ( & testsymtable , node ) ) 
	subl	$8, %esp
	movl	$symtab+250, 0(%esp)
	subl	$8, %esp
	movl	%ebp, %eax
	addl	$-21361, %eax
	movl	%eax, 0(%esp)
	movl	-21521(%ebp), %eax
	movl	%eax, 4(%esp)
	call	symbol_GetNonGlobalOffset
	addl	$8, %esp
	movl	%eax, 4(%esp)
	call	printf
	addl	$8, %esp
	#debug: func-call: strcpy ( tok . content , "p2" ) 
	subl	$8, %esp
	movl	%ebp, %eax
	addl	$-21517, %eax
	addl	$16, %eax
	movl	%eax, 0(%esp)
	movl	$symtab+284, 4(%esp)
	call	strcpy
	addl	$8, %esp
	#debug: assignment: node = symbol_FindNonGlobalVariable ( & testsymtable , tok ) ; 
	subl	$148, %esp
	movl	%ebp, %eax
	addl	$-21361, %eax
	movl	%eax, 0(%esp)
	movl	%ebp, %eax
	addl	$-21517, %eax
	movl	%esp, %ebx
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	call	symbol_FindNonGlobalVariable
	addl	$148, %esp
	movl	%eax, -21521(%ebp)
	#debug: func-call: printf ( "Offset of 'p2' in non-globals: %d\n" , symbol_GetNonGlobalOffset ( & testsymtable , node ) ) 
	subl	$8, %esp
	movl	$symtab+287, 0(%esp)
	subl	$8, %esp
	movl	%ebp, %eax
	addl	$-21361, %eax
	movl	%eax, 0(%esp)
	movl	-21521(%ebp), %eax
	movl	%eax, 4(%esp)
	call	symbol_GetNonGlobalOffset
	addl	$8, %esp
	movl	%eax, 4(%esp)
	call	printf
	addl	$8, %esp
	#debug: func-call: strcpy ( tok . content , "\"hello\"" ) 
	subl	$8, %esp
	movl	%ebp, %eax
	addl	$-21517, %eax
	addl	$16, %eax
	movl	%eax, 0(%esp)
	movl	$symtab+322, 4(%esp)
	call	strcpy
	addl	$8, %esp
	#debug: assignment: node = symbol_FindString ( & testsymtable , tok ) ; 
	subl	$148, %esp
	movl	%ebp, %eax
	addl	$-21361, %eax
	movl	%eax, 0(%esp)
	movl	%ebp, %eax
	addl	$-21517, %eax
	movl	%esp, %ebx
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	call	symbol_FindString
	addl	$148, %esp
	movl	%eax, -21521(%ebp)
	#debug: func-call: printf ( "Offset of '\"hello\"' in globals: %d\n" , symbol_GetGlobalOffset ( & testsymtable , node ) ) 
	subl	$8, %esp
	movl	$symtab+330, 0(%esp)
	subl	$8, %esp
	movl	%ebp, %eax
	addl	$-21361, %eax
	movl	%eax, 0(%esp)
	movl	-21521(%ebp), %eax
	movl	%eax, 4(%esp)
	call	symbol_GetGlobalOffset
	addl	$8, %esp
	movl	%eax, 4(%esp)
	call	printf
	addl	$8, %esp
	#debug: func-call: puts ( "\nSymbol table:" ) 
	subl	$4, %esp
	movl	$symtab+366, 0(%esp)
	call	puts
	addl	$4, %esp
	#debug: func-call: symbol_printTable ( & testsymtable ) 
	subl	$4, %esp
	movl	%ebp, %eax
	addl	$-21361, %eax
	movl	%eax, 0(%esp)
	call	symbol_printTable
	addl	$4, %esp
	#debug: func-call: puts ( "\nClear non-globals" ) 
	subl	$4, %esp
	movl	$symtab+381, 0(%esp)
	call	puts
	addl	$4, %esp
	#debug: func-call: symbol_ClearNonGlobalVariables ( & testsymtable ) 
	subl	$4, %esp
	movl	%ebp, %eax
	addl	$-21361, %eax
	movl	%eax, 0(%esp)
	call	symbol_ClearNonGlobalVariables
	addl	$4, %esp
	#debug: func-call: puts ( "\nSymbol table:" ) 
	subl	$4, %esp
	movl	$symtab+366, 0(%esp)
	call	puts
	addl	$4, %esp
	#debug: func-call: symbol_printTable ( & testsymtable ) 
	subl	$4, %esp
	movl	%ebp, %eax
	addl	$-21361, %eax
	movl	%eax, 0(%esp)
	call	symbol_printTable
	addl	$4, %esp
	#debug: func-call: strcpy ( tok . content , "a" ) 
	subl	$8, %esp
	movl	%ebp, %eax
	addl	$-21517, %eax
	addl	$16, %eax
	movl	%eax, 0(%esp)
	movl	$symtab+145, 4(%esp)
	call	strcpy
	addl	$8, %esp
	#debug: assignment: node = symbol_FindVariable ( & testsymtable , tok ) ; 
	subl	$148, %esp
	movl	%ebp, %eax
	addl	$-21361, %eax
	movl	%eax, 0(%esp)
	movl	%ebp, %eax
	addl	$-21517, %eax
	movl	%esp, %ebx
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	call	symbol_FindVariable
	addl	$148, %esp
	movl	%eax, -21521(%ebp)
	#debug: func-call: printf ( "\nType of variable \"a\": %d\n" , node -> type ) 
	subl	$8, %esp
	movl	$symtab+147, 0(%esp)
	movl	%ebp, %eax
	addl	$-21521, %eax
	movl	(%eax), %eax
	addl	$144, %eax
	movl	(%eax), %eax
	movl	%eax, 4(%esp)
	call	printf
	addl	$8, %esp
	#debug: func-call: printf ( "\nEnded with %d symtable erros.\n" , testsymtable . cnterrors ) 
	subl	$8, %esp
	movl	$symtab+400, 0(%esp)
	movl	%ebp, %eax
	addl	$-21361, %eax
	addl	$4, %eax
	movl	(%eax), %eax
	movl	%eax, 4(%esp)
	call	printf
	addl	$8, %esp
	#debug: func-call: syntax_FreeSyntaxTree ( tree ) 
	subl	$4, %esp
	movl	-21365(%ebp), %eax
	movl	%eax, 0(%esp)
	call	syntax_FreeSyntaxTree
	addl	$4, %esp
	#debug: func-call: preproc_destroy ( & testpreproc ) 
	subl	$4, %esp
	movl	%ebp, %eax
	addl	$-20728, %eax
	movl	%eax, 0(%esp)
	call	preproc_destroy
	addl	$4, %esp


test_Sizeof_ret:
	movl	%ebp, %esp
	popl	%ebp
	ret




	#debug: func-def: ( ) 
.globl test_Functions
.type test_Functions, @function
test_Functions:
	pushl	%ebp
	movl	%esp, %ebp
	subl	$21369, %esp


	#debug: func-call: puts ( "\n\nTest functions.c\n" ) 
	subl	$4, %esp
	movl	$symtab+432, 0(%esp)
	call	puts
	addl	$4, %esp
	#debug: func-call: puts ( "Create preproc..." ) 
	subl	$4, %esp
	movl	$symtab+17, 0(%esp)
	call	puts
	addl	$4, %esp
	#debug: if: preproc_create ( & testpreproc , "testdata/functions.c" ) 
	subl	$8, %esp
	movl	%ebp, %eax
	addl	$-20728, %eax
	movl	%eax, 0(%esp)
	movl	$symtab+452, 4(%esp)
	call	preproc_create
	addl	$8, %esp
	testl	%eax, %eax
	jnz	test_Functions_ifbl_3
	jmp	test_Functions_elsebl_3
test_Functions_ifbl_3:
	#debug: return: return ; 
	jmp	test_Functions_ret
	jmp	test_Functions_endif_3

test_Functions_elsebl_3:

test_Functions_endif_3:

	#debug: func-call: puts ( "Init scanner..." ) 
	subl	$4, %esp
	movl	$symtab+53, 0(%esp)
	call	puts
	addl	$4, %esp
	#debug: func-call: scanner_init ( & testscanner , & testpreproc ) 
	subl	$8, %esp
	movl	%ebp, %eax
	addl	$-20749, %eax
	movl	%eax, 0(%esp)
	movl	%ebp, %eax
	addl	$-20728, %eax
	movl	%eax, 4(%esp)
	call	scanner_init
	addl	$8, %esp
	#debug: func-call: puts ( "Init parser..." ) 
	subl	$4, %esp
	movl	$symtab+69, 0(%esp)
	call	puts
	addl	$4, %esp
	#debug: func-call: parser_init ( & testparser , & testscanner ) 
	subl	$8, %esp
	movl	%ebp, %eax
	addl	$-21345, %eax
	movl	%eax, 0(%esp)
	movl	%ebp, %eax
	addl	$-20749, %eax
	movl	%eax, 4(%esp)
	call	parser_init
	addl	$8, %esp
	#debug: func-call: puts ( "Create symbol table...\n" ) 
	subl	$4, %esp
	movl	$symtab+84, 0(%esp)
	call	puts
	addl	$4, %esp
	#debug: func-call: symbol_CreateSymbolTable ( & testparser , & testsymtable ) 
	subl	$8, %esp
	movl	%ebp, %eax
	addl	$-21345, %eax
	movl	%eax, 0(%esp)
	movl	%ebp, %eax
	addl	$-21361, %eax
	movl	%eax, 4(%esp)
	call	symbol_CreateSymbolTable
	addl	$8, %esp
	#debug: assignment: tree = syntax_CreateTreeNode ( ) ; 
	subl	$0, %esp
	call	syntax_CreateTreeNode
	addl	$0, %esp
	movl	%eax, -21365(%ebp)
	#debug: func-call: parser_buildSyntaxTree ( & testparser , tree ) 
	subl	$8, %esp
	movl	%ebp, %eax
	addl	$-21345, %eax
	movl	%eax, 0(%esp)
	movl	-21365(%ebp), %eax
	movl	%eax, 4(%esp)
	call	parser_buildSyntaxTree
	addl	$8, %esp
	#debug: if: testparser . cnterrors > 0 
	movl	%ebp, %eax
	addl	$-21345, %eax
	addl	$12, %eax
	movl	(%eax), %eax
	pushl	%eax
	popl	%ebx
	cmpl	$0, %ebx
	movl	$1, %eax
	jg	test_Functions_reltrue_5
	movl	$0, %eax
test_Functions_reltrue_5:
	testl	%eax, %eax
	jnz	test_Functions_ifbl_4
	jmp	test_Functions_elsebl_4
test_Functions_ifbl_4:
	#debug: func-call: printf ( "Detected %d parser errors.\n" , testparser . cnterrors ) 
	subl	$8, %esp
	movl	$symtab+473, 0(%esp)
	movl	%ebp, %eax
	addl	$-21345, %eax
	addl	$12, %eax
	movl	(%eax), %eax
	movl	%eax, 4(%esp)
	call	printf
	addl	$8, %esp
	#debug: return: return ; 
	jmp	test_Functions_ret
	jmp	test_Functions_endif_4

test_Functions_elsebl_4:

test_Functions_endif_4:

	#debug: func-call: puts ( "define struct..." ) 
	subl	$4, %esp
	movl	$symtab+501, 0(%esp)
	call	puts
	addl	$4, %esp
	#debug: assignment: tmp = syntax_GetChild ( tree , 0 ) ; 
	subl	$8, %esp
	movl	-21365(%ebp), %eax
	movl	%eax, 0(%esp)
	movl	$0, 4(%esp)
	call	syntax_GetChild
	addl	$8, %esp
	movl	%eax, -21369(%ebp)
	#debug: func-call: symbol_DefineStruct ( & testsymtable , tmp ) 
	subl	$8, %esp
	movl	%ebp, %eax
	addl	$-21361, %eax
	movl	%eax, 0(%esp)
	movl	-21369(%ebp), %eax
	movl	%eax, 4(%esp)
	call	symbol_DefineStruct
	addl	$8, %esp
	#debug: func-call: puts ( "declare function..." ) 
	subl	$4, %esp
	movl	$symtab+518, 0(%esp)
	call	puts
	addl	$4, %esp
	#debug: assignment: tmp = syntax_GetChild ( tree , 1 ) ; 
	subl	$8, %esp
	movl	-21365(%ebp), %eax
	movl	%eax, 0(%esp)
	movl	$1, 4(%esp)
	call	syntax_GetChild
	addl	$8, %esp
	movl	%eax, -21369(%ebp)
	#debug: func-call: symbol_DeclareFunction ( & testsymtable , tmp ) 
	subl	$8, %esp
	movl	%ebp, %eax
	addl	$-21361, %eax
	movl	%eax, 0(%esp)
	movl	-21369(%ebp), %eax
	movl	%eax, 4(%esp)
	call	symbol_DeclareFunction
	addl	$8, %esp
	#debug: func-call: puts ( "declare function..." ) 
	subl	$4, %esp
	movl	$symtab+518, 0(%esp)
	call	puts
	addl	$4, %esp
	#debug: assignment: tmp = syntax_GetChild ( tree , 2 ) ; 
	subl	$8, %esp
	movl	-21365(%ebp), %eax
	movl	%eax, 0(%esp)
	movl	$2, 4(%esp)
	call	syntax_GetChild
	addl	$8, %esp
	movl	%eax, -21369(%ebp)
	#debug: func-call: symbol_DeclareFunction ( & testsymtable , tmp ) 
	subl	$8, %esp
	movl	%ebp, %eax
	addl	$-21361, %eax
	movl	%eax, 0(%esp)
	movl	-21369(%ebp), %eax
	movl	%eax, 4(%esp)
	call	symbol_DeclareFunction
	addl	$8, %esp
	#debug: func-call: puts ( "define function..." ) 
	subl	$4, %esp
	movl	$symtab+538, 0(%esp)
	call	puts
	addl	$4, %esp
	#debug: assignment: tmp = syntax_GetChild ( tree , 3 ) ; 
	subl	$8, %esp
	movl	-21365(%ebp), %eax
	movl	%eax, 0(%esp)
	movl	$3, 4(%esp)
	call	syntax_GetChild
	addl	$8, %esp
	movl	%eax, -21369(%ebp)
	#debug: func-call: symbol_DefineFunction ( & testsymtable , tmp ) 
	subl	$8, %esp
	movl	%ebp, %eax
	addl	$-21361, %eax
	movl	%eax, 0(%esp)
	movl	-21369(%ebp), %eax
	movl	%eax, 4(%esp)
	call	symbol_DefineFunction
	addl	$8, %esp
	#debug: func-call: puts ( "Return type:" ) 
	subl	$4, %esp
	movl	$symtab+557, 0(%esp)
	call	puts
	addl	$4, %esp
	#debug: func-call: syntax_printTree ( symbol_GetReturnType ( & testsymtable , tmp ) ) 
	subl	$4, %esp
	subl	$8, %esp
	movl	%ebp, %eax
	addl	$-21361, %eax
	movl	%eax, 0(%esp)
	movl	-21369(%ebp), %eax
	movl	%eax, 4(%esp)
	call	symbol_GetReturnType
	addl	$8, %esp
	movl	%eax, 0(%esp)
	call	syntax_printTree
	addl	$4, %esp
	#debug: func-call: printf ( "Arguments 1/%d:\n" , symbol_CountFunctionArgs ( & testsymtable , tmp ) ) 
	subl	$8, %esp
	movl	$symtab+570, 0(%esp)
	subl	$8, %esp
	movl	%ebp, %eax
	addl	$-21361, %eax
	movl	%eax, 0(%esp)
	movl	-21369(%ebp), %eax
	movl	%eax, 4(%esp)
	call	symbol_CountFunctionArgs
	addl	$8, %esp
	movl	%eax, 4(%esp)
	call	printf
	addl	$8, %esp
	#debug: func-call: syntax_printTree ( symbol_GetFunctionArg ( & testsymtable , tmp , 0 ) ) 
	subl	$4, %esp
	subl	$12, %esp
	movl	%ebp, %eax
	addl	$-21361, %eax
	movl	%eax, 0(%esp)
	movl	-21369(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	$0, 8(%esp)
	call	symbol_GetFunctionArg
	addl	$12, %esp
	movl	%eax, 0(%esp)
	call	syntax_printTree
	addl	$4, %esp
	#debug: func-call: printf ( "Arguments 2/%d:\n" , symbol_CountFunctionArgs ( & testsymtable , tmp ) ) 
	subl	$8, %esp
	movl	$symtab+587, 0(%esp)
	subl	$8, %esp
	movl	%ebp, %eax
	addl	$-21361, %eax
	movl	%eax, 0(%esp)
	movl	-21369(%ebp), %eax
	movl	%eax, 4(%esp)
	call	symbol_CountFunctionArgs
	addl	$8, %esp
	movl	%eax, 4(%esp)
	call	printf
	addl	$8, %esp
	#debug: func-call: syntax_printTree ( symbol_GetFunctionArg ( & testsymtable , tmp , 1 ) ) 
	subl	$4, %esp
	subl	$12, %esp
	movl	%ebp, %eax
	addl	$-21361, %eax
	movl	%eax, 0(%esp)
	movl	-21369(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	$1, 8(%esp)
	call	symbol_GetFunctionArg
	addl	$12, %esp
	movl	%eax, 0(%esp)
	call	syntax_printTree
	addl	$4, %esp
	#debug: func-call: printf ( "Arguments 3/%d:\n" , symbol_CountFunctionArgs ( & testsymtable , tmp ) ) 
	subl	$8, %esp
	movl	$symtab+604, 0(%esp)
	subl	$8, %esp
	movl	%ebp, %eax
	addl	$-21361, %eax
	movl	%eax, 0(%esp)
	movl	-21369(%ebp), %eax
	movl	%eax, 4(%esp)
	call	symbol_CountFunctionArgs
	addl	$8, %esp
	movl	%eax, 4(%esp)
	call	printf
	addl	$8, %esp
	#debug: func-call: syntax_printTree ( symbol_GetFunctionArg ( & testsymtable , tmp , 2 ) ) 
	subl	$4, %esp
	subl	$12, %esp
	movl	%ebp, %eax
	addl	$-21361, %eax
	movl	%eax, 0(%esp)
	movl	-21369(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	$2, 8(%esp)
	call	symbol_GetFunctionArg
	addl	$12, %esp
	movl	%eax, 0(%esp)
	call	syntax_printTree
	addl	$4, %esp
	#debug: func-call: puts ( "define function..." ) 
	subl	$4, %esp
	movl	$symtab+538, 0(%esp)
	call	puts
	addl	$4, %esp
	#debug: assignment: tmp = syntax_GetChild ( tree , 4 ) ; 
	subl	$8, %esp
	movl	-21365(%ebp), %eax
	movl	%eax, 0(%esp)
	movl	$4, 4(%esp)
	call	syntax_GetChild
	addl	$8, %esp
	movl	%eax, -21369(%ebp)
	#debug: func-call: symbol_DefineFunction ( & testsymtable , tmp ) 
	subl	$8, %esp
	movl	%ebp, %eax
	addl	$-21361, %eax
	movl	%eax, 0(%esp)
	movl	-21369(%ebp), %eax
	movl	%eax, 4(%esp)
	call	symbol_DefineFunction
	addl	$8, %esp
	#debug: func-call: puts ( "define function..." ) 
	subl	$4, %esp
	movl	$symtab+538, 0(%esp)
	call	puts
	addl	$4, %esp
	#debug: assignment: tmp = syntax_GetChild ( tree , 5 ) ; 
	subl	$8, %esp
	movl	-21365(%ebp), %eax
	movl	%eax, 0(%esp)
	movl	$5, 4(%esp)
	call	syntax_GetChild
	addl	$8, %esp
	movl	%eax, -21369(%ebp)
	#debug: func-call: symbol_DefineFunction ( & testsymtable , tmp ) 
	subl	$8, %esp
	movl	%ebp, %eax
	addl	$-21361, %eax
	movl	%eax, 0(%esp)
	movl	-21369(%ebp), %eax
	movl	%eax, 4(%esp)
	call	symbol_DefineFunction
	addl	$8, %esp
	#debug: func-call: puts ( "declare function..." ) 
	subl	$4, %esp
	movl	$symtab+518, 0(%esp)
	call	puts
	addl	$4, %esp
	#debug: assignment: tmp = syntax_GetChild ( tree , 6 ) ; 
	subl	$8, %esp
	movl	-21365(%ebp), %eax
	movl	%eax, 0(%esp)
	movl	$6, 4(%esp)
	call	syntax_GetChild
	addl	$8, %esp
	movl	%eax, -21369(%ebp)
	#debug: func-call: symbol_DeclareFunction ( & testsymtable , tmp ) 
	subl	$8, %esp
	movl	%ebp, %eax
	addl	$-21361, %eax
	movl	%eax, 0(%esp)
	movl	-21369(%ebp), %eax
	movl	%eax, 4(%esp)
	call	symbol_DeclareFunction
	addl	$8, %esp
	#debug: func-call: puts ( "declare function..." ) 
	subl	$4, %esp
	movl	$symtab+518, 0(%esp)
	call	puts
	addl	$4, %esp
	#debug: assignment: tmp = syntax_GetChild ( tree , 7 ) ; 
	subl	$8, %esp
	movl	-21365(%ebp), %eax
	movl	%eax, 0(%esp)
	movl	$7, 4(%esp)
	call	syntax_GetChild
	addl	$8, %esp
	movl	%eax, -21369(%ebp)
	#debug: func-call: symbol_DeclareFunction ( & testsymtable , tmp ) 
	subl	$8, %esp
	movl	%ebp, %eax
	addl	$-21361, %eax
	movl	%eax, 0(%esp)
	movl	-21369(%ebp), %eax
	movl	%eax, 4(%esp)
	call	symbol_DeclareFunction
	addl	$8, %esp
	#debug: func-call: puts ( "declare function..." ) 
	subl	$4, %esp
	movl	$symtab+518, 0(%esp)
	call	puts
	addl	$4, %esp
	#debug: assignment: tmp = syntax_GetChild ( tree , 8 ) ; 
	subl	$8, %esp
	movl	-21365(%ebp), %eax
	movl	%eax, 0(%esp)
	movl	$8, 4(%esp)
	call	syntax_GetChild
	addl	$8, %esp
	movl	%eax, -21369(%ebp)
	#debug: func-call: symbol_DeclareFunction ( & testsymtable , tmp ) 
	subl	$8, %esp
	movl	%ebp, %eax
	addl	$-21361, %eax
	movl	%eax, 0(%esp)
	movl	-21369(%ebp), %eax
	movl	%eax, 4(%esp)
	call	symbol_DeclareFunction
	addl	$8, %esp
	#debug: func-call: puts ( "declare function..." ) 
	subl	$4, %esp
	movl	$symtab+518, 0(%esp)
	call	puts
	addl	$4, %esp
	#debug: assignment: tmp = syntax_GetChild ( tree , 9 ) ; 
	subl	$8, %esp
	movl	-21365(%ebp), %eax
	movl	%eax, 0(%esp)
	movl	$9, 4(%esp)
	call	syntax_GetChild
	addl	$8, %esp
	movl	%eax, -21369(%ebp)
	#debug: func-call: symbol_DeclareFunction ( & testsymtable , tmp ) 
	subl	$8, %esp
	movl	%ebp, %eax
	addl	$-21361, %eax
	movl	%eax, 0(%esp)
	movl	-21369(%ebp), %eax
	movl	%eax, 4(%esp)
	call	symbol_DeclareFunction
	addl	$8, %esp
	#debug: func-call: puts ( "\nSymbol table:" ) 
	subl	$4, %esp
	movl	$symtab+366, 0(%esp)
	call	puts
	addl	$4, %esp
	#debug: func-call: symbol_printTable ( & testsymtable ) 
	subl	$4, %esp
	movl	%ebp, %eax
	addl	$-21361, %eax
	movl	%eax, 0(%esp)
	call	symbol_printTable
	addl	$4, %esp
	#debug: func-call: printf ( "\nEnded with %d symtable errors.\n" , testsymtable . cnterrors ) 
	subl	$8, %esp
	movl	$symtab+621, 0(%esp)
	movl	%ebp, %eax
	addl	$-21361, %eax
	addl	$4, %eax
	movl	(%eax), %eax
	movl	%eax, 4(%esp)
	call	printf
	addl	$8, %esp
	#debug: func-call: syntax_FreeSyntaxTree ( tree ) 
	subl	$4, %esp
	movl	-21365(%ebp), %eax
	movl	%eax, 0(%esp)
	call	syntax_FreeSyntaxTree
	addl	$4, %esp
	#debug: func-call: preproc_destroy ( & testpreproc ) 
	subl	$4, %esp
	movl	%ebp, %eax
	addl	$-20728, %eax
	movl	%eax, 0(%esp)
	call	preproc_destroy
	addl	$4, %esp


test_Functions_ret:
	movl	%ebp, %esp
	popl	%ebp
	ret




	#debug: func-def: ( ) 
.globl test_parser
.type test_parser, @function
test_parser:
	pushl	%ebp
	movl	%esp, %ebp
	subl	$21377, %esp


	#debug: func-call: puts ( "\n\nTest input.c with parser\n" ) 
	subl	$4, %esp
	movl	$symtab+654, 0(%esp)
	call	puts
	addl	$4, %esp
	#debug: func-call: puts ( "Create preproc..." ) 
	subl	$4, %esp
	movl	$symtab+17, 0(%esp)
	call	puts
	addl	$4, %esp
	#debug: if: preproc_create ( & testpreproc , "testdata/input.c" ) 
	subl	$8, %esp
	movl	%ebp, %eax
	addl	$-20728, %eax
	movl	%eax, 0(%esp)
	movl	$symtab+682, 4(%esp)
	call	preproc_create
	addl	$8, %esp
	testl	%eax, %eax
	jnz	test_parser_ifbl_6
	jmp	test_parser_elsebl_6
test_parser_ifbl_6:
	#debug: return: return ; 
	jmp	test_parser_ret
	jmp	test_parser_endif_6

test_parser_elsebl_6:

test_parser_endif_6:

	#debug: func-call: preproc_addDefine ( & testpreproc , "__HRWCC__" ) 
	subl	$8, %esp
	movl	%ebp, %eax
	addl	$-20728, %eax
	movl	%eax, 0(%esp)
	movl	$symtab+699, 4(%esp)
	call	preproc_addDefine
	addl	$8, %esp
	#debug: func-call: puts ( "Init scanner..." ) 
	subl	$4, %esp
	movl	$symtab+53, 0(%esp)
	call	puts
	addl	$4, %esp
	#debug: func-call: scanner_init ( & testscanner , & testpreproc ) 
	subl	$8, %esp
	movl	%ebp, %eax
	addl	$-20749, %eax
	movl	%eax, 0(%esp)
	movl	%ebp, %eax
	addl	$-20728, %eax
	movl	%eax, 4(%esp)
	call	scanner_init
	addl	$8, %esp
	#debug: func-call: puts ( "Init parser..." ) 
	subl	$4, %esp
	movl	$symtab+69, 0(%esp)
	call	puts
	addl	$4, %esp
	#debug: func-call: parser_init ( & testparser , & testscanner ) 
	subl	$8, %esp
	movl	%ebp, %eax
	addl	$-21345, %eax
	movl	%eax, 0(%esp)
	movl	%ebp, %eax
	addl	$-20749, %eax
	movl	%eax, 4(%esp)
	call	parser_init
	addl	$8, %esp
	#debug: func-call: puts ( "Create symbol table..." ) 
	subl	$4, %esp
	movl	$symtab+709, 0(%esp)
	call	puts
	addl	$4, %esp
	#debug: func-call: symbol_CreateSymbolTable ( & testparser , & testsymtable ) 
	subl	$8, %esp
	movl	%ebp, %eax
	addl	$-21345, %eax
	movl	%eax, 0(%esp)
	movl	%ebp, %eax
	addl	$-21361, %eax
	movl	%eax, 4(%esp)
	call	symbol_CreateSymbolTable
	addl	$8, %esp
	#debug: func-call: parser_setSymbolTable ( & testparser , & testsymtable ) 
	subl	$8, %esp
	movl	%ebp, %eax
	addl	$-21345, %eax
	movl	%eax, 0(%esp)
	movl	%ebp, %eax
	addl	$-21361, %eax
	movl	%eax, 4(%esp)
	call	parser_setSymbolTable
	addl	$8, %esp
	#debug: assignment: tree = syntax_CreateTreeNode ( ) ; 
	subl	$0, %esp
	call	syntax_CreateTreeNode
	addl	$0, %esp
	movl	%eax, -21365(%ebp)
	#debug: func-call: parser_buildSyntaxTree ( & testparser , tree ) 
	subl	$8, %esp
	movl	%ebp, %eax
	addl	$-21345, %eax
	movl	%eax, 0(%esp)
	movl	-21365(%ebp), %eax
	movl	%eax, 4(%esp)
	call	parser_buildSyntaxTree
	addl	$8, %esp
	#debug: func-call: puts ( "\nAfter parsing..." ) 
	subl	$4, %esp
	movl	$symtab+732, 0(%esp)
	call	puts
	addl	$4, %esp
	#debug: func-call: symbol_printTable ( & testsymtable ) 
	subl	$4, %esp
	movl	%ebp, %eax
	addl	$-21361, %eax
	movl	%eax, 0(%esp)
	call	symbol_printTable
	addl	$4, %esp
	#debug: assignment: count = symbol_CountFunctions ( & testsymtable ) ; 
	subl	$4, %esp
	movl	%ebp, %eax
	addl	$-21361, %eax
	movl	%eax, 0(%esp)
	call	symbol_CountFunctions
	addl	$4, %esp
	movl	%eax, -21377(%ebp)
	#debug: assignment: idx = 0 ; 
	movl	$0, -21373(%ebp)
	#debug: while: idx < count 
test_parser_while_7:
	pushl	-21373(%ebp)
	popl	%ebx
	cmpl	-21377(%ebp), %ebx
	movl	$1, %eax
	jl	test_parser_reltrue_8
	movl	$0, %eax
test_parser_reltrue_8:
	testl	%eax, %eax
	jz	test_parser_endwhile_7

	#debug: assignment: node = symbol_GetFunction ( & testsymtable , idx ) ; 
	subl	$8, %esp
	movl	%ebp, %eax
	addl	$-21361, %eax
	movl	%eax, 0(%esp)
	movl	-21373(%ebp), %eax
	movl	%eax, 4(%esp)
	call	symbol_GetFunction
	addl	$8, %esp
	movl	%eax, -21369(%ebp)
	#debug: func-call: printf ( "Function %d" , idx ) 
	subl	$8, %esp
	movl	$symtab+750, 0(%esp)
	movl	-21373(%ebp), %eax
	movl	%eax, 4(%esp)
	call	printf
	addl	$8, %esp
	#debug: func-call: printf ( ": %s\n" , node -> name . content ) 
	subl	$8, %esp
	movl	$symtab+762, 0(%esp)
	movl	%ebp, %eax
	addl	$-21369, %eax
	movl	(%eax), %eax
	addl	$0, %eax
	addl	$16, %eax
	movl	%eax, 4(%esp)
	call	printf
	addl	$8, %esp
	#debug: assignment: idx = idx + 1 ; 
	pushl	-21373(%ebp)
	popl	%ebx
	addl	$1, %ebx
	pushl	%ebx
	popl	%eax
	movl	%eax, -21373(%ebp)
	jmp	test_parser_while_7
test_parser_endwhile_7:

	#debug: func-call: printf ( "\nDetected %d parser errors.\n" , testparser . cnterrors ) 
	subl	$8, %esp
	movl	$symtab+768, 0(%esp)
	movl	%ebp, %eax
	addl	$-21345, %eax
	addl	$12, %eax
	movl	(%eax), %eax
	movl	%eax, 4(%esp)
	call	printf
	addl	$8, %esp
	#debug: func-call: printf ( "Detected %d symbol errors.\n" , testsymtable . cnterrors ) 
	subl	$8, %esp
	movl	$symtab+797, 0(%esp)
	movl	%ebp, %eax
	addl	$-21361, %eax
	addl	$4, %eax
	movl	(%eax), %eax
	movl	%eax, 4(%esp)
	call	printf
	addl	$8, %esp
	#debug: func-call: syntax_FreeSyntaxTree ( tree ) 
	subl	$4, %esp
	movl	-21365(%ebp), %eax
	movl	%eax, 0(%esp)
	call	syntax_FreeSyntaxTree
	addl	$4, %esp
	#debug: func-call: symbol_destroy ( & testsymtable ) 
	subl	$4, %esp
	movl	%ebp, %eax
	addl	$-21361, %eax
	movl	%eax, 0(%esp)
	call	symbol_destroy
	addl	$4, %esp
	#debug: func-call: preproc_destroy ( & testpreproc ) 
	subl	$4, %esp
	movl	%ebp, %eax
	addl	$-20728, %eax
	movl	%eax, 0(%esp)
	call	preproc_destroy
	addl	$4, %esp


test_parser_ret:
	movl	%ebp, %esp
	popl	%ebp
	ret




	#debug: func-def: ( ) 
.globl main
.type main, @function
main:
	pushl	%ebp
	movl	%esp, %ebp
	subl	$0, %esp


	#debug: func-call: test_parser ( ) 
	subl	$0, %esp
	call	test_parser
	addl	$0, %esp
	#debug: return: return 0 ; 
	movl	$0, %eax
	jmp	main_ret


main_ret:
	movl	%ebp, %esp
	popl	%ebp
	ret




# The symbol table 

.section .data
symtab:
	.string	"\n\nTest sizeof.c\n"
	.string	"Create preproc..."
	.string	"testdata/sizeof.c"
	.string	"Init scanner..."
	.string	"Init parser..."
	.string	"Create symbol table...\n"
	.string	"Detected %d errors.\n"
	.string	"Sizeof %s"
	.string	": %d\n"
	.string	"a"
	.string	"\nType of variable \"a\": %d\n"
	.string	"mystruct"
	.string	"c"
	.string	"Offset of 'c' in 'mystruct': %d\n"
	.string	"b"
	.string	"Offset of 'b' in globals: %d\n"
	.string	"Offset of 'b' in non-globals: %d\n"
	.string	"p2"
	.string	"Offset of 'p2' in non-globals: %d\n"
	.string	"\"hello\""
	.string	"Offset of '\"hello\"' in globals: %d\n"
	.string	"\nSymbol table:"
	.string	"\nClear non-globals"
	.string	"\nEnded with %d symtable erros.\n"
	.string	"\n\nTest functions.c\n"
	.string	"testdata/functions.c"
	.string	"Detected %d parser errors.\n"
	.string	"define struct..."
	.string	"declare function..."
	.string	"define function..."
	.string	"Return type:"
	.string	"Arguments 1/%d:\n"
	.string	"Arguments 2/%d:\n"
	.string	"Arguments 3/%d:\n"
	.string	"\nEnded with %d symtable errors.\n"
	.string	"\n\nTest input.c with parser\n"
	.string	"testdata/input.c"
	.string	"__HRWCC__"
	.string	"Create symbol table..."
	.string	"\nAfter parsing..."
	.string	"Function %d"
	.string	": %s\n"
	.string	"\nDetected %d parser errors.\n"
	.string	"Detected %d symbol errors.\n"

