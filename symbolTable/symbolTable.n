# gas-assembler code generated by HrwCC

.section .text
	#debug: func-def: ( symbolTableNode_List * listPtr ) 
.globl Clear_symbolTableNode_List
.type Clear_symbolTableNode_List, @function
Clear_symbolTableNode_List:
	pushl	%ebp
	movl	%esp, %ebp
	subl	$0, %esp


	#debug: assignment: listPtr -> head = 0 ; 
	movl	%ebp, %eax
	addl	$8, %eax
	movl	(%eax), %eax
	addl	$0, %eax
	pushl	%eax
	popl	%ebx
	movl	$0, (%ebx)
	#debug: assignment: listPtr -> tail = 0 ; 
	movl	%ebp, %eax
	addl	$8, %eax
	movl	(%eax), %eax
	addl	$4, %eax
	pushl	%eax
	popl	%ebx
	movl	$0, (%ebx)


Clear_symbolTableNode_List_ret:
	movl	%ebp, %esp
	popl	%ebp
	ret




	#debug: func-def: ( symbolTableNode_List * listPtr , symbolTableNode * nodePtr ) 
.globl Is_Member_Of_symbolTableNode_List
.type Is_Member_Of_symbolTableNode_List, @function
Is_Member_Of_symbolTableNode_List:
	pushl	%ebp
	movl	%esp, %ebp
	subl	$4, %esp


	#debug: assignment: cur = listPtr -> head ; 
	movl	%ebp, %eax
	addl	$8, %eax
	movl	(%eax), %eax
	addl	$0, %eax
	movl	(%eax), %eax
	movl	%eax, -4(%ebp)
	#debug: while: cur != 0 
Is_Member_Of_symbolTableNode_List_while_0:
	pushl	-4(%ebp)
	popl	%ebx
	cmpl	$0, %ebx
	movl	$1, %eax
	jne	Is_Member_Of_symbolTableNode_List_reltrue_1
	movl	$0, %eax
Is_Member_Of_symbolTableNode_List_reltrue_1:
	testl	%eax, %eax
	jz	Is_Member_Of_symbolTableNode_List_endwhile_0

	#debug: if: cur == nodePtr 
	pushl	-4(%ebp)
	popl	%ebx
	cmpl	12(%ebp), %ebx
	movl	$1, %eax
	je	Is_Member_Of_symbolTableNode_List_reltrue_3
	movl	$0, %eax
Is_Member_Of_symbolTableNode_List_reltrue_3:
	testl	%eax, %eax
	jnz	Is_Member_Of_symbolTableNode_List_ifbl_2
	jmp	Is_Member_Of_symbolTableNode_List_elsebl_2
Is_Member_Of_symbolTableNode_List_ifbl_2:
	#debug: return: return 1 ; 
	movl	$1, %eax
	jmp	Is_Member_Of_symbolTableNode_List_ret
	jmp	Is_Member_Of_symbolTableNode_List_endif_2

Is_Member_Of_symbolTableNode_List_elsebl_2:

Is_Member_Of_symbolTableNode_List_endif_2:

	#debug: assignment: cur = cur -> nextsymbolTableNode_List ; 
	movl	%ebp, %eax
	addl	$-4, %eax
	movl	(%eax), %eax
	addl	$156, %eax
	movl	(%eax), %eax
	movl	%eax, -4(%ebp)
	jmp	Is_Member_Of_symbolTableNode_List_while_0
Is_Member_Of_symbolTableNode_List_endwhile_0:

	#debug: return: return 0 ; 
	movl	$0, %eax
	jmp	Is_Member_Of_symbolTableNode_List_ret


Is_Member_Of_symbolTableNode_List_ret:
	movl	%ebp, %esp
	popl	%ebp
	ret




	#debug: func-def: ( symbolTableNode_List * listPtr ) 
.globl Get_Front_Of_symbolTableNode_List
.type Get_Front_Of_symbolTableNode_List, @function
Get_Front_Of_symbolTableNode_List:
	pushl	%ebp
	movl	%esp, %ebp
	subl	$0, %esp


	#debug: return: return listPtr -> head ; 
	movl	%ebp, %eax
	addl	$8, %eax
	movl	(%eax), %eax
	addl	$0, %eax
	movl	(%eax), %eax
	jmp	Get_Front_Of_symbolTableNode_List_ret


Get_Front_Of_symbolTableNode_List_ret:
	movl	%ebp, %esp
	popl	%ebp
	ret




	#debug: func-def: ( symbolTableNode_List * listPtr ) 
.globl Get_Back_Of_symbolTableNode_List
.type Get_Back_Of_symbolTableNode_List, @function
Get_Back_Of_symbolTableNode_List:
	pushl	%ebp
	movl	%esp, %ebp
	subl	$0, %esp


	#debug: return: return listPtr -> tail ; 
	movl	%ebp, %eax
	addl	$8, %eax
	movl	(%eax), %eax
	addl	$4, %eax
	movl	(%eax), %eax
	jmp	Get_Back_Of_symbolTableNode_List_ret


Get_Back_Of_symbolTableNode_List_ret:
	movl	%ebp, %esp
	popl	%ebp
	ret




	#debug: func-def: ( symbolTableNode * nodePtr ) 
.globl Get_Next_In_symbolTableNode_List
.type Get_Next_In_symbolTableNode_List, @function
Get_Next_In_symbolTableNode_List:
	pushl	%ebp
	movl	%esp, %ebp
	subl	$0, %esp


	#debug: return: return nodePtr -> nextsymbolTableNode_List ; 
	movl	%ebp, %eax
	addl	$8, %eax
	movl	(%eax), %eax
	addl	$156, %eax
	movl	(%eax), %eax
	jmp	Get_Next_In_symbolTableNode_List_ret


Get_Next_In_symbolTableNode_List_ret:
	movl	%ebp, %esp
	popl	%ebp
	ret




	#debug: func-def: ( symbolTableNode * nodePtr , symbolTableNode * value ) 
.globl Set_Next_In_symbolTableNode_List
.type Set_Next_In_symbolTableNode_List, @function
Set_Next_In_symbolTableNode_List:
	pushl	%ebp
	movl	%esp, %ebp
	subl	$0, %esp


	#debug: assignment: nodePtr -> nextsymbolTableNode_List = value ; 
	movl	%ebp, %eax
	addl	$8, %eax
	movl	(%eax), %eax
	addl	$156, %eax
	pushl	%eax
	movl	12(%ebp), %eax
	popl	%ebx
	movl	%eax, (%ebx)


Set_Next_In_symbolTableNode_List_ret:
	movl	%ebp, %esp
	popl	%ebp
	ret




	#debug: func-def: ( symbolTableNode * nodePtr ) 
.globl Get_Prev_In_symbolTableNode_List
.type Get_Prev_In_symbolTableNode_List, @function
Get_Prev_In_symbolTableNode_List:
	pushl	%ebp
	movl	%esp, %ebp
	subl	$0, %esp


	#debug: return: return nodePtr -> prevsymbolTableNode_List ; 
	movl	%ebp, %eax
	addl	$8, %eax
	movl	(%eax), %eax
	addl	$152, %eax
	movl	(%eax), %eax
	jmp	Get_Prev_In_symbolTableNode_List_ret


Get_Prev_In_symbolTableNode_List_ret:
	movl	%ebp, %esp
	popl	%ebp
	ret




	#debug: func-def: ( symbolTableNode * nodePtr , symbolTableNode * value ) 
.globl Set_Prev_In_symbolTableNode_List
.type Set_Prev_In_symbolTableNode_List, @function
Set_Prev_In_symbolTableNode_List:
	pushl	%ebp
	movl	%esp, %ebp
	subl	$0, %esp


	#debug: assignment: nodePtr -> prevsymbolTableNode_List = value ; 
	movl	%ebp, %eax
	addl	$8, %eax
	movl	(%eax), %eax
	addl	$152, %eax
	pushl	%eax
	movl	12(%ebp), %eax
	popl	%ebx
	movl	%eax, (%ebx)


Set_Prev_In_symbolTableNode_List_ret:
	movl	%ebp, %esp
	popl	%ebp
	ret




	#debug: func-def: ( symbolTableNode_List * listPtr , symbolTableNode * nodePtr ) 
.globl Add_To_Front_Of_symbolTableNode_List
.type Add_To_Front_Of_symbolTableNode_List, @function
Add_To_Front_Of_symbolTableNode_List:
	pushl	%ebp
	movl	%esp, %ebp
	subl	$0, %esp


	#debug: assignment: nodePtr -> prevsymbolTableNode_List = 0 ; 
	movl	%ebp, %eax
	addl	$12, %eax
	movl	(%eax), %eax
	addl	$152, %eax
	pushl	%eax
	popl	%ebx
	movl	$0, (%ebx)
	#debug: if: listPtr -> head == 0 
	movl	%ebp, %eax
	addl	$8, %eax
	movl	(%eax), %eax
	addl	$0, %eax
	movl	(%eax), %eax
	pushl	%eax
	popl	%ebx
	cmpl	$0, %ebx
	movl	$1, %eax
	je	Add_To_Front_Of_symbolTableNode_List_reltrue_5
	movl	$0, %eax
Add_To_Front_Of_symbolTableNode_List_reltrue_5:
	testl	%eax, %eax
	jnz	Add_To_Front_Of_symbolTableNode_List_ifbl_4
	jmp	Add_To_Front_Of_symbolTableNode_List_elsebl_4
Add_To_Front_Of_symbolTableNode_List_ifbl_4:
	#debug: assignment: listPtr -> head = nodePtr ; 
	movl	%ebp, %eax
	addl	$8, %eax
	movl	(%eax), %eax
	addl	$0, %eax
	pushl	%eax
	movl	12(%ebp), %eax
	popl	%ebx
	movl	%eax, (%ebx)
	#debug: assignment: listPtr -> tail = nodePtr ; 
	movl	%ebp, %eax
	addl	$8, %eax
	movl	(%eax), %eax
	addl	$4, %eax
	pushl	%eax
	movl	12(%ebp), %eax
	popl	%ebx
	movl	%eax, (%ebx)
	#debug: assignment: nodePtr -> nextsymbolTableNode_List = 0 ; 
	movl	%ebp, %eax
	addl	$12, %eax
	movl	(%eax), %eax
	addl	$156, %eax
	pushl	%eax
	popl	%ebx
	movl	$0, (%ebx)
	jmp	Add_To_Front_Of_symbolTableNode_List_endif_4

Add_To_Front_Of_symbolTableNode_List_elsebl_4:

	#debug: assignment: listPtr -> head -> prevsymbolTableNode_List = nodePtr ; 
	movl	%ebp, %eax
	addl	$8, %eax
	movl	(%eax), %eax
	addl	$0, %eax
	movl	(%eax), %eax
	addl	$152, %eax
	pushl	%eax
	movl	12(%ebp), %eax
	popl	%ebx
	movl	%eax, (%ebx)
	#debug: assignment: nodePtr -> nextsymbolTableNode_List = listPtr -> head ; 
	movl	%ebp, %eax
	addl	$12, %eax
	movl	(%eax), %eax
	addl	$156, %eax
	pushl	%eax
	movl	%ebp, %eax
	addl	$8, %eax
	movl	(%eax), %eax
	addl	$0, %eax
	movl	(%eax), %eax
	popl	%ebx
	movl	%eax, (%ebx)
	#debug: assignment: listPtr -> head = nodePtr ; 
	movl	%ebp, %eax
	addl	$8, %eax
	movl	(%eax), %eax
	addl	$0, %eax
	pushl	%eax
	movl	12(%ebp), %eax
	popl	%ebx
	movl	%eax, (%ebx)
Add_To_Front_Of_symbolTableNode_List_endif_4:



Add_To_Front_Of_symbolTableNode_List_ret:
	movl	%ebp, %esp
	popl	%ebp
	ret




	#debug: func-def: ( symbolTableNode_List * listPtr , symbolTableNode * nodePtr ) 
.globl Add_To_Back_Of_symbolTableNode_List
.type Add_To_Back_Of_symbolTableNode_List, @function
Add_To_Back_Of_symbolTableNode_List:
	pushl	%ebp
	movl	%esp, %ebp
	subl	$0, %esp


	#debug: assignment: nodePtr -> nextsymbolTableNode_List = 0 ; 
	movl	%ebp, %eax
	addl	$12, %eax
	movl	(%eax), %eax
	addl	$156, %eax
	pushl	%eax
	popl	%ebx
	movl	$0, (%ebx)
	#debug: if: listPtr -> tail == 0 
	movl	%ebp, %eax
	addl	$8, %eax
	movl	(%eax), %eax
	addl	$4, %eax
	movl	(%eax), %eax
	pushl	%eax
	popl	%ebx
	cmpl	$0, %ebx
	movl	$1, %eax
	je	Add_To_Back_Of_symbolTableNode_List_reltrue_7
	movl	$0, %eax
Add_To_Back_Of_symbolTableNode_List_reltrue_7:
	testl	%eax, %eax
	jnz	Add_To_Back_Of_symbolTableNode_List_ifbl_6
	jmp	Add_To_Back_Of_symbolTableNode_List_elsebl_6
Add_To_Back_Of_symbolTableNode_List_ifbl_6:
	#debug: assignment: listPtr -> head = nodePtr ; 
	movl	%ebp, %eax
	addl	$8, %eax
	movl	(%eax), %eax
	addl	$0, %eax
	pushl	%eax
	movl	12(%ebp), %eax
	popl	%ebx
	movl	%eax, (%ebx)
	#debug: assignment: listPtr -> tail = nodePtr ; 
	movl	%ebp, %eax
	addl	$8, %eax
	movl	(%eax), %eax
	addl	$4, %eax
	pushl	%eax
	movl	12(%ebp), %eax
	popl	%ebx
	movl	%eax, (%ebx)
	#debug: assignment: nodePtr -> prevsymbolTableNode_List = 0 ; 
	movl	%ebp, %eax
	addl	$12, %eax
	movl	(%eax), %eax
	addl	$152, %eax
	pushl	%eax
	popl	%ebx
	movl	$0, (%ebx)
	jmp	Add_To_Back_Of_symbolTableNode_List_endif_6

Add_To_Back_Of_symbolTableNode_List_elsebl_6:

	#debug: assignment: listPtr -> tail -> nextsymbolTableNode_List = nodePtr ; 
	movl	%ebp, %eax
	addl	$8, %eax
	movl	(%eax), %eax
	addl	$4, %eax
	movl	(%eax), %eax
	addl	$156, %eax
	pushl	%eax
	movl	12(%ebp), %eax
	popl	%ebx
	movl	%eax, (%ebx)
	#debug: assignment: nodePtr -> prevsymbolTableNode_List = listPtr -> tail ; 
	movl	%ebp, %eax
	addl	$12, %eax
	movl	(%eax), %eax
	addl	$152, %eax
	pushl	%eax
	movl	%ebp, %eax
	addl	$8, %eax
	movl	(%eax), %eax
	addl	$4, %eax
	movl	(%eax), %eax
	popl	%ebx
	movl	%eax, (%ebx)
	#debug: assignment: listPtr -> tail = nodePtr ; 
	movl	%ebp, %eax
	addl	$8, %eax
	movl	(%eax), %eax
	addl	$4, %eax
	pushl	%eax
	movl	12(%ebp), %eax
	popl	%ebx
	movl	%eax, (%ebx)
Add_To_Back_Of_symbolTableNode_List_endif_6:



Add_To_Back_Of_symbolTableNode_List_ret:
	movl	%ebp, %esp
	popl	%ebp
	ret




	#debug: func-def: ( symbolTableNode * nodePtr , symbolTableNode * nodePtrToAppend ) 
.globl Add_To_symbolTableNode_List_After
.type Add_To_symbolTableNode_List_After, @function
Add_To_symbolTableNode_List_After:
	pushl	%ebp
	movl	%esp, %ebp
	subl	$0, %esp


	#debug: assignment: nodePtrToAppend -> nextsymbolTableNode_List = nodePtr -> nextsymbolTableNode_List ; 
	movl	%ebp, %eax
	addl	$12, %eax
	movl	(%eax), %eax
	addl	$156, %eax
	pushl	%eax
	movl	%ebp, %eax
	addl	$8, %eax
	movl	(%eax), %eax
	addl	$156, %eax
	movl	(%eax), %eax
	popl	%ebx
	movl	%eax, (%ebx)
	#debug: assignment: nodePtr -> nextsymbolTableNode_List = nodePtrToAppend ; 
	movl	%ebp, %eax
	addl	$8, %eax
	movl	(%eax), %eax
	addl	$156, %eax
	pushl	%eax
	movl	12(%ebp), %eax
	popl	%ebx
	movl	%eax, (%ebx)


Add_To_symbolTableNode_List_After_ret:
	movl	%ebp, %esp
	popl	%ebp
	ret




	#debug: func-def: ( symbolTableNode_List * listToModify , symbolTableNode_List * listToAppend ) 
.globl Append_symbolTableNode_List
.type Append_symbolTableNode_List, @function
Append_symbolTableNode_List:
	pushl	%ebp
	movl	%esp, %ebp
	subl	$0, %esp


	#debug: if: listToAppend -> head != 0 
	movl	%ebp, %eax
	addl	$12, %eax
	movl	(%eax), %eax
	addl	$0, %eax
	movl	(%eax), %eax
	pushl	%eax
	popl	%ebx
	cmpl	$0, %ebx
	movl	$1, %eax
	jne	Append_symbolTableNode_List_reltrue_9
	movl	$0, %eax
Append_symbolTableNode_List_reltrue_9:
	testl	%eax, %eax
	jnz	Append_symbolTableNode_List_ifbl_8
	jmp	Append_symbolTableNode_List_elsebl_8
Append_symbolTableNode_List_ifbl_8:
	#debug: if: listToModify -> head == 0 
	movl	%ebp, %eax
	addl	$8, %eax
	movl	(%eax), %eax
	addl	$0, %eax
	movl	(%eax), %eax
	pushl	%eax
	popl	%ebx
	cmpl	$0, %ebx
	movl	$1, %eax
	je	Append_symbolTableNode_List_reltrue_11
	movl	$0, %eax
Append_symbolTableNode_List_reltrue_11:
	testl	%eax, %eax
	jnz	Append_symbolTableNode_List_ifbl_10
	jmp	Append_symbolTableNode_List_elsebl_10
Append_symbolTableNode_List_ifbl_10:
	#debug: assignment: listToModify -> head = listToAppend -> head ; 
	movl	%ebp, %eax
	addl	$8, %eax
	movl	(%eax), %eax
	addl	$0, %eax
	pushl	%eax
	movl	%ebp, %eax
	addl	$12, %eax
	movl	(%eax), %eax
	addl	$0, %eax
	movl	(%eax), %eax
	popl	%ebx
	movl	%eax, (%ebx)
	#debug: assignment: listToModify -> tail = listToAppend -> tail ; 
	movl	%ebp, %eax
	addl	$8, %eax
	movl	(%eax), %eax
	addl	$4, %eax
	pushl	%eax
	movl	%ebp, %eax
	addl	$12, %eax
	movl	(%eax), %eax
	addl	$4, %eax
	movl	(%eax), %eax
	popl	%ebx
	movl	%eax, (%ebx)
	jmp	Append_symbolTableNode_List_endif_10

Append_symbolTableNode_List_elsebl_10:

	#debug: assignment: listToAppend -> head -> prevsymbolTableNode_List = listToModify -> tail ; 
	movl	%ebp, %eax
	addl	$12, %eax
	movl	(%eax), %eax
	addl	$0, %eax
	movl	(%eax), %eax
	addl	$152, %eax
	pushl	%eax
	movl	%ebp, %eax
	addl	$8, %eax
	movl	(%eax), %eax
	addl	$4, %eax
	movl	(%eax), %eax
	popl	%ebx
	movl	%eax, (%ebx)
	#debug: assignment: listToModify -> tail -> nextsymbolTableNode_List = listToAppend -> head ; 
	movl	%ebp, %eax
	addl	$8, %eax
	movl	(%eax), %eax
	addl	$4, %eax
	movl	(%eax), %eax
	addl	$156, %eax
	pushl	%eax
	movl	%ebp, %eax
	addl	$12, %eax
	movl	(%eax), %eax
	addl	$0, %eax
	movl	(%eax), %eax
	popl	%ebx
	movl	%eax, (%ebx)
	#debug: assignment: listToModify -> tail = listToAppend -> tail ; 
	movl	%ebp, %eax
	addl	$8, %eax
	movl	(%eax), %eax
	addl	$4, %eax
	pushl	%eax
	movl	%ebp, %eax
	addl	$12, %eax
	movl	(%eax), %eax
	addl	$4, %eax
	movl	(%eax), %eax
	popl	%ebx
	movl	%eax, (%ebx)
Append_symbolTableNode_List_endif_10:

	jmp	Append_symbolTableNode_List_endif_8

Append_symbolTableNode_List_elsebl_8:

Append_symbolTableNode_List_endif_8:



Append_symbolTableNode_List_ret:
	movl	%ebp, %esp
	popl	%ebp
	ret




	#debug: func-def: ( symbolTableNode_List * listPtr ) 
.globl Remove_From_Front_Of_symbolTableNode_List
.type Remove_From_Front_Of_symbolTableNode_List, @function
Remove_From_Front_Of_symbolTableNode_List:
	pushl	%ebp
	movl	%esp, %ebp
	subl	$4, %esp


	#debug: assignment: nodePtr = listPtr -> head ; 
	movl	%ebp, %eax
	addl	$8, %eax
	movl	(%eax), %eax
	addl	$0, %eax
	movl	(%eax), %eax
	movl	%eax, -4(%ebp)
	#debug: assignment: listPtr -> head = listPtr -> head -> nextsymbolTableNode_List ; 
	movl	%ebp, %eax
	addl	$8, %eax
	movl	(%eax), %eax
	addl	$0, %eax
	pushl	%eax
	movl	%ebp, %eax
	addl	$8, %eax
	movl	(%eax), %eax
	addl	$0, %eax
	movl	(%eax), %eax
	addl	$156, %eax
	movl	(%eax), %eax
	popl	%ebx
	movl	%eax, (%ebx)
	#debug: if: listPtr -> head == 0 
	movl	%ebp, %eax
	addl	$8, %eax
	movl	(%eax), %eax
	addl	$0, %eax
	movl	(%eax), %eax
	pushl	%eax
	popl	%ebx
	cmpl	$0, %ebx
	movl	$1, %eax
	je	Remove_From_Front_Of_symbolTableNode_List_reltrue_13
	movl	$0, %eax
Remove_From_Front_Of_symbolTableNode_List_reltrue_13:
	testl	%eax, %eax
	jnz	Remove_From_Front_Of_symbolTableNode_List_ifbl_12
	jmp	Remove_From_Front_Of_symbolTableNode_List_elsebl_12
Remove_From_Front_Of_symbolTableNode_List_ifbl_12:
	#debug: assignment: listPtr -> tail = 0 ; 
	movl	%ebp, %eax
	addl	$8, %eax
	movl	(%eax), %eax
	addl	$4, %eax
	pushl	%eax
	popl	%ebx
	movl	$0, (%ebx)
	jmp	Remove_From_Front_Of_symbolTableNode_List_endif_12

Remove_From_Front_Of_symbolTableNode_List_elsebl_12:

	#debug: assignment: listPtr -> head -> prevsymbolTableNode_List = 0 ; 
	movl	%ebp, %eax
	addl	$8, %eax
	movl	(%eax), %eax
	addl	$0, %eax
	movl	(%eax), %eax
	addl	$152, %eax
	pushl	%eax
	popl	%ebx
	movl	$0, (%ebx)
Remove_From_Front_Of_symbolTableNode_List_endif_12:

	#debug: return: return nodePtr ; 
	movl	-4(%ebp), %eax
	jmp	Remove_From_Front_Of_symbolTableNode_List_ret


Remove_From_Front_Of_symbolTableNode_List_ret:
	movl	%ebp, %esp
	popl	%ebp
	ret




	#debug: func-def: ( symbolTableNode_List * listPtr , symbolTableNode * nodePtr ) 
.globl Remove_From_symbolTableNode_List
.type Remove_From_symbolTableNode_List, @function
Remove_From_symbolTableNode_List:
	pushl	%ebp
	movl	%esp, %ebp
	subl	$0, %esp


	#debug: if: nodePtr -> prevsymbolTableNode_List != 0 
	movl	%ebp, %eax
	addl	$12, %eax
	movl	(%eax), %eax
	addl	$152, %eax
	movl	(%eax), %eax
	pushl	%eax
	popl	%ebx
	cmpl	$0, %ebx
	movl	$1, %eax
	jne	Remove_From_symbolTableNode_List_reltrue_15
	movl	$0, %eax
Remove_From_symbolTableNode_List_reltrue_15:
	testl	%eax, %eax
	jnz	Remove_From_symbolTableNode_List_ifbl_14
	jmp	Remove_From_symbolTableNode_List_elsebl_14
Remove_From_symbolTableNode_List_ifbl_14:
	#debug: assignment: nodePtr -> prevsymbolTableNode_List -> nextsymbolTableNode_List = nodePtr -> nextsymbolTableNode_List ; 
	movl	%ebp, %eax
	addl	$12, %eax
	movl	(%eax), %eax
	addl	$152, %eax
	movl	(%eax), %eax
	addl	$156, %eax
	pushl	%eax
	movl	%ebp, %eax
	addl	$12, %eax
	movl	(%eax), %eax
	addl	$156, %eax
	movl	(%eax), %eax
	popl	%ebx
	movl	%eax, (%ebx)
	jmp	Remove_From_symbolTableNode_List_endif_14

Remove_From_symbolTableNode_List_elsebl_14:

	#debug: assignment: listPtr -> head = nodePtr -> nextsymbolTableNode_List ; 
	movl	%ebp, %eax
	addl	$8, %eax
	movl	(%eax), %eax
	addl	$0, %eax
	pushl	%eax
	movl	%ebp, %eax
	addl	$12, %eax
	movl	(%eax), %eax
	addl	$156, %eax
	movl	(%eax), %eax
	popl	%ebx
	movl	%eax, (%ebx)
Remove_From_symbolTableNode_List_endif_14:

	#debug: if: nodePtr -> nextsymbolTableNode_List != 0 
	movl	%ebp, %eax
	addl	$12, %eax
	movl	(%eax), %eax
	addl	$156, %eax
	movl	(%eax), %eax
	pushl	%eax
	popl	%ebx
	cmpl	$0, %ebx
	movl	$1, %eax
	jne	Remove_From_symbolTableNode_List_reltrue_17
	movl	$0, %eax
Remove_From_symbolTableNode_List_reltrue_17:
	testl	%eax, %eax
	jnz	Remove_From_symbolTableNode_List_ifbl_16
	jmp	Remove_From_symbolTableNode_List_elsebl_16
Remove_From_symbolTableNode_List_ifbl_16:
	#debug: assignment: nodePtr -> nextsymbolTableNode_List -> prevsymbolTableNode_List = nodePtr -> prevsymbolTableNode_List ; 
	movl	%ebp, %eax
	addl	$12, %eax
	movl	(%eax), %eax
	addl	$156, %eax
	movl	(%eax), %eax
	addl	$152, %eax
	pushl	%eax
	movl	%ebp, %eax
	addl	$12, %eax
	movl	(%eax), %eax
	addl	$152, %eax
	movl	(%eax), %eax
	popl	%ebx
	movl	%eax, (%ebx)
	jmp	Remove_From_symbolTableNode_List_endif_16

Remove_From_symbolTableNode_List_elsebl_16:

	#debug: assignment: listPtr -> tail = nodePtr -> prevsymbolTableNode_List ; 
	movl	%ebp, %eax
	addl	$8, %eax
	movl	(%eax), %eax
	addl	$4, %eax
	pushl	%eax
	movl	%ebp, %eax
	addl	$12, %eax
	movl	(%eax), %eax
	addl	$152, %eax
	movl	(%eax), %eax
	popl	%ebx
	movl	%eax, (%ebx)
Remove_From_symbolTableNode_List_endif_16:



Remove_From_symbolTableNode_List_ret:
	movl	%ebp, %esp
	popl	%ebp
	ret




	#debug: func-def: ( symbolTableNode_List * listPtr ) 
.globl Is_symbolTableNode_List_Empty
.type Is_symbolTableNode_List_Empty, @function
Is_symbolTableNode_List_Empty:
	pushl	%ebp
	movl	%esp, %ebp
	subl	$0, %esp


	#debug: return: return listPtr -> head == 0 ; 
	movl	%ebp, %eax
	addl	$8, %eax
	movl	(%eax), %eax
	addl	$0, %eax
	movl	(%eax), %eax
	pushl	%eax
	popl	%ebx
	cmpl	$0, %ebx
	movl	$1, %eax
	je	Is_symbolTableNode_List_Empty_reltrue_18
	movl	$0, %eax
Is_symbolTableNode_List_Empty_reltrue_18:
	jmp	Is_symbolTableNode_List_Empty_ret


Is_symbolTableNode_List_Empty_ret:
	movl	%ebp, %esp
	popl	%ebp
	ret




	#debug: func-def: ( symbolTable * table , char * errstr , token name ) 
.globl symbol_reportError
.type symbol_reportError, @function
symbol_reportError:
	pushl	%ebp
	movl	%esp, %ebp
	subl	$4, %esp


	#debug: assignment: table -> cnterrors = table -> cnterrors + 1 ; 
	movl	%ebp, %eax
	addl	$8, %eax
	movl	(%eax), %eax
	addl	$4, %eax
	pushl	%eax
	movl	%ebp, %eax
	addl	$8, %eax
	movl	(%eax), %eax
	addl	$4, %eax
	movl	(%eax), %eax
	pushl	%eax
	popl	%ebx
	addl	$1, %ebx
	pushl	%ebx
	popl	%eax
	popl	%ebx
	movl	%eax, (%ebx)
	#debug: assignment: filename = preproc_getFilename ( table -> parse -> scan -> pp , name . pos_fileid ) ; 
	subl	$8, %esp
	movl	%ebp, %eax
	addl	$8, %eax
	movl	(%eax), %eax
	addl	$0, %eax
	movl	(%eax), %eax
	addl	$0, %eax
	movl	(%eax), %eax
	addl	$17, %eax
	movl	(%eax), %eax
	movl	%eax, 0(%esp)
	movl	%ebp, %eax
	addl	$16, %eax
	addl	$12, %eax
	movl	(%eax), %eax
	movl	%eax, 4(%esp)
	call	preproc_getFilename
	addl	$8, %esp
	movl	%eax, -4(%ebp)
	#debug: func-call: printf ( "SYMTAB_ERROR: %d, " , table -> parse -> curr -> pos_col ) 
	subl	$8, %esp
	movl	$symtab+0, 0(%esp)
	movl	%ebp, %eax
	addl	$8, %eax
	movl	(%eax), %eax
	addl	$0, %eax
	movl	(%eax), %eax
	addl	$16, %eax
	movl	(%eax), %eax
	addl	$4, %eax
	movl	(%eax), %eax
	movl	%eax, 4(%esp)
	call	printf
	addl	$8, %esp
	#debug: func-call: printf ( "%d, " , table -> parse -> curr -> pos_line ) 
	subl	$8, %esp
	movl	$symtab+19, 0(%esp)
	movl	%ebp, %eax
	addl	$8, %eax
	movl	(%eax), %eax
	addl	$0, %eax
	movl	(%eax), %eax
	addl	$16, %eax
	movl	(%eax), %eax
	addl	$8, %eax
	movl	(%eax), %eax
	movl	%eax, 4(%esp)
	call	printf
	addl	$8, %esp
	#debug: if: filename 
	movl	-4(%ebp), %eax
	testl	%eax, %eax
	jnz	symbol_reportError_ifbl_19
	jmp	symbol_reportError_elsebl_19
symbol_reportError_ifbl_19:
	#debug: func-call: printf ( "%s:\n" , filename ) 
	subl	$8, %esp
	movl	$symtab+24, 0(%esp)
	movl	-4(%ebp), %eax
	movl	%eax, 4(%esp)
	call	printf
	addl	$8, %esp
	jmp	symbol_reportError_endif_19

symbol_reportError_elsebl_19:

	#debug: func-call: printf ( "[ERR filename] (%p)\n" , filename ) 
	subl	$8, %esp
	movl	$symtab+29, 0(%esp)
	movl	-4(%ebp), %eax
	movl	%eax, 4(%esp)
	call	printf
	addl	$8, %esp
symbol_reportError_endif_19:

	#debug: func-call: printf ( "\tToken is '%s' ::   " , name . content ) 
	subl	$8, %esp
	movl	$symtab+50, 0(%esp)
	movl	%ebp, %eax
	addl	$16, %eax
	addl	$16, %eax
	movl	%eax, 4(%esp)
	call	printf
	addl	$8, %esp
	#debug: func-call: printf ( "%s\n" , errstr ) 
	subl	$8, %esp
	movl	$symtab+71, 0(%esp)
	movl	12(%ebp), %eax
	movl	%eax, 4(%esp)
	call	printf
	addl	$8, %esp


symbol_reportError_ret:
	movl	%ebp, %esp
	popl	%ebp
	ret




	#debug: func-def: ( symbolTable * table , syntaxTreeNode * struct1 , syntaxTreeNode * struct2 ) 
.globl symbol_EqualSignature
.type symbol_EqualSignature, @function
symbol_EqualSignature:
	pushl	%ebp
	movl	%esp, %ebp
	subl	$16, %esp


	#debug: if: ! syntax_EqualTrees ( syntax_GetChild ( struct1 , 0 ) , syntax_GetChild ( struct2 , 0 ) ) 
	subl	$8, %esp
	subl	$8, %esp
	movl	12(%ebp), %eax
	movl	%eax, 0(%esp)
	movl	$0, 4(%esp)
	call	syntax_GetChild
	addl	$8, %esp
	movl	%eax, 0(%esp)
	subl	$8, %esp
	movl	16(%ebp), %eax
	movl	%eax, 0(%esp)
	movl	$0, 4(%esp)
	call	syntax_GetChild
	addl	$8, %esp
	movl	%eax, 4(%esp)
	call	syntax_EqualTrees
	addl	$8, %esp
	testl	%eax, %eax
	movl	$1, %eax
	jz	symbol_EqualSignature_logfactfalse_21
	movl	$0, %eax
symbol_EqualSignature_logfactfalse_21:
	testl	%eax, %eax
	jnz	symbol_EqualSignature_ifbl_20
	jmp	symbol_EqualSignature_elsebl_20
symbol_EqualSignature_ifbl_20:
	#debug: return: return 0 ; 
	movl	$0, %eax
	jmp	symbol_EqualSignature_ret
	jmp	symbol_EqualSignature_endif_20

symbol_EqualSignature_elsebl_20:

symbol_EqualSignature_endif_20:

	#debug: assignment: cntarg = symbol_CountFunctionArgs ( table , struct1 ) ; 
	subl	$8, %esp
	movl	8(%ebp), %eax
	movl	%eax, 0(%esp)
	movl	12(%ebp), %eax
	movl	%eax, 4(%esp)
	call	symbol_CountFunctionArgs
	addl	$8, %esp
	movl	%eax, -4(%ebp)
	#debug: if: cntarg != symbol_CountFunctionArgs ( table , struct2 ) 
	pushl	-4(%ebp)
	subl	$8, %esp
	movl	8(%ebp), %eax
	movl	%eax, 0(%esp)
	movl	16(%ebp), %eax
	movl	%eax, 4(%esp)
	call	symbol_CountFunctionArgs
	addl	$8, %esp
	popl	%ebx
	cmpl	%eax, %ebx
	movl	$1, %eax
	jne	symbol_EqualSignature_reltrue_23
	movl	$0, %eax
symbol_EqualSignature_reltrue_23:
	testl	%eax, %eax
	jnz	symbol_EqualSignature_ifbl_22
	jmp	symbol_EqualSignature_elsebl_22
symbol_EqualSignature_ifbl_22:
	#debug: return: return 0 ; 
	movl	$0, %eax
	jmp	symbol_EqualSignature_ret
	jmp	symbol_EqualSignature_endif_22

symbol_EqualSignature_elsebl_22:

symbol_EqualSignature_endif_22:

	#debug: assignment: idx = 0 ; 
	movl	$0, -8(%ebp)
	#debug: while: idx < cntarg 
symbol_EqualSignature_while_24:
	pushl	-8(%ebp)
	popl	%ebx
	cmpl	-4(%ebp), %ebx
	movl	$1, %eax
	jl	symbol_EqualSignature_reltrue_25
	movl	$0, %eax
symbol_EqualSignature_reltrue_25:
	testl	%eax, %eax
	jz	symbol_EqualSignature_endwhile_24

	#debug: assignment: arg1 = symbol_GetFunctionArg ( table , struct1 , idx ) ; 
	subl	$12, %esp
	movl	8(%ebp), %eax
	movl	%eax, 0(%esp)
	movl	12(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-8(%ebp), %eax
	movl	%eax, 8(%esp)
	call	symbol_GetFunctionArg
	addl	$12, %esp
	movl	%eax, -12(%ebp)
	#debug: assignment: arg2 = symbol_GetFunctionArg ( table , struct2 , idx ) ; 
	subl	$12, %esp
	movl	8(%ebp), %eax
	movl	%eax, 0(%esp)
	movl	16(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-8(%ebp), %eax
	movl	%eax, 8(%esp)
	call	symbol_GetFunctionArg
	addl	$12, %esp
	movl	%eax, -16(%ebp)
	#debug: assignment: arg1 = syntax_GetChild ( arg1 , 0 ) ; 
	subl	$8, %esp
	movl	-12(%ebp), %eax
	movl	%eax, 0(%esp)
	movl	$0, 4(%esp)
	call	syntax_GetChild
	addl	$8, %esp
	movl	%eax, -12(%ebp)
	#debug: assignment: arg2 = syntax_GetChild ( arg2 , 0 ) ; 
	subl	$8, %esp
	movl	-16(%ebp), %eax
	movl	%eax, 0(%esp)
	movl	$0, 4(%esp)
	call	syntax_GetChild
	addl	$8, %esp
	movl	%eax, -16(%ebp)
	#debug: if: ! syntax_EqualTrees ( arg1 , arg2 ) 
	subl	$8, %esp
	movl	-12(%ebp), %eax
	movl	%eax, 0(%esp)
	movl	-16(%ebp), %eax
	movl	%eax, 4(%esp)
	call	syntax_EqualTrees
	addl	$8, %esp
	testl	%eax, %eax
	movl	$1, %eax
	jz	symbol_EqualSignature_logfactfalse_27
	movl	$0, %eax
symbol_EqualSignature_logfactfalse_27:
	testl	%eax, %eax
	jnz	symbol_EqualSignature_ifbl_26
	jmp	symbol_EqualSignature_elsebl_26
symbol_EqualSignature_ifbl_26:
	#debug: return: return 0 ; 
	movl	$0, %eax
	jmp	symbol_EqualSignature_ret
	jmp	symbol_EqualSignature_endif_26

symbol_EqualSignature_elsebl_26:

symbol_EqualSignature_endif_26:

	#debug: assignment: idx = idx + 1 ; 
	pushl	-8(%ebp)
	popl	%ebx
	addl	$1, %ebx
	pushl	%ebx
	popl	%eax
	movl	%eax, -8(%ebp)
	jmp	symbol_EqualSignature_while_24
symbol_EqualSignature_endwhile_24:

	#debug: return: return 1 ; 
	movl	$1, %eax
	jmp	symbol_EqualSignature_ret


symbol_EqualSignature_ret:
	movl	%ebp, %esp
	popl	%ebp
	ret




	#debug: func-def: ( symbolTable * table , token tok ) 
.globl symbol_ToInt
.type symbol_ToInt, @function
symbol_ToInt:
	pushl	%ebp
	movl	%esp, %ebp
	subl	$0, %esp


	#debug: if: tok . type != 44 
	movl	%ebp, %eax
	addl	$12, %eax
	addl	$0, %eax
	movl	(%eax), %eax
	pushl	%eax
	popl	%ebx
	cmpl	$44, %ebx
	movl	$1, %eax
	jne	symbol_ToInt_reltrue_29
	movl	$0, %eax
symbol_ToInt_reltrue_29:
	testl	%eax, %eax
	jnz	symbol_ToInt_ifbl_28
	jmp	symbol_ToInt_elsebl_28
symbol_ToInt_ifbl_28:
	#debug: func-call: symbol_reportError ( table , "Internal error: Can't get integer value of non-number token." , tok ) 
	subl	$152, %esp
	movl	8(%ebp), %eax
	movl	%eax, 0(%esp)
	movl	$symtab+75, 4(%esp)
	movl	%ebp, %eax
	addl	$12, %eax
	movl	%esp, %ebx
	addl	$8, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	call	symbol_reportError
	addl	$152, %esp
	#debug: return: return - 1 ; 
	pushl	$0
	popl	%ebx
	subl	$1, %ebx
	pushl	%ebx
	popl	%eax
	jmp	symbol_ToInt_ret
	jmp	symbol_ToInt_endif_28

symbol_ToInt_elsebl_28:

symbol_ToInt_endif_28:

	#debug: return: return atoi ( tok . content ) ; 
	subl	$4, %esp
	movl	%ebp, %eax
	addl	$12, %eax
	addl	$16, %eax
	movl	%eax, 0(%esp)
	call	atoi
	addl	$4, %esp
	jmp	symbol_ToInt_ret


symbol_ToInt_ret:
	movl	%ebp, %esp
	popl	%ebp
	ret




	#debug: func-def: ( symbolTable * table , token name , int type , syntaxTreeNode * structure ) 
.globl symbol_AddSymbol
.type symbol_AddSymbol, @function
symbol_AddSymbol:
	pushl	%ebp
	movl	%esp, %ebp
	subl	$4, %esp


	#debug: assignment: node = malloc ( sizeof ( symbolTableNode ) ) ; 
	subl	$4, %esp
	movl	$160, 0(%esp)
	call	malloc
	addl	$4, %esp
	movl	%eax, -4(%ebp)
	#debug: assignment: node -> name = name ; 
	movl	%ebp, %eax
	addl	$-4, %eax
	movl	(%eax), %eax
	addl	$0, %eax
	pushl	%eax
	movl	%ebp, %eax
	addl	$12, %eax
	popl	%ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	#debug: assignment: node -> type = type ; 
	movl	%ebp, %eax
	addl	$-4, %eax
	movl	(%eax), %eax
	addl	$144, %eax
	pushl	%eax
	movl	156(%ebp), %eax
	popl	%ebx
	movl	%eax, (%ebx)
	#debug: assignment: node -> structure = structure ; 
	movl	%ebp, %eax
	addl	$-4, %eax
	movl	(%eax), %eax
	addl	$148, %eax
	pushl	%eax
	movl	160(%ebp), %eax
	popl	%ebx
	movl	%eax, (%ebx)
	#debug: func-call: Add_To_Back_Of_symbolTableNode_List ( & table -> list , node ) 
	subl	$8, %esp
	movl	%ebp, %eax
	addl	$8, %eax
	movl	(%eax), %eax
	addl	$8, %eax
	movl	%eax, 0(%esp)
	movl	-4(%ebp), %eax
	movl	%eax, 4(%esp)
	call	Add_To_Back_Of_symbolTableNode_List
	addl	$8, %esp


symbol_AddSymbol_ret:
	movl	%ebp, %esp
	popl	%ebp
	ret




	#debug: func-def: ( parser * parser , symbolTable * table ) 
.globl symbol_CreateSymbolTable
.type symbol_CreateSymbolTable, @function
symbol_CreateSymbolTable:
	pushl	%ebp
	movl	%esp, %ebp
	subl	$0, %esp


	#debug: assignment: table -> parse = parser ; 
	movl	%ebp, %eax
	addl	$12, %eax
	movl	(%eax), %eax
	addl	$0, %eax
	pushl	%eax
	movl	8(%ebp), %eax
	popl	%ebx
	movl	%eax, (%ebx)
	#debug: assignment: table -> cnterrors = 0 ; 
	movl	%ebp, %eax
	addl	$12, %eax
	movl	(%eax), %eax
	addl	$4, %eax
	pushl	%eax
	popl	%ebx
	movl	$0, (%ebx)
	#debug: func-call: Clear_symbolTableNode_List ( & table -> list ) 
	subl	$4, %esp
	movl	%ebp, %eax
	addl	$12, %eax
	movl	(%eax), %eax
	addl	$8, %eax
	movl	%eax, 0(%esp)
	call	Clear_symbolTableNode_List
	addl	$4, %esp


symbol_CreateSymbolTable_ret:
	movl	%ebp, %esp
	popl	%ebp
	ret




	#debug: func-def: ( symbolTable * table ) 
.globl symbol_destroy
.type symbol_destroy, @function
symbol_destroy:
	pushl	%ebp
	movl	%esp, %ebp
	subl	$8, %esp


	#debug: assignment: node = Get_Front_Of_symbolTableNode_List ( & table -> list ) ; 
	subl	$4, %esp
	movl	%ebp, %eax
	addl	$8, %eax
	movl	(%eax), %eax
	addl	$8, %eax
	movl	%eax, 0(%esp)
	call	Get_Front_Of_symbolTableNode_List
	addl	$4, %esp
	movl	%eax, -4(%ebp)
	#debug: while: node != 0 
symbol_destroy_while_30:
	pushl	-4(%ebp)
	popl	%ebx
	cmpl	$0, %ebx
	movl	$1, %eax
	jne	symbol_destroy_reltrue_31
	movl	$0, %eax
symbol_destroy_reltrue_31:
	testl	%eax, %eax
	jz	symbol_destroy_endwhile_30

	#debug: assignment: next = Get_Next_In_symbolTableNode_List ( node ) ; 
	subl	$4, %esp
	movl	-4(%ebp), %eax
	movl	%eax, 0(%esp)
	call	Get_Next_In_symbolTableNode_List
	addl	$4, %esp
	movl	%eax, -8(%ebp)
	#debug: func-call: free ( node ) 
	subl	$4, %esp
	movl	-4(%ebp), %eax
	movl	%eax, 0(%esp)
	call	free
	addl	$4, %esp
	#debug: assignment: node = next ; 
	movl	-8(%ebp), %eax
	movl	%eax, -4(%ebp)
	jmp	symbol_destroy_while_30
symbol_destroy_endwhile_30:

	#debug: func-call: Clear_symbolTableNode_List ( & table -> list ) 
	subl	$4, %esp
	movl	%ebp, %eax
	addl	$8, %eax
	movl	(%eax), %eax
	addl	$8, %eax
	movl	%eax, 0(%esp)
	call	Clear_symbolTableNode_List
	addl	$4, %esp


symbol_destroy_ret:
	movl	%ebp, %esp
	popl	%ebp
	ret




	#debug: func-def: ( symbolTable * table ) 
.globl symbol_CountEntries
.type symbol_CountEntries, @function
symbol_CountEntries:
	pushl	%ebp
	movl	%esp, %ebp
	subl	$8, %esp


	#debug: assignment: node = Get_Front_Of_symbolTableNode_List ( & table -> list ) ; 
	subl	$4, %esp
	movl	%ebp, %eax
	addl	$8, %eax
	movl	(%eax), %eax
	addl	$8, %eax
	movl	%eax, 0(%esp)
	call	Get_Front_Of_symbolTableNode_List
	addl	$4, %esp
	movl	%eax, -8(%ebp)
	#debug: assignment: cnt = 0 ; 
	movl	$0, -4(%ebp)
	#debug: while: node != 0 
symbol_CountEntries_while_32:
	pushl	-8(%ebp)
	popl	%ebx
	cmpl	$0, %ebx
	movl	$1, %eax
	jne	symbol_CountEntries_reltrue_33
	movl	$0, %eax
symbol_CountEntries_reltrue_33:
	testl	%eax, %eax
	jz	symbol_CountEntries_endwhile_32

	#debug: assignment: node = Get_Next_In_symbolTableNode_List ( node ) ; 
	subl	$4, %esp
	movl	-8(%ebp), %eax
	movl	%eax, 0(%esp)
	call	Get_Next_In_symbolTableNode_List
	addl	$4, %esp
	movl	%eax, -8(%ebp)
	#debug: assignment: cnt = cnt + 1 ; 
	pushl	-4(%ebp)
	popl	%ebx
	addl	$1, %ebx
	pushl	%ebx
	popl	%eax
	movl	%eax, -4(%ebp)
	jmp	symbol_CountEntries_while_32
symbol_CountEntries_endwhile_32:

	#debug: return: return cnt ; 
	movl	-4(%ebp), %eax
	jmp	symbol_CountEntries_ret


symbol_CountEntries_ret:
	movl	%ebp, %esp
	popl	%ebp
	ret




	#debug: func-def: ( symbolTable * table , int idx ) 
.globl symbol_GetEntry
.type symbol_GetEntry, @function
symbol_GetEntry:
	pushl	%ebp
	movl	%esp, %ebp
	subl	$8, %esp


	#debug: assignment: node = Get_Front_Of_symbolTableNode_List ( & table -> list ) ; 
	subl	$4, %esp
	movl	%ebp, %eax
	addl	$8, %eax
	movl	(%eax), %eax
	addl	$8, %eax
	movl	%eax, 0(%esp)
	call	Get_Front_Of_symbolTableNode_List
	addl	$4, %esp
	movl	%eax, -8(%ebp)
	#debug: assignment: cnt = 0 ; 
	movl	$0, -4(%ebp)
	#debug: while: idx > cnt 
symbol_GetEntry_while_34:
	pushl	12(%ebp)
	popl	%ebx
	cmpl	-4(%ebp), %ebx
	movl	$1, %eax
	jg	symbol_GetEntry_reltrue_35
	movl	$0, %eax
symbol_GetEntry_reltrue_35:
	testl	%eax, %eax
	jz	symbol_GetEntry_endwhile_34

	#debug: if: node == 0 
	pushl	-8(%ebp)
	popl	%ebx
	cmpl	$0, %ebx
	movl	$1, %eax
	je	symbol_GetEntry_reltrue_37
	movl	$0, %eax
symbol_GetEntry_reltrue_37:
	testl	%eax, %eax
	jnz	symbol_GetEntry_ifbl_36
	jmp	symbol_GetEntry_elsebl_36
symbol_GetEntry_ifbl_36:
	#debug: return: return 0 ; 
	movl	$0, %eax
	jmp	symbol_GetEntry_ret
	jmp	symbol_GetEntry_endif_36

symbol_GetEntry_elsebl_36:

symbol_GetEntry_endif_36:

	#debug: assignment: node = Get_Next_In_symbolTableNode_List ( node ) ; 
	subl	$4, %esp
	movl	-8(%ebp), %eax
	movl	%eax, 0(%esp)
	call	Get_Next_In_symbolTableNode_List
	addl	$4, %esp
	movl	%eax, -8(%ebp)
	#debug: assignment: cnt = cnt + 1 ; 
	pushl	-4(%ebp)
	popl	%ebx
	addl	$1, %ebx
	pushl	%ebx
	popl	%eax
	movl	%eax, -4(%ebp)
	jmp	symbol_GetEntry_while_34
symbol_GetEntry_endwhile_34:

	#debug: return: return node ; 
	movl	-8(%ebp), %eax
	jmp	symbol_GetEntry_ret


symbol_GetEntry_ret:
	movl	%ebp, %esp
	popl	%ebp
	ret




	#debug: func-def: ( symbolTable * table ) 
.globl symbol_printTable
.type symbol_printTable, @function
symbol_printTable:
	pushl	%ebp
	movl	%esp, %ebp
	subl	$4, %esp


	#debug: assignment: node = Get_Front_Of_symbolTableNode_List ( & table -> list ) ; 
	subl	$4, %esp
	movl	%ebp, %eax
	addl	$8, %eax
	movl	(%eax), %eax
	addl	$8, %eax
	movl	%eax, 0(%esp)
	call	Get_Front_Of_symbolTableNode_List
	addl	$4, %esp
	movl	%eax, -4(%ebp)
	#debug: while: node != 0 
symbol_printTable_while_38:
	pushl	-4(%ebp)
	popl	%ebx
	cmpl	$0, %ebx
	movl	$1, %eax
	jne	symbol_printTable_reltrue_39
	movl	$0, %eax
symbol_printTable_reltrue_39:
	testl	%eax, %eax
	jz	symbol_printTable_endwhile_38

	#debug: func-call: printf ( "  Type: %d" , node -> type ) 
	subl	$8, %esp
	movl	$symtab+136, 0(%esp)
	movl	%ebp, %eax
	addl	$-4, %eax
	movl	(%eax), %eax
	addl	$144, %eax
	movl	(%eax), %eax
	movl	%eax, 4(%esp)
	call	printf
	addl	$8, %esp
	#debug: func-call: printf ( ",   Size: %3d" , symbol_Sizeof_Symbol ( table , node ) ) 
	subl	$8, %esp
	movl	$symtab+147, 0(%esp)
	subl	$8, %esp
	movl	8(%ebp), %eax
	movl	%eax, 0(%esp)
	movl	-4(%ebp), %eax
	movl	%eax, 4(%esp)
	call	symbol_Sizeof_Symbol
	addl	$8, %esp
	movl	%eax, 4(%esp)
	call	printf
	addl	$8, %esp
	#debug: func-call: printf ( ",   Name: %10s,   " , node -> name . content ) 
	subl	$8, %esp
	movl	$symtab+161, 0(%esp)
	movl	%ebp, %eax
	addl	$-4, %eax
	movl	(%eax), %eax
	addl	$0, %eax
	addl	$16, %eax
	movl	%eax, 4(%esp)
	call	printf
	addl	$8, %esp
	#debug: if: node -> type == 6 || node -> type == 4 
	movl	%ebp, %eax
	addl	$-4, %eax
	movl	(%eax), %eax
	addl	$144, %eax
	movl	(%eax), %eax
	pushl	%eax
	popl	%ebx
	cmpl	$6, %ebx
	movl	$1, %eax
	je	symbol_printTable_reltrue_42
	movl	$0, %eax
symbol_printTable_reltrue_42:
	testl	%eax, %eax
	jnz	symbol_printTable_logexprtrue_41
	movl	%ebp, %eax
	addl	$-4, %eax
	movl	(%eax), %eax
	addl	$144, %eax
	movl	(%eax), %eax
	pushl	%eax
	popl	%ebx
	cmpl	$4, %ebx
	movl	$1, %eax
	je	symbol_printTable_reltrue_43
	movl	$0, %eax
symbol_printTable_reltrue_43:
	testl	%eax, %eax
	jnz	symbol_printTable_logexprtrue_41
	movl	$0, %eax
	jmp	symbol_printTable_logexprfalse_41
symbol_printTable_logexprtrue_41:
	movl	$1, %eax
symbol_printTable_logexprfalse_41:
	testl	%eax, %eax
	jnz	symbol_printTable_ifbl_40
	jmp	symbol_printTable_elsebl_40
symbol_printTable_ifbl_40:
	#debug: func-call: printf ( "Offset: %d\n" , symbol_GetNonGlobalOffset ( table , node ) ) 
	subl	$8, %esp
	movl	$symtab+180, 0(%esp)
	subl	$8, %esp
	movl	8(%ebp), %eax
	movl	%eax, 0(%esp)
	movl	-4(%ebp), %eax
	movl	%eax, 4(%esp)
	call	symbol_GetNonGlobalOffset
	addl	$8, %esp
	movl	%eax, 4(%esp)
	call	printf
	addl	$8, %esp
	jmp	symbol_printTable_endif_40

symbol_printTable_elsebl_40:

	#debug: if: node -> type == 5 || node -> type == 7 
	movl	%ebp, %eax
	addl	$-4, %eax
	movl	(%eax), %eax
	addl	$144, %eax
	movl	(%eax), %eax
	pushl	%eax
	popl	%ebx
	cmpl	$5, %ebx
	movl	$1, %eax
	je	symbol_printTable_reltrue_46
	movl	$0, %eax
symbol_printTable_reltrue_46:
	testl	%eax, %eax
	jnz	symbol_printTable_logexprtrue_45
	movl	%ebp, %eax
	addl	$-4, %eax
	movl	(%eax), %eax
	addl	$144, %eax
	movl	(%eax), %eax
	pushl	%eax
	popl	%ebx
	cmpl	$7, %ebx
	movl	$1, %eax
	je	symbol_printTable_reltrue_47
	movl	$0, %eax
symbol_printTable_reltrue_47:
	testl	%eax, %eax
	jnz	symbol_printTable_logexprtrue_45
	movl	$0, %eax
	jmp	symbol_printTable_logexprfalse_45
symbol_printTable_logexprtrue_45:
	movl	$1, %eax
symbol_printTable_logexprfalse_45:
	testl	%eax, %eax
	jnz	symbol_printTable_ifbl_44
	jmp	symbol_printTable_elsebl_44
symbol_printTable_ifbl_44:
	#debug: func-call: printf ( "Offset: %d\n" , symbol_GetGlobalOffset ( table , node ) ) 
	subl	$8, %esp
	movl	$symtab+180, 0(%esp)
	subl	$8, %esp
	movl	8(%ebp), %eax
	movl	%eax, 0(%esp)
	movl	-4(%ebp), %eax
	movl	%eax, 4(%esp)
	call	symbol_GetGlobalOffset
	addl	$8, %esp
	movl	%eax, 4(%esp)
	call	printf
	addl	$8, %esp
	jmp	symbol_printTable_endif_44

symbol_printTable_elsebl_44:

	#debug: func-call: puts ( "" ) 
	subl	$4, %esp
	movl	$symtab+192, 0(%esp)
	call	puts
	addl	$4, %esp
symbol_printTable_endif_44:

symbol_printTable_endif_40:

	#debug: assignment: node = Get_Next_In_symbolTableNode_List ( node ) ; 
	subl	$4, %esp
	movl	-4(%ebp), %eax
	movl	%eax, 0(%esp)
	call	Get_Next_In_symbolTableNode_List
	addl	$4, %esp
	movl	%eax, -4(%ebp)
	jmp	symbol_printTable_while_38
symbol_printTable_endwhile_38:

	#debug: func-call: printf ( "  global-, param-, local-blocksize: %d" , symbol_GetGlobalsBlockSize ( table ) ) 
	subl	$8, %esp
	movl	$symtab+193, 0(%esp)
	subl	$4, %esp
	movl	8(%ebp), %eax
	movl	%eax, 0(%esp)
	call	symbol_GetGlobalsBlockSize
	addl	$4, %esp
	movl	%eax, 4(%esp)
	call	printf
	addl	$8, %esp
	#debug: func-call: printf ( ", %d" , symbol_GetParameterBlockSize ( table ) ) 
	subl	$8, %esp
	movl	$symtab+232, 0(%esp)
	subl	$4, %esp
	movl	8(%ebp), %eax
	movl	%eax, 0(%esp)
	call	symbol_GetParameterBlockSize
	addl	$4, %esp
	movl	%eax, 4(%esp)
	call	printf
	addl	$8, %esp
	#debug: func-call: printf ( ", %d\n" , symbol_GetLocalVarBlockSize ( table ) ) 
	subl	$8, %esp
	movl	$symtab+237, 0(%esp)
	subl	$4, %esp
	movl	8(%ebp), %eax
	movl	%eax, 0(%esp)
	call	symbol_GetLocalVarBlockSize
	addl	$4, %esp
	movl	%eax, 4(%esp)
	call	printf
	addl	$8, %esp


symbol_printTable_ret:
	movl	%ebp, %esp
	popl	%ebp
	ret




	#debug: func-def: ( symbolTable * table , token name , int type ) 
.globl symbol_FindTypedSymbol
.type symbol_FindTypedSymbol, @function
symbol_FindTypedSymbol:
	pushl	%ebp
	movl	%esp, %ebp
	subl	$4, %esp


	#debug: assignment: node = Get_Front_Of_symbolTableNode_List ( & table -> list ) ; 
	subl	$4, %esp
	movl	%ebp, %eax
	addl	$8, %eax
	movl	(%eax), %eax
	addl	$8, %eax
	movl	%eax, 0(%esp)
	call	Get_Front_Of_symbolTableNode_List
	addl	$4, %esp
	movl	%eax, -4(%ebp)
	#debug: while: node != 0 
symbol_FindTypedSymbol_while_48:
	pushl	-4(%ebp)
	popl	%ebx
	cmpl	$0, %ebx
	movl	$1, %eax
	jne	symbol_FindTypedSymbol_reltrue_49
	movl	$0, %eax
symbol_FindTypedSymbol_reltrue_49:
	testl	%eax, %eax
	jz	symbol_FindTypedSymbol_endwhile_48

	#debug: if: node -> type == type && strcmp ( name . content , node -> name . content ) == 0 
	movl	%ebp, %eax
	addl	$-4, %eax
	movl	(%eax), %eax
	addl	$144, %eax
	movl	(%eax), %eax
	pushl	%eax
	popl	%ebx
	cmpl	156(%ebp), %ebx
	movl	$1, %eax
	je	symbol_FindTypedSymbol_reltrue_52
	movl	$0, %eax
symbol_FindTypedSymbol_reltrue_52:
	testl	%eax, %eax
	jz	symbol_FindTypedSymbol_logtermfalse_51
	subl	$8, %esp
	movl	%ebp, %eax
	addl	$12, %eax
	addl	$16, %eax
	movl	%eax, 0(%esp)
	movl	%ebp, %eax
	addl	$-4, %eax
	movl	(%eax), %eax
	addl	$0, %eax
	addl	$16, %eax
	movl	%eax, 4(%esp)
	call	strcmp
	addl	$8, %esp
	pushl	%eax
	popl	%ebx
	cmpl	$0, %ebx
	movl	$1, %eax
	je	symbol_FindTypedSymbol_reltrue_53
	movl	$0, %eax
symbol_FindTypedSymbol_reltrue_53:
	testl	%eax, %eax
	jz	symbol_FindTypedSymbol_logtermfalse_51
	movl	$1, %eax
	jmp	symbol_FindTypedSymbol_logtermtrue_51
symbol_FindTypedSymbol_logtermfalse_51:
	movl	$0, %eax
symbol_FindTypedSymbol_logtermtrue_51:
	testl	%eax, %eax
	jnz	symbol_FindTypedSymbol_ifbl_50
	jmp	symbol_FindTypedSymbol_elsebl_50
symbol_FindTypedSymbol_ifbl_50:
	#debug: return: return node ; 
	movl	-4(%ebp), %eax
	jmp	symbol_FindTypedSymbol_ret
	jmp	symbol_FindTypedSymbol_endif_50

symbol_FindTypedSymbol_elsebl_50:

symbol_FindTypedSymbol_endif_50:

	#debug: assignment: node = Get_Next_In_symbolTableNode_List ( node ) ; 
	subl	$4, %esp
	movl	-4(%ebp), %eax
	movl	%eax, 0(%esp)
	call	Get_Next_In_symbolTableNode_List
	addl	$4, %esp
	movl	%eax, -4(%ebp)
	jmp	symbol_FindTypedSymbol_while_48
symbol_FindTypedSymbol_endwhile_48:

	#debug: return: return 0 ; 
	movl	$0, %eax
	jmp	symbol_FindTypedSymbol_ret


symbol_FindTypedSymbol_ret:
	movl	%ebp, %esp
	popl	%ebp
	ret




	#debug: func-def: ( symbolTable * table , token name ) 
.globl symbol_FindGlobalVariable
.type symbol_FindGlobalVariable, @function
symbol_FindGlobalVariable:
	pushl	%ebp
	movl	%esp, %ebp
	subl	$0, %esp


	#debug: return: return symbol_FindTypedSymbol ( table , name , 5 ) ; 
	subl	$152, %esp
	movl	8(%ebp), %eax
	movl	%eax, 0(%esp)
	movl	%ebp, %eax
	addl	$12, %eax
	movl	%esp, %ebx
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	$5, 148(%esp)
	call	symbol_FindTypedSymbol
	addl	$152, %esp
	jmp	symbol_FindGlobalVariable_ret


symbol_FindGlobalVariable_ret:
	movl	%ebp, %esp
	popl	%ebp
	ret




	#debug: func-def: ( symbolTable * table , token name ) 
.globl symbol_FindNonGlobalVariable
.type symbol_FindNonGlobalVariable, @function
symbol_FindNonGlobalVariable:
	pushl	%ebp
	movl	%esp, %ebp
	subl	$4, %esp


	#debug: assignment: symbol = symbol_FindTypedSymbol ( table , name , 4 ) ; 
	subl	$152, %esp
	movl	8(%ebp), %eax
	movl	%eax, 0(%esp)
	movl	%ebp, %eax
	addl	$12, %eax
	movl	%esp, %ebx
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	$4, 148(%esp)
	call	symbol_FindTypedSymbol
	addl	$152, %esp
	movl	%eax, -4(%ebp)
	#debug: if: symbol == 0 
	pushl	-4(%ebp)
	popl	%ebx
	cmpl	$0, %ebx
	movl	$1, %eax
	je	symbol_FindNonGlobalVariable_reltrue_55
	movl	$0, %eax
symbol_FindNonGlobalVariable_reltrue_55:
	testl	%eax, %eax
	jnz	symbol_FindNonGlobalVariable_ifbl_54
	jmp	symbol_FindNonGlobalVariable_elsebl_54
symbol_FindNonGlobalVariable_ifbl_54:
	#debug: assignment: symbol = symbol_FindTypedSymbol ( table , name , 6 ) ; 
	subl	$152, %esp
	movl	8(%ebp), %eax
	movl	%eax, 0(%esp)
	movl	%ebp, %eax
	addl	$12, %eax
	movl	%esp, %ebx
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	$6, 148(%esp)
	call	symbol_FindTypedSymbol
	addl	$152, %esp
	movl	%eax, -4(%ebp)
	jmp	symbol_FindNonGlobalVariable_endif_54

symbol_FindNonGlobalVariable_elsebl_54:

symbol_FindNonGlobalVariable_endif_54:

	#debug: return: return symbol ; 
	movl	-4(%ebp), %eax
	jmp	symbol_FindNonGlobalVariable_ret


symbol_FindNonGlobalVariable_ret:
	movl	%ebp, %esp
	popl	%ebp
	ret




	#debug: func-def: ( symbolTable * table , token name ) 
.globl symbol_FindVariable
.type symbol_FindVariable, @function
symbol_FindVariable:
	pushl	%ebp
	movl	%esp, %ebp
	subl	$4, %esp


	#debug: assignment: symbol = symbol_FindNonGlobalVariable ( table , name ) ; 
	subl	$148, %esp
	movl	8(%ebp), %eax
	movl	%eax, 0(%esp)
	movl	%ebp, %eax
	addl	$12, %eax
	movl	%esp, %ebx
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	call	symbol_FindNonGlobalVariable
	addl	$148, %esp
	movl	%eax, -4(%ebp)
	#debug: if: symbol == 0 
	pushl	-4(%ebp)
	popl	%ebx
	cmpl	$0, %ebx
	movl	$1, %eax
	je	symbol_FindVariable_reltrue_57
	movl	$0, %eax
symbol_FindVariable_reltrue_57:
	testl	%eax, %eax
	jnz	symbol_FindVariable_ifbl_56
	jmp	symbol_FindVariable_elsebl_56
symbol_FindVariable_ifbl_56:
	#debug: assignment: symbol = symbol_FindGlobalVariable ( table , name ) ; 
	subl	$148, %esp
	movl	8(%ebp), %eax
	movl	%eax, 0(%esp)
	movl	%ebp, %eax
	addl	$12, %eax
	movl	%esp, %ebx
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	call	symbol_FindGlobalVariable
	addl	$148, %esp
	movl	%eax, -4(%ebp)
	jmp	symbol_FindVariable_endif_56

symbol_FindVariable_elsebl_56:

symbol_FindVariable_endif_56:

	#debug: return: return symbol ; 
	movl	-4(%ebp), %eax
	jmp	symbol_FindVariable_ret


symbol_FindVariable_ret:
	movl	%ebp, %esp
	popl	%ebp
	ret




	#debug: func-def: ( symbolTable * table , token name ) 
.globl symbol_FindFunction
.type symbol_FindFunction, @function
symbol_FindFunction:
	pushl	%ebp
	movl	%esp, %ebp
	subl	$4, %esp


	#debug: assignment: symbol = symbol_FindTypedSymbol ( table , name , 2 ) ; 
	subl	$152, %esp
	movl	8(%ebp), %eax
	movl	%eax, 0(%esp)
	movl	%ebp, %eax
	addl	$12, %eax
	movl	%esp, %ebx
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	$2, 148(%esp)
	call	symbol_FindTypedSymbol
	addl	$152, %esp
	movl	%eax, -4(%ebp)
	#debug: if: symbol == 0 
	pushl	-4(%ebp)
	popl	%ebx
	cmpl	$0, %ebx
	movl	$1, %eax
	je	symbol_FindFunction_reltrue_59
	movl	$0, %eax
symbol_FindFunction_reltrue_59:
	testl	%eax, %eax
	jnz	symbol_FindFunction_ifbl_58
	jmp	symbol_FindFunction_elsebl_58
symbol_FindFunction_ifbl_58:
	#debug: assignment: symbol = symbol_FindTypedSymbol ( table , name , 1 ) ; 
	subl	$152, %esp
	movl	8(%ebp), %eax
	movl	%eax, 0(%esp)
	movl	%ebp, %eax
	addl	$12, %eax
	movl	%esp, %ebx
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	$1, 148(%esp)
	call	symbol_FindTypedSymbol
	addl	$152, %esp
	movl	%eax, -4(%ebp)
	jmp	symbol_FindFunction_endif_58

symbol_FindFunction_elsebl_58:

symbol_FindFunction_endif_58:

	#debug: return: return symbol ; 
	movl	-4(%ebp), %eax
	jmp	symbol_FindFunction_ret


symbol_FindFunction_ret:
	movl	%ebp, %esp
	popl	%ebp
	ret




	#debug: func-def: ( symbolTable * table , token name ) 
.globl symbol_FindStruct
.type symbol_FindStruct, @function
symbol_FindStruct:
	pushl	%ebp
	movl	%esp, %ebp
	subl	$0, %esp


	#debug: return: return symbol_FindTypedSymbol ( table , name , 3 ) ; 
	subl	$152, %esp
	movl	8(%ebp), %eax
	movl	%eax, 0(%esp)
	movl	%ebp, %eax
	addl	$12, %eax
	movl	%esp, %ebx
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	$3, 148(%esp)
	call	symbol_FindTypedSymbol
	addl	$152, %esp
	jmp	symbol_FindStruct_ret


symbol_FindStruct_ret:
	movl	%ebp, %esp
	popl	%ebp
	ret




	#debug: func-def: ( symbolTable * table , token string ) 
.globl symbol_FindString
.type symbol_FindString, @function
symbol_FindString:
	pushl	%ebp
	movl	%esp, %ebp
	subl	$0, %esp


	#debug: return: return symbol_FindTypedSymbol ( table , string , 7 ) ; 
	subl	$152, %esp
	movl	8(%ebp), %eax
	movl	%eax, 0(%esp)
	movl	%ebp, %eax
	addl	$12, %eax
	movl	%esp, %ebx
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	$7, 148(%esp)
	call	symbol_FindTypedSymbol
	addl	$152, %esp
	jmp	symbol_FindString_ret


symbol_FindString_ret:
	movl	%ebp, %esp
	popl	%ebp
	ret




	#debug: func-def: ( symbolTable * table , syntaxTreeNode * structure ) 
.globl symbol_DefineGlobalVariable
.type symbol_DefineGlobalVariable, @function
symbol_DefineGlobalVariable:
	pushl	%ebp
	movl	%esp, %ebp
	subl	$148, %esp


	#debug: assignment: nametok = syntax_GetChild ( structure , 0 ) ; 
	subl	$8, %esp
	movl	12(%ebp), %eax
	movl	%eax, 0(%esp)
	movl	$0, 4(%esp)
	call	syntax_GetChild
	addl	$8, %esp
	movl	%eax, -148(%ebp)
	#debug: assignment: nametok = syntax_GetChild ( nametok , 1 ) ; 
	subl	$8, %esp
	movl	-148(%ebp), %eax
	movl	%eax, 0(%esp)
	movl	$1, 4(%esp)
	call	syntax_GetChild
	addl	$8, %esp
	movl	%eax, -148(%ebp)
	#debug: assignment: name = nametok -> tok ; 
	movl	%ebp, %eax
	addl	$-144, %eax
	pushl	%eax
	movl	%ebp, %eax
	addl	$-148, %eax
	movl	(%eax), %eax
	addl	$8, %eax
	popl	%ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	#debug: if: symbol_FindVariable ( table , name ) != 0 
	subl	$148, %esp
	movl	8(%ebp), %eax
	movl	%eax, 0(%esp)
	movl	%ebp, %eax
	addl	$-144, %eax
	movl	%esp, %ebx
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	call	symbol_FindVariable
	addl	$148, %esp
	pushl	%eax
	popl	%ebx
	cmpl	$0, %ebx
	movl	$1, %eax
	jne	symbol_DefineGlobalVariable_reltrue_61
	movl	$0, %eax
symbol_DefineGlobalVariable_reltrue_61:
	testl	%eax, %eax
	jnz	symbol_DefineGlobalVariable_ifbl_60
	jmp	symbol_DefineGlobalVariable_elsebl_60
symbol_DefineGlobalVariable_ifbl_60:
	#debug: func-call: symbol_reportError ( table , "Redefinition of global variable not allowed." , name ) 
	subl	$152, %esp
	movl	8(%ebp), %eax
	movl	%eax, 0(%esp)
	movl	$symtab+243, 4(%esp)
	movl	%ebp, %eax
	addl	$-144, %eax
	movl	%esp, %ebx
	addl	$8, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	call	symbol_reportError
	addl	$152, %esp
	#debug: return: return - 1 ; 
	pushl	$0
	popl	%ebx
	subl	$1, %ebx
	pushl	%ebx
	popl	%eax
	jmp	symbol_DefineGlobalVariable_ret
	jmp	symbol_DefineGlobalVariable_endif_60

symbol_DefineGlobalVariable_elsebl_60:

symbol_DefineGlobalVariable_endif_60:

	#debug: if: symbol_Sizeof_Vardecl ( table , structure ) < 0 
	subl	$8, %esp
	movl	8(%ebp), %eax
	movl	%eax, 0(%esp)
	movl	12(%ebp), %eax
	movl	%eax, 4(%esp)
	call	symbol_Sizeof_Vardecl
	addl	$8, %esp
	pushl	%eax
	popl	%ebx
	cmpl	$0, %ebx
	movl	$1, %eax
	jl	symbol_DefineGlobalVariable_reltrue_63
	movl	$0, %eax
symbol_DefineGlobalVariable_reltrue_63:
	testl	%eax, %eax
	jnz	symbol_DefineGlobalVariable_ifbl_62
	jmp	symbol_DefineGlobalVariable_elsebl_62
symbol_DefineGlobalVariable_ifbl_62:
	#debug: return: return - 1 ; 
	pushl	$0
	popl	%ebx
	subl	$1, %ebx
	pushl	%ebx
	popl	%eax
	jmp	symbol_DefineGlobalVariable_ret
	jmp	symbol_DefineGlobalVariable_endif_62

symbol_DefineGlobalVariable_elsebl_62:

symbol_DefineGlobalVariable_endif_62:

	#debug: func-call: symbol_AddSymbol ( table , name , 5 , structure ) 
	subl	$156, %esp
	movl	8(%ebp), %eax
	movl	%eax, 0(%esp)
	movl	%ebp, %eax
	addl	$-144, %eax
	movl	%esp, %ebx
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	$5, 148(%esp)
	movl	12(%ebp), %eax
	movl	%eax, 152(%esp)
	call	symbol_AddSymbol
	addl	$156, %esp
	#debug: return: return 0 ; 
	movl	$0, %eax
	jmp	symbol_DefineGlobalVariable_ret


symbol_DefineGlobalVariable_ret:
	movl	%ebp, %esp
	popl	%ebp
	ret




	#debug: func-def: ( symbolTable * table , syntaxTreeNode * structure ) 
.globl symbol_DefineLocalVariable
.type symbol_DefineLocalVariable, @function
symbol_DefineLocalVariable:
	pushl	%ebp
	movl	%esp, %ebp
	subl	$152, %esp


	#debug: assignment: nametok = syntax_GetChild ( structure , 0 ) ; 
	subl	$8, %esp
	movl	12(%ebp), %eax
	movl	%eax, 0(%esp)
	movl	$0, 4(%esp)
	call	syntax_GetChild
	addl	$8, %esp
	movl	%eax, -152(%ebp)
	#debug: assignment: nametok = syntax_GetChild ( nametok , 1 ) ; 
	subl	$8, %esp
	movl	-152(%ebp), %eax
	movl	%eax, 0(%esp)
	movl	$1, 4(%esp)
	call	syntax_GetChild
	addl	$8, %esp
	movl	%eax, -152(%ebp)
	#debug: assignment: name = nametok -> tok ; 
	movl	%ebp, %eax
	addl	$-148, %eax
	pushl	%eax
	movl	%ebp, %eax
	addl	$-152, %eax
	movl	(%eax), %eax
	addl	$8, %eax
	popl	%ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	#debug: assignment: prev = symbol_FindVariable ( table , name ) ; 
	subl	$148, %esp
	movl	8(%ebp), %eax
	movl	%eax, 0(%esp)
	movl	%ebp, %eax
	addl	$-148, %eax
	movl	%esp, %ebx
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	call	symbol_FindVariable
	addl	$148, %esp
	movl	%eax, -4(%ebp)
	#debug: if: prev != 0 && prev -> type != 5 
	pushl	-4(%ebp)
	popl	%ebx
	cmpl	$0, %ebx
	movl	$1, %eax
	jne	symbol_DefineLocalVariable_reltrue_66
	movl	$0, %eax
symbol_DefineLocalVariable_reltrue_66:
	testl	%eax, %eax
	jz	symbol_DefineLocalVariable_logtermfalse_65
	movl	%ebp, %eax
	addl	$-4, %eax
	movl	(%eax), %eax
	addl	$144, %eax
	movl	(%eax), %eax
	pushl	%eax
	popl	%ebx
	cmpl	$5, %ebx
	movl	$1, %eax
	jne	symbol_DefineLocalVariable_reltrue_67
	movl	$0, %eax
symbol_DefineLocalVariable_reltrue_67:
	testl	%eax, %eax
	jz	symbol_DefineLocalVariable_logtermfalse_65
	movl	$1, %eax
	jmp	symbol_DefineLocalVariable_logtermtrue_65
symbol_DefineLocalVariable_logtermfalse_65:
	movl	$0, %eax
symbol_DefineLocalVariable_logtermtrue_65:
	testl	%eax, %eax
	jnz	symbol_DefineLocalVariable_ifbl_64
	jmp	symbol_DefineLocalVariable_elsebl_64
symbol_DefineLocalVariable_ifbl_64:
	#debug: func-call: symbol_reportError ( table , "Redefinition of local variable not allowed." , name ) 
	subl	$152, %esp
	movl	8(%ebp), %eax
	movl	%eax, 0(%esp)
	movl	$symtab+288, 4(%esp)
	movl	%ebp, %eax
	addl	$-148, %eax
	movl	%esp, %ebx
	addl	$8, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	call	symbol_reportError
	addl	$152, %esp
	#debug: return: return - 1 ; 
	pushl	$0
	popl	%ebx
	subl	$1, %ebx
	pushl	%ebx
	popl	%eax
	jmp	symbol_DefineLocalVariable_ret
	jmp	symbol_DefineLocalVariable_endif_64

symbol_DefineLocalVariable_elsebl_64:

symbol_DefineLocalVariable_endif_64:

	#debug: if: symbol_Sizeof_Vardecl ( table , structure ) < 0 
	subl	$8, %esp
	movl	8(%ebp), %eax
	movl	%eax, 0(%esp)
	movl	12(%ebp), %eax
	movl	%eax, 4(%esp)
	call	symbol_Sizeof_Vardecl
	addl	$8, %esp
	pushl	%eax
	popl	%ebx
	cmpl	$0, %ebx
	movl	$1, %eax
	jl	symbol_DefineLocalVariable_reltrue_69
	movl	$0, %eax
symbol_DefineLocalVariable_reltrue_69:
	testl	%eax, %eax
	jnz	symbol_DefineLocalVariable_ifbl_68
	jmp	symbol_DefineLocalVariable_elsebl_68
symbol_DefineLocalVariable_ifbl_68:
	#debug: return: return - 1 ; 
	pushl	$0
	popl	%ebx
	subl	$1, %ebx
	pushl	%ebx
	popl	%eax
	jmp	symbol_DefineLocalVariable_ret
	jmp	symbol_DefineLocalVariable_endif_68

symbol_DefineLocalVariable_elsebl_68:

symbol_DefineLocalVariable_endif_68:

	#debug: func-call: symbol_AddSymbol ( table , name , 4 , structure ) 
	subl	$156, %esp
	movl	8(%ebp), %eax
	movl	%eax, 0(%esp)
	movl	%ebp, %eax
	addl	$-148, %eax
	movl	%esp, %ebx
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	$4, 148(%esp)
	movl	12(%ebp), %eax
	movl	%eax, 152(%esp)
	call	symbol_AddSymbol
	addl	$156, %esp
	#debug: return: return 0 ; 
	movl	$0, %eax
	jmp	symbol_DefineLocalVariable_ret


symbol_DefineLocalVariable_ret:
	movl	%ebp, %esp
	popl	%ebp
	ret




	#debug: func-def: ( symbolTable * table , syntaxTreeNode * structure ) 
.globl symbol_DefineParVariable
.type symbol_DefineParVariable, @function
symbol_DefineParVariable:
	pushl	%ebp
	movl	%esp, %ebp
	subl	$152, %esp


	#debug: assignment: nametok = syntax_GetChild ( syntax_GetChild ( structure , 0 ) , 1 ) ; 
	subl	$8, %esp
	subl	$8, %esp
	movl	12(%ebp), %eax
	movl	%eax, 0(%esp)
	movl	$0, 4(%esp)
	call	syntax_GetChild
	addl	$8, %esp
	movl	%eax, 0(%esp)
	movl	$1, 4(%esp)
	call	syntax_GetChild
	addl	$8, %esp
	movl	%eax, -152(%ebp)
	#debug: assignment: name = nametok -> tok ; 
	movl	%ebp, %eax
	addl	$-148, %eax
	pushl	%eax
	movl	%ebp, %eax
	addl	$-152, %eax
	movl	(%eax), %eax
	addl	$8, %eax
	popl	%ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	#debug: assignment: prev = symbol_FindVariable ( table , name ) ; 
	subl	$148, %esp
	movl	8(%ebp), %eax
	movl	%eax, 0(%esp)
	movl	%ebp, %eax
	addl	$-148, %eax
	movl	%esp, %ebx
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	call	symbol_FindVariable
	addl	$148, %esp
	movl	%eax, -4(%ebp)
	#debug: if: prev != 0 && prev -> type != 5 
	pushl	-4(%ebp)
	popl	%ebx
	cmpl	$0, %ebx
	movl	$1, %eax
	jne	symbol_DefineParVariable_reltrue_72
	movl	$0, %eax
symbol_DefineParVariable_reltrue_72:
	testl	%eax, %eax
	jz	symbol_DefineParVariable_logtermfalse_71
	movl	%ebp, %eax
	addl	$-4, %eax
	movl	(%eax), %eax
	addl	$144, %eax
	movl	(%eax), %eax
	pushl	%eax
	popl	%ebx
	cmpl	$5, %ebx
	movl	$1, %eax
	jne	symbol_DefineParVariable_reltrue_73
	movl	$0, %eax
symbol_DefineParVariable_reltrue_73:
	testl	%eax, %eax
	jz	symbol_DefineParVariable_logtermfalse_71
	movl	$1, %eax
	jmp	symbol_DefineParVariable_logtermtrue_71
symbol_DefineParVariable_logtermfalse_71:
	movl	$0, %eax
symbol_DefineParVariable_logtermtrue_71:
	testl	%eax, %eax
	jnz	symbol_DefineParVariable_ifbl_70
	jmp	symbol_DefineParVariable_elsebl_70
symbol_DefineParVariable_ifbl_70:
	#debug: func-call: symbol_reportError ( table , "Two parameters with equal names." , name ) 
	subl	$152, %esp
	movl	8(%ebp), %eax
	movl	%eax, 0(%esp)
	movl	$symtab+332, 4(%esp)
	movl	%ebp, %eax
	addl	$-148, %eax
	movl	%esp, %ebx
	addl	$8, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	call	symbol_reportError
	addl	$152, %esp
	#debug: return: return - 1 ; 
	pushl	$0
	popl	%ebx
	subl	$1, %ebx
	pushl	%ebx
	popl	%eax
	jmp	symbol_DefineParVariable_ret
	jmp	symbol_DefineParVariable_endif_70

symbol_DefineParVariable_elsebl_70:

symbol_DefineParVariable_endif_70:

	#debug: if: symbol_Sizeof_DataType ( table , syntax_GetChild ( syntax_GetChild ( structure , 0 ) , 0 ) ) < 0 
	subl	$8, %esp
	movl	8(%ebp), %eax
	movl	%eax, 0(%esp)
	subl	$8, %esp
	subl	$8, %esp
	movl	12(%ebp), %eax
	movl	%eax, 0(%esp)
	movl	$0, 4(%esp)
	call	syntax_GetChild
	addl	$8, %esp
	movl	%eax, 0(%esp)
	movl	$0, 4(%esp)
	call	syntax_GetChild
	addl	$8, %esp
	movl	%eax, 4(%esp)
	call	symbol_Sizeof_DataType
	addl	$8, %esp
	pushl	%eax
	popl	%ebx
	cmpl	$0, %ebx
	movl	$1, %eax
	jl	symbol_DefineParVariable_reltrue_75
	movl	$0, %eax
symbol_DefineParVariable_reltrue_75:
	testl	%eax, %eax
	jnz	symbol_DefineParVariable_ifbl_74
	jmp	symbol_DefineParVariable_elsebl_74
symbol_DefineParVariable_ifbl_74:
	#debug: return: return - 1 ; 
	pushl	$0
	popl	%ebx
	subl	$1, %ebx
	pushl	%ebx
	popl	%eax
	jmp	symbol_DefineParVariable_ret
	jmp	symbol_DefineParVariable_endif_74

symbol_DefineParVariable_elsebl_74:

symbol_DefineParVariable_endif_74:

	#debug: func-call: symbol_AddSymbol ( table , name , 6 , structure ) 
	subl	$156, %esp
	movl	8(%ebp), %eax
	movl	%eax, 0(%esp)
	movl	%ebp, %eax
	addl	$-148, %eax
	movl	%esp, %ebx
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	$6, 148(%esp)
	movl	12(%ebp), %eax
	movl	%eax, 152(%esp)
	call	symbol_AddSymbol
	addl	$156, %esp
	#debug: return: return 0 ; 
	movl	$0, %eax
	jmp	symbol_DefineParVariable_ret


symbol_DefineParVariable_ret:
	movl	%ebp, %esp
	popl	%ebp
	ret




	#debug: func-def: ( symbolTable * table , syntaxTreeNode * structure ) 
.globl symbol_DefineStruct
.type symbol_DefineStruct, @function
symbol_DefineStruct:
	pushl	%ebp
	movl	%esp, %ebp
	subl	$168, %esp


	#debug: assignment: nametok = syntax_GetChild ( structure , 1 ) ; 
	subl	$8, %esp
	movl	12(%ebp), %eax
	movl	%eax, 0(%esp)
	movl	$1, 4(%esp)
	call	syntax_GetChild
	addl	$8, %esp
	movl	%eax, -148(%ebp)
	#debug: assignment: name = nametok -> tok ; 
	movl	%ebp, %eax
	addl	$-144, %eax
	pushl	%eax
	movl	%ebp, %eax
	addl	$-148, %eax
	movl	(%eax), %eax
	addl	$8, %eax
	popl	%ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	#debug: if: symbol_FindStruct ( table , name ) != 0 
	subl	$148, %esp
	movl	8(%ebp), %eax
	movl	%eax, 0(%esp)
	movl	%ebp, %eax
	addl	$-144, %eax
	movl	%esp, %ebx
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	call	symbol_FindStruct
	addl	$148, %esp
	pushl	%eax
	popl	%ebx
	cmpl	$0, %ebx
	movl	$1, %eax
	jne	symbol_DefineStruct_reltrue_77
	movl	$0, %eax
symbol_DefineStruct_reltrue_77:
	testl	%eax, %eax
	jnz	symbol_DefineStruct_ifbl_76
	jmp	symbol_DefineStruct_elsebl_76
symbol_DefineStruct_ifbl_76:
	#debug: func-call: symbol_reportError ( table , "Redefinition of struct not allowed." , name ) 
	subl	$152, %esp
	movl	8(%ebp), %eax
	movl	%eax, 0(%esp)
	movl	$symtab+365, 4(%esp)
	movl	%ebp, %eax
	addl	$-144, %eax
	movl	%esp, %ebx
	addl	$8, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	call	symbol_reportError
	addl	$152, %esp
	#debug: return: return - 1 ; 
	pushl	$0
	popl	%ebx
	subl	$1, %ebx
	pushl	%ebx
	popl	%eax
	jmp	symbol_DefineStruct_ret
	jmp	symbol_DefineStruct_endif_76

symbol_DefineStruct_elsebl_76:

symbol_DefineStruct_endif_76:

	#debug: if: symbol_Sizeof_Structdef ( table , structure ) < 0 
	subl	$8, %esp
	movl	8(%ebp), %eax
	movl	%eax, 0(%esp)
	movl	12(%ebp), %eax
	movl	%eax, 4(%esp)
	call	symbol_Sizeof_Structdef
	addl	$8, %esp
	pushl	%eax
	popl	%ebx
	cmpl	$0, %ebx
	movl	$1, %eax
	jl	symbol_DefineStruct_reltrue_79
	movl	$0, %eax
symbol_DefineStruct_reltrue_79:
	testl	%eax, %eax
	jnz	symbol_DefineStruct_ifbl_78
	jmp	symbol_DefineStruct_elsebl_78
symbol_DefineStruct_ifbl_78:
	#debug: return: return - 1 ; 
	pushl	$0
	popl	%ebx
	subl	$1, %ebx
	pushl	%ebx
	popl	%eax
	jmp	symbol_DefineStruct_ret
	jmp	symbol_DefineStruct_endif_78

symbol_DefineStruct_elsebl_78:

symbol_DefineStruct_endif_78:

	#debug: assignment: cntmembers = symbol_CountStructEntries ( table , structure ) ; 
	subl	$8, %esp
	movl	8(%ebp), %eax
	movl	%eax, 0(%esp)
	movl	12(%ebp), %eax
	movl	%eax, 4(%esp)
	call	symbol_CountStructEntries
	addl	$8, %esp
	movl	%eax, -152(%ebp)
	#debug: assignment: curr = 1 ; 
	movl	$1, -160(%ebp)
	#debug: while: curr < cntmembers 
symbol_DefineStruct_while_80:
	pushl	-160(%ebp)
	popl	%ebx
	cmpl	-152(%ebp), %ebx
	movl	$1, %eax
	jl	symbol_DefineStruct_reltrue_81
	movl	$0, %eax
symbol_DefineStruct_reltrue_81:
	testl	%eax, %eax
	jz	symbol_DefineStruct_endwhile_80

	#debug: assignment: memb1 = symbol_GetStructEntry ( table , structure , curr ) ; 
	subl	$12, %esp
	movl	8(%ebp), %eax
	movl	%eax, 0(%esp)
	movl	12(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-160(%ebp), %eax
	movl	%eax, 8(%esp)
	call	symbol_GetStructEntry
	addl	$12, %esp
	movl	%eax, -164(%ebp)
	#debug: assignment: memb1 = syntax_GetChild ( memb1 , 0 ) ; 
	subl	$8, %esp
	movl	-164(%ebp), %eax
	movl	%eax, 0(%esp)
	movl	$0, 4(%esp)
	call	syntax_GetChild
	addl	$8, %esp
	movl	%eax, -164(%ebp)
	#debug: assignment: memb1 = syntax_GetChild ( memb1 , 1 ) ; 
	subl	$8, %esp
	movl	-164(%ebp), %eax
	movl	%eax, 0(%esp)
	movl	$1, 4(%esp)
	call	syntax_GetChild
	addl	$8, %esp
	movl	%eax, -164(%ebp)
	#debug: assignment: idx = 0 ; 
	movl	$0, -156(%ebp)
	#debug: while: idx < curr 
symbol_DefineStruct_while_82:
	pushl	-156(%ebp)
	popl	%ebx
	cmpl	-160(%ebp), %ebx
	movl	$1, %eax
	jl	symbol_DefineStruct_reltrue_83
	movl	$0, %eax
symbol_DefineStruct_reltrue_83:
	testl	%eax, %eax
	jz	symbol_DefineStruct_endwhile_82

	#debug: assignment: memb2 = symbol_GetStructEntry ( table , structure , idx ) ; 
	subl	$12, %esp
	movl	8(%ebp), %eax
	movl	%eax, 0(%esp)
	movl	12(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-156(%ebp), %eax
	movl	%eax, 8(%esp)
	call	symbol_GetStructEntry
	addl	$12, %esp
	movl	%eax, -168(%ebp)
	#debug: assignment: memb2 = syntax_GetChild ( memb2 , 0 ) ; 
	subl	$8, %esp
	movl	-168(%ebp), %eax
	movl	%eax, 0(%esp)
	movl	$0, 4(%esp)
	call	syntax_GetChild
	addl	$8, %esp
	movl	%eax, -168(%ebp)
	#debug: assignment: memb2 = syntax_GetChild ( memb2 , 1 ) ; 
	subl	$8, %esp
	movl	-168(%ebp), %eax
	movl	%eax, 0(%esp)
	movl	$1, 4(%esp)
	call	syntax_GetChild
	addl	$8, %esp
	movl	%eax, -168(%ebp)
	#debug: if: strcmp ( memb1 -> tok . content , memb2 -> tok . content ) == 0 
	subl	$8, %esp
	movl	%ebp, %eax
	addl	$-164, %eax
	movl	(%eax), %eax
	addl	$8, %eax
	addl	$16, %eax
	movl	%eax, 0(%esp)
	movl	%ebp, %eax
	addl	$-168, %eax
	movl	(%eax), %eax
	addl	$8, %eax
	addl	$16, %eax
	movl	%eax, 4(%esp)
	call	strcmp
	addl	$8, %esp
	pushl	%eax
	popl	%ebx
	cmpl	$0, %ebx
	movl	$1, %eax
	je	symbol_DefineStruct_reltrue_85
	movl	$0, %eax
symbol_DefineStruct_reltrue_85:
	testl	%eax, %eax
	jnz	symbol_DefineStruct_ifbl_84
	jmp	symbol_DefineStruct_elsebl_84
symbol_DefineStruct_ifbl_84:
	#debug: func-call: symbol_reportError ( table , "Members name is not unique.\n" , memb1 -> tok ) 
	subl	$152, %esp
	movl	8(%ebp), %eax
	movl	%eax, 0(%esp)
	movl	$symtab+401, 4(%esp)
	movl	%ebp, %eax
	addl	$-164, %eax
	movl	(%eax), %eax
	addl	$8, %eax
	movl	%esp, %ebx
	addl	$8, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	call	symbol_reportError
	addl	$152, %esp
	jmp	symbol_DefineStruct_endif_84

symbol_DefineStruct_elsebl_84:

symbol_DefineStruct_endif_84:

	#debug: assignment: idx = idx + 1 ; 
	pushl	-156(%ebp)
	popl	%ebx
	addl	$1, %ebx
	pushl	%ebx
	popl	%eax
	movl	%eax, -156(%ebp)
	jmp	symbol_DefineStruct_while_82
symbol_DefineStruct_endwhile_82:

	#debug: assignment: curr = curr + 1 ; 
	pushl	-160(%ebp)
	popl	%ebx
	addl	$1, %ebx
	pushl	%ebx
	popl	%eax
	movl	%eax, -160(%ebp)
	jmp	symbol_DefineStruct_while_80
symbol_DefineStruct_endwhile_80:

	#debug: func-call: symbol_AddSymbol ( table , name , 3 , structure ) 
	subl	$156, %esp
	movl	8(%ebp), %eax
	movl	%eax, 0(%esp)
	movl	%ebp, %eax
	addl	$-144, %eax
	movl	%esp, %ebx
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	$3, 148(%esp)
	movl	12(%ebp), %eax
	movl	%eax, 152(%esp)
	call	symbol_AddSymbol
	addl	$156, %esp
	#debug: return: return 0 ; 
	movl	$0, %eax
	jmp	symbol_DefineStruct_ret


symbol_DefineStruct_ret:
	movl	%ebp, %esp
	popl	%ebp
	ret




	#debug: func-def: ( symbolTable * table , syntaxTreeNode * structure ) 
.globl symbol_DeclareFunction
.type symbol_DeclareFunction, @function
symbol_DeclareFunction:
	pushl	%ebp
	movl	%esp, %ebp
	subl	$168, %esp


	#debug: assignment: nametok = syntax_GetChild ( structure , 0 ) ; 
	subl	$8, %esp
	movl	12(%ebp), %eax
	movl	%eax, 0(%esp)
	movl	$0, 4(%esp)
	call	syntax_GetChild
	addl	$8, %esp
	movl	%eax, -148(%ebp)
	#debug: assignment: nametok = syntax_GetChild ( nametok , 1 ) ; 
	subl	$8, %esp
	movl	-148(%ebp), %eax
	movl	%eax, 0(%esp)
	movl	$1, 4(%esp)
	call	syntax_GetChild
	addl	$8, %esp
	movl	%eax, -148(%ebp)
	#debug: assignment: name = nametok -> tok ; 
	movl	%ebp, %eax
	addl	$-144, %eax
	pushl	%eax
	movl	%ebp, %eax
	addl	$-148, %eax
	movl	(%eax), %eax
	addl	$8, %eax
	popl	%ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	#debug: assignment: knownfunc = symbol_FindFunction ( table , name ) ; 
	subl	$148, %esp
	movl	8(%ebp), %eax
	movl	%eax, 0(%esp)
	movl	%ebp, %eax
	addl	$-144, %eax
	movl	%esp, %ebx
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	call	symbol_FindFunction
	addl	$148, %esp
	movl	%eax, -160(%ebp)
	#debug: if: knownfunc != 0 
	pushl	-160(%ebp)
	popl	%ebx
	cmpl	$0, %ebx
	movl	$1, %eax
	jne	symbol_DeclareFunction_reltrue_87
	movl	$0, %eax
symbol_DeclareFunction_reltrue_87:
	testl	%eax, %eax
	jnz	symbol_DeclareFunction_ifbl_86
	jmp	symbol_DeclareFunction_elsebl_86
symbol_DeclareFunction_ifbl_86:
	#debug: if: ! symbol_EqualSignature ( table , structure , knownfunc -> structure ) 
	subl	$12, %esp
	movl	8(%ebp), %eax
	movl	%eax, 0(%esp)
	movl	12(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%ebp, %eax
	addl	$-160, %eax
	movl	(%eax), %eax
	addl	$148, %eax
	movl	(%eax), %eax
	movl	%eax, 8(%esp)
	call	symbol_EqualSignature
	addl	$12, %esp
	testl	%eax, %eax
	movl	$1, %eax
	jz	symbol_DeclareFunction_logfactfalse_89
	movl	$0, %eax
symbol_DeclareFunction_logfactfalse_89:
	testl	%eax, %eax
	jnz	symbol_DeclareFunction_ifbl_88
	jmp	symbol_DeclareFunction_elsebl_88
symbol_DeclareFunction_ifbl_88:
	#debug: func-call: symbol_reportError ( table , "Function already known with different signature." , name ) 
	subl	$152, %esp
	movl	8(%ebp), %eax
	movl	%eax, 0(%esp)
	movl	$symtab+430, 4(%esp)
	movl	%ebp, %eax
	addl	$-144, %eax
	movl	%esp, %ebx
	addl	$8, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	call	symbol_reportError
	addl	$152, %esp
	#debug: return: return - 1 ; 
	pushl	$0
	popl	%ebx
	subl	$1, %ebx
	pushl	%ebx
	popl	%eax
	jmp	symbol_DeclareFunction_ret
	jmp	symbol_DeclareFunction_endif_88

symbol_DeclareFunction_elsebl_88:

symbol_DeclareFunction_endif_88:

	#debug: return: return 0 ; 
	movl	$0, %eax
	jmp	symbol_DeclareFunction_ret
	jmp	symbol_DeclareFunction_endif_86

symbol_DeclareFunction_elsebl_86:

symbol_DeclareFunction_endif_86:

	#debug: assignment: cntargs = symbol_CountFunctionArgs ( table , structure ) ; 
	subl	$8, %esp
	movl	8(%ebp), %eax
	movl	%eax, 0(%esp)
	movl	12(%ebp), %eax
	movl	%eax, 4(%esp)
	call	symbol_CountFunctionArgs
	addl	$8, %esp
	movl	%eax, -168(%ebp)
	#debug: assignment: idx = 0 ; 
	movl	$0, -164(%ebp)
	#debug: while: idx < cntargs 
symbol_DeclareFunction_while_90:
	pushl	-164(%ebp)
	popl	%ebx
	cmpl	-168(%ebp), %ebx
	movl	$1, %eax
	jl	symbol_DeclareFunction_reltrue_91
	movl	$0, %eax
symbol_DeclareFunction_reltrue_91:
	testl	%eax, %eax
	jz	symbol_DeclareFunction_endwhile_90

	#debug: assignment: arg = symbol_GetFunctionArg ( table , structure , idx ) ; 
	subl	$12, %esp
	movl	8(%ebp), %eax
	movl	%eax, 0(%esp)
	movl	12(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-164(%ebp), %eax
	movl	%eax, 8(%esp)
	call	symbol_GetFunctionArg
	addl	$12, %esp
	movl	%eax, -152(%ebp)
	#debug: if: symbol_Sizeof_Vardecl ( table , arg ) < 0 
	subl	$8, %esp
	movl	8(%ebp), %eax
	movl	%eax, 0(%esp)
	movl	-152(%ebp), %eax
	movl	%eax, 4(%esp)
	call	symbol_Sizeof_Vardecl
	addl	$8, %esp
	pushl	%eax
	popl	%ebx
	cmpl	$0, %ebx
	movl	$1, %eax
	jl	symbol_DeclareFunction_reltrue_93
	movl	$0, %eax
symbol_DeclareFunction_reltrue_93:
	testl	%eax, %eax
	jnz	symbol_DeclareFunction_ifbl_92
	jmp	symbol_DeclareFunction_elsebl_92
symbol_DeclareFunction_ifbl_92:
	#debug: assignment: subtree = syntax_GetChild ( syntax_GetChild ( arg , 0 ) , 1 ) ; 
	subl	$8, %esp
	subl	$8, %esp
	movl	-152(%ebp), %eax
	movl	%eax, 0(%esp)
	movl	$0, 4(%esp)
	call	syntax_GetChild
	addl	$8, %esp
	movl	%eax, 0(%esp)
	movl	$1, 4(%esp)
	call	syntax_GetChild
	addl	$8, %esp
	movl	%eax, -156(%ebp)
	#debug: func-call: symbol_reportError ( table , "Function-argument has invalid size." , subtree -> tok ) 
	subl	$152, %esp
	movl	8(%ebp), %eax
	movl	%eax, 0(%esp)
	movl	$symtab+479, 4(%esp)
	movl	%ebp, %eax
	addl	$-156, %eax
	movl	(%eax), %eax
	addl	$8, %eax
	movl	%esp, %ebx
	addl	$8, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	call	symbol_reportError
	addl	$152, %esp
	#debug: return: return - 1 ; 
	pushl	$0
	popl	%ebx
	subl	$1, %ebx
	pushl	%ebx
	popl	%eax
	jmp	symbol_DeclareFunction_ret
	jmp	symbol_DeclareFunction_endif_92

symbol_DeclareFunction_elsebl_92:

symbol_DeclareFunction_endif_92:

	#debug: assignment: idx = idx + 1 ; 
	pushl	-164(%ebp)
	popl	%ebx
	addl	$1, %ebx
	pushl	%ebx
	popl	%eax
	movl	%eax, -164(%ebp)
	jmp	symbol_DeclareFunction_while_90
symbol_DeclareFunction_endwhile_90:

	#debug: if: ! symbol_IsReturnTypeVoid ( table , structure ) 
	subl	$8, %esp
	movl	8(%ebp), %eax
	movl	%eax, 0(%esp)
	movl	12(%ebp), %eax
	movl	%eax, 4(%esp)
	call	symbol_IsReturnTypeVoid
	addl	$8, %esp
	testl	%eax, %eax
	movl	$1, %eax
	jz	symbol_DeclareFunction_logfactfalse_95
	movl	$0, %eax
symbol_DeclareFunction_logfactfalse_95:
	testl	%eax, %eax
	jnz	symbol_DeclareFunction_ifbl_94
	jmp	symbol_DeclareFunction_elsebl_94
symbol_DeclareFunction_ifbl_94:
	#debug: assignment: arg = symbol_GetReturnType ( table , structure ) ; 
	subl	$8, %esp
	movl	8(%ebp), %eax
	movl	%eax, 0(%esp)
	movl	12(%ebp), %eax
	movl	%eax, 4(%esp)
	call	symbol_GetReturnType
	addl	$8, %esp
	movl	%eax, -152(%ebp)
	#debug: if: symbol_Sizeof_DataType ( table , arg ) < 0 
	subl	$8, %esp
	movl	8(%ebp), %eax
	movl	%eax, 0(%esp)
	movl	-152(%ebp), %eax
	movl	%eax, 4(%esp)
	call	symbol_Sizeof_DataType
	addl	$8, %esp
	pushl	%eax
	popl	%ebx
	cmpl	$0, %ebx
	movl	$1, %eax
	jl	symbol_DeclareFunction_reltrue_97
	movl	$0, %eax
symbol_DeclareFunction_reltrue_97:
	testl	%eax, %eax
	jnz	symbol_DeclareFunction_ifbl_96
	jmp	symbol_DeclareFunction_elsebl_96
symbol_DeclareFunction_ifbl_96:
	#debug: return: return - 1 ; 
	pushl	$0
	popl	%ebx
	subl	$1, %ebx
	pushl	%ebx
	popl	%eax
	jmp	symbol_DeclareFunction_ret
	jmp	symbol_DeclareFunction_endif_96

symbol_DeclareFunction_elsebl_96:

symbol_DeclareFunction_endif_96:

	#debug: if: syntax_CountChilds ( arg ) == 1 
	subl	$4, %esp
	movl	-152(%ebp), %eax
	movl	%eax, 0(%esp)
	call	syntax_CountChilds
	addl	$4, %esp
	pushl	%eax
	popl	%ebx
	cmpl	$1, %ebx
	movl	$1, %eax
	je	symbol_DeclareFunction_reltrue_99
	movl	$0, %eax
symbol_DeclareFunction_reltrue_99:
	testl	%eax, %eax
	jnz	symbol_DeclareFunction_ifbl_98
	jmp	symbol_DeclareFunction_elsebl_98
symbol_DeclareFunction_ifbl_98:
	#debug: assignment: arg = syntax_GetChild ( arg , 0 ) ; 
	subl	$8, %esp
	movl	-152(%ebp), %eax
	movl	%eax, 0(%esp)
	movl	$0, 4(%esp)
	call	syntax_GetChild
	addl	$8, %esp
	movl	%eax, -152(%ebp)
	#debug: if: arg -> tok . type == 43 
	movl	%ebp, %eax
	addl	$-152, %eax
	movl	(%eax), %eax
	addl	$8, %eax
	addl	$0, %eax
	movl	(%eax), %eax
	pushl	%eax
	popl	%ebx
	cmpl	$43, %ebx
	movl	$1, %eax
	je	symbol_DeclareFunction_reltrue_101
	movl	$0, %eax
symbol_DeclareFunction_reltrue_101:
	testl	%eax, %eax
	jnz	symbol_DeclareFunction_ifbl_100
	jmp	symbol_DeclareFunction_elsebl_100
symbol_DeclareFunction_ifbl_100:
	#debug: func-call: symbol_reportError ( table , "A struct as return-type is not supported!\n" , arg -> tok ) 
	subl	$152, %esp
	movl	8(%ebp), %eax
	movl	%eax, 0(%esp)
	movl	$symtab+515, 4(%esp)
	movl	%ebp, %eax
	addl	$-152, %eax
	movl	(%eax), %eax
	addl	$8, %eax
	movl	%esp, %ebx
	addl	$8, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	call	symbol_reportError
	addl	$152, %esp
	#debug: return: return - 1 ; 
	pushl	$0
	popl	%ebx
	subl	$1, %ebx
	pushl	%ebx
	popl	%eax
	jmp	symbol_DeclareFunction_ret
	jmp	symbol_DeclareFunction_endif_100

symbol_DeclareFunction_elsebl_100:

symbol_DeclareFunction_endif_100:

	jmp	symbol_DeclareFunction_endif_98

symbol_DeclareFunction_elsebl_98:

symbol_DeclareFunction_endif_98:

	jmp	symbol_DeclareFunction_endif_94

symbol_DeclareFunction_elsebl_94:

symbol_DeclareFunction_endif_94:

	#debug: func-call: symbol_AddSymbol ( table , name , 1 , structure ) 
	subl	$156, %esp
	movl	8(%ebp), %eax
	movl	%eax, 0(%esp)
	movl	%ebp, %eax
	addl	$-144, %eax
	movl	%esp, %ebx
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	$1, 148(%esp)
	movl	12(%ebp), %eax
	movl	%eax, 152(%esp)
	call	symbol_AddSymbol
	addl	$156, %esp
	#debug: return: return 0 ; 
	movl	$0, %eax
	jmp	symbol_DeclareFunction_ret


symbol_DeclareFunction_ret:
	movl	%ebp, %esp
	popl	%ebp
	ret




	#debug: func-def: ( symbolTable * table , syntaxTreeNode * structure ) 
.globl symbol_DefineFunction
.type symbol_DefineFunction, @function
symbol_DefineFunction:
	pushl	%ebp
	movl	%esp, %ebp
	subl	$164, %esp


	#debug: assignment: nametok = syntax_GetChild ( structure , 0 ) ; 
	subl	$8, %esp
	movl	12(%ebp), %eax
	movl	%eax, 0(%esp)
	movl	$0, 4(%esp)
	call	syntax_GetChild
	addl	$8, %esp
	movl	%eax, -148(%ebp)
	#debug: assignment: nametok = syntax_GetChild ( nametok , 1 ) ; 
	subl	$8, %esp
	movl	-148(%ebp), %eax
	movl	%eax, 0(%esp)
	movl	$1, 4(%esp)
	call	syntax_GetChild
	addl	$8, %esp
	movl	%eax, -148(%ebp)
	#debug: assignment: name = nametok -> tok ; 
	movl	%ebp, %eax
	addl	$-144, %eax
	pushl	%eax
	movl	%ebp, %eax
	addl	$-148, %eax
	movl	(%eax), %eax
	addl	$8, %eax
	popl	%ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	#debug: assignment: knownfunc = symbol_FindFunction ( table , name ) ; 
	subl	$148, %esp
	movl	8(%ebp), %eax
	movl	%eax, 0(%esp)
	movl	%ebp, %eax
	addl	$-144, %eax
	movl	%esp, %ebx
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	call	symbol_FindFunction
	addl	$148, %esp
	movl	%eax, -156(%ebp)
	#debug: if: knownfunc != 0 
	pushl	-156(%ebp)
	popl	%ebx
	cmpl	$0, %ebx
	movl	$1, %eax
	jne	symbol_DefineFunction_reltrue_103
	movl	$0, %eax
symbol_DefineFunction_reltrue_103:
	testl	%eax, %eax
	jnz	symbol_DefineFunction_ifbl_102
	jmp	symbol_DefineFunction_elsebl_102
symbol_DefineFunction_ifbl_102:
	#debug: if: knownfunc -> type == 2 
	movl	%ebp, %eax
	addl	$-156, %eax
	movl	(%eax), %eax
	addl	$144, %eax
	movl	(%eax), %eax
	pushl	%eax
	popl	%ebx
	cmpl	$2, %ebx
	movl	$1, %eax
	je	symbol_DefineFunction_reltrue_105
	movl	$0, %eax
symbol_DefineFunction_reltrue_105:
	testl	%eax, %eax
	jnz	symbol_DefineFunction_ifbl_104
	jmp	symbol_DefineFunction_elsebl_104
symbol_DefineFunction_ifbl_104:
	#debug: func-call: symbol_reportError ( table , "Redefinition of function is not allowed." , name ) 
	subl	$152, %esp
	movl	8(%ebp), %eax
	movl	%eax, 0(%esp)
	movl	$symtab+558, 4(%esp)
	movl	%ebp, %eax
	addl	$-144, %eax
	movl	%esp, %ebx
	addl	$8, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	call	symbol_reportError
	addl	$152, %esp
	#debug: return: return - 1 ; 
	pushl	$0
	popl	%ebx
	subl	$1, %ebx
	pushl	%ebx
	popl	%eax
	jmp	symbol_DefineFunction_ret
	jmp	symbol_DefineFunction_endif_104

symbol_DefineFunction_elsebl_104:

symbol_DefineFunction_endif_104:

	#debug: if: ! symbol_EqualSignature ( table , structure , knownfunc -> structure ) 
	subl	$12, %esp
	movl	8(%ebp), %eax
	movl	%eax, 0(%esp)
	movl	12(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%ebp, %eax
	addl	$-156, %eax
	movl	(%eax), %eax
	addl	$148, %eax
	movl	(%eax), %eax
	movl	%eax, 8(%esp)
	call	symbol_EqualSignature
	addl	$12, %esp
	testl	%eax, %eax
	movl	$1, %eax
	jz	symbol_DefineFunction_logfactfalse_107
	movl	$0, %eax
symbol_DefineFunction_logfactfalse_107:
	testl	%eax, %eax
	jnz	symbol_DefineFunction_ifbl_106
	jmp	symbol_DefineFunction_elsebl_106
symbol_DefineFunction_ifbl_106:
	#debug: func-call: symbol_reportError ( table , "Function already known with different signature." , name ) 
	subl	$152, %esp
	movl	8(%ebp), %eax
	movl	%eax, 0(%esp)
	movl	$symtab+430, 4(%esp)
	movl	%ebp, %eax
	addl	$-144, %eax
	movl	%esp, %ebx
	addl	$8, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	call	symbol_reportError
	addl	$152, %esp
	#debug: return: return - 1 ; 
	pushl	$0
	popl	%ebx
	subl	$1, %ebx
	pushl	%ebx
	popl	%eax
	jmp	symbol_DefineFunction_ret
	jmp	symbol_DefineFunction_endif_106

symbol_DefineFunction_elsebl_106:

symbol_DefineFunction_endif_106:

	jmp	symbol_DefineFunction_endif_102

symbol_DefineFunction_elsebl_102:

symbol_DefineFunction_endif_102:

	#debug: assignment: cntargs = symbol_CountFunctionArgs ( table , structure ) ; 
	subl	$8, %esp
	movl	8(%ebp), %eax
	movl	%eax, 0(%esp)
	movl	12(%ebp), %eax
	movl	%eax, 4(%esp)
	call	symbol_CountFunctionArgs
	addl	$8, %esp
	movl	%eax, -164(%ebp)
	#debug: assignment: idx = 0 ; 
	movl	$0, -160(%ebp)
	#debug: while: idx < cntargs 
symbol_DefineFunction_while_108:
	pushl	-160(%ebp)
	popl	%ebx
	cmpl	-164(%ebp), %ebx
	movl	$1, %eax
	jl	symbol_DefineFunction_reltrue_109
	movl	$0, %eax
symbol_DefineFunction_reltrue_109:
	testl	%eax, %eax
	jz	symbol_DefineFunction_endwhile_108

	#debug: assignment: arg = symbol_GetFunctionArg ( table , structure , idx ) ; 
	subl	$12, %esp
	movl	8(%ebp), %eax
	movl	%eax, 0(%esp)
	movl	12(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-160(%ebp), %eax
	movl	%eax, 8(%esp)
	call	symbol_GetFunctionArg
	addl	$12, %esp
	movl	%eax, -152(%ebp)
	#debug: if: symbol_DefineParVariable ( table , arg ) == - 1 
	subl	$8, %esp
	movl	8(%ebp), %eax
	movl	%eax, 0(%esp)
	movl	-152(%ebp), %eax
	movl	%eax, 4(%esp)
	call	symbol_DefineParVariable
	addl	$8, %esp
	pushl	%eax
	pushl	$0
	popl	%ebx
	subl	$1, %ebx
	pushl	%ebx
	popl	%eax
	popl	%ebx
	cmpl	%eax, %ebx
	movl	$1, %eax
	je	symbol_DefineFunction_reltrue_111
	movl	$0, %eax
symbol_DefineFunction_reltrue_111:
	testl	%eax, %eax
	jnz	symbol_DefineFunction_ifbl_110
	jmp	symbol_DefineFunction_elsebl_110
symbol_DefineFunction_ifbl_110:
	#debug: func-call: symbol_ClearNonGlobalVariables ( table ) 
	subl	$4, %esp
	movl	8(%ebp), %eax
	movl	%eax, 0(%esp)
	call	symbol_ClearNonGlobalVariables
	addl	$4, %esp
	#debug: return: return - 1 ; 
	pushl	$0
	popl	%ebx
	subl	$1, %ebx
	pushl	%ebx
	popl	%eax
	jmp	symbol_DefineFunction_ret
	jmp	symbol_DefineFunction_endif_110

symbol_DefineFunction_elsebl_110:

symbol_DefineFunction_endif_110:

	#debug: assignment: idx = idx + 1 ; 
	pushl	-160(%ebp)
	popl	%ebx
	addl	$1, %ebx
	pushl	%ebx
	popl	%eax
	movl	%eax, -160(%ebp)
	jmp	symbol_DefineFunction_while_108
symbol_DefineFunction_endwhile_108:

	#debug: if: ! symbol_IsReturnTypeVoid ( table , structure ) 
	subl	$8, %esp
	movl	8(%ebp), %eax
	movl	%eax, 0(%esp)
	movl	12(%ebp), %eax
	movl	%eax, 4(%esp)
	call	symbol_IsReturnTypeVoid
	addl	$8, %esp
	testl	%eax, %eax
	movl	$1, %eax
	jz	symbol_DefineFunction_logfactfalse_113
	movl	$0, %eax
symbol_DefineFunction_logfactfalse_113:
	testl	%eax, %eax
	jnz	symbol_DefineFunction_ifbl_112
	jmp	symbol_DefineFunction_elsebl_112
symbol_DefineFunction_ifbl_112:
	#debug: assignment: arg = symbol_GetReturnType ( table , structure ) ; 
	subl	$8, %esp
	movl	8(%ebp), %eax
	movl	%eax, 0(%esp)
	movl	12(%ebp), %eax
	movl	%eax, 4(%esp)
	call	symbol_GetReturnType
	addl	$8, %esp
	movl	%eax, -152(%ebp)
	#debug: if: symbol_Sizeof_DataType ( table , arg ) < 0 
	subl	$8, %esp
	movl	8(%ebp), %eax
	movl	%eax, 0(%esp)
	movl	-152(%ebp), %eax
	movl	%eax, 4(%esp)
	call	symbol_Sizeof_DataType
	addl	$8, %esp
	pushl	%eax
	popl	%ebx
	cmpl	$0, %ebx
	movl	$1, %eax
	jl	symbol_DefineFunction_reltrue_115
	movl	$0, %eax
symbol_DefineFunction_reltrue_115:
	testl	%eax, %eax
	jnz	symbol_DefineFunction_ifbl_114
	jmp	symbol_DefineFunction_elsebl_114
symbol_DefineFunction_ifbl_114:
	#debug: return: return - 1 ; 
	pushl	$0
	popl	%ebx
	subl	$1, %ebx
	pushl	%ebx
	popl	%eax
	jmp	symbol_DefineFunction_ret
	jmp	symbol_DefineFunction_endif_114

symbol_DefineFunction_elsebl_114:

symbol_DefineFunction_endif_114:

	#debug: if: syntax_CountChilds ( arg ) == 1 
	subl	$4, %esp
	movl	-152(%ebp), %eax
	movl	%eax, 0(%esp)
	call	syntax_CountChilds
	addl	$4, %esp
	pushl	%eax
	popl	%ebx
	cmpl	$1, %ebx
	movl	$1, %eax
	je	symbol_DefineFunction_reltrue_117
	movl	$0, %eax
symbol_DefineFunction_reltrue_117:
	testl	%eax, %eax
	jnz	symbol_DefineFunction_ifbl_116
	jmp	symbol_DefineFunction_elsebl_116
symbol_DefineFunction_ifbl_116:
	#debug: assignment: arg = syntax_GetChild ( arg , 0 ) ; 
	subl	$8, %esp
	movl	-152(%ebp), %eax
	movl	%eax, 0(%esp)
	movl	$0, 4(%esp)
	call	syntax_GetChild
	addl	$8, %esp
	movl	%eax, -152(%ebp)
	#debug: if: arg -> tok . type == 43 
	movl	%ebp, %eax
	addl	$-152, %eax
	movl	(%eax), %eax
	addl	$8, %eax
	addl	$0, %eax
	movl	(%eax), %eax
	pushl	%eax
	popl	%ebx
	cmpl	$43, %ebx
	movl	$1, %eax
	je	symbol_DefineFunction_reltrue_119
	movl	$0, %eax
symbol_DefineFunction_reltrue_119:
	testl	%eax, %eax
	jnz	symbol_DefineFunction_ifbl_118
	jmp	symbol_DefineFunction_elsebl_118
symbol_DefineFunction_ifbl_118:
	#debug: func-call: symbol_reportError ( table , "A struct as return-type is not supported!\n" , arg -> tok ) 
	subl	$152, %esp
	movl	8(%ebp), %eax
	movl	%eax, 0(%esp)
	movl	$symtab+515, 4(%esp)
	movl	%ebp, %eax
	addl	$-152, %eax
	movl	(%eax), %eax
	addl	$8, %eax
	movl	%esp, %ebx
	addl	$8, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	call	symbol_reportError
	addl	$152, %esp
	#debug: return: return - 1 ; 
	pushl	$0
	popl	%ebx
	subl	$1, %ebx
	pushl	%ebx
	popl	%eax
	jmp	symbol_DefineFunction_ret
	jmp	symbol_DefineFunction_endif_118

symbol_DefineFunction_elsebl_118:

symbol_DefineFunction_endif_118:

	jmp	symbol_DefineFunction_endif_116

symbol_DefineFunction_elsebl_116:

symbol_DefineFunction_endif_116:

	jmp	symbol_DefineFunction_endif_112

symbol_DefineFunction_elsebl_112:

symbol_DefineFunction_endif_112:

	#debug: func-call: symbol_AddSymbol ( table , name , 2 , structure ) 
	subl	$156, %esp
	movl	8(%ebp), %eax
	movl	%eax, 0(%esp)
	movl	%ebp, %eax
	addl	$-144, %eax
	movl	%esp, %ebx
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	$2, 148(%esp)
	movl	12(%ebp), %eax
	movl	%eax, 152(%esp)
	call	symbol_AddSymbol
	addl	$156, %esp
	#debug: return: return 0 ; 
	movl	$0, %eax
	jmp	symbol_DefineFunction_ret


symbol_DefineFunction_ret:
	movl	%ebp, %esp
	popl	%ebp
	ret




	#debug: func-def: ( symbolTable * table , syntaxTreeNode * structure ) 
.globl symbol_DefineString
.type symbol_DefineString, @function
symbol_DefineString:
	pushl	%ebp
	movl	%esp, %ebp
	subl	$0, %esp


	#debug: if: symbol_Sizeof_String ( table , structure ) < 0 
	subl	$8, %esp
	movl	8(%ebp), %eax
	movl	%eax, 0(%esp)
	movl	12(%ebp), %eax
	movl	%eax, 4(%esp)
	call	symbol_Sizeof_String
	addl	$8, %esp
	pushl	%eax
	popl	%ebx
	cmpl	$0, %ebx
	movl	$1, %eax
	jl	symbol_DefineString_reltrue_121
	movl	$0, %eax
symbol_DefineString_reltrue_121:
	testl	%eax, %eax
	jnz	symbol_DefineString_ifbl_120
	jmp	symbol_DefineString_elsebl_120
symbol_DefineString_ifbl_120:
	#debug: return: return - 1 ; 
	pushl	$0
	popl	%ebx
	subl	$1, %ebx
	pushl	%ebx
	popl	%eax
	jmp	symbol_DefineString_ret
	jmp	symbol_DefineString_endif_120

symbol_DefineString_elsebl_120:

symbol_DefineString_endif_120:

	#debug: if: symbol_FindString ( table , structure -> tok ) != 0 
	subl	$148, %esp
	movl	8(%ebp), %eax
	movl	%eax, 0(%esp)
	movl	%ebp, %eax
	addl	$12, %eax
	movl	(%eax), %eax
	addl	$8, %eax
	movl	%esp, %ebx
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	call	symbol_FindString
	addl	$148, %esp
	pushl	%eax
	popl	%ebx
	cmpl	$0, %ebx
	movl	$1, %eax
	jne	symbol_DefineString_reltrue_123
	movl	$0, %eax
symbol_DefineString_reltrue_123:
	testl	%eax, %eax
	jnz	symbol_DefineString_ifbl_122
	jmp	symbol_DefineString_elsebl_122
symbol_DefineString_ifbl_122:
	#debug: return: return 0 ; 
	movl	$0, %eax
	jmp	symbol_DefineString_ret
	jmp	symbol_DefineString_endif_122

symbol_DefineString_elsebl_122:

symbol_DefineString_endif_122:

	#debug: func-call: symbol_AddSymbol ( table , structure -> tok , 7 , structure ) 
	subl	$156, %esp
	movl	8(%ebp), %eax
	movl	%eax, 0(%esp)
	movl	%ebp, %eax
	addl	$12, %eax
	movl	(%eax), %eax
	addl	$8, %eax
	movl	%esp, %ebx
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	$7, 148(%esp)
	movl	12(%ebp), %eax
	movl	%eax, 152(%esp)
	call	symbol_AddSymbol
	addl	$156, %esp
	#debug: return: return 0 ; 
	movl	$0, %eax
	jmp	symbol_DefineString_ret


symbol_DefineString_ret:
	movl	%ebp, %esp
	popl	%ebp
	ret




	#debug: func-def: ( symbolTable * table ) 
.globl symbol_ClearNonGlobalVariables
.type symbol_ClearNonGlobalVariables, @function
symbol_ClearNonGlobalVariables:
	pushl	%ebp
	movl	%esp, %ebp
	subl	$8, %esp


	#debug: assignment: node = Get_Back_Of_symbolTableNode_List ( & table -> list ) ; 
	subl	$4, %esp
	movl	%ebp, %eax
	addl	$8, %eax
	movl	(%eax), %eax
	addl	$8, %eax
	movl	%eax, 0(%esp)
	call	Get_Back_Of_symbolTableNode_List
	addl	$4, %esp
	movl	%eax, -4(%ebp)
	#debug: while: node != 0 
symbol_ClearNonGlobalVariables_while_124:
	pushl	-4(%ebp)
	popl	%ebx
	cmpl	$0, %ebx
	movl	$1, %eax
	jne	symbol_ClearNonGlobalVariables_reltrue_125
	movl	$0, %eax
symbol_ClearNonGlobalVariables_reltrue_125:
	testl	%eax, %eax
	jz	symbol_ClearNonGlobalVariables_endwhile_124

	#debug: assignment: rmnode = node ; 
	movl	-4(%ebp), %eax
	movl	%eax, -8(%ebp)
	#debug: assignment: node = Get_Prev_In_symbolTableNode_List ( node ) ; 
	subl	$4, %esp
	movl	-4(%ebp), %eax
	movl	%eax, 0(%esp)
	call	Get_Prev_In_symbolTableNode_List
	addl	$4, %esp
	movl	%eax, -4(%ebp)
	#debug: if: rmnode -> type == 4 || rmnode -> type == 6 
	movl	%ebp, %eax
	addl	$-8, %eax
	movl	(%eax), %eax
	addl	$144, %eax
	movl	(%eax), %eax
	pushl	%eax
	popl	%ebx
	cmpl	$4, %ebx
	movl	$1, %eax
	je	symbol_ClearNonGlobalVariables_reltrue_128
	movl	$0, %eax
symbol_ClearNonGlobalVariables_reltrue_128:
	testl	%eax, %eax
	jnz	symbol_ClearNonGlobalVariables_logexprtrue_127
	movl	%ebp, %eax
	addl	$-8, %eax
	movl	(%eax), %eax
	addl	$144, %eax
	movl	(%eax), %eax
	pushl	%eax
	popl	%ebx
	cmpl	$6, %ebx
	movl	$1, %eax
	je	symbol_ClearNonGlobalVariables_reltrue_129
	movl	$0, %eax
symbol_ClearNonGlobalVariables_reltrue_129:
	testl	%eax, %eax
	jnz	symbol_ClearNonGlobalVariables_logexprtrue_127
	movl	$0, %eax
	jmp	symbol_ClearNonGlobalVariables_logexprfalse_127
symbol_ClearNonGlobalVariables_logexprtrue_127:
	movl	$1, %eax
symbol_ClearNonGlobalVariables_logexprfalse_127:
	testl	%eax, %eax
	jnz	symbol_ClearNonGlobalVariables_ifbl_126
	jmp	symbol_ClearNonGlobalVariables_elsebl_126
symbol_ClearNonGlobalVariables_ifbl_126:
	#debug: func-call: Remove_From_symbolTableNode_List ( & table -> list , rmnode ) 
	subl	$8, %esp
	movl	%ebp, %eax
	addl	$8, %eax
	movl	(%eax), %eax
	addl	$8, %eax
	movl	%eax, 0(%esp)
	movl	-8(%ebp), %eax
	movl	%eax, 4(%esp)
	call	Remove_From_symbolTableNode_List
	addl	$8, %esp
	#debug: func-call: free ( rmnode ) 
	subl	$4, %esp
	movl	-8(%ebp), %eax
	movl	%eax, 0(%esp)
	call	free
	addl	$4, %esp
	jmp	symbol_ClearNonGlobalVariables_endif_126

symbol_ClearNonGlobalVariables_elsebl_126:

symbol_ClearNonGlobalVariables_endif_126:

	jmp	symbol_ClearNonGlobalVariables_while_124
symbol_ClearNonGlobalVariables_endwhile_124:



symbol_ClearNonGlobalVariables_ret:
	movl	%ebp, %esp
	popl	%ebp
	ret




	#debug: func-def: ( symbolTable * table , syntaxTreeNode * var_decl ) 
.globl symbol_Sizeof_Vardecl
.type symbol_Sizeof_Vardecl, @function
symbol_Sizeof_Vardecl:
	pushl	%ebp
	movl	%esp, %ebp
	subl	$16, %esp


	#debug: assignment: datatype = syntax_GetChild ( var_decl , 0 ) ; 
	subl	$8, %esp
	movl	12(%ebp), %eax
	movl	%eax, 0(%esp)
	movl	$0, 4(%esp)
	call	syntax_GetChild
	addl	$8, %esp
	movl	%eax, -4(%ebp)
	#debug: assignment: datatype = syntax_GetChild ( datatype , 0 ) ; 
	subl	$8, %esp
	movl	-4(%ebp), %eax
	movl	%eax, 0(%esp)
	movl	$0, 4(%esp)
	call	syntax_GetChild
	addl	$8, %esp
	movl	%eax, -4(%ebp)
	#debug: assignment: childsize = symbol_Sizeof_DataType ( table , datatype ) ; 
	subl	$8, %esp
	movl	8(%ebp), %eax
	movl	%eax, 0(%esp)
	movl	-4(%ebp), %eax
	movl	%eax, 4(%esp)
	call	symbol_Sizeof_DataType
	addl	$8, %esp
	movl	%eax, -16(%ebp)
	#debug: if: syntax_CountChilds ( var_decl ) > 2 
	subl	$4, %esp
	movl	12(%ebp), %eax
	movl	%eax, 0(%esp)
	call	syntax_CountChilds
	addl	$4, %esp
	pushl	%eax
	popl	%ebx
	cmpl	$2, %ebx
	movl	$1, %eax
	jg	symbol_Sizeof_Vardecl_reltrue_131
	movl	$0, %eax
symbol_Sizeof_Vardecl_reltrue_131:
	testl	%eax, %eax
	jnz	symbol_Sizeof_Vardecl_ifbl_130
	jmp	symbol_Sizeof_Vardecl_elsebl_130
symbol_Sizeof_Vardecl_ifbl_130:
	#debug: if: syntax_CountChilds ( var_decl ) != 5 
	subl	$4, %esp
	movl	12(%ebp), %eax
	movl	%eax, 0(%esp)
	call	syntax_CountChilds
	addl	$4, %esp
	pushl	%eax
	popl	%ebx
	cmpl	$5, %ebx
	movl	$1, %eax
	jne	symbol_Sizeof_Vardecl_reltrue_133
	movl	$0, %eax
symbol_Sizeof_Vardecl_reltrue_133:
	testl	%eax, %eax
	jnz	symbol_Sizeof_Vardecl_ifbl_132
	jmp	symbol_Sizeof_Vardecl_elsebl_132
symbol_Sizeof_Vardecl_ifbl_132:
	#debug: func-call: symbol_reportError ( table , "Internal Error: var_decl should have 5 tokens" , datatype -> tok ) 
	subl	$152, %esp
	movl	8(%ebp), %eax
	movl	%eax, 0(%esp)
	movl	$symtab+599, 4(%esp)
	movl	%ebp, %eax
	addl	$-4, %eax
	movl	(%eax), %eax
	addl	$8, %eax
	movl	%esp, %ebx
	addl	$8, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	call	symbol_reportError
	addl	$152, %esp
	#debug: return: return - 1 ; 
	pushl	$0
	popl	%ebx
	subl	$1, %ebx
	pushl	%ebx
	popl	%eax
	jmp	symbol_Sizeof_Vardecl_ret
	jmp	symbol_Sizeof_Vardecl_endif_132

symbol_Sizeof_Vardecl_elsebl_132:

symbol_Sizeof_Vardecl_endif_132:

	#debug: assignment: arraysizetree = syntax_GetChild ( var_decl , 2 ) ; 
	subl	$8, %esp
	movl	12(%ebp), %eax
	movl	%eax, 0(%esp)
	movl	$2, 4(%esp)
	call	syntax_GetChild
	addl	$8, %esp
	movl	%eax, -8(%ebp)
	#debug: assignment: arraysize = symbol_ToInt ( table , arraysizetree -> tok ) ; 
	subl	$148, %esp
	movl	8(%ebp), %eax
	movl	%eax, 0(%esp)
	movl	%ebp, %eax
	addl	$-8, %eax
	movl	(%eax), %eax
	addl	$8, %eax
	movl	%esp, %ebx
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	call	symbol_ToInt
	addl	$148, %esp
	movl	%eax, -12(%ebp)
	#debug: if: arraysize < 0 
	pushl	-12(%ebp)
	popl	%ebx
	cmpl	$0, %ebx
	movl	$1, %eax
	jl	symbol_Sizeof_Vardecl_reltrue_135
	movl	$0, %eax
symbol_Sizeof_Vardecl_reltrue_135:
	testl	%eax, %eax
	jnz	symbol_Sizeof_Vardecl_ifbl_134
	jmp	symbol_Sizeof_Vardecl_elsebl_134
symbol_Sizeof_Vardecl_ifbl_134:
	#debug: return: return - 1 ; 
	pushl	$0
	popl	%ebx
	subl	$1, %ebx
	pushl	%ebx
	popl	%eax
	jmp	symbol_Sizeof_Vardecl_ret
	jmp	symbol_Sizeof_Vardecl_endif_134

symbol_Sizeof_Vardecl_elsebl_134:

symbol_Sizeof_Vardecl_endif_134:

	#debug: assignment: childsize = childsize * arraysize ; 
	pushl	-16(%ebp)
	popl	%ebx
	imull	-12(%ebp), %ebx
	pushl	%ebx
	popl	%eax
	movl	%eax, -16(%ebp)
	jmp	symbol_Sizeof_Vardecl_endif_130

symbol_Sizeof_Vardecl_elsebl_130:

symbol_Sizeof_Vardecl_endif_130:

	#debug: return: return childsize ; 
	movl	-16(%ebp), %eax
	jmp	symbol_Sizeof_Vardecl_ret


symbol_Sizeof_Vardecl_ret:
	movl	%ebp, %esp
	popl	%ebp
	ret




	#debug: func-def: ( symbolTable * table , syntaxTreeNode * data_type ) 
.globl symbol_Sizeof_DataType
.type symbol_Sizeof_DataType, @function
symbol_Sizeof_DataType:
	pushl	%ebp
	movl	%esp, %ebp
	subl	$156, %esp


	#debug: assignment: cntToken = syntax_CountChilds ( data_type ) ; 
	subl	$4, %esp
	movl	12(%ebp), %eax
	movl	%eax, 0(%esp)
	call	syntax_CountChilds
	addl	$4, %esp
	movl	%eax, -4(%ebp)
	#debug: if: ! data_type || cntToken == 0 
	movl	12(%ebp), %eax
	testl	%eax, %eax
	movl	$1, %eax
	jz	symbol_Sizeof_DataType_logfactfalse_138
	movl	$0, %eax
symbol_Sizeof_DataType_logfactfalse_138:
	testl	%eax, %eax
	jnz	symbol_Sizeof_DataType_logexprtrue_137
	pushl	-4(%ebp)
	popl	%ebx
	cmpl	$0, %ebx
	movl	$1, %eax
	je	symbol_Sizeof_DataType_reltrue_139
	movl	$0, %eax
symbol_Sizeof_DataType_reltrue_139:
	testl	%eax, %eax
	jnz	symbol_Sizeof_DataType_logexprtrue_137
	movl	$0, %eax
	jmp	symbol_Sizeof_DataType_logexprfalse_137
symbol_Sizeof_DataType_logexprtrue_137:
	movl	$1, %eax
symbol_Sizeof_DataType_logexprfalse_137:
	testl	%eax, %eax
	jnz	symbol_Sizeof_DataType_ifbl_136
	jmp	symbol_Sizeof_DataType_elsebl_136
symbol_Sizeof_DataType_ifbl_136:
	#debug: return: return - 1 ; 
	pushl	$0
	popl	%ebx
	subl	$1, %ebx
	pushl	%ebx
	popl	%eax
	jmp	symbol_Sizeof_DataType_ret
	jmp	symbol_Sizeof_DataType_endif_136

symbol_Sizeof_DataType_elsebl_136:

symbol_Sizeof_DataType_endif_136:

	#debug: assignment: subtree = syntax_GetChild ( data_type , 0 ) ; 
	subl	$8, %esp
	movl	12(%ebp), %eax
	movl	%eax, 0(%esp)
	movl	$0, 4(%esp)
	call	syntax_GetChild
	addl	$8, %esp
	movl	%eax, -156(%ebp)
	#debug: assignment: typeTok = subtree -> tok ; 
	movl	%ebp, %eax
	addl	$-148, %eax
	pushl	%eax
	movl	%ebp, %eax
	addl	$-156, %eax
	movl	(%eax), %eax
	addl	$8, %eax
	popl	%ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	#debug: if: cntToken > 1 
	pushl	-4(%ebp)
	popl	%ebx
	cmpl	$1, %ebx
	movl	$1, %eax
	jg	symbol_Sizeof_DataType_reltrue_141
	movl	$0, %eax
symbol_Sizeof_DataType_reltrue_141:
	testl	%eax, %eax
	jnz	symbol_Sizeof_DataType_ifbl_140
	jmp	symbol_Sizeof_DataType_elsebl_140
symbol_Sizeof_DataType_ifbl_140:
	#debug: assignment: subtree = syntax_GetChild ( data_type , 1 ) ; 
	subl	$8, %esp
	movl	12(%ebp), %eax
	movl	%eax, 0(%esp)
	movl	$1, 4(%esp)
	call	syntax_GetChild
	addl	$8, %esp
	movl	%eax, -156(%ebp)
	#debug: if: subtree -> tok . type != 18 
	movl	%ebp, %eax
	addl	$-156, %eax
	movl	(%eax), %eax
	addl	$8, %eax
	addl	$0, %eax
	movl	(%eax), %eax
	pushl	%eax
	popl	%ebx
	cmpl	$18, %ebx
	movl	$1, %eax
	jne	symbol_Sizeof_DataType_reltrue_143
	movl	$0, %eax
symbol_Sizeof_DataType_reltrue_143:
	testl	%eax, %eax
	jnz	symbol_Sizeof_DataType_ifbl_142
	jmp	symbol_Sizeof_DataType_elsebl_142
symbol_Sizeof_DataType_ifbl_142:
	#debug: func-call: symbol_reportError ( table , "Internal Error: symbol_Sizeof!" , subtree -> tok ) 
	subl	$152, %esp
	movl	8(%ebp), %eax
	movl	%eax, 0(%esp)
	movl	$symtab+645, 4(%esp)
	movl	%ebp, %eax
	addl	$-156, %eax
	movl	(%eax), %eax
	addl	$8, %eax
	movl	%esp, %ebx
	addl	$8, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	call	symbol_reportError
	addl	$152, %esp
	#debug: return: return - 1 ; 
	pushl	$0
	popl	%ebx
	subl	$1, %ebx
	pushl	%ebx
	popl	%eax
	jmp	symbol_Sizeof_DataType_ret
	jmp	symbol_Sizeof_DataType_endif_142

symbol_Sizeof_DataType_elsebl_142:

symbol_Sizeof_DataType_endif_142:

	#debug: assignment: subtree = syntax_GetChild ( data_type , cntToken - 1 ) ; 
	subl	$8, %esp
	movl	12(%ebp), %eax
	movl	%eax, 0(%esp)
	pushl	-4(%ebp)
	popl	%ebx
	subl	$1, %ebx
	pushl	%ebx
	popl	%eax
	movl	%eax, 4(%esp)
	call	syntax_GetChild
	addl	$8, %esp
	movl	%eax, -156(%ebp)
	#debug: if: subtree -> tok . type != 18 
	movl	%ebp, %eax
	addl	$-156, %eax
	movl	(%eax), %eax
	addl	$8, %eax
	addl	$0, %eax
	movl	(%eax), %eax
	pushl	%eax
	popl	%ebx
	cmpl	$18, %ebx
	movl	$1, %eax
	jne	symbol_Sizeof_DataType_reltrue_145
	movl	$0, %eax
symbol_Sizeof_DataType_reltrue_145:
	testl	%eax, %eax
	jnz	symbol_Sizeof_DataType_ifbl_144
	jmp	symbol_Sizeof_DataType_elsebl_144
symbol_Sizeof_DataType_ifbl_144:
	#debug: func-call: symbol_reportError ( table , "Internal Error: symbol_Sizeof!" , subtree -> tok ) 
	subl	$152, %esp
	movl	8(%ebp), %eax
	movl	%eax, 0(%esp)
	movl	$symtab+645, 4(%esp)
	movl	%ebp, %eax
	addl	$-156, %eax
	movl	(%eax), %eax
	addl	$8, %eax
	movl	%esp, %ebx
	addl	$8, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	call	symbol_reportError
	addl	$152, %esp
	#debug: return: return - 1 ; 
	pushl	$0
	popl	%ebx
	subl	$1, %ebx
	pushl	%ebx
	popl	%eax
	jmp	symbol_Sizeof_DataType_ret
	jmp	symbol_Sizeof_DataType_endif_144

symbol_Sizeof_DataType_elsebl_144:

symbol_Sizeof_DataType_endif_144:

	#debug: return: return sizeof ( void * ) ; 
	movl	$4, %eax
	jmp	symbol_Sizeof_DataType_ret
	jmp	symbol_Sizeof_DataType_endif_140

symbol_Sizeof_DataType_elsebl_140:

symbol_Sizeof_DataType_endif_140:

	#debug: if: typeTok . type == 36 
	movl	%ebp, %eax
	addl	$-148, %eax
	addl	$0, %eax
	movl	(%eax), %eax
	pushl	%eax
	popl	%ebx
	cmpl	$36, %ebx
	movl	$1, %eax
	je	symbol_Sizeof_DataType_reltrue_147
	movl	$0, %eax
symbol_Sizeof_DataType_reltrue_147:
	testl	%eax, %eax
	jnz	symbol_Sizeof_DataType_ifbl_146
	jmp	symbol_Sizeof_DataType_elsebl_146
symbol_Sizeof_DataType_ifbl_146:
	#debug: return: return sizeof ( int ) ; 
	movl	$4, %eax
	jmp	symbol_Sizeof_DataType_ret
	jmp	symbol_Sizeof_DataType_endif_146

symbol_Sizeof_DataType_elsebl_146:

symbol_Sizeof_DataType_endif_146:

	#debug: if: typeTok . type == 37 
	movl	%ebp, %eax
	addl	$-148, %eax
	addl	$0, %eax
	movl	(%eax), %eax
	pushl	%eax
	popl	%ebx
	cmpl	$37, %ebx
	movl	$1, %eax
	je	symbol_Sizeof_DataType_reltrue_149
	movl	$0, %eax
symbol_Sizeof_DataType_reltrue_149:
	testl	%eax, %eax
	jnz	symbol_Sizeof_DataType_ifbl_148
	jmp	symbol_Sizeof_DataType_elsebl_148
symbol_Sizeof_DataType_ifbl_148:
	#debug: return: return sizeof ( char ) ; 
	movl	$1, %eax
	jmp	symbol_Sizeof_DataType_ret
	jmp	symbol_Sizeof_DataType_endif_148

symbol_Sizeof_DataType_elsebl_148:

symbol_Sizeof_DataType_endif_148:

	#debug: if: typeTok . type == 38 
	movl	%ebp, %eax
	addl	$-148, %eax
	addl	$0, %eax
	movl	(%eax), %eax
	pushl	%eax
	popl	%ebx
	cmpl	$38, %ebx
	movl	$1, %eax
	je	symbol_Sizeof_DataType_reltrue_151
	movl	$0, %eax
symbol_Sizeof_DataType_reltrue_151:
	testl	%eax, %eax
	jnz	symbol_Sizeof_DataType_ifbl_150
	jmp	symbol_Sizeof_DataType_elsebl_150
symbol_Sizeof_DataType_ifbl_150:
	#debug: func-call: symbol_reportError ( table , "'void' is not a valid type of a variable." , typeTok ) 
	subl	$152, %esp
	movl	8(%ebp), %eax
	movl	%eax, 0(%esp)
	movl	$symtab+676, 4(%esp)
	movl	%ebp, %eax
	addl	$-148, %eax
	movl	%esp, %ebx
	addl	$8, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	call	symbol_reportError
	addl	$152, %esp
	#debug: return: return - 1 ; 
	pushl	$0
	popl	%ebx
	subl	$1, %ebx
	pushl	%ebx
	popl	%eax
	jmp	symbol_Sizeof_DataType_ret
	jmp	symbol_Sizeof_DataType_endif_150

symbol_Sizeof_DataType_elsebl_150:

symbol_Sizeof_DataType_endif_150:

	#debug: if: typeTok . type != 43 
	movl	%ebp, %eax
	addl	$-148, %eax
	addl	$0, %eax
	movl	(%eax), %eax
	pushl	%eax
	popl	%ebx
	cmpl	$43, %ebx
	movl	$1, %eax
	jne	symbol_Sizeof_DataType_reltrue_153
	movl	$0, %eax
symbol_Sizeof_DataType_reltrue_153:
	testl	%eax, %eax
	jnz	symbol_Sizeof_DataType_ifbl_152
	jmp	symbol_Sizeof_DataType_elsebl_152
symbol_Sizeof_DataType_ifbl_152:
	#debug: func-call: symbol_reportError ( table , "Internal Error: Invalid type token." , typeTok ) 
	subl	$152, %esp
	movl	8(%ebp), %eax
	movl	%eax, 0(%esp)
	movl	$symtab+718, 4(%esp)
	movl	%ebp, %eax
	addl	$-148, %eax
	movl	%esp, %ebx
	addl	$8, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	call	symbol_reportError
	addl	$152, %esp
	#debug: return: return - 1 ; 
	pushl	$0
	popl	%ebx
	subl	$1, %ebx
	pushl	%ebx
	popl	%eax
	jmp	symbol_Sizeof_DataType_ret
	jmp	symbol_Sizeof_DataType_endif_152

symbol_Sizeof_DataType_elsebl_152:

symbol_Sizeof_DataType_endif_152:

	#debug: assignment: structnode = symbol_FindStruct ( table , typeTok ) ; 
	subl	$148, %esp
	movl	8(%ebp), %eax
	movl	%eax, 0(%esp)
	movl	%ebp, %eax
	addl	$-148, %eax
	movl	%esp, %ebx
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	call	symbol_FindStruct
	addl	$148, %esp
	movl	%eax, -152(%ebp)
	#debug: if: structnode == 0 
	pushl	-152(%ebp)
	popl	%ebx
	cmpl	$0, %ebx
	movl	$1, %eax
	je	symbol_Sizeof_DataType_reltrue_155
	movl	$0, %eax
symbol_Sizeof_DataType_reltrue_155:
	testl	%eax, %eax
	jnz	symbol_Sizeof_DataType_ifbl_154
	jmp	symbol_Sizeof_DataType_elsebl_154
symbol_Sizeof_DataType_ifbl_154:
	#debug: func-call: symbol_reportError ( table , "Unknown struct." , typeTok ) 
	subl	$152, %esp
	movl	8(%ebp), %eax
	movl	%eax, 0(%esp)
	movl	$symtab+754, 4(%esp)
	movl	%ebp, %eax
	addl	$-148, %eax
	movl	%esp, %ebx
	addl	$8, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	call	symbol_reportError
	addl	$152, %esp
	#debug: return: return - 1 ; 
	pushl	$0
	popl	%ebx
	subl	$1, %ebx
	pushl	%ebx
	popl	%eax
	jmp	symbol_Sizeof_DataType_ret
	jmp	symbol_Sizeof_DataType_endif_154

symbol_Sizeof_DataType_elsebl_154:

symbol_Sizeof_DataType_endif_154:

	#debug: return: return symbol_Sizeof_Structdef ( table , structnode -> structure ) ; 
	subl	$8, %esp
	movl	8(%ebp), %eax
	movl	%eax, 0(%esp)
	movl	%ebp, %eax
	addl	$-152, %eax
	movl	(%eax), %eax
	addl	$148, %eax
	movl	(%eax), %eax
	movl	%eax, 4(%esp)
	call	symbol_Sizeof_Structdef
	addl	$8, %esp
	jmp	symbol_Sizeof_DataType_ret


symbol_Sizeof_DataType_ret:
	movl	%ebp, %esp
	popl	%ebp
	ret




	#debug: func-def: ( symbolTable * table , syntaxTreeNode * structnode ) 
.globl symbol_Sizeof_Structdef
.type symbol_Sizeof_Structdef, @function
symbol_Sizeof_Structdef:
	pushl	%ebp
	movl	%esp, %ebp
	subl	$20, %esp


	#debug: assignment: structsize = 0 ; 
	movl	$0, -4(%ebp)
	#debug: assignment: structentries = symbol_CountStructEntries ( table , structnode ) ; 
	subl	$8, %esp
	movl	8(%ebp), %eax
	movl	%eax, 0(%esp)
	movl	12(%ebp), %eax
	movl	%eax, 4(%esp)
	call	symbol_CountStructEntries
	addl	$8, %esp
	movl	%eax, -8(%ebp)
	#debug: assignment: idx = 0 ; 
	movl	$0, -16(%ebp)
	#debug: while: idx < structentries 
symbol_Sizeof_Structdef_while_156:
	pushl	-16(%ebp)
	popl	%ebx
	cmpl	-8(%ebp), %ebx
	movl	$1, %eax
	jl	symbol_Sizeof_Structdef_reltrue_157
	movl	$0, %eax
symbol_Sizeof_Structdef_reltrue_157:
	testl	%eax, %eax
	jz	symbol_Sizeof_Structdef_endwhile_156

	#debug: assignment: vardecl = symbol_GetStructEntry ( table , structnode , idx ) ; 
	subl	$12, %esp
	movl	8(%ebp), %eax
	movl	%eax, 0(%esp)
	movl	12(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-16(%ebp), %eax
	movl	%eax, 8(%esp)
	call	symbol_GetStructEntry
	addl	$12, %esp
	movl	%eax, -20(%ebp)
	#debug: assignment: childsize = symbol_Sizeof_Vardecl ( table , vardecl ) ; 
	subl	$8, %esp
	movl	8(%ebp), %eax
	movl	%eax, 0(%esp)
	movl	-20(%ebp), %eax
	movl	%eax, 4(%esp)
	call	symbol_Sizeof_Vardecl
	addl	$8, %esp
	movl	%eax, -12(%ebp)
	#debug: if: childsize <= 0 
	pushl	-12(%ebp)
	popl	%ebx
	cmpl	$0, %ebx
	movl	$1, %eax
	jle	symbol_Sizeof_Structdef_reltrue_159
	movl	$0, %eax
symbol_Sizeof_Structdef_reltrue_159:
	testl	%eax, %eax
	jnz	symbol_Sizeof_Structdef_ifbl_158
	jmp	symbol_Sizeof_Structdef_elsebl_158
symbol_Sizeof_Structdef_ifbl_158:
	#debug: return: return - 1 ; 
	pushl	$0
	popl	%ebx
	subl	$1, %ebx
	pushl	%ebx
	popl	%eax
	jmp	symbol_Sizeof_Structdef_ret
	jmp	symbol_Sizeof_Structdef_endif_158

symbol_Sizeof_Structdef_elsebl_158:

symbol_Sizeof_Structdef_endif_158:

	#debug: assignment: structsize = structsize + childsize ; 
	pushl	-4(%ebp)
	popl	%ebx
	addl	-12(%ebp), %ebx
	pushl	%ebx
	popl	%eax
	movl	%eax, -4(%ebp)
	#debug: assignment: idx = idx + 1 ; 
	pushl	-16(%ebp)
	popl	%ebx
	addl	$1, %ebx
	pushl	%ebx
	popl	%eax
	movl	%eax, -16(%ebp)
	jmp	symbol_Sizeof_Structdef_while_156
symbol_Sizeof_Structdef_endwhile_156:

	#debug: return: return structsize ; 
	movl	-4(%ebp), %eax
	jmp	symbol_Sizeof_Structdef_ret


symbol_Sizeof_Structdef_ret:
	movl	%ebp, %esp
	popl	%ebp
	ret




	#debug: func-def: ( symbolTable * table , syntaxTreeNode * func_decl ) 
.globl symbol_CountFunctionArgs
.type symbol_CountFunctionArgs, @function
symbol_CountFunctionArgs:
	pushl	%ebp
	movl	%esp, %ebp
	subl	$4, %esp


	#debug: assignment: arglist = syntax_GetChild ( func_decl , 1 ) ; 
	subl	$8, %esp
	movl	12(%ebp), %eax
	movl	%eax, 0(%esp)
	movl	$1, 4(%esp)
	call	syntax_GetChild
	addl	$8, %esp
	movl	%eax, -4(%ebp)
	#debug: return: return ( syntax_CountChilds ( arglist ) - 1 ) / 2 ; 
	subl	$4, %esp
	movl	-4(%ebp), %eax
	movl	%eax, 0(%esp)
	call	syntax_CountChilds
	addl	$4, %esp
	pushl	%eax
	popl	%ebx
	subl	$1, %ebx
	pushl	%ebx
	popl	%eax
	pushl	%eax
	movl	$2, %eax
	movl	%eax, %ebx
	popl	%eax
	movl	$0, %edx
	idivl	%ebx
	pushl	%eax
	popl	%eax
	jmp	symbol_CountFunctionArgs_ret


symbol_CountFunctionArgs_ret:
	movl	%ebp, %esp
	popl	%ebp
	ret




	#debug: func-def: ( symbolTable * table , syntaxTreeNode * func_decl , int idx ) 
.globl symbol_GetFunctionArg
.type symbol_GetFunctionArg, @function
symbol_GetFunctionArg:
	pushl	%ebp
	movl	%esp, %ebp
	subl	$4, %esp


	#debug: if: idx >= symbol_CountFunctionArgs ( table , func_decl ) 
	pushl	16(%ebp)
	subl	$8, %esp
	movl	8(%ebp), %eax
	movl	%eax, 0(%esp)
	movl	12(%ebp), %eax
	movl	%eax, 4(%esp)
	call	symbol_CountFunctionArgs
	addl	$8, %esp
	popl	%ebx
	cmpl	%eax, %ebx
	movl	$1, %eax
	jge	symbol_GetFunctionArg_reltrue_161
	movl	$0, %eax
symbol_GetFunctionArg_reltrue_161:
	testl	%eax, %eax
	jnz	symbol_GetFunctionArg_ifbl_160
	jmp	symbol_GetFunctionArg_elsebl_160
symbol_GetFunctionArg_ifbl_160:
	#debug: return: return 0 ; 
	movl	$0, %eax
	jmp	symbol_GetFunctionArg_ret
	jmp	symbol_GetFunctionArg_endif_160

symbol_GetFunctionArg_elsebl_160:

symbol_GetFunctionArg_endif_160:

	#debug: assignment: arglist = syntax_GetChild ( func_decl , 1 ) ; 
	subl	$8, %esp
	movl	12(%ebp), %eax
	movl	%eax, 0(%esp)
	movl	$1, 4(%esp)
	call	syntax_GetChild
	addl	$8, %esp
	movl	%eax, -4(%ebp)
	#debug: return: return syntax_GetChild ( arglist , 1 + 2 * idx ) ; 
	subl	$8, %esp
	movl	-4(%ebp), %eax
	movl	%eax, 0(%esp)
	pushl	$1
	pushl	$2
	popl	%ebx
	imull	16(%ebp), %ebx
	pushl	%ebx
	popl	%eax
	popl	%ebx
	addl	%eax, %ebx
	pushl	%ebx
	popl	%eax
	movl	%eax, 4(%esp)
	call	syntax_GetChild
	addl	$8, %esp
	jmp	symbol_GetFunctionArg_ret


symbol_GetFunctionArg_ret:
	movl	%ebp, %esp
	popl	%ebp
	ret




	#debug: func-def: ( symbolTable * table , syntaxTreeNode * func_decl ) 
.globl symbol_GetReturnType
.type symbol_GetReturnType, @function
symbol_GetReturnType:
	pushl	%ebp
	movl	%esp, %ebp
	subl	$4, %esp


	#debug: assignment: tmp = syntax_GetChild ( func_decl , 0 ) ; 
	subl	$8, %esp
	movl	12(%ebp), %eax
	movl	%eax, 0(%esp)
	movl	$0, 4(%esp)
	call	syntax_GetChild
	addl	$8, %esp
	movl	%eax, -4(%ebp)
	#debug: return: return syntax_GetChild ( tmp , 0 ) ; 
	subl	$8, %esp
	movl	-4(%ebp), %eax
	movl	%eax, 0(%esp)
	movl	$0, 4(%esp)
	call	syntax_GetChild
	addl	$8, %esp
	jmp	symbol_GetReturnType_ret


symbol_GetReturnType_ret:
	movl	%ebp, %esp
	popl	%ebp
	ret




	#debug: func-def: ( symbolTable * table , syntaxTreeNode * structure ) 
.globl symbol_IsReturnTypeVoid
.type symbol_IsReturnTypeVoid, @function
symbol_IsReturnTypeVoid:
	pushl	%ebp
	movl	%esp, %ebp
	subl	$4, %esp


	#debug: assignment: retType = symbol_GetReturnType ( table , structure ) ; 
	subl	$8, %esp
	movl	8(%ebp), %eax
	movl	%eax, 0(%esp)
	movl	12(%ebp), %eax
	movl	%eax, 4(%esp)
	call	symbol_GetReturnType
	addl	$8, %esp
	movl	%eax, -4(%ebp)
	#debug: if: syntax_CountChilds ( retType ) == 1 
	subl	$4, %esp
	movl	-4(%ebp), %eax
	movl	%eax, 0(%esp)
	call	syntax_CountChilds
	addl	$4, %esp
	pushl	%eax
	popl	%ebx
	cmpl	$1, %ebx
	movl	$1, %eax
	je	symbol_IsReturnTypeVoid_reltrue_163
	movl	$0, %eax
symbol_IsReturnTypeVoid_reltrue_163:
	testl	%eax, %eax
	jnz	symbol_IsReturnTypeVoid_ifbl_162
	jmp	symbol_IsReturnTypeVoid_elsebl_162
symbol_IsReturnTypeVoid_ifbl_162:
	#debug: assignment: retType = syntax_GetChild ( retType , 0 ) ; 
	subl	$8, %esp
	movl	-4(%ebp), %eax
	movl	%eax, 0(%esp)
	movl	$0, 4(%esp)
	call	syntax_GetChild
	addl	$8, %esp
	movl	%eax, -4(%ebp)
	#debug: if: retType -> tok . type == 38 
	movl	%ebp, %eax
	addl	$-4, %eax
	movl	(%eax), %eax
	addl	$8, %eax
	addl	$0, %eax
	movl	(%eax), %eax
	pushl	%eax
	popl	%ebx
	cmpl	$38, %ebx
	movl	$1, %eax
	je	symbol_IsReturnTypeVoid_reltrue_165
	movl	$0, %eax
symbol_IsReturnTypeVoid_reltrue_165:
	testl	%eax, %eax
	jnz	symbol_IsReturnTypeVoid_ifbl_164
	jmp	symbol_IsReturnTypeVoid_elsebl_164
symbol_IsReturnTypeVoid_ifbl_164:
	#debug: return: return 1 ; 
	movl	$1, %eax
	jmp	symbol_IsReturnTypeVoid_ret
	jmp	symbol_IsReturnTypeVoid_endif_164

symbol_IsReturnTypeVoid_elsebl_164:

symbol_IsReturnTypeVoid_endif_164:

	jmp	symbol_IsReturnTypeVoid_endif_162

symbol_IsReturnTypeVoid_elsebl_162:

symbol_IsReturnTypeVoid_endif_162:

	#debug: return: return 0 ; 
	movl	$0, %eax
	jmp	symbol_IsReturnTypeVoid_ret


symbol_IsReturnTypeVoid_ret:
	movl	%ebp, %esp
	popl	%ebp
	ret




	#debug: func-def: ( symbolTable * table , syntaxTreeNode * string ) 
.globl symbol_Sizeof_String
.type symbol_Sizeof_String, @function
symbol_Sizeof_String:
	pushl	%ebp
	movl	%esp, %ebp
	subl	$12, %esp


	#debug: if: string -> tok . type != 45 
	movl	%ebp, %eax
	addl	$12, %eax
	movl	(%eax), %eax
	addl	$8, %eax
	addl	$0, %eax
	movl	(%eax), %eax
	pushl	%eax
	popl	%ebx
	cmpl	$45, %ebx
	movl	$1, %eax
	jne	symbol_Sizeof_String_reltrue_167
	movl	$0, %eax
symbol_Sizeof_String_reltrue_167:
	testl	%eax, %eax
	jnz	symbol_Sizeof_String_ifbl_166
	jmp	symbol_Sizeof_String_elsebl_166
symbol_Sizeof_String_ifbl_166:
	#debug: func-call: symbol_reportError ( table , "Internal Error: Calc string-size of non-string token not allowed.\n" , string -> tok ) 
	subl	$152, %esp
	movl	8(%ebp), %eax
	movl	%eax, 0(%esp)
	movl	$symtab+770, 4(%esp)
	movl	%ebp, %eax
	addl	$12, %eax
	movl	(%eax), %eax
	addl	$8, %eax
	movl	%esp, %ebx
	addl	$8, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	call	symbol_reportError
	addl	$152, %esp
	#debug: return: return - 1 ; 
	pushl	$0
	popl	%ebx
	subl	$1, %ebx
	pushl	%ebx
	popl	%eax
	jmp	symbol_Sizeof_String_ret
	jmp	symbol_Sizeof_String_endif_166

symbol_Sizeof_String_elsebl_166:

symbol_Sizeof_String_endif_166:

	#debug: assignment: len = strlen ( string -> tok . content ) ; 
	subl	$4, %esp
	movl	%ebp, %eax
	addl	$12, %eax
	movl	(%eax), %eax
	addl	$8, %eax
	addl	$16, %eax
	movl	%eax, 0(%esp)
	call	strlen
	addl	$4, %esp
	movl	%eax, -4(%ebp)
	#debug: assignment: idx = 0 ; 
	movl	$0, -12(%ebp)
	#debug: assignment: charcnt = 0 ; 
	movl	$0, -8(%ebp)
	#debug: while: 1 
symbol_Sizeof_String_while_168:
	movl	$1, %eax
	testl	%eax, %eax
	jz	symbol_Sizeof_String_endwhile_168

	#debug: if: string -> tok . content [ idx ] == '\\' 
	pushl	-12(%ebp)
	movl	%ebp, %eax
	addl	$12, %eax
	movl	(%eax), %eax
	addl	$8, %eax
	addl	$16, %eax
	popl	%esi
	addl	%esi, %eax
	movb	(%eax), %al
	movsbl	%al, %eax
	pushl	%eax
	popl	%ebx
	cmpl	$92, %ebx
	movl	$1, %eax
	je	symbol_Sizeof_String_reltrue_170
	movl	$0, %eax
symbol_Sizeof_String_reltrue_170:
	testl	%eax, %eax
	jnz	symbol_Sizeof_String_ifbl_169
	jmp	symbol_Sizeof_String_elsebl_169
symbol_Sizeof_String_ifbl_169:
	#debug: assignment: idx = idx + 1 ; 
	pushl	-12(%ebp)
	popl	%ebx
	addl	$1, %ebx
	pushl	%ebx
	popl	%eax
	movl	%eax, -12(%ebp)
	jmp	symbol_Sizeof_String_endif_169

symbol_Sizeof_String_elsebl_169:

symbol_Sizeof_String_endif_169:

	#debug: if: string -> tok . content [ idx ] == '\0' 
	pushl	-12(%ebp)
	movl	%ebp, %eax
	addl	$12, %eax
	movl	(%eax), %eax
	addl	$8, %eax
	addl	$16, %eax
	popl	%esi
	addl	%esi, %eax
	movb	(%eax), %al
	movsbl	%al, %eax
	pushl	%eax
	popl	%ebx
	cmpl	$0, %ebx
	movl	$1, %eax
	je	symbol_Sizeof_String_reltrue_172
	movl	$0, %eax
symbol_Sizeof_String_reltrue_172:
	testl	%eax, %eax
	jnz	symbol_Sizeof_String_ifbl_171
	jmp	symbol_Sizeof_String_elsebl_171
symbol_Sizeof_String_ifbl_171:
	jmp	symbol_Sizeof_String_endwhile_168
	jmp	symbol_Sizeof_String_endif_171

symbol_Sizeof_String_elsebl_171:

symbol_Sizeof_String_endif_171:

	#debug: assignment: idx = idx + 1 ; 
	pushl	-12(%ebp)
	popl	%ebx
	addl	$1, %ebx
	pushl	%ebx
	popl	%eax
	movl	%eax, -12(%ebp)
	#debug: assignment: charcnt = charcnt + 1 ; 
	pushl	-8(%ebp)
	popl	%ebx
	addl	$1, %ebx
	pushl	%ebx
	popl	%eax
	movl	%eax, -8(%ebp)
	jmp	symbol_Sizeof_String_while_168
symbol_Sizeof_String_endwhile_168:

	#debug: return: return charcnt - 1 ; 
	pushl	-8(%ebp)
	popl	%ebx
	subl	$1, %ebx
	pushl	%ebx
	popl	%eax
	jmp	symbol_Sizeof_String_ret


symbol_Sizeof_String_ret:
	movl	%ebp, %esp
	popl	%ebp
	ret




	#debug: func-def: ( symbolTable * table , symbolTableNode * symbol ) 
.globl symbol_Sizeof_Symbol
.type symbol_Sizeof_Symbol, @function
symbol_Sizeof_Symbol:
	pushl	%ebp
	movl	%esp, %ebp
	subl	$0, %esp


	#debug: if: symbol -> type == 4 || symbol -> type == 5 
	movl	%ebp, %eax
	addl	$12, %eax
	movl	(%eax), %eax
	addl	$144, %eax
	movl	(%eax), %eax
	pushl	%eax
	popl	%ebx
	cmpl	$4, %ebx
	movl	$1, %eax
	je	symbol_Sizeof_Symbol_reltrue_175
	movl	$0, %eax
symbol_Sizeof_Symbol_reltrue_175:
	testl	%eax, %eax
	jnz	symbol_Sizeof_Symbol_logexprtrue_174
	movl	%ebp, %eax
	addl	$12, %eax
	movl	(%eax), %eax
	addl	$144, %eax
	movl	(%eax), %eax
	pushl	%eax
	popl	%ebx
	cmpl	$5, %ebx
	movl	$1, %eax
	je	symbol_Sizeof_Symbol_reltrue_176
	movl	$0, %eax
symbol_Sizeof_Symbol_reltrue_176:
	testl	%eax, %eax
	jnz	symbol_Sizeof_Symbol_logexprtrue_174
	movl	$0, %eax
	jmp	symbol_Sizeof_Symbol_logexprfalse_174
symbol_Sizeof_Symbol_logexprtrue_174:
	movl	$1, %eax
symbol_Sizeof_Symbol_logexprfalse_174:
	testl	%eax, %eax
	jnz	symbol_Sizeof_Symbol_ifbl_173
	jmp	symbol_Sizeof_Symbol_elsebl_173
symbol_Sizeof_Symbol_ifbl_173:
	#debug: return: return symbol_Sizeof_Vardecl ( table , symbol -> structure ) ; 
	subl	$8, %esp
	movl	8(%ebp), %eax
	movl	%eax, 0(%esp)
	movl	%ebp, %eax
	addl	$12, %eax
	movl	(%eax), %eax
	addl	$148, %eax
	movl	(%eax), %eax
	movl	%eax, 4(%esp)
	call	symbol_Sizeof_Vardecl
	addl	$8, %esp
	jmp	symbol_Sizeof_Symbol_ret
	jmp	symbol_Sizeof_Symbol_endif_173

symbol_Sizeof_Symbol_elsebl_173:

symbol_Sizeof_Symbol_endif_173:

	#debug: if: symbol -> type == 6 
	movl	%ebp, %eax
	addl	$12, %eax
	movl	(%eax), %eax
	addl	$144, %eax
	movl	(%eax), %eax
	pushl	%eax
	popl	%ebx
	cmpl	$6, %ebx
	movl	$1, %eax
	je	symbol_Sizeof_Symbol_reltrue_178
	movl	$0, %eax
symbol_Sizeof_Symbol_reltrue_178:
	testl	%eax, %eax
	jnz	symbol_Sizeof_Symbol_ifbl_177
	jmp	symbol_Sizeof_Symbol_elsebl_177
symbol_Sizeof_Symbol_ifbl_177:
	#debug: return: return symbol_Sizeof_DataType ( table , syntax_GetChild ( syntax_GetChild ( symbol -> structure , 0 ) , 0 ) ) ; 
	subl	$8, %esp
	movl	8(%ebp), %eax
	movl	%eax, 0(%esp)
	subl	$8, %esp
	subl	$8, %esp
	movl	%ebp, %eax
	addl	$12, %eax
	movl	(%eax), %eax
	addl	$148, %eax
	movl	(%eax), %eax
	movl	%eax, 0(%esp)
	movl	$0, 4(%esp)
	call	syntax_GetChild
	addl	$8, %esp
	movl	%eax, 0(%esp)
	movl	$0, 4(%esp)
	call	syntax_GetChild
	addl	$8, %esp
	movl	%eax, 4(%esp)
	call	symbol_Sizeof_DataType
	addl	$8, %esp
	jmp	symbol_Sizeof_Symbol_ret
	jmp	symbol_Sizeof_Symbol_endif_177

symbol_Sizeof_Symbol_elsebl_177:

symbol_Sizeof_Symbol_endif_177:

	#debug: if: symbol -> type == 3 
	movl	%ebp, %eax
	addl	$12, %eax
	movl	(%eax), %eax
	addl	$144, %eax
	movl	(%eax), %eax
	pushl	%eax
	popl	%ebx
	cmpl	$3, %ebx
	movl	$1, %eax
	je	symbol_Sizeof_Symbol_reltrue_180
	movl	$0, %eax
symbol_Sizeof_Symbol_reltrue_180:
	testl	%eax, %eax
	jnz	symbol_Sizeof_Symbol_ifbl_179
	jmp	symbol_Sizeof_Symbol_elsebl_179
symbol_Sizeof_Symbol_ifbl_179:
	#debug: return: return symbol_Sizeof_Structdef ( table , symbol -> structure ) ; 
	subl	$8, %esp
	movl	8(%ebp), %eax
	movl	%eax, 0(%esp)
	movl	%ebp, %eax
	addl	$12, %eax
	movl	(%eax), %eax
	addl	$148, %eax
	movl	(%eax), %eax
	movl	%eax, 4(%esp)
	call	symbol_Sizeof_Structdef
	addl	$8, %esp
	jmp	symbol_Sizeof_Symbol_ret
	jmp	symbol_Sizeof_Symbol_endif_179

symbol_Sizeof_Symbol_elsebl_179:

symbol_Sizeof_Symbol_endif_179:

	#debug: if: symbol -> type == 7 
	movl	%ebp, %eax
	addl	$12, %eax
	movl	(%eax), %eax
	addl	$144, %eax
	movl	(%eax), %eax
	pushl	%eax
	popl	%ebx
	cmpl	$7, %ebx
	movl	$1, %eax
	je	symbol_Sizeof_Symbol_reltrue_182
	movl	$0, %eax
symbol_Sizeof_Symbol_reltrue_182:
	testl	%eax, %eax
	jnz	symbol_Sizeof_Symbol_ifbl_181
	jmp	symbol_Sizeof_Symbol_elsebl_181
symbol_Sizeof_Symbol_ifbl_181:
	#debug: return: return symbol_Sizeof_String ( table , symbol -> structure ) ; 
	subl	$8, %esp
	movl	8(%ebp), %eax
	movl	%eax, 0(%esp)
	movl	%ebp, %eax
	addl	$12, %eax
	movl	(%eax), %eax
	addl	$148, %eax
	movl	(%eax), %eax
	movl	%eax, 4(%esp)
	call	symbol_Sizeof_String
	addl	$8, %esp
	jmp	symbol_Sizeof_Symbol_ret
	jmp	symbol_Sizeof_Symbol_endif_181

symbol_Sizeof_Symbol_elsebl_181:

symbol_Sizeof_Symbol_endif_181:

	#debug: if: symbol -> type == 1 || symbol -> type == 2 
	movl	%ebp, %eax
	addl	$12, %eax
	movl	(%eax), %eax
	addl	$144, %eax
	movl	(%eax), %eax
	pushl	%eax
	popl	%ebx
	cmpl	$1, %ebx
	movl	$1, %eax
	je	symbol_Sizeof_Symbol_reltrue_185
	movl	$0, %eax
symbol_Sizeof_Symbol_reltrue_185:
	testl	%eax, %eax
	jnz	symbol_Sizeof_Symbol_logexprtrue_184
	movl	%ebp, %eax
	addl	$12, %eax
	movl	(%eax), %eax
	addl	$144, %eax
	movl	(%eax), %eax
	pushl	%eax
	popl	%ebx
	cmpl	$2, %ebx
	movl	$1, %eax
	je	symbol_Sizeof_Symbol_reltrue_186
	movl	$0, %eax
symbol_Sizeof_Symbol_reltrue_186:
	testl	%eax, %eax
	jnz	symbol_Sizeof_Symbol_logexprtrue_184
	movl	$0, %eax
	jmp	symbol_Sizeof_Symbol_logexprfalse_184
symbol_Sizeof_Symbol_logexprtrue_184:
	movl	$1, %eax
symbol_Sizeof_Symbol_logexprfalse_184:
	testl	%eax, %eax
	jnz	symbol_Sizeof_Symbol_ifbl_183
	jmp	symbol_Sizeof_Symbol_elsebl_183
symbol_Sizeof_Symbol_ifbl_183:
	#debug: return: return 0 ; 
	movl	$0, %eax
	jmp	symbol_Sizeof_Symbol_ret
	jmp	symbol_Sizeof_Symbol_endif_183

symbol_Sizeof_Symbol_elsebl_183:

symbol_Sizeof_Symbol_endif_183:

	#debug: return: return - 1 ; 
	pushl	$0
	popl	%ebx
	subl	$1, %ebx
	pushl	%ebx
	popl	%eax
	jmp	symbol_Sizeof_Symbol_ret


symbol_Sizeof_Symbol_ret:
	movl	%ebp, %esp
	popl	%ebp
	ret




	#debug: func-def: ( symbolTable * table , syntaxTreeNode * structure ) 
.globl symbol_Sizeof_FunctionArgs
.type symbol_Sizeof_FunctionArgs, @function
symbol_Sizeof_FunctionArgs:
	pushl	%ebp
	movl	%esp, %ebp
	subl	$20, %esp


	#debug: assignment: idx = 0 ; 
	movl	$0, -8(%ebp)
	#debug: assignment: size = 0 ; 
	movl	$0, -16(%ebp)
	#debug: assignment: cnt = symbol_CountFunctionArgs ( table , structure ) ; 
	subl	$8, %esp
	movl	8(%ebp), %eax
	movl	%eax, 0(%esp)
	movl	12(%ebp), %eax
	movl	%eax, 4(%esp)
	call	symbol_CountFunctionArgs
	addl	$8, %esp
	movl	%eax, -4(%ebp)
	#debug: while: idx < cnt 
symbol_Sizeof_FunctionArgs_while_187:
	pushl	-8(%ebp)
	popl	%ebx
	cmpl	-4(%ebp), %ebx
	movl	$1, %eax
	jl	symbol_Sizeof_FunctionArgs_reltrue_188
	movl	$0, %eax
symbol_Sizeof_FunctionArgs_reltrue_188:
	testl	%eax, %eax
	jz	symbol_Sizeof_FunctionArgs_endwhile_187

	#debug: assignment: arg = symbol_GetFunctionArg ( table , structure , idx ) ; 
	subl	$12, %esp
	movl	8(%ebp), %eax
	movl	%eax, 0(%esp)
	movl	12(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-8(%ebp), %eax
	movl	%eax, 8(%esp)
	call	symbol_GetFunctionArg
	addl	$12, %esp
	movl	%eax, -20(%ebp)
	#debug: assignment: argsize = symbol_Sizeof_Vardecl ( table , arg ) ; 
	subl	$8, %esp
	movl	8(%ebp), %eax
	movl	%eax, 0(%esp)
	movl	-20(%ebp), %eax
	movl	%eax, 4(%esp)
	call	symbol_Sizeof_Vardecl
	addl	$8, %esp
	movl	%eax, -12(%ebp)
	#debug: if: argsize < 0 
	pushl	-12(%ebp)
	popl	%ebx
	cmpl	$0, %ebx
	movl	$1, %eax
	jl	symbol_Sizeof_FunctionArgs_reltrue_190
	movl	$0, %eax
symbol_Sizeof_FunctionArgs_reltrue_190:
	testl	%eax, %eax
	jnz	symbol_Sizeof_FunctionArgs_ifbl_189
	jmp	symbol_Sizeof_FunctionArgs_elsebl_189
symbol_Sizeof_FunctionArgs_ifbl_189:
	#debug: return: return - 1 ; 
	pushl	$0
	popl	%ebx
	subl	$1, %ebx
	pushl	%ebx
	popl	%eax
	jmp	symbol_Sizeof_FunctionArgs_ret
	jmp	symbol_Sizeof_FunctionArgs_endif_189

symbol_Sizeof_FunctionArgs_elsebl_189:

symbol_Sizeof_FunctionArgs_endif_189:

	#debug: assignment: size = size + argsize ; 
	pushl	-16(%ebp)
	popl	%ebx
	addl	-12(%ebp), %ebx
	pushl	%ebx
	popl	%eax
	movl	%eax, -16(%ebp)
	#debug: assignment: idx = idx + 1 ; 
	pushl	-8(%ebp)
	popl	%ebx
	addl	$1, %ebx
	pushl	%ebx
	popl	%eax
	movl	%eax, -8(%ebp)
	jmp	symbol_Sizeof_FunctionArgs_while_187
symbol_Sizeof_FunctionArgs_endwhile_187:

	#debug: return: return size ; 
	movl	-16(%ebp), %eax
	jmp	symbol_Sizeof_FunctionArgs_ret


symbol_Sizeof_FunctionArgs_ret:
	movl	%ebp, %esp
	popl	%ebp
	ret




	#debug: func-def: ( symbolTable * table ) 
.globl symbol_GetParameterBlockSize
.type symbol_GetParameterBlockSize, @function
symbol_GetParameterBlockSize:
	pushl	%ebp
	movl	%esp, %ebp
	subl	$8, %esp


	#debug: assignment: node = Get_Front_Of_symbolTableNode_List ( & table -> list ) ; 
	subl	$4, %esp
	movl	%ebp, %eax
	addl	$8, %eax
	movl	(%eax), %eax
	addl	$8, %eax
	movl	%eax, 0(%esp)
	call	Get_Front_Of_symbolTableNode_List
	addl	$4, %esp
	movl	%eax, -4(%ebp)
	#debug: assignment: sum = 0 ; 
	movl	$0, -8(%ebp)
	#debug: while: node != 0 
symbol_GetParameterBlockSize_while_191:
	pushl	-4(%ebp)
	popl	%ebx
	cmpl	$0, %ebx
	movl	$1, %eax
	jne	symbol_GetParameterBlockSize_reltrue_192
	movl	$0, %eax
symbol_GetParameterBlockSize_reltrue_192:
	testl	%eax, %eax
	jz	symbol_GetParameterBlockSize_endwhile_191

	#debug: if: node -> type == 6 
	movl	%ebp, %eax
	addl	$-4, %eax
	movl	(%eax), %eax
	addl	$144, %eax
	movl	(%eax), %eax
	pushl	%eax
	popl	%ebx
	cmpl	$6, %ebx
	movl	$1, %eax
	je	symbol_GetParameterBlockSize_reltrue_194
	movl	$0, %eax
symbol_GetParameterBlockSize_reltrue_194:
	testl	%eax, %eax
	jnz	symbol_GetParameterBlockSize_ifbl_193
	jmp	symbol_GetParameterBlockSize_elsebl_193
symbol_GetParameterBlockSize_ifbl_193:
	#debug: assignment: sum = sum + symbol_Sizeof_Symbol ( table , node ) ; 
	pushl	-8(%ebp)
	subl	$8, %esp
	movl	8(%ebp), %eax
	movl	%eax, 0(%esp)
	movl	-4(%ebp), %eax
	movl	%eax, 4(%esp)
	call	symbol_Sizeof_Symbol
	addl	$8, %esp
	popl	%ebx
	addl	%eax, %ebx
	pushl	%ebx
	popl	%eax
	movl	%eax, -8(%ebp)
	jmp	symbol_GetParameterBlockSize_endif_193

symbol_GetParameterBlockSize_elsebl_193:

symbol_GetParameterBlockSize_endif_193:

	#debug: assignment: node = Get_Next_In_symbolTableNode_List ( node ) ; 
	subl	$4, %esp
	movl	-4(%ebp), %eax
	movl	%eax, 0(%esp)
	call	Get_Next_In_symbolTableNode_List
	addl	$4, %esp
	movl	%eax, -4(%ebp)
	jmp	symbol_GetParameterBlockSize_while_191
symbol_GetParameterBlockSize_endwhile_191:

	#debug: return: return sum ; 
	movl	-8(%ebp), %eax
	jmp	symbol_GetParameterBlockSize_ret


symbol_GetParameterBlockSize_ret:
	movl	%ebp, %esp
	popl	%ebp
	ret




	#debug: func-def: ( symbolTable * table ) 
.globl symbol_GetLocalVarBlockSize
.type symbol_GetLocalVarBlockSize, @function
symbol_GetLocalVarBlockSize:
	pushl	%ebp
	movl	%esp, %ebp
	subl	$8, %esp


	#debug: assignment: node = Get_Front_Of_symbolTableNode_List ( & table -> list ) ; 
	subl	$4, %esp
	movl	%ebp, %eax
	addl	$8, %eax
	movl	(%eax), %eax
	addl	$8, %eax
	movl	%eax, 0(%esp)
	call	Get_Front_Of_symbolTableNode_List
	addl	$4, %esp
	movl	%eax, -4(%ebp)
	#debug: assignment: sum = 0 ; 
	movl	$0, -8(%ebp)
	#debug: while: node != 0 
symbol_GetLocalVarBlockSize_while_195:
	pushl	-4(%ebp)
	popl	%ebx
	cmpl	$0, %ebx
	movl	$1, %eax
	jne	symbol_GetLocalVarBlockSize_reltrue_196
	movl	$0, %eax
symbol_GetLocalVarBlockSize_reltrue_196:
	testl	%eax, %eax
	jz	symbol_GetLocalVarBlockSize_endwhile_195

	#debug: if: node -> type == 4 
	movl	%ebp, %eax
	addl	$-4, %eax
	movl	(%eax), %eax
	addl	$144, %eax
	movl	(%eax), %eax
	pushl	%eax
	popl	%ebx
	cmpl	$4, %ebx
	movl	$1, %eax
	je	symbol_GetLocalVarBlockSize_reltrue_198
	movl	$0, %eax
symbol_GetLocalVarBlockSize_reltrue_198:
	testl	%eax, %eax
	jnz	symbol_GetLocalVarBlockSize_ifbl_197
	jmp	symbol_GetLocalVarBlockSize_elsebl_197
symbol_GetLocalVarBlockSize_ifbl_197:
	#debug: assignment: sum = sum + symbol_Sizeof_Symbol ( table , node ) ; 
	pushl	-8(%ebp)
	subl	$8, %esp
	movl	8(%ebp), %eax
	movl	%eax, 0(%esp)
	movl	-4(%ebp), %eax
	movl	%eax, 4(%esp)
	call	symbol_Sizeof_Symbol
	addl	$8, %esp
	popl	%ebx
	addl	%eax, %ebx
	pushl	%ebx
	popl	%eax
	movl	%eax, -8(%ebp)
	jmp	symbol_GetLocalVarBlockSize_endif_197

symbol_GetLocalVarBlockSize_elsebl_197:

symbol_GetLocalVarBlockSize_endif_197:

	#debug: assignment: node = Get_Next_In_symbolTableNode_List ( node ) ; 
	subl	$4, %esp
	movl	-4(%ebp), %eax
	movl	%eax, 0(%esp)
	call	Get_Next_In_symbolTableNode_List
	addl	$4, %esp
	movl	%eax, -4(%ebp)
	jmp	symbol_GetLocalVarBlockSize_while_195
symbol_GetLocalVarBlockSize_endwhile_195:

	#debug: return: return sum ; 
	movl	-8(%ebp), %eax
	jmp	symbol_GetLocalVarBlockSize_ret


symbol_GetLocalVarBlockSize_ret:
	movl	%ebp, %esp
	popl	%ebp
	ret




	#debug: func-def: ( symbolTable * table ) 
.globl symbol_GetGlobalsBlockSize
.type symbol_GetGlobalsBlockSize, @function
symbol_GetGlobalsBlockSize:
	pushl	%ebp
	movl	%esp, %ebp
	subl	$8, %esp


	#debug: assignment: node = Get_Front_Of_symbolTableNode_List ( & table -> list ) ; 
	subl	$4, %esp
	movl	%ebp, %eax
	addl	$8, %eax
	movl	(%eax), %eax
	addl	$8, %eax
	movl	%eax, 0(%esp)
	call	Get_Front_Of_symbolTableNode_List
	addl	$4, %esp
	movl	%eax, -4(%ebp)
	#debug: assignment: sum = 0 ; 
	movl	$0, -8(%ebp)
	#debug: while: node != 0 
symbol_GetGlobalsBlockSize_while_199:
	pushl	-4(%ebp)
	popl	%ebx
	cmpl	$0, %ebx
	movl	$1, %eax
	jne	symbol_GetGlobalsBlockSize_reltrue_200
	movl	$0, %eax
symbol_GetGlobalsBlockSize_reltrue_200:
	testl	%eax, %eax
	jz	symbol_GetGlobalsBlockSize_endwhile_199

	#debug: if: node -> type == 5 || node -> type == 7 
	movl	%ebp, %eax
	addl	$-4, %eax
	movl	(%eax), %eax
	addl	$144, %eax
	movl	(%eax), %eax
	pushl	%eax
	popl	%ebx
	cmpl	$5, %ebx
	movl	$1, %eax
	je	symbol_GetGlobalsBlockSize_reltrue_203
	movl	$0, %eax
symbol_GetGlobalsBlockSize_reltrue_203:
	testl	%eax, %eax
	jnz	symbol_GetGlobalsBlockSize_logexprtrue_202
	movl	%ebp, %eax
	addl	$-4, %eax
	movl	(%eax), %eax
	addl	$144, %eax
	movl	(%eax), %eax
	pushl	%eax
	popl	%ebx
	cmpl	$7, %ebx
	movl	$1, %eax
	je	symbol_GetGlobalsBlockSize_reltrue_204
	movl	$0, %eax
symbol_GetGlobalsBlockSize_reltrue_204:
	testl	%eax, %eax
	jnz	symbol_GetGlobalsBlockSize_logexprtrue_202
	movl	$0, %eax
	jmp	symbol_GetGlobalsBlockSize_logexprfalse_202
symbol_GetGlobalsBlockSize_logexprtrue_202:
	movl	$1, %eax
symbol_GetGlobalsBlockSize_logexprfalse_202:
	testl	%eax, %eax
	jnz	symbol_GetGlobalsBlockSize_ifbl_201
	jmp	symbol_GetGlobalsBlockSize_elsebl_201
symbol_GetGlobalsBlockSize_ifbl_201:
	#debug: assignment: sum = sum + symbol_Sizeof_Symbol ( table , node ) ; 
	pushl	-8(%ebp)
	subl	$8, %esp
	movl	8(%ebp), %eax
	movl	%eax, 0(%esp)
	movl	-4(%ebp), %eax
	movl	%eax, 4(%esp)
	call	symbol_Sizeof_Symbol
	addl	$8, %esp
	popl	%ebx
	addl	%eax, %ebx
	pushl	%ebx
	popl	%eax
	movl	%eax, -8(%ebp)
	jmp	symbol_GetGlobalsBlockSize_endif_201

symbol_GetGlobalsBlockSize_elsebl_201:

symbol_GetGlobalsBlockSize_endif_201:

	#debug: assignment: node = Get_Next_In_symbolTableNode_List ( node ) ; 
	subl	$4, %esp
	movl	-4(%ebp), %eax
	movl	%eax, 0(%esp)
	call	Get_Next_In_symbolTableNode_List
	addl	$4, %esp
	movl	%eax, -4(%ebp)
	jmp	symbol_GetGlobalsBlockSize_while_199
symbol_GetGlobalsBlockSize_endwhile_199:

	#debug: return: return sum ; 
	movl	-8(%ebp), %eax
	jmp	symbol_GetGlobalsBlockSize_ret


symbol_GetGlobalsBlockSize_ret:
	movl	%ebp, %esp
	popl	%ebp
	ret




	#debug: func-def: ( symbolTable * table , symbolTableNode * parameter ) 
.globl symbol_GetParameterOffset
.type symbol_GetParameterOffset, @function
symbol_GetParameterOffset:
	pushl	%ebp
	movl	%esp, %ebp
	subl	$8, %esp


	#debug: assignment: node = Get_Front_Of_symbolTableNode_List ( & table -> list ) ; 
	subl	$4, %esp
	movl	%ebp, %eax
	addl	$8, %eax
	movl	(%eax), %eax
	addl	$8, %eax
	movl	%eax, 0(%esp)
	call	Get_Front_Of_symbolTableNode_List
	addl	$4, %esp
	movl	%eax, -4(%ebp)
	#debug: assignment: sum = 0 ; 
	movl	$0, -8(%ebp)
	#debug: while: node != 0 
symbol_GetParameterOffset_while_205:
	pushl	-4(%ebp)
	popl	%ebx
	cmpl	$0, %ebx
	movl	$1, %eax
	jne	symbol_GetParameterOffset_reltrue_206
	movl	$0, %eax
symbol_GetParameterOffset_reltrue_206:
	testl	%eax, %eax
	jz	symbol_GetParameterOffset_endwhile_205

	#debug: if: node == parameter 
	pushl	-4(%ebp)
	popl	%ebx
	cmpl	12(%ebp), %ebx
	movl	$1, %eax
	je	symbol_GetParameterOffset_reltrue_208
	movl	$0, %eax
symbol_GetParameterOffset_reltrue_208:
	testl	%eax, %eax
	jnz	symbol_GetParameterOffset_ifbl_207
	jmp	symbol_GetParameterOffset_elsebl_207
symbol_GetParameterOffset_ifbl_207:
	#debug: return: return sum ; 
	movl	-8(%ebp), %eax
	jmp	symbol_GetParameterOffset_ret
	jmp	symbol_GetParameterOffset_endif_207

symbol_GetParameterOffset_elsebl_207:

symbol_GetParameterOffset_endif_207:

	#debug: if: node -> type == 6 
	movl	%ebp, %eax
	addl	$-4, %eax
	movl	(%eax), %eax
	addl	$144, %eax
	movl	(%eax), %eax
	pushl	%eax
	popl	%ebx
	cmpl	$6, %ebx
	movl	$1, %eax
	je	symbol_GetParameterOffset_reltrue_210
	movl	$0, %eax
symbol_GetParameterOffset_reltrue_210:
	testl	%eax, %eax
	jnz	symbol_GetParameterOffset_ifbl_209
	jmp	symbol_GetParameterOffset_elsebl_209
symbol_GetParameterOffset_ifbl_209:
	#debug: assignment: sum = sum + symbol_Sizeof_Symbol ( table , node ) ; 
	pushl	-8(%ebp)
	subl	$8, %esp
	movl	8(%ebp), %eax
	movl	%eax, 0(%esp)
	movl	-4(%ebp), %eax
	movl	%eax, 4(%esp)
	call	symbol_Sizeof_Symbol
	addl	$8, %esp
	popl	%ebx
	addl	%eax, %ebx
	pushl	%ebx
	popl	%eax
	movl	%eax, -8(%ebp)
	jmp	symbol_GetParameterOffset_endif_209

symbol_GetParameterOffset_elsebl_209:

symbol_GetParameterOffset_endif_209:

	#debug: assignment: node = Get_Next_In_symbolTableNode_List ( node ) ; 
	subl	$4, %esp
	movl	-4(%ebp), %eax
	movl	%eax, 0(%esp)
	call	Get_Next_In_symbolTableNode_List
	addl	$4, %esp
	movl	%eax, -4(%ebp)
	jmp	symbol_GetParameterOffset_while_205
symbol_GetParameterOffset_endwhile_205:

	#debug: return: return - 1 ; 
	pushl	$0
	popl	%ebx
	subl	$1, %ebx
	pushl	%ebx
	popl	%eax
	jmp	symbol_GetParameterOffset_ret


symbol_GetParameterOffset_ret:
	movl	%ebp, %esp
	popl	%ebp
	ret




	#debug: func-def: ( symbolTable * table , symbolTableNode * variable ) 
.globl symbol_GetLocalVarOffset
.type symbol_GetLocalVarOffset, @function
symbol_GetLocalVarOffset:
	pushl	%ebp
	movl	%esp, %ebp
	subl	$8, %esp


	#debug: assignment: node = Get_Front_Of_symbolTableNode_List ( & table -> list ) ; 
	subl	$4, %esp
	movl	%ebp, %eax
	addl	$8, %eax
	movl	(%eax), %eax
	addl	$8, %eax
	movl	%eax, 0(%esp)
	call	Get_Front_Of_symbolTableNode_List
	addl	$4, %esp
	movl	%eax, -4(%ebp)
	#debug: assignment: sum = 0 ; 
	movl	$0, -8(%ebp)
	#debug: while: node != 0 
symbol_GetLocalVarOffset_while_211:
	pushl	-4(%ebp)
	popl	%ebx
	cmpl	$0, %ebx
	movl	$1, %eax
	jne	symbol_GetLocalVarOffset_reltrue_212
	movl	$0, %eax
symbol_GetLocalVarOffset_reltrue_212:
	testl	%eax, %eax
	jz	symbol_GetLocalVarOffset_endwhile_211

	#debug: if: node == variable 
	pushl	-4(%ebp)
	popl	%ebx
	cmpl	12(%ebp), %ebx
	movl	$1, %eax
	je	symbol_GetLocalVarOffset_reltrue_214
	movl	$0, %eax
symbol_GetLocalVarOffset_reltrue_214:
	testl	%eax, %eax
	jnz	symbol_GetLocalVarOffset_ifbl_213
	jmp	symbol_GetLocalVarOffset_elsebl_213
symbol_GetLocalVarOffset_ifbl_213:
	#debug: return: return sum ; 
	movl	-8(%ebp), %eax
	jmp	symbol_GetLocalVarOffset_ret
	jmp	symbol_GetLocalVarOffset_endif_213

symbol_GetLocalVarOffset_elsebl_213:

symbol_GetLocalVarOffset_endif_213:

	#debug: if: node -> type == 4 
	movl	%ebp, %eax
	addl	$-4, %eax
	movl	(%eax), %eax
	addl	$144, %eax
	movl	(%eax), %eax
	pushl	%eax
	popl	%ebx
	cmpl	$4, %ebx
	movl	$1, %eax
	je	symbol_GetLocalVarOffset_reltrue_216
	movl	$0, %eax
symbol_GetLocalVarOffset_reltrue_216:
	testl	%eax, %eax
	jnz	symbol_GetLocalVarOffset_ifbl_215
	jmp	symbol_GetLocalVarOffset_elsebl_215
symbol_GetLocalVarOffset_ifbl_215:
	#debug: assignment: sum = sum + symbol_Sizeof_Symbol ( table , node ) ; 
	pushl	-8(%ebp)
	subl	$8, %esp
	movl	8(%ebp), %eax
	movl	%eax, 0(%esp)
	movl	-4(%ebp), %eax
	movl	%eax, 4(%esp)
	call	symbol_Sizeof_Symbol
	addl	$8, %esp
	popl	%ebx
	addl	%eax, %ebx
	pushl	%ebx
	popl	%eax
	movl	%eax, -8(%ebp)
	jmp	symbol_GetLocalVarOffset_endif_215

symbol_GetLocalVarOffset_elsebl_215:

symbol_GetLocalVarOffset_endif_215:

	#debug: assignment: node = Get_Next_In_symbolTableNode_List ( node ) ; 
	subl	$4, %esp
	movl	-4(%ebp), %eax
	movl	%eax, 0(%esp)
	call	Get_Next_In_symbolTableNode_List
	addl	$4, %esp
	movl	%eax, -4(%ebp)
	jmp	symbol_GetLocalVarOffset_while_211
symbol_GetLocalVarOffset_endwhile_211:

	#debug: return: return - 1 ; 
	pushl	$0
	popl	%ebx
	subl	$1, %ebx
	pushl	%ebx
	popl	%eax
	jmp	symbol_GetLocalVarOffset_ret


symbol_GetLocalVarOffset_ret:
	movl	%ebp, %esp
	popl	%ebp
	ret




	#debug: func-def: ( symbolTable * table , symbolTableNode * global ) 
.globl symbol_GetGlobalOffset
.type symbol_GetGlobalOffset, @function
symbol_GetGlobalOffset:
	pushl	%ebp
	movl	%esp, %ebp
	subl	$8, %esp


	#debug: assignment: node = Get_Front_Of_symbolTableNode_List ( & table -> list ) ; 
	subl	$4, %esp
	movl	%ebp, %eax
	addl	$8, %eax
	movl	(%eax), %eax
	addl	$8, %eax
	movl	%eax, 0(%esp)
	call	Get_Front_Of_symbolTableNode_List
	addl	$4, %esp
	movl	%eax, -4(%ebp)
	#debug: assignment: sum = 0 ; 
	movl	$0, -8(%ebp)
	#debug: while: node != 0 
symbol_GetGlobalOffset_while_217:
	pushl	-4(%ebp)
	popl	%ebx
	cmpl	$0, %ebx
	movl	$1, %eax
	jne	symbol_GetGlobalOffset_reltrue_218
	movl	$0, %eax
symbol_GetGlobalOffset_reltrue_218:
	testl	%eax, %eax
	jz	symbol_GetGlobalOffset_endwhile_217

	#debug: if: node == global 
	pushl	-4(%ebp)
	popl	%ebx
	cmpl	12(%ebp), %ebx
	movl	$1, %eax
	je	symbol_GetGlobalOffset_reltrue_220
	movl	$0, %eax
symbol_GetGlobalOffset_reltrue_220:
	testl	%eax, %eax
	jnz	symbol_GetGlobalOffset_ifbl_219
	jmp	symbol_GetGlobalOffset_elsebl_219
symbol_GetGlobalOffset_ifbl_219:
	#debug: return: return sum ; 
	movl	-8(%ebp), %eax
	jmp	symbol_GetGlobalOffset_ret
	jmp	symbol_GetGlobalOffset_endif_219

symbol_GetGlobalOffset_elsebl_219:

symbol_GetGlobalOffset_endif_219:

	#debug: if: node -> type == 5 || node -> type == 7 
	movl	%ebp, %eax
	addl	$-4, %eax
	movl	(%eax), %eax
	addl	$144, %eax
	movl	(%eax), %eax
	pushl	%eax
	popl	%ebx
	cmpl	$5, %ebx
	movl	$1, %eax
	je	symbol_GetGlobalOffset_reltrue_223
	movl	$0, %eax
symbol_GetGlobalOffset_reltrue_223:
	testl	%eax, %eax
	jnz	symbol_GetGlobalOffset_logexprtrue_222
	movl	%ebp, %eax
	addl	$-4, %eax
	movl	(%eax), %eax
	addl	$144, %eax
	movl	(%eax), %eax
	pushl	%eax
	popl	%ebx
	cmpl	$7, %ebx
	movl	$1, %eax
	je	symbol_GetGlobalOffset_reltrue_224
	movl	$0, %eax
symbol_GetGlobalOffset_reltrue_224:
	testl	%eax, %eax
	jnz	symbol_GetGlobalOffset_logexprtrue_222
	movl	$0, %eax
	jmp	symbol_GetGlobalOffset_logexprfalse_222
symbol_GetGlobalOffset_logexprtrue_222:
	movl	$1, %eax
symbol_GetGlobalOffset_logexprfalse_222:
	testl	%eax, %eax
	jnz	symbol_GetGlobalOffset_ifbl_221
	jmp	symbol_GetGlobalOffset_elsebl_221
symbol_GetGlobalOffset_ifbl_221:
	#debug: assignment: sum = sum + symbol_Sizeof_Symbol ( table , node ) ; 
	pushl	-8(%ebp)
	subl	$8, %esp
	movl	8(%ebp), %eax
	movl	%eax, 0(%esp)
	movl	-4(%ebp), %eax
	movl	%eax, 4(%esp)
	call	symbol_Sizeof_Symbol
	addl	$8, %esp
	popl	%ebx
	addl	%eax, %ebx
	pushl	%ebx
	popl	%eax
	movl	%eax, -8(%ebp)
	jmp	symbol_GetGlobalOffset_endif_221

symbol_GetGlobalOffset_elsebl_221:

symbol_GetGlobalOffset_endif_221:

	#debug: assignment: node = Get_Next_In_symbolTableNode_List ( node ) ; 
	subl	$4, %esp
	movl	-4(%ebp), %eax
	movl	%eax, 0(%esp)
	call	Get_Next_In_symbolTableNode_List
	addl	$4, %esp
	movl	%eax, -4(%ebp)
	jmp	symbol_GetGlobalOffset_while_217
symbol_GetGlobalOffset_endwhile_217:

	#debug: return: return - 1 ; 
	pushl	$0
	popl	%ebx
	subl	$1, %ebx
	pushl	%ebx
	popl	%eax
	jmp	symbol_GetGlobalOffset_ret


symbol_GetGlobalOffset_ret:
	movl	%ebp, %esp
	popl	%ebp
	ret




	#debug: func-def: ( symbolTable * table , symbolTableNode * nonglobal ) 
.globl symbol_GetNonGlobalOffset
.type symbol_GetNonGlobalOffset, @function
symbol_GetNonGlobalOffset:
	pushl	%ebp
	movl	%esp, %ebp
	subl	$0, %esp


	#debug: if: nonglobal -> type == 6 
	movl	%ebp, %eax
	addl	$12, %eax
	movl	(%eax), %eax
	addl	$144, %eax
	movl	(%eax), %eax
	pushl	%eax
	popl	%ebx
	cmpl	$6, %ebx
	movl	$1, %eax
	je	symbol_GetNonGlobalOffset_reltrue_226
	movl	$0, %eax
symbol_GetNonGlobalOffset_reltrue_226:
	testl	%eax, %eax
	jnz	symbol_GetNonGlobalOffset_ifbl_225
	jmp	symbol_GetNonGlobalOffset_elsebl_225
symbol_GetNonGlobalOffset_ifbl_225:
	#debug: return: return symbol_GetParameterOffset ( table , nonglobal ) + 8 ; 
	subl	$8, %esp
	movl	8(%ebp), %eax
	movl	%eax, 0(%esp)
	movl	12(%ebp), %eax
	movl	%eax, 4(%esp)
	call	symbol_GetParameterOffset
	addl	$8, %esp
	pushl	%eax
	popl	%ebx
	addl	$8, %ebx
	pushl	%ebx
	popl	%eax
	jmp	symbol_GetNonGlobalOffset_ret
	jmp	symbol_GetNonGlobalOffset_endif_225

symbol_GetNonGlobalOffset_elsebl_225:

symbol_GetNonGlobalOffset_endif_225:

	#debug: if: nonglobal -> type == 4 
	movl	%ebp, %eax
	addl	$12, %eax
	movl	(%eax), %eax
	addl	$144, %eax
	movl	(%eax), %eax
	pushl	%eax
	popl	%ebx
	cmpl	$4, %ebx
	movl	$1, %eax
	je	symbol_GetNonGlobalOffset_reltrue_228
	movl	$0, %eax
symbol_GetNonGlobalOffset_reltrue_228:
	testl	%eax, %eax
	jnz	symbol_GetNonGlobalOffset_ifbl_227
	jmp	symbol_GetNonGlobalOffset_elsebl_227
symbol_GetNonGlobalOffset_ifbl_227:
	#debug: return: return - symbol_GetLocalVarOffset ( table , nonglobal ) - symbol_Sizeof_Vardecl ( table , nonglobal -> structure ) ; 
	pushl	$0
	subl	$8, %esp
	movl	8(%ebp), %eax
	movl	%eax, 0(%esp)
	movl	12(%ebp), %eax
	movl	%eax, 4(%esp)
	call	symbol_GetLocalVarOffset
	addl	$8, %esp
	popl	%ebx
	subl	%eax, %ebx
	pushl	%ebx
	subl	$8, %esp
	movl	8(%ebp), %eax
	movl	%eax, 0(%esp)
	movl	%ebp, %eax
	addl	$12, %eax
	movl	(%eax), %eax
	addl	$148, %eax
	movl	(%eax), %eax
	movl	%eax, 4(%esp)
	call	symbol_Sizeof_Vardecl
	addl	$8, %esp
	popl	%ebx
	subl	%eax, %ebx
	pushl	%ebx
	popl	%eax
	jmp	symbol_GetNonGlobalOffset_ret
	jmp	symbol_GetNonGlobalOffset_endif_227

symbol_GetNonGlobalOffset_elsebl_227:

symbol_GetNonGlobalOffset_endif_227:

	#debug: func-call: symbol_reportError ( table , "Internal error: Invalid type in GetNonGlobalOffset!\n" , nonglobal -> name ) 
	subl	$152, %esp
	movl	8(%ebp), %eax
	movl	%eax, 0(%esp)
	movl	$symtab+837, 4(%esp)
	movl	%ebp, %eax
	addl	$12, %eax
	movl	(%eax), %eax
	addl	$0, %eax
	movl	%esp, %ebx
	addl	$8, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	call	symbol_reportError
	addl	$152, %esp
	#debug: return: return 0 ; 
	movl	$0, %eax
	jmp	symbol_GetNonGlobalOffset_ret


symbol_GetNonGlobalOffset_ret:
	movl	%ebp, %esp
	popl	%ebp
	ret




	#debug: func-def: ( symbolTable * table , symbolTableNode * structNode , token entry ) 
.globl symbol_GetOffsetInStruct
.type symbol_GetOffsetInStruct, @function
symbol_GetOffsetInStruct:
	pushl	%ebp
	movl	%esp, %ebp
	subl	$24, %esp


	#debug: assignment: structsize = 0 ; 
	movl	$0, -4(%ebp)
	#debug: assignment: structentries = symbol_CountStructEntries ( table , structNode -> structure ) ; 
	subl	$8, %esp
	movl	8(%ebp), %eax
	movl	%eax, 0(%esp)
	movl	%ebp, %eax
	addl	$12, %eax
	movl	(%eax), %eax
	addl	$148, %eax
	movl	(%eax), %eax
	movl	%eax, 4(%esp)
	call	symbol_CountStructEntries
	addl	$8, %esp
	movl	%eax, -8(%ebp)
	#debug: assignment: idx = 0 ; 
	movl	$0, -16(%ebp)
	#debug: while: idx < structentries 
symbol_GetOffsetInStruct_while_229:
	pushl	-16(%ebp)
	popl	%ebx
	cmpl	-8(%ebp), %ebx
	movl	$1, %eax
	jl	symbol_GetOffsetInStruct_reltrue_230
	movl	$0, %eax
symbol_GetOffsetInStruct_reltrue_230:
	testl	%eax, %eax
	jz	symbol_GetOffsetInStruct_endwhile_229

	#debug: assignment: vardecl = symbol_GetStructEntry ( table , structNode -> structure , idx ) ; 
	subl	$12, %esp
	movl	8(%ebp), %eax
	movl	%eax, 0(%esp)
	movl	%ebp, %eax
	addl	$12, %eax
	movl	(%eax), %eax
	addl	$148, %eax
	movl	(%eax), %eax
	movl	%eax, 4(%esp)
	movl	-16(%ebp), %eax
	movl	%eax, 8(%esp)
	call	symbol_GetStructEntry
	addl	$12, %esp
	movl	%eax, -20(%ebp)
	#debug: assignment: name = syntax_GetChild ( vardecl , 0 ) ; 
	subl	$8, %esp
	movl	-20(%ebp), %eax
	movl	%eax, 0(%esp)
	movl	$0, 4(%esp)
	call	syntax_GetChild
	addl	$8, %esp
	movl	%eax, -24(%ebp)
	#debug: assignment: name = syntax_GetChild ( name , 1 ) ; 
	subl	$8, %esp
	movl	-24(%ebp), %eax
	movl	%eax, 0(%esp)
	movl	$1, 4(%esp)
	call	syntax_GetChild
	addl	$8, %esp
	movl	%eax, -24(%ebp)
	#debug: if: strcmp ( name -> tok . content , entry . content ) == 0 
	subl	$8, %esp
	movl	%ebp, %eax
	addl	$-24, %eax
	movl	(%eax), %eax
	addl	$8, %eax
	addl	$16, %eax
	movl	%eax, 0(%esp)
	movl	%ebp, %eax
	addl	$16, %eax
	addl	$16, %eax
	movl	%eax, 4(%esp)
	call	strcmp
	addl	$8, %esp
	pushl	%eax
	popl	%ebx
	cmpl	$0, %ebx
	movl	$1, %eax
	je	symbol_GetOffsetInStruct_reltrue_232
	movl	$0, %eax
symbol_GetOffsetInStruct_reltrue_232:
	testl	%eax, %eax
	jnz	symbol_GetOffsetInStruct_ifbl_231
	jmp	symbol_GetOffsetInStruct_elsebl_231
symbol_GetOffsetInStruct_ifbl_231:
	#debug: return: return structsize ; 
	movl	-4(%ebp), %eax
	jmp	symbol_GetOffsetInStruct_ret
	jmp	symbol_GetOffsetInStruct_endif_231

symbol_GetOffsetInStruct_elsebl_231:

symbol_GetOffsetInStruct_endif_231:

	#debug: assignment: childsize = symbol_Sizeof_Vardecl ( table , vardecl ) ; 
	subl	$8, %esp
	movl	8(%ebp), %eax
	movl	%eax, 0(%esp)
	movl	-20(%ebp), %eax
	movl	%eax, 4(%esp)
	call	symbol_Sizeof_Vardecl
	addl	$8, %esp
	movl	%eax, -12(%ebp)
	#debug: if: childsize <= 0 
	pushl	-12(%ebp)
	popl	%ebx
	cmpl	$0, %ebx
	movl	$1, %eax
	jle	symbol_GetOffsetInStruct_reltrue_234
	movl	$0, %eax
symbol_GetOffsetInStruct_reltrue_234:
	testl	%eax, %eax
	jnz	symbol_GetOffsetInStruct_ifbl_233
	jmp	symbol_GetOffsetInStruct_elsebl_233
symbol_GetOffsetInStruct_ifbl_233:
	#debug: return: return - 1 ; 
	pushl	$0
	popl	%ebx
	subl	$1, %ebx
	pushl	%ebx
	popl	%eax
	jmp	symbol_GetOffsetInStruct_ret
	jmp	symbol_GetOffsetInStruct_endif_233

symbol_GetOffsetInStruct_elsebl_233:

symbol_GetOffsetInStruct_endif_233:

	#debug: assignment: structsize = structsize + childsize ; 
	pushl	-4(%ebp)
	popl	%ebx
	addl	-12(%ebp), %ebx
	pushl	%ebx
	popl	%eax
	movl	%eax, -4(%ebp)
	#debug: assignment: idx = idx + 1 ; 
	pushl	-16(%ebp)
	popl	%ebx
	addl	$1, %ebx
	pushl	%ebx
	popl	%eax
	movl	%eax, -16(%ebp)
	jmp	symbol_GetOffsetInStruct_while_229
symbol_GetOffsetInStruct_endwhile_229:

	#debug: return: return - 1 ; 
	pushl	$0
	popl	%ebx
	subl	$1, %ebx
	pushl	%ebx
	popl	%eax
	jmp	symbol_GetOffsetInStruct_ret


symbol_GetOffsetInStruct_ret:
	movl	%ebp, %esp
	popl	%ebp
	ret




	#debug: func-def: ( symbolTable * table , symbolTableNode * structNode , token entry ) 
.globl symbol_GetMemberDeclInStruct
.type symbol_GetMemberDeclInStruct, @function
symbol_GetMemberDeclInStruct:
	pushl	%ebp
	movl	%esp, %ebp
	subl	$16, %esp


	#debug: assignment: structentries = symbol_CountStructEntries ( table , structNode -> structure ) ; 
	subl	$8, %esp
	movl	8(%ebp), %eax
	movl	%eax, 0(%esp)
	movl	%ebp, %eax
	addl	$12, %eax
	movl	(%eax), %eax
	addl	$148, %eax
	movl	(%eax), %eax
	movl	%eax, 4(%esp)
	call	symbol_CountStructEntries
	addl	$8, %esp
	movl	%eax, -4(%ebp)
	#debug: assignment: idx = 0 ; 
	movl	$0, -8(%ebp)
	#debug: while: idx < structentries 
symbol_GetMemberDeclInStruct_while_235:
	pushl	-8(%ebp)
	popl	%ebx
	cmpl	-4(%ebp), %ebx
	movl	$1, %eax
	jl	symbol_GetMemberDeclInStruct_reltrue_236
	movl	$0, %eax
symbol_GetMemberDeclInStruct_reltrue_236:
	testl	%eax, %eax
	jz	symbol_GetMemberDeclInStruct_endwhile_235

	#debug: assignment: vardecl = symbol_GetStructEntry ( table , structNode -> structure , idx ) ; 
	subl	$12, %esp
	movl	8(%ebp), %eax
	movl	%eax, 0(%esp)
	movl	%ebp, %eax
	addl	$12, %eax
	movl	(%eax), %eax
	addl	$148, %eax
	movl	(%eax), %eax
	movl	%eax, 4(%esp)
	movl	-8(%ebp), %eax
	movl	%eax, 8(%esp)
	call	symbol_GetStructEntry
	addl	$12, %esp
	movl	%eax, -12(%ebp)
	#debug: assignment: name = syntax_GetChild ( vardecl , 0 ) ; 
	subl	$8, %esp
	movl	-12(%ebp), %eax
	movl	%eax, 0(%esp)
	movl	$0, 4(%esp)
	call	syntax_GetChild
	addl	$8, %esp
	movl	%eax, -16(%ebp)
	#debug: assignment: name = syntax_GetChild ( name , 1 ) ; 
	subl	$8, %esp
	movl	-16(%ebp), %eax
	movl	%eax, 0(%esp)
	movl	$1, 4(%esp)
	call	syntax_GetChild
	addl	$8, %esp
	movl	%eax, -16(%ebp)
	#debug: if: strcmp ( name -> tok . content , entry . content ) == 0 
	subl	$8, %esp
	movl	%ebp, %eax
	addl	$-16, %eax
	movl	(%eax), %eax
	addl	$8, %eax
	addl	$16, %eax
	movl	%eax, 0(%esp)
	movl	%ebp, %eax
	addl	$16, %eax
	addl	$16, %eax
	movl	%eax, 4(%esp)
	call	strcmp
	addl	$8, %esp
	pushl	%eax
	popl	%ebx
	cmpl	$0, %ebx
	movl	$1, %eax
	je	symbol_GetMemberDeclInStruct_reltrue_238
	movl	$0, %eax
symbol_GetMemberDeclInStruct_reltrue_238:
	testl	%eax, %eax
	jnz	symbol_GetMemberDeclInStruct_ifbl_237
	jmp	symbol_GetMemberDeclInStruct_elsebl_237
symbol_GetMemberDeclInStruct_ifbl_237:
	#debug: return: return vardecl ; 
	movl	-12(%ebp), %eax
	jmp	symbol_GetMemberDeclInStruct_ret
	jmp	symbol_GetMemberDeclInStruct_endif_237

symbol_GetMemberDeclInStruct_elsebl_237:

symbol_GetMemberDeclInStruct_endif_237:

	#debug: assignment: idx = idx + 1 ; 
	pushl	-8(%ebp)
	popl	%ebx
	addl	$1, %ebx
	pushl	%ebx
	popl	%eax
	movl	%eax, -8(%ebp)
	jmp	symbol_GetMemberDeclInStruct_while_235
symbol_GetMemberDeclInStruct_endwhile_235:

	#debug: return: return 0 ; 
	movl	$0, %eax
	jmp	symbol_GetMemberDeclInStruct_ret


symbol_GetMemberDeclInStruct_ret:
	movl	%ebp, %esp
	popl	%ebp
	ret




	#debug: func-def: ( symbolTable * table , syntaxTreeNode * structure ) 
.globl symbol_CountStructEntries
.type symbol_CountStructEntries, @function
symbol_CountStructEntries:
	pushl	%ebp
	movl	%esp, %ebp
	subl	$4, %esp


	#debug: assignment: structtree = syntax_GetChild ( structure , 0 ) ; 
	subl	$8, %esp
	movl	12(%ebp), %eax
	movl	%eax, 0(%esp)
	movl	$0, 4(%esp)
	call	syntax_GetChild
	addl	$8, %esp
	movl	%eax, -4(%ebp)
	#debug: if: structtree -> tok . type != 34 
	movl	%ebp, %eax
	addl	$-4, %eax
	movl	(%eax), %eax
	addl	$8, %eax
	addl	$0, %eax
	movl	(%eax), %eax
	pushl	%eax
	popl	%ebx
	cmpl	$34, %ebx
	movl	$1, %eax
	jne	symbol_CountStructEntries_reltrue_240
	movl	$0, %eax
symbol_CountStructEntries_reltrue_240:
	testl	%eax, %eax
	jnz	symbol_CountStructEntries_ifbl_239
	jmp	symbol_CountStructEntries_elsebl_239
symbol_CountStructEntries_ifbl_239:
	#debug: func-call: symbol_reportError ( table , "Internal Error: count struct entries!\n" , structure -> tok ) 
	subl	$152, %esp
	movl	8(%ebp), %eax
	movl	%eax, 0(%esp)
	movl	$symtab+890, 4(%esp)
	movl	%ebp, %eax
	addl	$12, %eax
	movl	(%eax), %eax
	addl	$8, %eax
	movl	%esp, %ebx
	addl	$8, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	call	symbol_reportError
	addl	$152, %esp
	#debug: return: return - 1 ; 
	pushl	$0
	popl	%ebx
	subl	$1, %ebx
	pushl	%ebx
	popl	%eax
	jmp	symbol_CountStructEntries_ret
	jmp	symbol_CountStructEntries_endif_239

symbol_CountStructEntries_elsebl_239:

symbol_CountStructEntries_endif_239:

	#debug: return: return syntax_CountChilds ( structure ) - 5 ; 
	subl	$4, %esp
	movl	12(%ebp), %eax
	movl	%eax, 0(%esp)
	call	syntax_CountChilds
	addl	$4, %esp
	pushl	%eax
	popl	%ebx
	subl	$5, %ebx
	pushl	%ebx
	popl	%eax
	jmp	symbol_CountStructEntries_ret


symbol_CountStructEntries_ret:
	movl	%ebp, %esp
	popl	%ebp
	ret




	#debug: func-def: ( symbolTable * table , syntaxTreeNode * structure , int idx ) 
.globl symbol_GetStructEntry
.type symbol_GetStructEntry, @function
symbol_GetStructEntry:
	pushl	%ebp
	movl	%esp, %ebp
	subl	$4, %esp


	#debug: assignment: subtree = syntax_GetChild ( structure , 0 ) ; 
	subl	$8, %esp
	movl	12(%ebp), %eax
	movl	%eax, 0(%esp)
	movl	$0, 4(%esp)
	call	syntax_GetChild
	addl	$8, %esp
	movl	%eax, -4(%ebp)
	#debug: if: subtree -> tok . type != 34 
	movl	%ebp, %eax
	addl	$-4, %eax
	movl	(%eax), %eax
	addl	$8, %eax
	addl	$0, %eax
	movl	(%eax), %eax
	pushl	%eax
	popl	%ebx
	cmpl	$34, %ebx
	movl	$1, %eax
	jne	symbol_GetStructEntry_reltrue_242
	movl	$0, %eax
symbol_GetStructEntry_reltrue_242:
	testl	%eax, %eax
	jnz	symbol_GetStructEntry_ifbl_241
	jmp	symbol_GetStructEntry_elsebl_241
symbol_GetStructEntry_ifbl_241:
	#debug: func-call: symbol_reportError ( table , "Internal Error: get struct entry!\n" , structure -> tok ) 
	subl	$152, %esp
	movl	8(%ebp), %eax
	movl	%eax, 0(%esp)
	movl	$symtab+929, 4(%esp)
	movl	%ebp, %eax
	addl	$12, %eax
	movl	(%eax), %eax
	addl	$8, %eax
	movl	%esp, %ebx
	addl	$8, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	call	symbol_reportError
	addl	$152, %esp
	#debug: return: return 0 ; 
	movl	$0, %eax
	jmp	symbol_GetStructEntry_ret
	jmp	symbol_GetStructEntry_endif_241

symbol_GetStructEntry_elsebl_241:

symbol_GetStructEntry_endif_241:

	#debug: return: return syntax_GetChild ( structure , idx + 3 ) ; 
	subl	$8, %esp
	movl	12(%ebp), %eax
	movl	%eax, 0(%esp)
	pushl	16(%ebp)
	popl	%ebx
	addl	$3, %ebx
	pushl	%ebx
	popl	%eax
	movl	%eax, 4(%esp)
	call	syntax_GetChild
	addl	$8, %esp
	jmp	symbol_GetStructEntry_ret


symbol_GetStructEntry_ret:
	movl	%ebp, %esp
	popl	%ebp
	ret




	#debug: func-def: ( symbolTable * table ) 
.globl symbol_CountFunctions
.type symbol_CountFunctions, @function
symbol_CountFunctions:
	pushl	%ebp
	movl	%esp, %ebp
	subl	$12, %esp


	#debug: assignment: node = Get_Front_Of_symbolTableNode_List ( & table -> list ) ; 
	subl	$4, %esp
	movl	%ebp, %eax
	addl	$8, %eax
	movl	(%eax), %eax
	addl	$8, %eax
	movl	%eax, 0(%esp)
	call	Get_Front_Of_symbolTableNode_List
	addl	$4, %esp
	movl	%eax, -4(%ebp)
	#debug: assignment: count = 0 ; 
	movl	$0, -12(%ebp)
	#debug: while: node != 0 
symbol_CountFunctions_while_243:
	pushl	-4(%ebp)
	popl	%ebx
	cmpl	$0, %ebx
	movl	$1, %eax
	jne	symbol_CountFunctions_reltrue_244
	movl	$0, %eax
symbol_CountFunctions_reltrue_244:
	testl	%eax, %eax
	jz	symbol_CountFunctions_endwhile_243

	#debug: if: node -> type != 2 && node -> type != 1 
	movl	%ebp, %eax
	addl	$-4, %eax
	movl	(%eax), %eax
	addl	$144, %eax
	movl	(%eax), %eax
	pushl	%eax
	popl	%ebx
	cmpl	$2, %ebx
	movl	$1, %eax
	jne	symbol_CountFunctions_reltrue_247
	movl	$0, %eax
symbol_CountFunctions_reltrue_247:
	testl	%eax, %eax
	jz	symbol_CountFunctions_logtermfalse_246
	movl	%ebp, %eax
	addl	$-4, %eax
	movl	(%eax), %eax
	addl	$144, %eax
	movl	(%eax), %eax
	pushl	%eax
	popl	%ebx
	cmpl	$1, %ebx
	movl	$1, %eax
	jne	symbol_CountFunctions_reltrue_248
	movl	$0, %eax
symbol_CountFunctions_reltrue_248:
	testl	%eax, %eax
	jz	symbol_CountFunctions_logtermfalse_246
	movl	$1, %eax
	jmp	symbol_CountFunctions_logtermtrue_246
symbol_CountFunctions_logtermfalse_246:
	movl	$0, %eax
symbol_CountFunctions_logtermtrue_246:
	testl	%eax, %eax
	jnz	symbol_CountFunctions_ifbl_245
	jmp	symbol_CountFunctions_elsebl_245
symbol_CountFunctions_ifbl_245:
	#debug: assignment: node = Get_Next_In_symbolTableNode_List ( node ) ; 
	subl	$4, %esp
	movl	-4(%ebp), %eax
	movl	%eax, 0(%esp)
	call	Get_Next_In_symbolTableNode_List
	addl	$4, %esp
	movl	%eax, -4(%ebp)
	jmp	symbol_CountFunctions_while_243
	jmp	symbol_CountFunctions_endif_245

symbol_CountFunctions_elsebl_245:

symbol_CountFunctions_endif_245:

	#debug: if: node -> type == 1 
	movl	%ebp, %eax
	addl	$-4, %eax
	movl	(%eax), %eax
	addl	$144, %eax
	movl	(%eax), %eax
	pushl	%eax
	popl	%ebx
	cmpl	$1, %ebx
	movl	$1, %eax
	je	symbol_CountFunctions_reltrue_250
	movl	$0, %eax
symbol_CountFunctions_reltrue_250:
	testl	%eax, %eax
	jnz	symbol_CountFunctions_ifbl_249
	jmp	symbol_CountFunctions_elsebl_249
symbol_CountFunctions_ifbl_249:
	#debug: assignment: tmp = symbol_FindFunction ( table , node -> name ) ; 
	subl	$148, %esp
	movl	8(%ebp), %eax
	movl	%eax, 0(%esp)
	movl	%ebp, %eax
	addl	$-4, %eax
	movl	(%eax), %eax
	addl	$0, %eax
	movl	%esp, %ebx
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	call	symbol_FindFunction
	addl	$148, %esp
	movl	%eax, -8(%ebp)
	#debug: if: tmp -> type == 2 
	movl	%ebp, %eax
	addl	$-8, %eax
	movl	(%eax), %eax
	addl	$144, %eax
	movl	(%eax), %eax
	pushl	%eax
	popl	%ebx
	cmpl	$2, %ebx
	movl	$1, %eax
	je	symbol_CountFunctions_reltrue_252
	movl	$0, %eax
symbol_CountFunctions_reltrue_252:
	testl	%eax, %eax
	jnz	symbol_CountFunctions_ifbl_251
	jmp	symbol_CountFunctions_elsebl_251
symbol_CountFunctions_ifbl_251:
	#debug: assignment: node = Get_Next_In_symbolTableNode_List ( node ) ; 
	subl	$4, %esp
	movl	-4(%ebp), %eax
	movl	%eax, 0(%esp)
	call	Get_Next_In_symbolTableNode_List
	addl	$4, %esp
	movl	%eax, -4(%ebp)
	jmp	symbol_CountFunctions_while_243
	jmp	symbol_CountFunctions_endif_251

symbol_CountFunctions_elsebl_251:

symbol_CountFunctions_endif_251:

	jmp	symbol_CountFunctions_endif_249

symbol_CountFunctions_elsebl_249:

symbol_CountFunctions_endif_249:

	#debug: assignment: count = count + 1 ; 
	pushl	-12(%ebp)
	popl	%ebx
	addl	$1, %ebx
	pushl	%ebx
	popl	%eax
	movl	%eax, -12(%ebp)
	#debug: assignment: node = Get_Next_In_symbolTableNode_List ( node ) ; 
	subl	$4, %esp
	movl	-4(%ebp), %eax
	movl	%eax, 0(%esp)
	call	Get_Next_In_symbolTableNode_List
	addl	$4, %esp
	movl	%eax, -4(%ebp)
	jmp	symbol_CountFunctions_while_243
symbol_CountFunctions_endwhile_243:

	#debug: return: return count ; 
	movl	-12(%ebp), %eax
	jmp	symbol_CountFunctions_ret


symbol_CountFunctions_ret:
	movl	%ebp, %esp
	popl	%ebp
	ret




	#debug: func-def: ( symbolTable * table , int idx ) 
.globl symbol_GetFunction
.type symbol_GetFunction, @function
symbol_GetFunction:
	pushl	%ebp
	movl	%esp, %ebp
	subl	$12, %esp


	#debug: assignment: node = Get_Front_Of_symbolTableNode_List ( & table -> list ) ; 
	subl	$4, %esp
	movl	%ebp, %eax
	addl	$8, %eax
	movl	(%eax), %eax
	addl	$8, %eax
	movl	%eax, 0(%esp)
	call	Get_Front_Of_symbolTableNode_List
	addl	$4, %esp
	movl	%eax, -4(%ebp)
	#debug: assignment: count = 0 ; 
	movl	$0, -12(%ebp)
	#debug: while: node != 0 
symbol_GetFunction_while_253:
	pushl	-4(%ebp)
	popl	%ebx
	cmpl	$0, %ebx
	movl	$1, %eax
	jne	symbol_GetFunction_reltrue_254
	movl	$0, %eax
symbol_GetFunction_reltrue_254:
	testl	%eax, %eax
	jz	symbol_GetFunction_endwhile_253

	#debug: if: node -> type != 2 && node -> type != 1 
	movl	%ebp, %eax
	addl	$-4, %eax
	movl	(%eax), %eax
	addl	$144, %eax
	movl	(%eax), %eax
	pushl	%eax
	popl	%ebx
	cmpl	$2, %ebx
	movl	$1, %eax
	jne	symbol_GetFunction_reltrue_257
	movl	$0, %eax
symbol_GetFunction_reltrue_257:
	testl	%eax, %eax
	jz	symbol_GetFunction_logtermfalse_256
	movl	%ebp, %eax
	addl	$-4, %eax
	movl	(%eax), %eax
	addl	$144, %eax
	movl	(%eax), %eax
	pushl	%eax
	popl	%ebx
	cmpl	$1, %ebx
	movl	$1, %eax
	jne	symbol_GetFunction_reltrue_258
	movl	$0, %eax
symbol_GetFunction_reltrue_258:
	testl	%eax, %eax
	jz	symbol_GetFunction_logtermfalse_256
	movl	$1, %eax
	jmp	symbol_GetFunction_logtermtrue_256
symbol_GetFunction_logtermfalse_256:
	movl	$0, %eax
symbol_GetFunction_logtermtrue_256:
	testl	%eax, %eax
	jnz	symbol_GetFunction_ifbl_255
	jmp	symbol_GetFunction_elsebl_255
symbol_GetFunction_ifbl_255:
	#debug: assignment: node = Get_Next_In_symbolTableNode_List ( node ) ; 
	subl	$4, %esp
	movl	-4(%ebp), %eax
	movl	%eax, 0(%esp)
	call	Get_Next_In_symbolTableNode_List
	addl	$4, %esp
	movl	%eax, -4(%ebp)
	jmp	symbol_GetFunction_while_253
	jmp	symbol_GetFunction_endif_255

symbol_GetFunction_elsebl_255:

symbol_GetFunction_endif_255:

	#debug: if: node -> type == 1 
	movl	%ebp, %eax
	addl	$-4, %eax
	movl	(%eax), %eax
	addl	$144, %eax
	movl	(%eax), %eax
	pushl	%eax
	popl	%ebx
	cmpl	$1, %ebx
	movl	$1, %eax
	je	symbol_GetFunction_reltrue_260
	movl	$0, %eax
symbol_GetFunction_reltrue_260:
	testl	%eax, %eax
	jnz	symbol_GetFunction_ifbl_259
	jmp	symbol_GetFunction_elsebl_259
symbol_GetFunction_ifbl_259:
	#debug: assignment: tmp = symbol_FindFunction ( table , node -> name ) ; 
	subl	$148, %esp
	movl	8(%ebp), %eax
	movl	%eax, 0(%esp)
	movl	%ebp, %eax
	addl	$-4, %eax
	movl	(%eax), %eax
	addl	$0, %eax
	movl	%esp, %ebx
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	call	symbol_FindFunction
	addl	$148, %esp
	movl	%eax, -8(%ebp)
	#debug: if: tmp -> type == 2 
	movl	%ebp, %eax
	addl	$-8, %eax
	movl	(%eax), %eax
	addl	$144, %eax
	movl	(%eax), %eax
	pushl	%eax
	popl	%ebx
	cmpl	$2, %ebx
	movl	$1, %eax
	je	symbol_GetFunction_reltrue_262
	movl	$0, %eax
symbol_GetFunction_reltrue_262:
	testl	%eax, %eax
	jnz	symbol_GetFunction_ifbl_261
	jmp	symbol_GetFunction_elsebl_261
symbol_GetFunction_ifbl_261:
	#debug: assignment: node = Get_Next_In_symbolTableNode_List ( node ) ; 
	subl	$4, %esp
	movl	-4(%ebp), %eax
	movl	%eax, 0(%esp)
	call	Get_Next_In_symbolTableNode_List
	addl	$4, %esp
	movl	%eax, -4(%ebp)
	jmp	symbol_GetFunction_while_253
	jmp	symbol_GetFunction_endif_261

symbol_GetFunction_elsebl_261:

symbol_GetFunction_endif_261:

	jmp	symbol_GetFunction_endif_259

symbol_GetFunction_elsebl_259:

symbol_GetFunction_endif_259:

	#debug: if: idx == count 
	pushl	12(%ebp)
	popl	%ebx
	cmpl	-12(%ebp), %ebx
	movl	$1, %eax
	je	symbol_GetFunction_reltrue_264
	movl	$0, %eax
symbol_GetFunction_reltrue_264:
	testl	%eax, %eax
	jnz	symbol_GetFunction_ifbl_263
	jmp	symbol_GetFunction_elsebl_263
symbol_GetFunction_ifbl_263:
	#debug: return: return node ; 
	movl	-4(%ebp), %eax
	jmp	symbol_GetFunction_ret
	jmp	symbol_GetFunction_endif_263

symbol_GetFunction_elsebl_263:

symbol_GetFunction_endif_263:

	#debug: assignment: count = count + 1 ; 
	pushl	-12(%ebp)
	popl	%ebx
	addl	$1, %ebx
	pushl	%ebx
	popl	%eax
	movl	%eax, -12(%ebp)
	#debug: assignment: node = Get_Next_In_symbolTableNode_List ( node ) ; 
	subl	$4, %esp
	movl	-4(%ebp), %eax
	movl	%eax, 0(%esp)
	call	Get_Next_In_symbolTableNode_List
	addl	$4, %esp
	movl	%eax, -4(%ebp)
	jmp	symbol_GetFunction_while_253
symbol_GetFunction_endwhile_253:

	#debug: return: return 0 ; 
	movl	$0, %eax
	jmp	symbol_GetFunction_ret


symbol_GetFunction_ret:
	movl	%ebp, %esp
	popl	%ebp
	ret




# The symbol table 

.section .data
symtab:
	.string	"SYMTAB_ERROR: %d, "
	.string	"%d, "
	.string	"%s:\n"
	.string	"[ERR filename] (%p)\n"
	.string	"\tToken is '%s' ::   "
	.string	"%s\n"
	.string	"Internal error: Can't get integer value of non-number token."
	.string	"  Type: %d"
	.string	",   Size: %3d"
	.string	",   Name: %10s,   "
	.string	"Offset: %d\n"
	.string	""
	.string	"  global-, param-, local-blocksize: %d"
	.string	", %d"
	.string	", %d\n"
	.string	"Redefinition of global variable not allowed."
	.string	"Redefinition of local variable not allowed."
	.string	"Two parameters with equal names."
	.string	"Redefinition of struct not allowed."
	.string	"Members name is not unique.\n"
	.string	"Function already known with different signature."
	.string	"Function-argument has invalid size."
	.string	"A struct as return-type is not supported!\n"
	.string	"Redefinition of function is not allowed."
	.string	"Internal Error: var_decl should have 5 tokens"
	.string	"Internal Error: symbol_Sizeof!"
	.string	"'void' is not a valid type of a variable."
	.string	"Internal Error: Invalid type token."
	.string	"Unknown struct."
	.string	"Internal Error: Calc string-size of non-string token not allowed.\n"
	.string	"Internal error: Invalid type in GetNonGlobalOffset!\n"
	.string	"Internal Error: count struct entries!\n"
	.string	"Internal Error: get struct entry!\n"

