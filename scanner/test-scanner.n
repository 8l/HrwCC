# gas-assembler code generated by HrwCC

.section .text
	#debug: func-def: ( ) 
.globl main
.type main, @function
main:
	pushl	%ebp
	movl	%esp, %ebp
	subl	$20893, %esp


	#debug: func-call: preproc_create ( & pp , "input.c" ) 
	subl	$8, %esp
	movl	%ebp, %eax
	addl	$-20728, %eax
	movl	%eax, 0(%esp)
	movl	$symtab+0, 4(%esp)
	call	preproc_create
	addl	$8, %esp
	#debug: func-call: scanner_init ( & testscanner , & pp ) 
	subl	$8, %esp
	movl	%ebp, %eax
	addl	$-20749, %eax
	movl	%eax, 0(%esp)
	movl	%ebp, %eax
	addl	$-20728, %eax
	movl	%eax, 4(%esp)
	call	scanner_init
	addl	$8, %esp
	#debug: assignment: tok . type = 1 ; 
	movl	%ebp, %eax
	addl	$-20893, %eax
	addl	$0, %eax
	pushl	%eax
	popl	%ebx
	movl	$1, (%ebx)
	#debug: while: tok . type > 0 
main_while_0:
	movl	%ebp, %eax
	addl	$-20893, %eax
	addl	$0, %eax
	movl	(%eax), %eax
	pushl	%eax
	popl	%ebx
	cmpl	$0, %ebx
	movl	$1, %eax
	jg	main_reltrue_1
	movl	$0, %eax
main_reltrue_1:
	testl	%eax, %eax
	jz	main_endwhile_0

	#debug: func-call: scanner_getToken ( & testscanner , & tok ) 
	subl	$8, %esp
	movl	%ebp, %eax
	addl	$-20749, %eax
	movl	%eax, 0(%esp)
	movl	%ebp, %eax
	addl	$-20893, %eax
	movl	%eax, 4(%esp)
	call	scanner_getToken
	addl	$8, %esp
	#debug: func-call: printf ( "%2d" , tok . type ) 
	subl	$8, %esp
	movl	$symtab+8, 0(%esp)
	movl	%ebp, %eax
	addl	$-20893, %eax
	addl	$0, %eax
	movl	(%eax), %eax
	movl	%eax, 4(%esp)
	call	printf
	addl	$8, %esp
	#debug: func-call: printf ( ": %20s" , tok . content ) 
	subl	$8, %esp
	movl	$symtab+12, 0(%esp)
	movl	%ebp, %eax
	addl	$-20893, %eax
	addl	$16, %eax
	movl	%eax, 4(%esp)
	call	printf
	addl	$8, %esp
	#debug: func-call: printf ( "  \t@ %2d" , tok . pos_fileid ) 
	subl	$8, %esp
	movl	$symtab+19, 0(%esp)
	movl	%ebp, %eax
	addl	$-20893, %eax
	addl	$12, %eax
	movl	(%eax), %eax
	movl	%eax, 4(%esp)
	call	printf
	addl	$8, %esp
	#debug: func-call: printf ( ", %3d" , tok . pos_line ) 
	subl	$8, %esp
	movl	$symtab+28, 0(%esp)
	movl	%ebp, %eax
	addl	$-20893, %eax
	addl	$8, %eax
	movl	(%eax), %eax
	movl	%eax, 4(%esp)
	call	printf
	addl	$8, %esp
	#debug: func-call: printf ( ", %2d\n" , tok . pos_col ) 
	subl	$8, %esp
	movl	$symtab+34, 0(%esp)
	movl	%ebp, %eax
	addl	$-20893, %eax
	addl	$4, %eax
	movl	(%eax), %eax
	movl	%eax, 4(%esp)
	call	printf
	addl	$8, %esp
	#debug: if: tok . type < 0 
	movl	%ebp, %eax
	addl	$-20893, %eax
	addl	$0, %eax
	movl	(%eax), %eax
	pushl	%eax
	popl	%ebx
	cmpl	$0, %ebx
	movl	$1, %eax
	jl	main_reltrue_3
	movl	$0, %eax
main_reltrue_3:
	testl	%eax, %eax
	jnz	main_ifbl_2
	jmp	main_elsebl_2
main_ifbl_2:
	#debug: func-call: puts ( "Error occured." ) 
	subl	$4, %esp
	movl	$symtab+41, 0(%esp)
	call	puts
	addl	$4, %esp
	jmp	main_endif_2

main_elsebl_2:

main_endif_2:

	jmp	main_while_0
main_endwhile_0:

	#debug: func-call: preproc_destroy ( & pp ) 
	subl	$4, %esp
	movl	%ebp, %eax
	addl	$-20728, %eax
	movl	%eax, 0(%esp)
	call	preproc_destroy
	addl	$4, %esp
	#debug: return: return 0 ; 
	movl	$0, %eax
	jmp	main_ret


main_ret:
	movl	%ebp, %esp
	popl	%ebp
	ret




# The symbol table 

.section .data
symtab:
	.string	"input.c"
	.string	"%2d"
	.string	": %20s"
	.string	"  \t@ %2d"
	.string	", %3d"
	.string	", %2d\n"
	.string	"Error occured."

