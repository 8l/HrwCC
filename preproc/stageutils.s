
.section	.text

.globl	preproc_reportError
.type	preproc_reportError,@function
preproc_reportError	:	
	pushl	%ebp
	movl	%esp,%ebp
	subl	$21,%esp

	movl	20(%ebp),%ebx
	cmpl	$1,%ebx
	movl	$1,%eax
	je	preproc_reportError_reltrue_1
	movl	$0,%eax
preproc_reportError_reltrue_1	:	
	testl	%eax,%eax
	jnz	preproc_reportError_ifbl_0
	jmp	preproc_reportError_elsebl_0
preproc_reportError_ifbl_0	:	

	subl	$8,%esp
	movl	$symtab+0,0(%esp)
	movl	12(%ebp),%eax
	movl	%eax,4(%esp)
	call	printf
	addl	$8,%esp
	jmp	preproc_reportError_endif_0
preproc_reportError_elsebl_0	:	

	subl	$8,%esp
	movl	$symtab+21,0(%esp)
	movl	12(%ebp),%eax
	movl	%eax,4(%esp)
	call	printf
	addl	$8,%esp
preproc_reportError_endif_0	:	

	movl	$0,-17(%ebp)

	movl	16(%ebp),%ebx
	cmpl	$0,%ebx
	movl	$1,%eax
	jne	preproc_reportError_reltrue_3
	movl	$0,%eax
preproc_reportError_reltrue_3	:	
	testl	%eax,%eax
	jnz	preproc_reportError_ifbl_2
	jmp	preproc_reportError_elsebl_2
preproc_reportError_ifbl_2	:	

	movl	%ebp,%eax
	addl	$-13,%eax
	pushl	%eax
	pushl	$0
	movl	%ebp,%eax
	addl	$16,%eax
	movl	(%eax),%eax
	addl	$0,%eax
	popl	%esi
	imull	$13,%esi
	addl	%esi,%eax
	popl	%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movb	(%eax),%cl
	movb	%cl,(%ebx)
	addl	$1,%eax
	addl	$1,%ebx

	subl	$8,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	%ebp,%eax
	addl	$-13,%eax
	addl	$1,%eax
	movl	(%eax),%eax
	movl	%eax,4(%esp)
	call	preproc_getFilename
	addl	$8,%esp
	movl	%eax,-17(%ebp)

	movl	-17(%ebp),%eax
	testl	%eax,%eax
	jnz	preproc_reportError_ifbl_4
	jmp	preproc_reportError_elsebl_4
preproc_reportError_ifbl_4	:	

	subl	$8,%esp
	movl	$symtab+40,0(%esp)
	movl	-17(%ebp),%eax
	movl	%eax,4(%esp)
	call	printf
	addl	$8,%esp

	subl	$8,%esp
	movl	$symtab+45,0(%esp)
	movl	%ebp,%eax
	addl	$-13,%eax
	addl	$5,%eax
	movl	(%eax),%eax
	movl	%eax,4(%esp)
	call	printf
	addl	$8,%esp

	subl	$8,%esp
	movl	$symtab+49,0(%esp)
	movl	%ebp,%eax
	addl	$-13,%eax
	addl	$9,%eax
	movl	(%eax),%eax
	movl	%eax,4(%esp)
	call	printf
	addl	$8,%esp
	jmp	preproc_reportError_endif_4
preproc_reportError_elsebl_4	:	

	subl	$8,%esp
	movl	$symtab+55,0(%esp)
	movl	%ebp,%eax
	addl	$-13,%eax
	addl	$5,%eax
	movl	(%eax),%eax
	movl	%eax,4(%esp)
	call	printf
	addl	$8,%esp

	subl	$8,%esp
	movl	$symtab+49,0(%esp)
	movl	%ebp,%eax
	addl	$-13,%eax
	addl	$9,%eax
	movl	(%eax),%eax
	movl	%eax,4(%esp)
	call	printf
	addl	$8,%esp
preproc_reportError_endif_4	:	

	movl	$0,-21(%ebp)

	movl	%ebp,%eax
	addl	$-13,%eax
	pushl	%eax
	pushl	-21(%ebp)
	movl	%ebp,%eax
	addl	$16,%eax
	movl	(%eax),%eax
	addl	$0,%eax
	popl	%esi
	imull	$13,%esi
	addl	%esi,%eax
	popl	%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movb	(%eax),%cl
	movb	%cl,(%ebx)
	addl	$1,%eax
	addl	$1,%ebx

preproc_reportError_while_5	:	
	pushl	-21(%ebp)
	movl	%ebp,%eax
	addl	$16,%eax
	movl	(%eax),%eax
	addl	$6656,%eax
	movl	(%eax),%eax
	popl	%ebx
	cmpl	%eax,%ebx
	movl	$1,%eax
	jl	preproc_reportError_reltrue_7
	movl	$0,%eax
preproc_reportError_reltrue_7	:	
	testl	%eax,%eax
	jz	preproc_reportError_logtermfalse_6
	movl	%ebp,%eax
	addl	$-13,%eax
	addl	$0,%eax
	movb	(%eax),%al
	movsbl	%al,%eax
	movl	%eax,%ebx
	cmpl	$0,%ebx
	movl	$1,%eax
	jne	preproc_reportError_reltrue_8
	movl	$0,%eax
preproc_reportError_reltrue_8	:	
	testl	%eax,%eax
	jz	preproc_reportError_logtermfalse_6
	movl	$1,%eax
	jmp	preproc_reportError_logtermtrue_6
preproc_reportError_logtermfalse_6	:	
	movl	$0,%eax
preproc_reportError_logtermtrue_6	:	
	testl	%eax,%eax
	jz	preproc_reportError_endwhile_5

	movl	%ebp,%eax
	addl	$-13,%eax
	pushl	%eax
	pushl	-21(%ebp)
	movl	%ebp,%eax
	addl	$16,%eax
	movl	(%eax),%eax
	addl	$0,%eax
	popl	%esi
	imull	$13,%esi
	addl	%esi,%eax
	popl	%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movb	(%eax),%cl
	movb	%cl,(%ebx)
	addl	$1,%eax
	addl	$1,%ebx

	subl	$8,%esp
	movl	$symtab+73,0(%esp)
	movl	%ebp,%eax
	addl	$-13,%eax
	addl	$0,%eax
	movb	(%eax),%al
	movsbl	%al,%eax
	movl	%eax,4(%esp)
	call	printf
	addl	$8,%esp

	movl	-21(%ebp),%ebx
	addl	$1,%ebx
	movl	%ebx,%eax
	movl	%eax,-21(%ebp)
	jmp	preproc_reportError_while_5
preproc_reportError_endwhile_5	:	
	jmp	preproc_reportError_endif_2
preproc_reportError_elsebl_2	:	
preproc_reportError_endif_2	:	

	subl	$4,%esp
	movl	$symtab+76,0(%esp)
	call	puts
	addl	$4,%esp
preproc_reportError_ret	:	
	movl	%ebp,%esp
	popl	%ebp
	ret	

.globl	preproc_reportError_s
.type	preproc_reportError_s,@function
preproc_reportError_s	:	
	pushl	%ebp
	movl	%esp,%ebp
	subl	$0,%esp

	movl	20(%ebp),%ebx
	cmpl	$1,%ebx
	movl	$1,%eax
	je	preproc_reportError_s_reltrue_10
	movl	$0,%eax
preproc_reportError_s_reltrue_10	:	
	testl	%eax,%eax
	jnz	preproc_reportError_s_ifbl_9
	jmp	preproc_reportError_s_elsebl_9
preproc_reportError_s_ifbl_9	:	

	subl	$8,%esp
	movl	$symtab+78,0(%esp)
	movl	$symtab+97,4(%esp)
	call	printf
	addl	$8,%esp
	jmp	preproc_reportError_s_endif_9
preproc_reportError_s_elsebl_9	:	

	subl	$8,%esp
	movl	$symtab+99,0(%esp)
	movl	$symtab+97,4(%esp)
	call	printf
	addl	$8,%esp
preproc_reportError_s_endif_9	:	

	movl	16(%ebp),%ebx
	cmpl	$0,%ebx
	movl	$1,%eax
	jne	preproc_reportError_s_reltrue_12
	movl	$0,%eax
preproc_reportError_s_reltrue_12	:	
	testl	%eax,%eax
	jnz	preproc_reportError_s_ifbl_11
	jmp	preproc_reportError_s_elsebl_11
preproc_reportError_s_ifbl_11	:	

	subl	$8,%esp
	movl	12(%ebp),%eax
	movl	%eax,0(%esp)
	movl	16(%ebp),%eax
	movl	%eax,4(%esp)
	call	printf
	addl	$8,%esp

	subl	$4,%esp
	movl	$symtab+116,0(%esp)
	call	puts
	addl	$4,%esp
	jmp	preproc_reportError_s_endif_11
preproc_reportError_s_elsebl_11	:	

	subl	$4,%esp
	movl	12(%ebp),%eax
	movl	%eax,0(%esp)
	call	puts
	addl	$4,%esp
preproc_reportError_s_endif_11	:	
preproc_reportError_s_ret	:	
	movl	%ebp,%esp
	popl	%ebp
	ret	

.globl	isPreprocError
.type	isPreprocError,@function
isPreprocError	:	
	pushl	%ebp
	movl	%esp,%ebp
	subl	$0,%esp

	pushl	8(%ebp)
	movl	$0,%ebx
	subl	$10000,%ebx
	movl	%ebx,%eax
	popl	%ebx
	cmpl	%eax,%ebx
	movl	$1,%eax
	jg	isPreprocError_reltrue_15
	movl	$0,%eax
isPreprocError_reltrue_15	:	
	testl	%eax,%eax
	jz	isPreprocError_logtermfalse_14
	pushl	8(%ebp)
	movl	$0,%ebx
	subl	$10499,%ebx
	movl	%ebx,%eax
	popl	%ebx
	cmpl	%eax,%ebx
	movl	$1,%eax
	jl	isPreprocError_reltrue_16
	movl	$0,%eax
isPreprocError_reltrue_16	:	
	testl	%eax,%eax
	jz	isPreprocError_logtermfalse_14
	movl	$1,%eax
	jmp	isPreprocError_logtermtrue_14
isPreprocError_logtermfalse_14	:	
	movl	$0,%eax
isPreprocError_logtermtrue_14	:	
	testl	%eax,%eax
	jnz	isPreprocError_ifbl_13
	jmp	isPreprocError_elsebl_13
isPreprocError_ifbl_13	:	

	movl	$1,%eax
	jmp	isPreprocError_ret
isPreprocError_elsebl_13	:	
isPreprocError_endif_13	:	

	movl	$0,%eax
	jmp	isPreprocError_ret
isPreprocError_ret	:	
	movl	%ebp,%esp
	popl	%ebp
	ret	

.globl	isPreprocWarning
.type	isPreprocWarning,@function
isPreprocWarning	:	
	pushl	%ebp
	movl	%esp,%ebp
	subl	$0,%esp

	pushl	8(%ebp)
	movl	$0,%ebx
	subl	$10500,%ebx
	movl	%ebx,%eax
	popl	%ebx
	cmpl	%eax,%ebx
	movl	$1,%eax
	jg	isPreprocWarning_reltrue_19
	movl	$0,%eax
isPreprocWarning_reltrue_19	:	
	testl	%eax,%eax
	jz	isPreprocWarning_logtermfalse_18
	pushl	8(%ebp)
	movl	$0,%ebx
	subl	$10999,%ebx
	movl	%ebx,%eax
	popl	%ebx
	cmpl	%eax,%ebx
	movl	$1,%eax
	jl	isPreprocWarning_reltrue_20
	movl	$0,%eax
isPreprocWarning_reltrue_20	:	
	testl	%eax,%eax
	jz	isPreprocWarning_logtermfalse_18
	movl	$1,%eax
	jmp	isPreprocWarning_logtermtrue_18
isPreprocWarning_logtermfalse_18	:	
	movl	$0,%eax
isPreprocWarning_logtermtrue_18	:	
	testl	%eax,%eax
	jnz	isPreprocWarning_ifbl_17
	jmp	isPreprocWarning_elsebl_17
isPreprocWarning_ifbl_17	:	

	movl	$1,%eax
	jmp	isPreprocWarning_ret
isPreprocWarning_elsebl_17	:	
isPreprocWarning_endif_17	:	

	movl	$0,%eax
	jmp	isPreprocWarning_ret
isPreprocWarning_ret	:	
	movl	%ebp,%esp
	popl	%ebp
	ret	

.globl	initLine
.type	initLine,@function
initLine	:	
	pushl	%ebp
	movl	%esp,%ebp
	subl	$0,%esp

	subl	$12,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	$0,4(%esp)
	movl	$6676,8(%esp)
	call	memset
	addl	$12,%esp

	movl	%ebp,%eax
	addl	$8,%eax
	movl	(%eax),%eax
	addl	$6656,%eax
	movl	%eax,%ebx
	movl	$0,(%ebx)

	movl	%ebp,%eax
	addl	$8,%eax
	movl	(%eax),%eax
	addl	$6660,%eax
	movl	%eax,%ebx
	movl	$0,(%ebx)

	movl	%ebp,%eax
	addl	$8,%eax
	movl	(%eax),%eax
	addl	$6664,%eax
	movl	%eax,%ebx
	movl	$0,(%ebx)

	movl	%ebp,%eax
	addl	$8,%eax
	movl	(%eax),%eax
	addl	$6668,%eax
	movl	%eax,%ebx
	movl	$0,(%ebx)

	movl	%ebp,%eax
	addl	$8,%eax
	movl	(%eax),%eax
	addl	$6672,%eax
	movl	%eax,%ebx
	movl	$0,(%ebx)
initLine_ret	:	
	movl	%ebp,%esp
	popl	%ebp
	ret	

.globl	updateLineProperties
.type	updateLineProperties,@function
updateLineProperties	:	
	pushl	%ebp
	movl	%esp,%ebp
	subl	$13,%esp

	movl	%ebp,%eax
	addl	$8,%eax
	movl	(%eax),%eax
	addl	$6660,%eax
	movl	(%eax),%eax
	pushl	%eax
	movl	%ebp,%eax
	addl	$8,%eax
	movl	(%eax),%eax
	addl	$6656,%eax
	movl	(%eax),%eax
	popl	%ebx
	cmpl	%eax,%ebx
	movl	$1,%eax
	jg	updateLineProperties_reltrue_22
	movl	$0,%eax
updateLineProperties_reltrue_22	:	
	testl	%eax,%eax
	jnz	updateLineProperties_ifbl_21
	jmp	updateLineProperties_elsebl_21
updateLineProperties_ifbl_21	:	

	jmp	updateLineProperties_ret
updateLineProperties_elsebl_21	:	
updateLineProperties_endif_21	:	

	movl	%ebp,%eax
	addl	$-13,%eax
	pushl	%eax
	movl	%ebp,%eax
	addl	$8,%eax
	movl	(%eax),%eax
	addl	$6660,%eax
	movl	(%eax),%eax
	pushl	%eax
	movl	%ebp,%eax
	addl	$8,%eax
	movl	(%eax),%eax
	addl	$0,%eax
	popl	%esi
	imull	$13,%esi
	addl	%esi,%eax
	popl	%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movb	(%eax),%cl
	movb	%cl,(%ebx)
	addl	$1,%eax
	addl	$1,%ebx

	movl	%ebp,%eax
	addl	$8,%eax
	movl	(%eax),%eax
	addl	$6668,%eax
	movl	(%eax),%eax
	movl	%eax,%ebx
	cmpl	$0,%ebx
	movl	$1,%eax
	je	updateLineProperties_reltrue_24
	movl	$0,%eax
updateLineProperties_reltrue_24	:	
	testl	%eax,%eax
	jnz	updateLineProperties_ifbl_23
	jmp	updateLineProperties_elsebl_23
updateLineProperties_ifbl_23	:	

	movl	%ebp,%eax
	addl	$-13,%eax
	addl	$0,%eax
	movb	(%eax),%al
	movsbl	%al,%eax
	movl	%eax,%ebx
	cmpl	$34,%ebx
	movl	$1,%eax
	je	updateLineProperties_reltrue_26
	movl	$0,%eax
updateLineProperties_reltrue_26	:	
	testl	%eax,%eax
	jnz	updateLineProperties_ifbl_25
	jmp	updateLineProperties_elsebl_25
updateLineProperties_ifbl_25	:	

	movl	%ebp,%eax
	addl	$8,%eax
	movl	(%eax),%eax
	addl	$6664,%eax
	movl	(%eax),%eax
	movl	%eax,%ebx
	cmpl	$1,%ebx
	movl	$1,%eax
	je	updateLineProperties_reltrue_28
	movl	$0,%eax
updateLineProperties_reltrue_28	:	
	testl	%eax,%eax
	jnz	updateLineProperties_ifbl_27
	jmp	updateLineProperties_elsebl_27
updateLineProperties_ifbl_27	:	

	movl	%ebp,%eax
	addl	$8,%eax
	movl	(%eax),%eax
	addl	$6664,%eax
	movl	%eax,%ebx
	movl	$0,(%ebx)
	jmp	updateLineProperties_endif_27
updateLineProperties_elsebl_27	:	

	movl	%ebp,%eax
	addl	$8,%eax
	movl	(%eax),%eax
	addl	$6664,%eax
	movl	%eax,%ebx
	movl	$1,(%ebx)
updateLineProperties_endif_27	:	
	jmp	updateLineProperties_endif_25
updateLineProperties_elsebl_25	:	
updateLineProperties_endif_25	:	
	jmp	updateLineProperties_endif_23
updateLineProperties_elsebl_23	:	
updateLineProperties_endif_23	:	

	movl	%ebp,%eax
	addl	$8,%eax
	movl	(%eax),%eax
	addl	$6668,%eax
	movl	%eax,%ebx
	movl	$0,(%ebx)

	movl	%ebp,%eax
	addl	$-13,%eax
	addl	$0,%eax
	movb	(%eax),%al
	movsbl	%al,%eax
	movl	%eax,%ebx
	cmpl	$92,%ebx
	movl	$1,%eax
	je	updateLineProperties_reltrue_30
	movl	$0,%eax
updateLineProperties_reltrue_30	:	
	testl	%eax,%eax
	jnz	updateLineProperties_ifbl_29
	jmp	updateLineProperties_elsebl_29
updateLineProperties_ifbl_29	:	

	movl	%ebp,%eax
	addl	$8,%eax
	movl	(%eax),%eax
	addl	$6668,%eax
	movl	%eax,%ebx
	movl	$1,(%ebx)
	jmp	updateLineProperties_endif_29
updateLineProperties_elsebl_29	:	
updateLineProperties_endif_29	:	
updateLineProperties_ret	:	
	movl	%ebp,%esp
	popl	%ebp
	ret	

.globl	disposeWhitespace
.type	disposeWhitespace,@function
disposeWhitespace	:	
	pushl	%ebp
	movl	%esp,%ebp
	subl	$13,%esp

	movl	%ebp,%eax
	addl	$-13,%eax
	pushl	%eax
	movl	%ebp,%eax
	addl	$8,%eax
	movl	(%eax),%eax
	addl	$6660,%eax
	movl	(%eax),%eax
	pushl	%eax
	movl	%ebp,%eax
	addl	$8,%eax
	movl	(%eax),%eax
	addl	$0,%eax
	popl	%esi
	imull	$13,%esi
	addl	%esi,%eax
	popl	%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movb	(%eax),%cl
	movb	%cl,(%ebx)
	addl	$1,%eax
	addl	$1,%ebx

disposeWhitespace_while_31	:	
	subl	$4,%esp
	movl	%ebp,%eax
	addl	$-13,%eax
	addl	$0,%eax
	movb	(%eax),%al
	movsbl	%al,%eax
	movl	%eax,0(%esp)
	call	isblank
	addl	$4,%esp
	movl	%eax,%ebx
	cmpl	$1,%ebx
	movl	$1,%eax
	je	disposeWhitespace_reltrue_34
	movl	$0,%eax
disposeWhitespace_reltrue_34	:	
	testl	%eax,%eax
	jnz	disposeWhitespace_logexprtrue_33
	movl	%ebp,%eax
	addl	$-13,%eax
	addl	$0,%eax
	movb	(%eax),%al
	movsbl	%al,%eax
	movl	%eax,%ebx
	cmpl	$10,%ebx
	movl	$1,%eax
	je	disposeWhitespace_reltrue_35
	movl	$0,%eax
disposeWhitespace_reltrue_35	:	
	testl	%eax,%eax
	jnz	disposeWhitespace_logexprtrue_33
	movl	$0,%eax
	jmp	disposeWhitespace_logexprfalse_33
disposeWhitespace_logexprtrue_33	:	
	movl	$1,%eax
disposeWhitespace_logexprfalse_33	:	
	movl	%eax,%ebx
	cmpl	$1,%ebx
	movl	$1,%eax
	je	disposeWhitespace_reltrue_32
	movl	$0,%eax
disposeWhitespace_reltrue_32	:	
	testl	%eax,%eax
	jz	disposeWhitespace_endwhile_31

	movl	%ebp,%eax
	addl	$8,%eax
	movl	(%eax),%eax
	addl	$6660,%eax
	pushl	%eax
	movl	%ebp,%eax
	addl	$8,%eax
	movl	(%eax),%eax
	addl	$6660,%eax
	movl	(%eax),%eax
	movl	%eax,%ebx
	addl	$1,%ebx
	movl	%ebx,%eax
	popl	%ebx
	movl	%eax,(%ebx)

	movl	%ebp,%eax
	addl	$-13,%eax
	pushl	%eax
	movl	%ebp,%eax
	addl	$8,%eax
	movl	(%eax),%eax
	addl	$6660,%eax
	movl	(%eax),%eax
	pushl	%eax
	movl	%ebp,%eax
	addl	$8,%eax
	movl	(%eax),%eax
	addl	$0,%eax
	popl	%esi
	imull	$13,%esi
	addl	%esi,%eax
	popl	%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movb	(%eax),%cl
	movb	%cl,(%ebx)
	addl	$1,%eax
	addl	$1,%ebx

	movl	%ebp,%eax
	addl	$-13,%eax
	addl	$0,%eax
	movb	(%eax),%al
	movsbl	%al,%eax
	movl	%eax,%ebx
	cmpl	$0,%ebx
	movl	$1,%eax
	je	disposeWhitespace_reltrue_37
	movl	$0,%eax
disposeWhitespace_reltrue_37	:	
	testl	%eax,%eax
	jnz	disposeWhitespace_ifbl_36
	jmp	disposeWhitespace_elsebl_36
disposeWhitespace_ifbl_36	:	
	jmp	disposeWhitespace_endwhile_31
disposeWhitespace_elsebl_36	:	
disposeWhitespace_endif_36	:	
	jmp	disposeWhitespace_while_31
disposeWhitespace_endwhile_31	:	
disposeWhitespace_ret	:	
	movl	%ebp,%esp
	popl	%ebp
	ret	

.globl	disposeRestOfLine
.type	disposeRestOfLine,@function
disposeRestOfLine	:	
	pushl	%ebp
	movl	%esp,%ebp
	subl	$0,%esp

	movl	%ebp,%eax
	addl	$8,%eax
	movl	(%eax),%eax
	addl	$6660,%eax
	pushl	%eax
	movl	%ebp,%eax
	addl	$8,%eax
	movl	(%eax),%eax
	addl	$6656,%eax
	movl	(%eax),%eax
	movl	%eax,%ebx
	subl	$1,%ebx
	movl	%ebx,%eax
	popl	%ebx
	movl	%eax,(%ebx)
disposeRestOfLine_ret	:	
	movl	%ebp,%esp
	popl	%ebp
	ret	

.globl	prevstage_getNext
.type	prevstage_getNext,@function
prevstage_getNext	:	
	pushl	%ebp
	movl	%esp,%ebp
	subl	$0,%esp

	movl	12(%ebp),%ebx
	subl	$1,%ebx
	movl	%ebx,%eax
	movl	%eax,12(%ebp)

	movl	12(%ebp),%ebx
	cmpl	$0,%ebx
	movl	$1,%eax
	je	prevstage_getNext_reltrue_39
	movl	$0,%eax
prevstage_getNext_reltrue_39	:	
	testl	%eax,%eax
	jnz	prevstage_getNext_ifbl_38
	jmp	prevstage_getNext_elsebl_38
prevstage_getNext_ifbl_38	:	

	subl	$8,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	16(%ebp),%eax
	movl	%eax,4(%esp)
	call	fstack_getNext
	addl	$8,%esp
	jmp	prevstage_getNext_ret
prevstage_getNext_elsebl_38	:	
prevstage_getNext_endif_38	:	

	movl	12(%ebp),%ebx
	cmpl	$1,%ebx
	movl	$1,%eax
	je	prevstage_getNext_reltrue_41
	movl	$0,%eax
prevstage_getNext_reltrue_41	:	
	testl	%eax,%eax
	jnz	prevstage_getNext_ifbl_40
	jmp	prevstage_getNext_elsebl_40
prevstage_getNext_ifbl_40	:	

	subl	$8,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	16(%ebp),%eax
	movl	%eax,4(%esp)
	call	commstage_getNext
	addl	$8,%esp
	jmp	prevstage_getNext_ret
prevstage_getNext_elsebl_40	:	
prevstage_getNext_endif_40	:	

	movl	12(%ebp),%ebx
	cmpl	$3,%ebx
	movl	$1,%eax
	je	prevstage_getNext_reltrue_43
	movl	$0,%eax
prevstage_getNext_reltrue_43	:	
	testl	%eax,%eax
	jnz	prevstage_getNext_ifbl_42
	jmp	prevstage_getNext_elsebl_42
prevstage_getNext_ifbl_42	:	

	subl	$8,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	16(%ebp),%eax
	movl	%eax,4(%esp)
	call	substage_getNext
	addl	$8,%esp
	jmp	prevstage_getNext_ret
prevstage_getNext_elsebl_42	:	
prevstage_getNext_endif_42	:	

	movl	12(%ebp),%ebx
	cmpl	$2,%ebx
	movl	$1,%eax
	je	prevstage_getNext_reltrue_45
	movl	$0,%eax
prevstage_getNext_reltrue_45	:	
	testl	%eax,%eax
	jnz	prevstage_getNext_ifbl_44
	jmp	prevstage_getNext_elsebl_44
prevstage_getNext_ifbl_44	:	

	subl	$8,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	16(%ebp),%eax
	movl	%eax,4(%esp)
	call	directivestage_getNext
	addl	$8,%esp
	jmp	prevstage_getNext_ret
prevstage_getNext_elsebl_44	:	
prevstage_getNext_endif_44	:	

	subl	$4,%esp
	movl	$symtab+117,0(%esp)
	call	puts
	addl	$4,%esp

	subl	$4,%esp
	movl	$1,0(%esp)
	call	exit
	addl	$4,%esp
prevstage_getNext_ret	:	
	movl	%ebp,%esp
	popl	%ebp
	ret	

.globl	getNextLine
.type	getNextLine,@function
getNextLine	:	
	pushl	%ebp
	movl	%esp,%ebp
	subl	$21,%esp

	subl	$4,%esp
	movl	16(%ebp),%eax
	movl	%eax,0(%esp)
	call	initLine
	addl	$4,%esp

	movl	$0,-8(%ebp)

getNextLine_while_46	:	
	pushl	-8(%ebp)
	movl	$512,%ebx
	subl	$1,%ebx
	movl	%ebx,%eax
	popl	%ebx
	cmpl	%eax,%ebx
	movl	$1,%eax
	jl	getNextLine_reltrue_47
	movl	$0,%eax
getNextLine_reltrue_47	:	
	testl	%eax,%eax
	jz	getNextLine_endwhile_46

	subl	$12,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	12(%ebp),%eax
	movl	%eax,4(%esp)
	pushl	-8(%ebp)
	movl	%ebp,%eax
	addl	$16,%eax
	movl	(%eax),%eax
	addl	$0,%eax
	popl	%esi
	imull	$13,%esi
	addl	%esi,%eax
	movl	%eax,8(%esp)
	call	prevstage_getNext
	addl	$12,%esp
	movl	%eax,-4(%ebp)

	movl	-4(%ebp),%ebx
	cmpl	$0,%ebx
	movl	$1,%eax
	jne	getNextLine_reltrue_49
	movl	$0,%eax
getNextLine_reltrue_49	:	
	testl	%eax,%eax
	jnz	getNextLine_ifbl_48
	jmp	getNextLine_elsebl_48
getNextLine_ifbl_48	:	

	movl	-4(%ebp),%eax
	jmp	getNextLine_ret
getNextLine_elsebl_48	:	
getNextLine_endif_48	:	

	movl	%ebp,%eax
	addl	$16,%eax
	movl	(%eax),%eax
	addl	$6656,%eax
	pushl	%eax
	movl	%ebp,%eax
	addl	$16,%eax
	movl	(%eax),%eax
	addl	$6656,%eax
	movl	(%eax),%eax
	movl	%eax,%ebx
	addl	$1,%ebx
	movl	%ebx,%eax
	popl	%ebx
	movl	%eax,(%ebx)

	movl	%ebp,%eax
	addl	$-21,%eax
	pushl	%eax
	pushl	-8(%ebp)
	movl	%ebp,%eax
	addl	$16,%eax
	movl	(%eax),%eax
	addl	$0,%eax
	popl	%esi
	imull	$13,%esi
	addl	%esi,%eax
	popl	%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movb	(%eax),%cl
	movb	%cl,(%ebx)
	addl	$1,%eax
	addl	$1,%ebx

	movl	%ebp,%eax
	addl	$-21,%eax
	addl	$0,%eax
	movb	(%eax),%al
	movsbl	%al,%eax
	movl	%eax,%ebx
	cmpl	$10,%ebx
	movl	$1,%eax
	je	getNextLine_reltrue_51
	movl	$0,%eax
getNextLine_reltrue_51	:	
	testl	%eax,%eax
	jnz	getNextLine_ifbl_50
	jmp	getNextLine_elsebl_50
getNextLine_ifbl_50	:	
	jmp	getNextLine_endwhile_46
getNextLine_elsebl_50	:	
getNextLine_endif_50	:	

	movl	-8(%ebp),%ebx
	addl	$1,%ebx
	movl	%ebx,%eax
	movl	%eax,-8(%ebp)
	jmp	getNextLine_while_46
getNextLine_endwhile_46	:	

	pushl	-8(%ebp)
	movl	$512,%ebx
	subl	$1,%ebx
	movl	%ebx,%eax
	popl	%ebx
	cmpl	%eax,%ebx
	movl	$1,%eax
	je	getNextLine_reltrue_53
	movl	$0,%eax
getNextLine_reltrue_53	:	
	testl	%eax,%eax
	jnz	getNextLine_ifbl_52
	jmp	getNextLine_elsebl_52
getNextLine_ifbl_52	:	

	subl	$16,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	$symtab+146,4(%esp)
	movl	16(%ebp),%eax
	movl	%eax,8(%esp)
	movl	$2,12(%esp)
	call	preproc_reportError
	addl	$16,%esp

	movl	$0,%ebx
	subl	$10002,%ebx
	movl	%ebx,%eax
	jmp	getNextLine_ret
getNextLine_elsebl_52	:	
getNextLine_endif_52	:	

	movl	$0,%eax
	jmp	getNextLine_ret
getNextLine_ret	:	
	movl	%ebp,%esp
	popl	%ebp
	ret	

.globl	disposeMultilineSatement
.type	disposeMultilineSatement,@function
disposeMultilineSatement	:	
	pushl	%ebp
	movl	%esp,%ebp
	subl	$30,%esp

	movl	%ebp,%eax
	addl	$-17,%eax
	pushl	%eax
	movl	%ebp,%eax
	addl	$16,%eax
	movl	(%eax),%eax
	addl	$6656,%eax
	movl	(%eax),%eax
	pushl	%eax
	movl	%ebp,%eax
	addl	$16,%eax
	movl	(%eax),%eax
	addl	$0,%eax
	popl	%esi
	imull	$13,%esi
	addl	%esi,%eax
	popl	%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movb	(%eax),%cl
	movb	%cl,(%ebx)
	addl	$1,%eax
	addl	$1,%ebx

	movl	%ebp,%eax
	addl	$-30,%eax
	pushl	%eax
	movl	%ebp,%eax
	addl	$16,%eax
	movl	(%eax),%eax
	addl	$6656,%eax
	movl	(%eax),%eax
	movl	%eax,%ebx
	subl	$1,%ebx
	movl	%ebx,%eax
	pushl	%eax
	movl	%ebp,%eax
	addl	$16,%eax
	movl	(%eax),%eax
	addl	$0,%eax
	popl	%esi
	imull	$13,%esi
	addl	%esi,%eax
	popl	%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movb	(%eax),%cl
	movb	%cl,(%ebx)
	addl	$1,%eax
	addl	$1,%ebx

disposeMultilineSatement_while_54	:	
	movl	%ebp,%eax
	addl	$-30,%eax
	addl	$0,%eax
	movb	(%eax),%al
	movsbl	%al,%eax
	movl	%eax,%ebx
	cmpl	$92,%ebx
	movl	$1,%eax
	je	disposeMultilineSatement_reltrue_56
	movl	$0,%eax
disposeMultilineSatement_reltrue_56	:	
	testl	%eax,%eax
	jz	disposeMultilineSatement_logtermfalse_55
	movl	%ebp,%eax
	addl	$-17,%eax
	addl	$0,%eax
	movb	(%eax),%al
	movsbl	%al,%eax
	movl	%eax,%ebx
	cmpl	$10,%ebx
	movl	$1,%eax
	je	disposeMultilineSatement_reltrue_57
	movl	$0,%eax
disposeMultilineSatement_reltrue_57	:	
	testl	%eax,%eax
	jz	disposeMultilineSatement_logtermfalse_55
	movl	$1,%eax
	jmp	disposeMultilineSatement_logtermtrue_55
disposeMultilineSatement_logtermfalse_55	:	
	movl	$0,%eax
disposeMultilineSatement_logtermtrue_55	:	
	testl	%eax,%eax
	jz	disposeMultilineSatement_endwhile_54

	subl	$12,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	12(%ebp),%eax
	movl	%eax,4(%esp)
	movl	16(%ebp),%eax
	movl	%eax,8(%esp)
	call	getNextLine
	addl	$12,%esp
	movl	%eax,-4(%ebp)

	movl	-4(%ebp),%ebx
	cmpl	$0,%ebx
	movl	$1,%eax
	jne	disposeMultilineSatement_reltrue_59
	movl	$0,%eax
disposeMultilineSatement_reltrue_59	:	
	testl	%eax,%eax
	jnz	disposeMultilineSatement_ifbl_58
	jmp	disposeMultilineSatement_elsebl_58
disposeMultilineSatement_ifbl_58	:	

	movl	-4(%ebp),%eax
	jmp	disposeMultilineSatement_ret
disposeMultilineSatement_elsebl_58	:	
disposeMultilineSatement_endif_58	:	

	movl	%ebp,%eax
	addl	$-17,%eax
	pushl	%eax
	movl	%ebp,%eax
	addl	$16,%eax
	movl	(%eax),%eax
	addl	$6656,%eax
	movl	(%eax),%eax
	pushl	%eax
	movl	%ebp,%eax
	addl	$16,%eax
	movl	(%eax),%eax
	addl	$0,%eax
	popl	%esi
	imull	$13,%esi
	addl	%esi,%eax
	popl	%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movb	(%eax),%cl
	movb	%cl,(%ebx)
	addl	$1,%eax
	addl	$1,%ebx

	movl	%ebp,%eax
	addl	$-30,%eax
	pushl	%eax
	movl	%ebp,%eax
	addl	$16,%eax
	movl	(%eax),%eax
	addl	$6656,%eax
	movl	(%eax),%eax
	movl	%eax,%ebx
	subl	$1,%ebx
	movl	%ebx,%eax
	pushl	%eax
	movl	%ebp,%eax
	addl	$16,%eax
	movl	(%eax),%eax
	addl	$0,%eax
	popl	%esi
	imull	$13,%esi
	addl	%esi,%eax
	popl	%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movb	(%eax),%cl
	movb	%cl,(%ebx)
	addl	$1,%eax
	addl	$1,%ebx
	jmp	disposeMultilineSatement_while_54
disposeMultilineSatement_endwhile_54	:	

	movl	$0,%eax
	jmp	disposeMultilineSatement_ret
disposeMultilineSatement_ret	:	
	movl	%ebp,%esp
	popl	%ebp
	ret	

.globl	printCharacters
.type	printCharacters,@function
printCharacters	:	
	pushl	%ebp
	movl	%esp,%ebp
	subl	$17,%esp

	movl	$0,-4(%ebp)

	movl	%ebp,%eax
	addl	$-17,%eax
	pushl	%eax
	pushl	-4(%ebp)
	movl	%ebp,%eax
	addl	$8,%eax
	movl	(%eax),%eax
	popl	%esi
	imull	$13,%esi
	addl	%esi,%eax
	popl	%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movb	(%eax),%cl
	movb	%cl,(%ebx)
	addl	$1,%eax
	addl	$1,%ebx

printCharacters_while_60	:	
	movl	%ebp,%eax
	addl	$-17,%eax
	addl	$0,%eax
	movb	(%eax),%al
	movsbl	%al,%eax
	movl	%eax,%ebx
	cmpl	$0,%ebx
	movl	$1,%eax
	jne	printCharacters_reltrue_61
	movl	$0,%eax
printCharacters_reltrue_61	:	
	testl	%eax,%eax
	jz	printCharacters_endwhile_60

	subl	$8,%esp
	movl	$symtab+73,0(%esp)
	movl	%ebp,%eax
	addl	$-17,%eax
	addl	$0,%eax
	movb	(%eax),%al
	movsbl	%al,%eax
	movl	%eax,4(%esp)
	call	printf
	addl	$8,%esp

	movl	-4(%ebp),%ebx
	addl	$1,%ebx
	movl	%ebx,%eax
	movl	%eax,-4(%ebp)

	movl	%ebp,%eax
	addl	$-17,%eax
	pushl	%eax
	pushl	-4(%ebp)
	movl	%ebp,%eax
	addl	$8,%eax
	movl	(%eax),%eax
	popl	%esi
	imull	$13,%esi
	addl	%esi,%eax
	popl	%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movb	(%eax),%cl
	movb	%cl,(%ebx)
	addl	$1,%eax
	addl	$1,%ebx
	jmp	printCharacters_while_60
printCharacters_endwhile_60	:	
printCharacters_ret	:	
	movl	%ebp,%esp
	popl	%ebp
	ret	

.globl	CharacterStrCmp
.type	CharacterStrCmp,@function
CharacterStrCmp	:	
	pushl	%ebp
	movl	%esp,%ebp
	subl	$17,%esp

	movl	$0,-4(%ebp)

	movl	%ebp,%eax
	addl	$-17,%eax
	pushl	%eax
	movl	12(%ebp),%ebx
	addl	-4(%ebp),%ebx
	movl	%ebx,%eax
	pushl	%eax
	movl	%ebp,%eax
	addl	$8,%eax
	movl	(%eax),%eax
	popl	%esi
	imull	$13,%esi
	addl	%esi,%eax
	popl	%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movb	(%eax),%cl
	movb	%cl,(%ebx)
	addl	$1,%eax
	addl	$1,%ebx

CharacterStrCmp_while_62	:	
	movl	%ebp,%eax
	addl	$-17,%eax
	addl	$0,%eax
	movb	(%eax),%al
	movsbl	%al,%eax
	movl	%eax,%ebx
	cmpl	$0,%ebx
	movl	$1,%eax
	jne	CharacterStrCmp_reltrue_64
	movl	$0,%eax
CharacterStrCmp_reltrue_64	:	
	testl	%eax,%eax
	jz	CharacterStrCmp_logtermfalse_63
	movl	-4(%ebp),%ebx
	cmpl	16(%ebp),%ebx
	movl	$1,%eax
	jl	CharacterStrCmp_reltrue_65
	movl	$0,%eax
CharacterStrCmp_reltrue_65	:	
	testl	%eax,%eax
	jz	CharacterStrCmp_logtermfalse_63
	movl	$1,%eax
	jmp	CharacterStrCmp_logtermtrue_63
CharacterStrCmp_logtermfalse_63	:	
	movl	$0,%eax
CharacterStrCmp_logtermtrue_63	:	
	testl	%eax,%eax
	jz	CharacterStrCmp_endwhile_62

	movl	%ebp,%eax
	addl	$-17,%eax
	addl	$0,%eax
	movb	(%eax),%al
	movsbl	%al,%eax
	pushl	%eax
	pushl	-4(%ebp)
	movl	%ebp,%eax
	addl	$20,%eax
	movl	(%eax),%eax
	popl	%esi
	addl	%esi,%eax
	movb	(%eax),%al
	movsbl	%al,%eax
	popl	%ebx
	cmpl	%eax,%ebx
	movl	$1,%eax
	jne	CharacterStrCmp_reltrue_67
	movl	$0,%eax
CharacterStrCmp_reltrue_67	:	
	testl	%eax,%eax
	jnz	CharacterStrCmp_ifbl_66
	jmp	CharacterStrCmp_elsebl_66
CharacterStrCmp_ifbl_66	:	

	movl	$1,%eax
	jmp	CharacterStrCmp_ret
CharacterStrCmp_elsebl_66	:	
CharacterStrCmp_endif_66	:	

	movl	-4(%ebp),%ebx
	addl	$1,%ebx
	movl	%ebx,%eax
	movl	%eax,-4(%ebp)

	movl	%ebp,%eax
	addl	$-17,%eax
	pushl	%eax
	movl	12(%ebp),%ebx
	addl	-4(%ebp),%ebx
	movl	%ebx,%eax
	pushl	%eax
	movl	%ebp,%eax
	addl	$8,%eax
	movl	(%eax),%eax
	popl	%esi
	imull	$13,%esi
	addl	%esi,%eax
	popl	%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movb	(%eax),%cl
	movb	%cl,(%ebx)
	addl	$1,%eax
	addl	$1,%ebx
	jmp	CharacterStrCmp_while_62
CharacterStrCmp_endwhile_62	:	

	movl	$0,%eax
	jmp	CharacterStrCmp_ret
CharacterStrCmp_ret	:	
	movl	%ebp,%esp
	popl	%ebp
	ret	

.globl	CharacterSubCmp
.type	CharacterSubCmp,@function
CharacterSubCmp	:	
	pushl	%ebp
	movl	%esp,%ebp
	subl	$30,%esp

	movl	$0,-4(%ebp)

	movl	%ebp,%eax
	addl	$-17,%eax
	pushl	%eax
	movl	12(%ebp),%ebx
	addl	-4(%ebp),%ebx
	movl	%ebx,%eax
	pushl	%eax
	movl	%ebp,%eax
	addl	$8,%eax
	movl	(%eax),%eax
	popl	%esi
	imull	$13,%esi
	addl	%esi,%eax
	popl	%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movb	(%eax),%cl
	movb	%cl,(%ebx)
	addl	$1,%eax
	addl	$1,%ebx

	movl	%ebp,%eax
	addl	$-30,%eax
	pushl	%eax
	pushl	-4(%ebp)
	movl	%ebp,%eax
	addl	$20,%eax
	movl	(%eax),%eax
	popl	%esi
	imull	$13,%esi
	addl	%esi,%eax
	popl	%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movb	(%eax),%cl
	movb	%cl,(%ebx)
	addl	$1,%eax
	addl	$1,%ebx

CharacterSubCmp_while_68	:	
	movl	%ebp,%eax
	addl	$-17,%eax
	addl	$0,%eax
	movb	(%eax),%al
	movsbl	%al,%eax
	movl	%eax,%ebx
	cmpl	$0,%ebx
	movl	$1,%eax
	jne	CharacterSubCmp_reltrue_70
	movl	$0,%eax
CharacterSubCmp_reltrue_70	:	
	testl	%eax,%eax
	jz	CharacterSubCmp_logtermfalse_69
	movl	-4(%ebp),%ebx
	cmpl	16(%ebp),%ebx
	movl	$1,%eax
	jl	CharacterSubCmp_reltrue_71
	movl	$0,%eax
CharacterSubCmp_reltrue_71	:	
	testl	%eax,%eax
	jz	CharacterSubCmp_logtermfalse_69
	movl	$1,%eax
	jmp	CharacterSubCmp_logtermtrue_69
CharacterSubCmp_logtermfalse_69	:	
	movl	$0,%eax
CharacterSubCmp_logtermtrue_69	:	
	testl	%eax,%eax
	jz	CharacterSubCmp_endwhile_68

	movl	%ebp,%eax
	addl	$-17,%eax
	addl	$0,%eax
	movb	(%eax),%al
	movsbl	%al,%eax
	pushl	%eax
	movl	%ebp,%eax
	addl	$-30,%eax
	addl	$0,%eax
	movb	(%eax),%al
	movsbl	%al,%eax
	popl	%ebx
	cmpl	%eax,%ebx
	movl	$1,%eax
	jne	CharacterSubCmp_reltrue_73
	movl	$0,%eax
CharacterSubCmp_reltrue_73	:	
	testl	%eax,%eax
	jnz	CharacterSubCmp_ifbl_72
	jmp	CharacterSubCmp_elsebl_72
CharacterSubCmp_ifbl_72	:	

	movl	$1,%eax
	jmp	CharacterSubCmp_ret
CharacterSubCmp_elsebl_72	:	
CharacterSubCmp_endif_72	:	

	movl	-4(%ebp),%ebx
	addl	$1,%ebx
	movl	%ebx,%eax
	movl	%eax,-4(%ebp)

	movl	%ebp,%eax
	addl	$-17,%eax
	pushl	%eax
	movl	12(%ebp),%ebx
	addl	-4(%ebp),%ebx
	movl	%ebx,%eax
	pushl	%eax
	movl	%ebp,%eax
	addl	$8,%eax
	movl	(%eax),%eax
	popl	%esi
	imull	$13,%esi
	addl	%esi,%eax
	popl	%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movb	(%eax),%cl
	movb	%cl,(%ebx)
	addl	$1,%eax
	addl	$1,%ebx

	movl	%ebp,%eax
	addl	$-30,%eax
	pushl	%eax
	pushl	-4(%ebp)
	movl	%ebp,%eax
	addl	$20,%eax
	movl	(%eax),%eax
	popl	%esi
	imull	$13,%esi
	addl	%esi,%eax
	popl	%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movb	(%eax),%cl
	movb	%cl,(%ebx)
	addl	$1,%eax
	addl	$1,%ebx
	jmp	CharacterSubCmp_while_68
CharacterSubCmp_endwhile_68	:	

	movl	$0,%eax
	jmp	CharacterSubCmp_ret
CharacterSubCmp_ret	:	
	movl	%ebp,%esp
	popl	%ebp
	ret	

.globl	CharacterCmp
.type	CharacterCmp,@function
CharacterCmp	:	
	pushl	%ebp
	movl	%esp,%ebp
	subl	$30,%esp

	movl	$0,-4(%ebp)

	movl	%ebp,%eax
	addl	$-17,%eax
	pushl	%eax
	pushl	-4(%ebp)
	movl	%ebp,%eax
	addl	$8,%eax
	movl	(%eax),%eax
	popl	%esi
	imull	$13,%esi
	addl	%esi,%eax
	popl	%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movb	(%eax),%cl
	movb	%cl,(%ebx)
	addl	$1,%eax
	addl	$1,%ebx

	movl	%ebp,%eax
	addl	$-30,%eax
	pushl	%eax
	pushl	-4(%ebp)
	movl	%ebp,%eax
	addl	$12,%eax
	movl	(%eax),%eax
	popl	%esi
	imull	$13,%esi
	addl	%esi,%eax
	popl	%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movb	(%eax),%cl
	movb	%cl,(%ebx)
	addl	$1,%eax
	addl	$1,%ebx

CharacterCmp_while_74	:	
	movl	%ebp,%eax
	addl	$-17,%eax
	addl	$0,%eax
	movb	(%eax),%al
	movsbl	%al,%eax
	pushl	%eax
	movl	%ebp,%eax
	addl	$-30,%eax
	addl	$0,%eax
	movb	(%eax),%al
	movsbl	%al,%eax
	popl	%ebx
	cmpl	%eax,%ebx
	movl	$1,%eax
	je	CharacterCmp_reltrue_76
	movl	$0,%eax
CharacterCmp_reltrue_76	:	
	testl	%eax,%eax
	jz	CharacterCmp_logtermfalse_75
	movl	%ebp,%eax
	addl	$-17,%eax
	addl	$0,%eax
	movb	(%eax),%al
	movsbl	%al,%eax
	movl	%eax,%ebx
	cmpl	$0,%ebx
	movl	$1,%eax
	jne	CharacterCmp_reltrue_77
	movl	$0,%eax
CharacterCmp_reltrue_77	:	
	testl	%eax,%eax
	jz	CharacterCmp_logtermfalse_75
	movl	$1,%eax
	jmp	CharacterCmp_logtermtrue_75
CharacterCmp_logtermfalse_75	:	
	movl	$0,%eax
CharacterCmp_logtermtrue_75	:	
	testl	%eax,%eax
	jz	CharacterCmp_endwhile_74

	movl	-4(%ebp),%ebx
	addl	$1,%ebx
	movl	%ebx,%eax
	movl	%eax,-4(%ebp)

	movl	%ebp,%eax
	addl	$-17,%eax
	pushl	%eax
	pushl	-4(%ebp)
	movl	%ebp,%eax
	addl	$8,%eax
	movl	(%eax),%eax
	popl	%esi
	imull	$13,%esi
	addl	%esi,%eax
	popl	%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movb	(%eax),%cl
	movb	%cl,(%ebx)
	addl	$1,%eax
	addl	$1,%ebx

	movl	%ebp,%eax
	addl	$-30,%eax
	pushl	%eax
	pushl	-4(%ebp)
	movl	%ebp,%eax
	addl	$12,%eax
	movl	(%eax),%eax
	popl	%esi
	imull	$13,%esi
	addl	%esi,%eax
	popl	%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movb	(%eax),%cl
	movb	%cl,(%ebx)
	addl	$1,%eax
	addl	$1,%ebx
	jmp	CharacterCmp_while_74
CharacterCmp_endwhile_74	:	

	movl	%ebp,%eax
	addl	$-17,%eax
	addl	$0,%eax
	movb	(%eax),%al
	movsbl	%al,%eax
	pushl	%eax
	movl	%ebp,%eax
	addl	$-30,%eax
	addl	$0,%eax
	movb	(%eax),%al
	movsbl	%al,%eax
	popl	%ebx
	subl	%eax,%ebx
	movl	%ebx,%eax
	jmp	CharacterCmp_ret
CharacterCmp_ret	:	
	movl	%ebp,%esp
	popl	%ebp
	ret	

.globl	CharacterLen
.type	CharacterLen,@function
CharacterLen	:	
	pushl	%ebp
	movl	%esp,%ebp
	subl	$17,%esp

	movl	$0,-4(%ebp)

	movl	%ebp,%eax
	addl	$-17,%eax
	pushl	%eax
	pushl	-4(%ebp)
	movl	%ebp,%eax
	addl	$8,%eax
	movl	(%eax),%eax
	popl	%esi
	imull	$13,%esi
	addl	%esi,%eax
	popl	%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movb	(%eax),%cl
	movb	%cl,(%ebx)
	addl	$1,%eax
	addl	$1,%ebx

CharacterLen_while_78	:	
	movl	%ebp,%eax
	addl	$-17,%eax
	addl	$0,%eax
	movb	(%eax),%al
	movsbl	%al,%eax
	movl	%eax,%ebx
	cmpl	$0,%ebx
	movl	$1,%eax
	jne	CharacterLen_reltrue_79
	movl	$0,%eax
CharacterLen_reltrue_79	:	
	testl	%eax,%eax
	jz	CharacterLen_endwhile_78

	movl	-4(%ebp),%ebx
	addl	$1,%ebx
	movl	%ebx,%eax
	movl	%eax,-4(%ebp)

	movl	%ebp,%eax
	addl	$-17,%eax
	pushl	%eax
	pushl	-4(%ebp)
	movl	%ebp,%eax
	addl	$8,%eax
	movl	(%eax),%eax
	popl	%esi
	imull	$13,%esi
	addl	%esi,%eax
	popl	%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movb	(%eax),%cl
	movb	%cl,(%ebx)
	addl	$1,%eax
	addl	$1,%ebx
	jmp	CharacterLen_while_78
CharacterLen_endwhile_78	:	

	movl	-4(%ebp),%eax
	jmp	CharacterLen_ret
CharacterLen_ret	:	
	movl	%ebp,%esp
	popl	%ebp
	ret	

.globl	CharacterCpy
.type	CharacterCpy,@function
CharacterCpy	:	
	pushl	%ebp
	movl	%esp,%ebp
	subl	$17,%esp

	movl	$0,-4(%ebp)

	movl	%ebp,%eax
	addl	$-17,%eax
	pushl	%eax
	pushl	-4(%ebp)
	movl	%ebp,%eax
	addl	$12,%eax
	movl	(%eax),%eax
	popl	%esi
	imull	$13,%esi
	addl	%esi,%eax
	popl	%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movb	(%eax),%cl
	movb	%cl,(%ebx)
	addl	$1,%eax
	addl	$1,%ebx

CharacterCpy_while_80	:	
	movl	%ebp,%eax
	addl	$-17,%eax
	addl	$0,%eax
	movb	(%eax),%al
	movsbl	%al,%eax
	movl	%eax,%ebx
	cmpl	$0,%ebx
	movl	$1,%eax
	jne	CharacterCpy_reltrue_81
	movl	$0,%eax
CharacterCpy_reltrue_81	:	
	testl	%eax,%eax
	jz	CharacterCpy_endwhile_80

	pushl	-4(%ebp)
	movl	%ebp,%eax
	addl	$8,%eax
	movl	(%eax),%eax
	popl	%esi
	imull	$13,%esi
	addl	%esi,%eax
	pushl	%eax
	pushl	-4(%ebp)
	movl	%ebp,%eax
	addl	$12,%eax
	movl	(%eax),%eax
	popl	%esi
	imull	$13,%esi
	addl	%esi,%eax
	popl	%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movb	(%eax),%cl
	movb	%cl,(%ebx)
	addl	$1,%eax
	addl	$1,%ebx

	movl	-4(%ebp),%ebx
	addl	$1,%ebx
	movl	%ebx,%eax
	movl	%eax,-4(%ebp)

	movl	%ebp,%eax
	addl	$-17,%eax
	pushl	%eax
	pushl	-4(%ebp)
	movl	%ebp,%eax
	addl	$12,%eax
	movl	(%eax),%eax
	popl	%esi
	imull	$13,%esi
	addl	%esi,%eax
	popl	%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movb	(%eax),%cl
	movb	%cl,(%ebx)
	addl	$1,%eax
	addl	$1,%ebx
	jmp	CharacterCpy_while_80
CharacterCpy_endwhile_80	:	

	pushl	-4(%ebp)
	movl	%ebp,%eax
	addl	$8,%eax
	movl	(%eax),%eax
	popl	%esi
	imull	$13,%esi
	addl	%esi,%eax
	pushl	%eax
	pushl	-4(%ebp)
	movl	%ebp,%eax
	addl	$12,%eax
	movl	(%eax),%eax
	popl	%esi
	imull	$13,%esi
	addl	%esi,%eax
	popl	%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movb	(%eax),%cl
	movb	%cl,(%ebx)
	addl	$1,%eax
	addl	$1,%ebx

	movl	$0,%eax
	jmp	CharacterCpy_ret
CharacterCpy_ret	:	
	movl	%ebp,%esp
	popl	%ebp
	ret	

.globl	CharacterCat
.type	CharacterCat,@function
CharacterCat	:	
	pushl	%ebp
	movl	%esp,%ebp
	subl	$21,%esp

	movl	$0,-4(%ebp)

	movl	%ebp,%eax
	addl	$-21,%eax
	pushl	%eax
	pushl	-4(%ebp)
	movl	%ebp,%eax
	addl	$8,%eax
	movl	(%eax),%eax
	popl	%esi
	imull	$13,%esi
	addl	%esi,%eax
	popl	%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movb	(%eax),%cl
	movb	%cl,(%ebx)
	addl	$1,%eax
	addl	$1,%ebx

CharacterCat_while_82	:	
	movl	%ebp,%eax
	addl	$-21,%eax
	addl	$0,%eax
	movb	(%eax),%al
	movsbl	%al,%eax
	movl	%eax,%ebx
	cmpl	$0,%ebx
	movl	$1,%eax
	jne	CharacterCat_reltrue_83
	movl	$0,%eax
CharacterCat_reltrue_83	:	
	testl	%eax,%eax
	jz	CharacterCat_endwhile_82

	movl	-4(%ebp),%ebx
	addl	$1,%ebx
	movl	%ebx,%eax
	movl	%eax,-4(%ebp)

	movl	%ebp,%eax
	addl	$-21,%eax
	pushl	%eax
	pushl	-4(%ebp)
	movl	%ebp,%eax
	addl	$8,%eax
	movl	(%eax),%eax
	popl	%esi
	imull	$13,%esi
	addl	%esi,%eax
	popl	%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movb	(%eax),%cl
	movb	%cl,(%ebx)
	addl	$1,%eax
	addl	$1,%ebx
	jmp	CharacterCat_while_82
CharacterCat_endwhile_82	:	

	movl	$0,-8(%ebp)

	movl	%ebp,%eax
	addl	$-21,%eax
	pushl	%eax
	pushl	-8(%ebp)
	movl	%ebp,%eax
	addl	$12,%eax
	movl	(%eax),%eax
	popl	%esi
	imull	$13,%esi
	addl	%esi,%eax
	popl	%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movb	(%eax),%cl
	movb	%cl,(%ebx)
	addl	$1,%eax
	addl	$1,%ebx

CharacterCat_while_84	:	
	movl	%ebp,%eax
	addl	$-21,%eax
	addl	$0,%eax
	movb	(%eax),%al
	movsbl	%al,%eax
	movl	%eax,%ebx
	cmpl	$0,%ebx
	movl	$1,%eax
	jne	CharacterCat_reltrue_85
	movl	$0,%eax
CharacterCat_reltrue_85	:	
	testl	%eax,%eax
	jz	CharacterCat_endwhile_84

	pushl	-4(%ebp)
	movl	%ebp,%eax
	addl	$8,%eax
	movl	(%eax),%eax
	popl	%esi
	imull	$13,%esi
	addl	%esi,%eax
	pushl	%eax
	pushl	-8(%ebp)
	movl	%ebp,%eax
	addl	$12,%eax
	movl	(%eax),%eax
	popl	%esi
	imull	$13,%esi
	addl	%esi,%eax
	popl	%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movb	(%eax),%cl
	movb	%cl,(%ebx)
	addl	$1,%eax
	addl	$1,%ebx

	movl	-4(%ebp),%ebx
	addl	$1,%ebx
	movl	%ebx,%eax
	movl	%eax,-4(%ebp)

	movl	-8(%ebp),%ebx
	addl	$1,%ebx
	movl	%ebx,%eax
	movl	%eax,-8(%ebp)

	movl	%ebp,%eax
	addl	$-21,%eax
	pushl	%eax
	pushl	-8(%ebp)
	movl	%ebp,%eax
	addl	$12,%eax
	movl	(%eax),%eax
	popl	%esi
	imull	$13,%esi
	addl	%esi,%eax
	popl	%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movb	(%eax),%cl
	movb	%cl,(%ebx)
	addl	$1,%eax
	addl	$1,%ebx
	jmp	CharacterCat_while_84
CharacterCat_endwhile_84	:	

	pushl	-4(%ebp)
	movl	%ebp,%eax
	addl	$8,%eax
	movl	(%eax),%eax
	popl	%esi
	imull	$13,%esi
	addl	%esi,%eax
	pushl	%eax
	pushl	-8(%ebp)
	movl	%ebp,%eax
	addl	$12,%eax
	movl	(%eax),%eax
	popl	%esi
	imull	$13,%esi
	addl	%esi,%eax
	popl	%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movb	(%eax),%cl
	movb	%cl,(%ebx)
	addl	$1,%eax
	addl	$1,%ebx

	movl	$0,%eax
	jmp	CharacterCat_ret
CharacterCat_ret	:	
	movl	%ebp,%esp
	popl	%ebp
	ret	

.globl	isMacroDefined
.type	isMacroDefined,@function
isMacroDefined	:	
	pushl	%ebp
	movl	%esp,%ebp
	subl	$4,%esp

	subl	$4,%esp
	movl	%ebp,%eax
	addl	$8,%eax
	movl	(%eax),%eax
	addl	$13944,%eax
	movl	%eax,0(%esp)
	call	Get_Front_Of_DefinesList
	addl	$4,%esp
	movl	%eax,-4(%ebp)

isMacroDefined_while_86	:	
	movl	-4(%ebp),%ebx
	cmpl	$0,%ebx
	movl	$1,%eax
	jne	isMacroDefined_reltrue_87
	movl	$0,%eax
isMacroDefined_reltrue_87	:	
	testl	%eax,%eax
	jz	isMacroDefined_endwhile_86

	subl	$8,%esp
	movl	12(%ebp),%eax
	movl	%eax,0(%esp)
	movl	%ebp,%eax
	addl	$-4,%eax
	movl	(%eax),%eax
	addl	$0,%eax
	movl	%eax,4(%esp)
	call	CharacterCmp
	addl	$8,%esp
	movl	%eax,%ebx
	cmpl	$0,%ebx
	movl	$1,%eax
	je	isMacroDefined_reltrue_89
	movl	$0,%eax
isMacroDefined_reltrue_89	:	
	testl	%eax,%eax
	jnz	isMacroDefined_ifbl_88
	jmp	isMacroDefined_elsebl_88
isMacroDefined_ifbl_88	:	

	movl	$1,%eax
	jmp	isMacroDefined_ret
isMacroDefined_elsebl_88	:	
isMacroDefined_endif_88	:	

	subl	$4,%esp
	movl	-4(%ebp),%eax
	movl	%eax,0(%esp)
	call	Get_Next_In_DefinesList
	addl	$4,%esp
	movl	%eax,-4(%ebp)
	jmp	isMacroDefined_while_86
isMacroDefined_endwhile_86	:	

	movl	$0,%eax
	jmp	isMacroDefined_ret
isMacroDefined_ret	:	
	movl	%ebp,%esp
	popl	%ebp
	ret	

.globl	getNextIdentifier
.type	getNextIdentifier,@function
getNextIdentifier	:	
	pushl	%ebp
	movl	%esp,%ebp
	subl	$17,%esp

	movl	$0,-4(%ebp)

	movl	%ebp,%eax
	addl	$-17,%eax
	pushl	%eax
	movl	%ebp,%eax
	addl	$16,%eax
	movl	(%eax),%eax
	addl	$6660,%eax
	movl	(%eax),%eax
	pushl	%eax
	movl	%ebp,%eax
	addl	$16,%eax
	movl	(%eax),%eax
	addl	$0,%eax
	popl	%esi
	imull	$13,%esi
	addl	%esi,%eax
	popl	%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movb	(%eax),%cl
	movb	%cl,(%ebx)
	addl	$1,%eax
	addl	$1,%ebx

getNextIdentifier_while_90	:	
	movl	-4(%ebp),%ebx
	cmpl	12(%ebp),%ebx
	movl	$1,%eax
	jl	getNextIdentifier_reltrue_91
	movl	$0,%eax
getNextIdentifier_reltrue_91	:	
	testl	%eax,%eax
	jz	getNextIdentifier_endwhile_90

	movl	-4(%ebp),%ebx
	cmpl	$0,%ebx
	movl	$1,%eax
	je	getNextIdentifier_reltrue_93
	movl	$0,%eax
getNextIdentifier_reltrue_93	:	
	testl	%eax,%eax
	jnz	getNextIdentifier_ifbl_92
	jmp	getNextIdentifier_elsebl_92
getNextIdentifier_ifbl_92	:	

	subl	$4,%esp
	movl	%ebp,%eax
	addl	$-17,%eax
	addl	$0,%eax
	movb	(%eax),%al
	movsbl	%al,%eax
	movl	%eax,0(%esp)
	call	isalpha
	addl	$4,%esp
	movl	%eax,%ebx
	cmpl	$0,%ebx
	movl	$1,%eax
	je	getNextIdentifier_reltrue_96
	movl	$0,%eax
getNextIdentifier_reltrue_96	:	
	testl	%eax,%eax
	jz	getNextIdentifier_logtermfalse_95
	movl	%ebp,%eax
	addl	$-17,%eax
	addl	$0,%eax
	movb	(%eax),%al
	movsbl	%al,%eax
	movl	%eax,%ebx
	cmpl	$95,%ebx
	movl	$1,%eax
	jne	getNextIdentifier_reltrue_97
	movl	$0,%eax
getNextIdentifier_reltrue_97	:	
	testl	%eax,%eax
	jz	getNextIdentifier_logtermfalse_95
	movl	$1,%eax
	jmp	getNextIdentifier_logtermtrue_95
getNextIdentifier_logtermfalse_95	:	
	movl	$0,%eax
getNextIdentifier_logtermtrue_95	:	
	testl	%eax,%eax
	jnz	getNextIdentifier_ifbl_94
	jmp	getNextIdentifier_elsebl_94
getNextIdentifier_ifbl_94	:	

	movl	$1,%eax
	jmp	getNextIdentifier_ret
getNextIdentifier_elsebl_94	:	
getNextIdentifier_endif_94	:	
	jmp	getNextIdentifier_endif_92
getNextIdentifier_elsebl_92	:	

	subl	$4,%esp
	movl	%ebp,%eax
	addl	$-17,%eax
	addl	$0,%eax
	movb	(%eax),%al
	movsbl	%al,%eax
	movl	%eax,0(%esp)
	call	isalnum
	addl	$4,%esp
	movl	%eax,%ebx
	cmpl	$0,%ebx
	movl	$1,%eax
	je	getNextIdentifier_reltrue_100
	movl	$0,%eax
getNextIdentifier_reltrue_100	:	
	testl	%eax,%eax
	jz	getNextIdentifier_logtermfalse_99
	movl	%ebp,%eax
	addl	$-17,%eax
	addl	$0,%eax
	movb	(%eax),%al
	movsbl	%al,%eax
	movl	%eax,%ebx
	cmpl	$95,%ebx
	movl	$1,%eax
	jne	getNextIdentifier_reltrue_101
	movl	$0,%eax
getNextIdentifier_reltrue_101	:	
	testl	%eax,%eax
	jz	getNextIdentifier_logtermfalse_99
	movl	$1,%eax
	jmp	getNextIdentifier_logtermtrue_99
getNextIdentifier_logtermfalse_99	:	
	movl	$0,%eax
getNextIdentifier_logtermtrue_99	:	
	testl	%eax,%eax
	jnz	getNextIdentifier_ifbl_98
	jmp	getNextIdentifier_elsebl_98
getNextIdentifier_ifbl_98	:	
	jmp	getNextIdentifier_endwhile_90
getNextIdentifier_elsebl_98	:	
getNextIdentifier_endif_98	:	
getNextIdentifier_endif_92	:	

	pushl	-4(%ebp)
	movl	%ebp,%eax
	addl	$8,%eax
	movl	(%eax),%eax
	popl	%esi
	imull	$13,%esi
	addl	%esi,%eax
	pushl	%eax
	movl	%ebp,%eax
	addl	$16,%eax
	movl	(%eax),%eax
	addl	$6660,%eax
	movl	(%eax),%eax
	pushl	%eax
	movl	%ebp,%eax
	addl	$16,%eax
	movl	(%eax),%eax
	addl	$0,%eax
	popl	%esi
	imull	$13,%esi
	addl	%esi,%eax
	popl	%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movb	(%eax),%cl
	movb	%cl,(%ebx)
	addl	$1,%eax
	addl	$1,%ebx

	movl	%ebp,%eax
	addl	$16,%eax
	movl	(%eax),%eax
	addl	$6660,%eax
	pushl	%eax
	movl	%ebp,%eax
	addl	$16,%eax
	movl	(%eax),%eax
	addl	$6660,%eax
	movl	(%eax),%eax
	movl	%eax,%ebx
	addl	$1,%ebx
	movl	%ebx,%eax
	popl	%ebx
	movl	%eax,(%ebx)

	movl	-4(%ebp),%ebx
	addl	$1,%ebx
	movl	%ebx,%eax
	movl	%eax,-4(%ebp)

	movl	%ebp,%eax
	addl	$-17,%eax
	pushl	%eax
	movl	%ebp,%eax
	addl	$16,%eax
	movl	(%eax),%eax
	addl	$6660,%eax
	movl	(%eax),%eax
	pushl	%eax
	movl	%ebp,%eax
	addl	$16,%eax
	movl	(%eax),%eax
	addl	$0,%eax
	popl	%esi
	imull	$13,%esi
	addl	%esi,%eax
	popl	%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movb	(%eax),%cl
	movb	%cl,(%ebx)
	addl	$1,%eax
	addl	$1,%ebx
	jmp	getNextIdentifier_while_90
getNextIdentifier_endwhile_90	:	

	movl	$0,%eax
	jmp	getNextIdentifier_ret
getNextIdentifier_ret	:	
	movl	%ebp,%esp
	popl	%ebp
	ret	

.globl	getNextParamValue
.type	getNextParamValue,@function
getNextParamValue	:	
	pushl	%ebp
	movl	%esp,%ebp
	subl	$38,%esp

	movl	$0,-4(%ebp)

	movl	$0,-8(%ebp)

	movl	$0,-12(%ebp)

	movl	%ebp,%eax
	addl	$-25,%eax
	pushl	%eax
	movl	%ebp,%eax
	addl	$16,%eax
	movl	(%eax),%eax
	addl	$6660,%eax
	movl	(%eax),%eax
	pushl	%eax
	movl	%ebp,%eax
	addl	$16,%eax
	movl	(%eax),%eax
	addl	$0,%eax
	popl	%esi
	imull	$13,%esi
	addl	%esi,%eax
	popl	%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movb	(%eax),%cl
	movb	%cl,(%ebx)
	addl	$1,%eax
	addl	$1,%ebx

	movl	%ebp,%eax
	addl	$-38,%eax
	pushl	%eax
	movl	%ebp,%eax
	addl	$16,%eax
	movl	(%eax),%eax
	addl	$6660,%eax
	movl	(%eax),%eax
	movl	%eax,%ebx
	subl	$1,%ebx
	movl	%ebx,%eax
	pushl	%eax
	movl	%ebp,%eax
	addl	$16,%eax
	movl	(%eax),%eax
	addl	$0,%eax
	popl	%esi
	imull	$13,%esi
	addl	%esi,%eax
	popl	%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movb	(%eax),%cl
	movb	%cl,(%ebx)
	addl	$1,%eax
	addl	$1,%ebx

getNextParamValue_while_102	:	
	movl	-4(%ebp),%ebx
	cmpl	12(%ebp),%ebx
	movl	$1,%eax
	jl	getNextParamValue_reltrue_103
	movl	$0,%eax
getNextParamValue_reltrue_103	:	
	testl	%eax,%eax
	jz	getNextParamValue_endwhile_102

	movl	-8(%ebp),%ebx
	cmpl	$0,%ebx
	movl	$1,%eax
	je	getNextParamValue_reltrue_106
	movl	$0,%eax
getNextParamValue_reltrue_106	:	
	testl	%eax,%eax
	jz	getNextParamValue_logtermfalse_105
	movl	-12(%ebp),%ebx
	cmpl	$0,%ebx
	movl	$1,%eax
	je	getNextParamValue_reltrue_107
	movl	$0,%eax
getNextParamValue_reltrue_107	:	
	testl	%eax,%eax
	jz	getNextParamValue_logtermfalse_105
	movl	$1,%eax
	jmp	getNextParamValue_logtermtrue_105
getNextParamValue_logtermfalse_105	:	
	movl	$0,%eax
getNextParamValue_logtermtrue_105	:	
	testl	%eax,%eax
	jnz	getNextParamValue_ifbl_104
	jmp	getNextParamValue_elsebl_104
getNextParamValue_ifbl_104	:	

	movl	%ebp,%eax
	addl	$-25,%eax
	addl	$0,%eax
	movb	(%eax),%al
	movsbl	%al,%eax
	movl	%eax,%ebx
	cmpl	$41,%ebx
	movl	$1,%eax
	je	getNextParamValue_reltrue_109
	movl	$0,%eax
getNextParamValue_reltrue_109	:	
	testl	%eax,%eax
	jnz	getNextParamValue_ifbl_108
	jmp	getNextParamValue_elsebl_108
getNextParamValue_ifbl_108	:	
	jmp	getNextParamValue_endwhile_102
getNextParamValue_elsebl_108	:	
getNextParamValue_endif_108	:	

	movl	%ebp,%eax
	addl	$-25,%eax
	addl	$0,%eax
	movb	(%eax),%al
	movsbl	%al,%eax
	movl	%eax,%ebx
	cmpl	$44,%ebx
	movl	$1,%eax
	je	getNextParamValue_reltrue_111
	movl	$0,%eax
getNextParamValue_reltrue_111	:	
	testl	%eax,%eax
	jnz	getNextParamValue_ifbl_110
	jmp	getNextParamValue_elsebl_110
getNextParamValue_ifbl_110	:	
	jmp	getNextParamValue_endwhile_102
getNextParamValue_elsebl_110	:	
getNextParamValue_endif_110	:	
	jmp	getNextParamValue_endif_104
getNextParamValue_elsebl_104	:	
getNextParamValue_endif_104	:	

	movl	%ebp,%eax
	addl	$-25,%eax
	addl	$0,%eax
	movb	(%eax),%al
	movsbl	%al,%eax
	movl	%eax,%ebx
	cmpl	$34,%ebx
	movl	$1,%eax
	je	getNextParamValue_reltrue_113
	movl	$0,%eax
getNextParamValue_reltrue_113	:	
	testl	%eax,%eax
	jnz	getNextParamValue_ifbl_112
	jmp	getNextParamValue_elsebl_112
getNextParamValue_ifbl_112	:	

	movl	%ebp,%eax
	addl	$-38,%eax
	addl	$0,%eax
	movb	(%eax),%al
	movsbl	%al,%eax
	movl	%eax,%ebx
	cmpl	$92,%ebx
	movl	$1,%eax
	jne	getNextParamValue_reltrue_115
	movl	$0,%eax
getNextParamValue_reltrue_115	:	
	testl	%eax,%eax
	jnz	getNextParamValue_ifbl_114
	jmp	getNextParamValue_elsebl_114
getNextParamValue_ifbl_114	:	

	movl	-8(%ebp),%ebx
	cmpl	$1,%ebx
	movl	$1,%eax
	je	getNextParamValue_reltrue_117
	movl	$0,%eax
getNextParamValue_reltrue_117	:	
	testl	%eax,%eax
	jnz	getNextParamValue_ifbl_116
	jmp	getNextParamValue_elsebl_116
getNextParamValue_ifbl_116	:	

	movl	$0,-8(%ebp)
	jmp	getNextParamValue_endif_116
getNextParamValue_elsebl_116	:	

	movl	$1,-8(%ebp)
getNextParamValue_endif_116	:	
	jmp	getNextParamValue_endif_114
getNextParamValue_elsebl_114	:	
getNextParamValue_endif_114	:	
	jmp	getNextParamValue_endif_112
getNextParamValue_elsebl_112	:	
getNextParamValue_endif_112	:	

	movl	%ebp,%eax
	addl	$-25,%eax
	addl	$0,%eax
	movb	(%eax),%al
	movsbl	%al,%eax
	movl	%eax,%ebx
	cmpl	$40,%ebx
	movl	$1,%eax
	je	getNextParamValue_reltrue_119
	movl	$0,%eax
getNextParamValue_reltrue_119	:	
	testl	%eax,%eax
	jnz	getNextParamValue_ifbl_118
	jmp	getNextParamValue_elsebl_118
getNextParamValue_ifbl_118	:	

	movl	-12(%ebp),%ebx
	addl	$1,%ebx
	movl	%ebx,%eax
	movl	%eax,-12(%ebp)
	jmp	getNextParamValue_endif_118
getNextParamValue_elsebl_118	:	
getNextParamValue_endif_118	:	

	movl	%ebp,%eax
	addl	$-25,%eax
	addl	$0,%eax
	movb	(%eax),%al
	movsbl	%al,%eax
	movl	%eax,%ebx
	cmpl	$41,%ebx
	movl	$1,%eax
	je	getNextParamValue_reltrue_121
	movl	$0,%eax
getNextParamValue_reltrue_121	:	
	testl	%eax,%eax
	jnz	getNextParamValue_ifbl_120
	jmp	getNextParamValue_elsebl_120
getNextParamValue_ifbl_120	:	

	movl	-12(%ebp),%ebx
	subl	$1,%ebx
	movl	%ebx,%eax
	movl	%eax,-12(%ebp)
	jmp	getNextParamValue_endif_120
getNextParamValue_elsebl_120	:	
getNextParamValue_endif_120	:	

	pushl	-4(%ebp)
	movl	%ebp,%eax
	addl	$8,%eax
	movl	(%eax),%eax
	popl	%esi
	imull	$13,%esi
	addl	%esi,%eax
	pushl	%eax
	movl	%ebp,%eax
	addl	$16,%eax
	movl	(%eax),%eax
	addl	$6660,%eax
	movl	(%eax),%eax
	pushl	%eax
	movl	%ebp,%eax
	addl	$16,%eax
	movl	(%eax),%eax
	addl	$0,%eax
	popl	%esi
	imull	$13,%esi
	addl	%esi,%eax
	popl	%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movb	(%eax),%cl
	movb	%cl,(%ebx)
	addl	$1,%eax
	addl	$1,%ebx

	movl	%ebp,%eax
	addl	$16,%eax
	movl	(%eax),%eax
	addl	$6660,%eax
	pushl	%eax
	movl	%ebp,%eax
	addl	$16,%eax
	movl	(%eax),%eax
	addl	$6660,%eax
	movl	(%eax),%eax
	movl	%eax,%ebx
	addl	$1,%ebx
	movl	%ebx,%eax
	popl	%ebx
	movl	%eax,(%ebx)

	movl	-4(%ebp),%ebx
	addl	$1,%ebx
	movl	%ebx,%eax
	movl	%eax,-4(%ebp)

	movl	%ebp,%eax
	addl	$-25,%eax
	pushl	%eax
	movl	%ebp,%eax
	addl	$16,%eax
	movl	(%eax),%eax
	addl	$6660,%eax
	movl	(%eax),%eax
	pushl	%eax
	movl	%ebp,%eax
	addl	$16,%eax
	movl	(%eax),%eax
	addl	$0,%eax
	popl	%esi
	imull	$13,%esi
	addl	%esi,%eax
	popl	%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movb	(%eax),%cl
	movb	%cl,(%ebx)
	addl	$1,%eax
	addl	$1,%ebx

	movl	%ebp,%eax
	addl	$-38,%eax
	pushl	%eax
	movl	%ebp,%eax
	addl	$16,%eax
	movl	(%eax),%eax
	addl	$6660,%eax
	movl	(%eax),%eax
	movl	%eax,%ebx
	subl	$1,%ebx
	movl	%ebx,%eax
	pushl	%eax
	movl	%ebp,%eax
	addl	$16,%eax
	movl	(%eax),%eax
	addl	$0,%eax
	popl	%esi
	imull	$13,%esi
	addl	%esi,%eax
	popl	%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movb	(%eax),%cl
	movb	%cl,(%ebx)
	addl	$1,%eax
	addl	$1,%ebx
	jmp	getNextParamValue_while_102
getNextParamValue_endwhile_102	:	

	movl	$0,%eax
	jmp	getNextParamValue_ret
getNextParamValue_ret	:	
	movl	%ebp,%esp
	popl	%ebp
	ret	

.globl	parseParametersList
.type	parseParametersList,@function
parseParametersList	:	
	pushl	%ebp
	movl	%esp,%ebp
	subl	$25,%esp

	subl	$4,%esp
	movl	12(%ebp),%eax
	movl	%eax,0(%esp)
	call	Clear_ParametersList
	addl	$4,%esp

	subl	$4,%esp
	movl	16(%ebp),%eax
	movl	%eax,0(%esp)
	call	disposeWhitespace
	addl	$4,%esp

	movl	%ebp,%eax
	addl	$-25,%eax
	pushl	%eax
	movl	%ebp,%eax
	addl	$16,%eax
	movl	(%eax),%eax
	addl	$6660,%eax
	movl	(%eax),%eax
	pushl	%eax
	movl	%ebp,%eax
	addl	$16,%eax
	movl	(%eax),%eax
	addl	$0,%eax
	popl	%esi
	imull	$13,%esi
	addl	%esi,%eax
	popl	%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movb	(%eax),%cl
	movb	%cl,(%ebx)
	addl	$1,%eax
	addl	$1,%ebx

	movl	%ebp,%eax
	addl	$-25,%eax
	addl	$0,%eax
	movb	(%eax),%al
	movsbl	%al,%eax
	movl	%eax,%ebx
	cmpl	$40,%ebx
	movl	$1,%eax
	jne	parseParametersList_reltrue_123
	movl	$0,%eax
parseParametersList_reltrue_123	:	
	testl	%eax,%eax
	jnz	parseParametersList_ifbl_122
	jmp	parseParametersList_elsebl_122
parseParametersList_ifbl_122	:	

	movl	$0,%eax
	jmp	parseParametersList_ret
parseParametersList_elsebl_122	:	
parseParametersList_endif_122	:	

	movl	%ebp,%eax
	addl	$16,%eax
	movl	(%eax),%eax
	addl	$6660,%eax
	pushl	%eax
	movl	%ebp,%eax
	addl	$16,%eax
	movl	(%eax),%eax
	addl	$6660,%eax
	movl	(%eax),%eax
	movl	%eax,%ebx
	addl	$1,%ebx
	movl	%ebx,%eax
	popl	%ebx
	movl	%eax,(%ebx)

	movl	$1,-4(%ebp)

parseParametersList_while_124	:	
	movl	%ebp,%eax
	addl	$16,%eax
	movl	(%eax),%eax
	addl	$6660,%eax
	movl	(%eax),%eax
	pushl	%eax
	movl	%ebp,%eax
	addl	$16,%eax
	movl	(%eax),%eax
	addl	$6656,%eax
	movl	(%eax),%eax
	popl	%ebx
	cmpl	%eax,%ebx
	movl	$1,%eax
	jl	parseParametersList_reltrue_125
	movl	$0,%eax
parseParametersList_reltrue_125	:	
	testl	%eax,%eax
	jz	parseParametersList_endwhile_124

	subl	$4,%esp
	movl	16(%ebp),%eax
	movl	%eax,0(%esp)
	call	disposeWhitespace
	addl	$4,%esp

	movl	%ebp,%eax
	addl	$-25,%eax
	pushl	%eax
	movl	%ebp,%eax
	addl	$16,%eax
	movl	(%eax),%eax
	addl	$6660,%eax
	movl	(%eax),%eax
	pushl	%eax
	movl	%ebp,%eax
	addl	$16,%eax
	movl	(%eax),%eax
	addl	$0,%eax
	popl	%esi
	imull	$13,%esi
	addl	%esi,%eax
	popl	%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movb	(%eax),%cl
	movb	%cl,(%ebx)
	addl	$1,%eax
	addl	$1,%ebx

	movl	%ebp,%eax
	addl	$-25,%eax
	addl	$0,%eax
	movb	(%eax),%al
	movsbl	%al,%eax
	movl	%eax,%ebx
	cmpl	$41,%ebx
	movl	$1,%eax
	je	parseParametersList_reltrue_127
	movl	$0,%eax
parseParametersList_reltrue_127	:	
	testl	%eax,%eax
	jnz	parseParametersList_ifbl_126
	jmp	parseParametersList_elsebl_126
parseParametersList_ifbl_126	:	
	jmp	parseParametersList_endwhile_124
parseParametersList_elsebl_126	:	
parseParametersList_endif_126	:	

	subl	$4,%esp
	movl	16(%ebp),%eax
	movl	%eax,0(%esp)
	call	disposeWhitespace
	addl	$4,%esp

	movl	%ebp,%eax
	addl	$-25,%eax
	pushl	%eax
	movl	%ebp,%eax
	addl	$16,%eax
	movl	(%eax),%eax
	addl	$6660,%eax
	movl	(%eax),%eax
	pushl	%eax
	movl	%ebp,%eax
	addl	$16,%eax
	movl	(%eax),%eax
	addl	$0,%eax
	popl	%esi
	imull	$13,%esi
	addl	%esi,%eax
	popl	%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movb	(%eax),%cl
	movb	%cl,(%ebx)
	addl	$1,%eax
	addl	$1,%ebx

	movl	-4(%ebp),%ebx
	cmpl	$1,%ebx
	movl	$1,%eax
	je	parseParametersList_reltrue_130
	movl	$0,%eax
parseParametersList_reltrue_130	:	
	testl	%eax,%eax
	jnz	parseParametersList_logexprtrue_129
	movl	%ebp,%eax
	addl	$-25,%eax
	addl	$0,%eax
	movb	(%eax),%al
	movsbl	%al,%eax
	movl	%eax,%ebx
	cmpl	$44,%ebx
	movl	$1,%eax
	je	parseParametersList_reltrue_131
	movl	$0,%eax
parseParametersList_reltrue_131	:	
	testl	%eax,%eax
	jnz	parseParametersList_logexprtrue_129
	movl	$0,%eax
	jmp	parseParametersList_logexprfalse_129
parseParametersList_logexprtrue_129	:	
	movl	$1,%eax
parseParametersList_logexprfalse_129	:	
	testl	%eax,%eax
	jnz	parseParametersList_ifbl_128
	jmp	parseParametersList_elsebl_128
parseParametersList_ifbl_128	:	

	movl	%ebp,%eax
	addl	$-25,%eax
	addl	$0,%eax
	movb	(%eax),%al
	movsbl	%al,%eax
	movl	%eax,%ebx
	cmpl	$44,%ebx
	movl	$1,%eax
	je	parseParametersList_reltrue_133
	movl	$0,%eax
parseParametersList_reltrue_133	:	
	testl	%eax,%eax
	jnz	parseParametersList_ifbl_132
	jmp	parseParametersList_elsebl_132
parseParametersList_ifbl_132	:	

	movl	%ebp,%eax
	addl	$16,%eax
	movl	(%eax),%eax
	addl	$6660,%eax
	pushl	%eax
	movl	%ebp,%eax
	addl	$16,%eax
	movl	(%eax),%eax
	addl	$6660,%eax
	movl	(%eax),%eax
	movl	%eax,%ebx
	addl	$1,%ebx
	movl	%ebx,%eax
	popl	%ebx
	movl	%eax,(%ebx)
	jmp	parseParametersList_endif_132
parseParametersList_elsebl_132	:	
parseParametersList_endif_132	:	

	movl	$0,-4(%ebp)

	subl	$4,%esp
	movl	$1672,0(%esp)
	call	malloc
	addl	$4,%esp
	movl	%eax,-12(%ebp)

	movl	-12(%ebp),%ebx
	cmpl	$0,%ebx
	movl	$1,%eax
	je	parseParametersList_reltrue_135
	movl	$0,%eax
parseParametersList_reltrue_135	:	
	testl	%eax,%eax
	jnz	parseParametersList_ifbl_134
	jmp	parseParametersList_elsebl_134
parseParametersList_ifbl_134	:	

	subl	$16,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	$symtab+166,4(%esp)
	movl	16(%ebp),%eax
	movl	%eax,8(%esp)
	movl	$2,12(%esp)
	call	preproc_reportError
	addl	$16,%esp

	movl	$0,%ebx
	subl	$10002,%ebx
	movl	%ebx,%eax
	jmp	parseParametersList_ret
parseParametersList_elsebl_134	:	
parseParametersList_endif_134	:	

	subl	$12,%esp
	movl	-12(%ebp),%eax
	movl	%eax,0(%esp)
	movl	$0,4(%esp)
	movl	$1672,8(%esp)
	call	memset
	addl	$12,%esp

	subl	$4,%esp
	movl	16(%ebp),%eax
	movl	%eax,0(%esp)
	call	disposeWhitespace
	addl	$4,%esp
	jmp	parseParametersList_endif_128
parseParametersList_elsebl_128	:	
parseParametersList_endif_128	:	

	subl	$12,%esp
	movl	%ebp,%eax
	addl	$-12,%eax
	movl	(%eax),%eax
	addl	$0,%eax
	movl	%eax,0(%esp)
	movl	$0,4(%esp)
	movl	$13,%ebx
	imull	$64,%ebx
	movl	%ebx,%eax
	movl	%eax,8(%esp)
	call	memset
	addl	$12,%esp

	movl	$0,-8(%ebp)

	movl	20(%ebp),%ebx
	cmpl	$1,%ebx
	movl	$1,%eax
	je	parseParametersList_reltrue_137
	movl	$0,%eax
parseParametersList_reltrue_137	:	
	testl	%eax,%eax
	jnz	parseParametersList_ifbl_136
	jmp	parseParametersList_elsebl_136
parseParametersList_ifbl_136	:	

	subl	$12,%esp
	movl	%ebp,%eax
	addl	$-12,%eax
	movl	(%eax),%eax
	addl	$0,%eax
	movl	%eax,0(%esp)
	movl	$64,4(%esp)
	movl	16(%ebp),%eax
	movl	%eax,8(%esp)
	call	getNextIdentifier
	addl	$12,%esp
	movl	%eax,-8(%ebp)
	jmp	parseParametersList_endif_136
parseParametersList_elsebl_136	:	

	subl	$12,%esp
	movl	%ebp,%eax
	addl	$-12,%eax
	movl	(%eax),%eax
	addl	$0,%eax
	movl	%eax,0(%esp)
	movl	$64,4(%esp)
	movl	16(%ebp),%eax
	movl	%eax,8(%esp)
	call	getNextParamValue
	addl	$12,%esp
	movl	%eax,-8(%ebp)
parseParametersList_endif_136	:	

	movl	-8(%ebp),%ebx
	cmpl	$0,%ebx
	movl	$1,%eax
	jne	parseParametersList_reltrue_139
	movl	$0,%eax
parseParametersList_reltrue_139	:	
	testl	%eax,%eax
	jnz	parseParametersList_ifbl_138
	jmp	parseParametersList_elsebl_138
parseParametersList_ifbl_138	:	

	subl	$16,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	$symtab+196,4(%esp)
	movl	16(%ebp),%eax
	movl	%eax,8(%esp)
	movl	$1,12(%esp)
	call	preproc_reportError
	addl	$16,%esp

	movl	$0,%ebx
	subl	$10506,%ebx
	movl	%ebx,%eax
	jmp	parseParametersList_ret
parseParametersList_elsebl_138	:	
parseParametersList_endif_138	:	

	subl	$8,%esp
	movl	12(%ebp),%eax
	movl	%eax,0(%esp)
	movl	-12(%ebp),%eax
	movl	%eax,4(%esp)
	call	Add_To_Front_Of_ParametersList
	addl	$8,%esp
	jmp	parseParametersList_while_124
parseParametersList_endwhile_124	:	

	movl	%ebp,%eax
	addl	$-25,%eax
	pushl	%eax
	movl	%ebp,%eax
	addl	$16,%eax
	movl	(%eax),%eax
	addl	$6660,%eax
	movl	(%eax),%eax
	pushl	%eax
	movl	%ebp,%eax
	addl	$16,%eax
	movl	(%eax),%eax
	addl	$0,%eax
	popl	%esi
	imull	$13,%esi
	addl	%esi,%eax
	popl	%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movb	(%eax),%cl
	movb	%cl,(%ebx)
	addl	$1,%eax
	addl	$1,%ebx

	movl	%ebp,%eax
	addl	$-25,%eax
	addl	$0,%eax
	movb	(%eax),%al
	movsbl	%al,%eax
	movl	%eax,%ebx
	cmpl	$41,%ebx
	movl	$1,%eax
	jne	parseParametersList_reltrue_141
	movl	$0,%eax
parseParametersList_reltrue_141	:	
	testl	%eax,%eax
	jnz	parseParametersList_ifbl_140
	jmp	parseParametersList_elsebl_140
parseParametersList_ifbl_140	:	

	subl	$16,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	$symtab+254,4(%esp)
	movl	16(%ebp),%eax
	movl	%eax,8(%esp)
	movl	$1,12(%esp)
	call	preproc_reportError
	addl	$16,%esp

	movl	$0,%ebx
	subl	$10506,%ebx
	movl	%ebx,%eax
	jmp	parseParametersList_ret
parseParametersList_elsebl_140	:	

	movl	%ebp,%eax
	addl	$16,%eax
	movl	(%eax),%eax
	addl	$6660,%eax
	pushl	%eax
	movl	%ebp,%eax
	addl	$16,%eax
	movl	(%eax),%eax
	addl	$6660,%eax
	movl	(%eax),%eax
	movl	%eax,%ebx
	addl	$1,%ebx
	movl	%ebx,%eax
	popl	%ebx
	movl	%eax,(%ebx)
parseParametersList_endif_140	:	

	movl	$0,%eax
	jmp	parseParametersList_ret
parseParametersList_ret	:	
	movl	%ebp,%esp
	popl	%ebp
	ret	

.section	.data
symtab	:	
.string	"PREPROC_WARNING: %s "
.string	"PREPROC_ERROR: %s "
.string	"[%s:"
.string	"%d:"
.string	"%d] {"
.string	"[ERR filename:%d:"
.string	"%c"
.string	"}"
.string	"PREPROC_WARNING%s "
.string	":"
.string	"PREPROC_ERROR%s "
.string	""
.string	"prevstage_getNextChar failed"
.string	"Sourceline too long"
.string	"Could not allocate new memory"
.string	"Found invalid formated macro statement (check parameters)"
.string	"Found invalid macro statement..."
