# gas-assembler code generated by HrwCC

.section .text
	#debug: func-def: ( preproc * instance ) 
.globl commstage_init
.type commstage_init, @function
commstage_init:
	pushl	%ebp
	movl	%esp, %ebp
	subl	$0, %esp


	#debug: func-call: initLine ( & instance -> commstage ) 
	subl	$4, %esp
	movl	%ebp, %eax
	addl	$8, %eax
	movl	(%eax), %eax
	addl	$592, %eax
	movl	%eax, 0(%esp)
	call	initLine
	addl	$4, %esp
	#debug: return: return 0 ; 
	movl	$0, %eax
	jmp	commstage_init_ret


commstage_init_ret:
	movl	%ebp, %esp
	popl	%ebp
	ret




	#debug: func-def: ( preproc * instance ) 
.globl commstage_destroy
.type commstage_destroy, @function
commstage_destroy:
	pushl	%ebp
	movl	%esp, %ebp
	subl	$0, %esp


	#debug: return: return 0 ; 
	movl	$0, %eax
	jmp	commstage_destroy_ret


commstage_destroy_ret:
	movl	%ebp, %esp
	popl	%ebp
	ret




	#debug: func-def: ( preproc * instance , Character * next ) 
.globl commstage_getNext
.type commstage_getNext, @function
commstage_getNext:
	pushl	%ebp
	movl	%esp, %ebp
	subl	$34, %esp


	#debug: assignment: next -> value = '\0' ; 
	movl	%ebp, %eax
	addl	$12, %eax
	movl	(%eax), %eax
	addl	$0, %eax
	pushl	%eax
	popl	%ebx
	movb	$0, (%ebx)
	#debug: while: next -> value == '\0' 
commstage_getNext_while_0:
	movl	%ebp, %eax
	addl	$12, %eax
	movl	(%eax), %eax
	addl	$0, %eax
	movb	(%eax), %al
	movsbl	%al, %eax
	pushl	%eax
	popl	%ebx
	cmpl	$0, %ebx
	movl	$1, %eax
	je	commstage_getNext_reltrue_1
	movl	$0, %eax
commstage_getNext_reltrue_1:
	testl	%eax, %eax
	jz	commstage_getNext_endwhile_0

	#debug: assignment: line = & instance -> commstage ; 
	movl	%ebp, %eax
	addl	$8, %eax
	movl	(%eax), %eax
	addl	$592, %eax
	movl	%eax, -34(%ebp)
	#debug: if: line -> pos == line -> length 
	movl	%ebp, %eax
	addl	$-34, %eax
	movl	(%eax), %eax
	addl	$6660, %eax
	movl	(%eax), %eax
	pushl	%eax
	movl	%ebp, %eax
	addl	$-34, %eax
	movl	(%eax), %eax
	addl	$6656, %eax
	movl	(%eax), %eax
	popl	%ebx
	cmpl	%eax, %ebx
	movl	$1, %eax
	je	commstage_getNext_reltrue_3
	movl	$0, %eax
commstage_getNext_reltrue_3:
	testl	%eax, %eax
	jnz	commstage_getNext_ifbl_2
	jmp	commstage_getNext_elsebl_2
commstage_getNext_ifbl_2:
	#debug: assignment: result = getNextLine ( instance , 1 , & instance -> commstage ) ; 
	subl	$12, %esp
	movl	8(%ebp), %eax
	movl	%eax, 0(%esp)
	movl	$1, 4(%esp)
	movl	%ebp, %eax
	addl	$8, %eax
	movl	(%eax), %eax
	addl	$592, %eax
	movl	%eax, 8(%esp)
	call	getNextLine
	addl	$12, %esp
	movl	%eax, -4(%ebp)
	#debug: if: result != 0 
	pushl	-4(%ebp)
	popl	%ebx
	cmpl	$0, %ebx
	movl	$1, %eax
	jne	commstage_getNext_reltrue_5
	movl	$0, %eax
commstage_getNext_reltrue_5:
	testl	%eax, %eax
	jnz	commstage_getNext_ifbl_4
	jmp	commstage_getNext_elsebl_4
commstage_getNext_ifbl_4:
	#debug: return: return result ; 
	movl	-4(%ebp), %eax
	jmp	commstage_getNext_ret
	jmp	commstage_getNext_endif_4

commstage_getNext_elsebl_4:

commstage_getNext_endif_4:

	jmp	commstage_getNext_endif_2

commstage_getNext_elsebl_2:

commstage_getNext_endif_2:

	#debug: func-call: updateLineProperties ( & instance -> commstage ) 
	subl	$4, %esp
	movl	%ebp, %eax
	addl	$8, %eax
	movl	(%eax), %eax
	addl	$592, %eax
	movl	%eax, 0(%esp)
	call	updateLineProperties
	addl	$4, %esp
	#debug: if: line -> posInString == 0 
	movl	%ebp, %eax
	addl	$-34, %eax
	movl	(%eax), %eax
	addl	$6664, %eax
	movl	(%eax), %eax
	pushl	%eax
	popl	%ebx
	cmpl	$0, %ebx
	movl	$1, %eax
	je	commstage_getNext_reltrue_7
	movl	$0, %eax
commstage_getNext_reltrue_7:
	testl	%eax, %eax
	jnz	commstage_getNext_ifbl_6
	jmp	commstage_getNext_elsebl_6
commstage_getNext_ifbl_6:
	#debug: assignment: c1 = line -> buffer [ line -> pos ] ; 
	movl	%ebp, %eax
	addl	$-17, %eax
	pushl	%eax
	movl	%ebp, %eax
	addl	$-34, %eax
	movl	(%eax), %eax
	addl	$6660, %eax
	movl	(%eax), %eax
	pushl	%eax
	movl	%ebp, %eax
	addl	$-34, %eax
	movl	(%eax), %eax
	addl	$0, %eax
	popl	%esi
	imull	$13, %esi
	addl	%esi, %eax
	popl	%ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movb	(%eax), %cl
	movb	%cl, (%ebx)
	addl	$1, %eax
	addl	$1, %ebx
	#debug: assignment: c2 = line -> buffer [ line -> pos + 1 ] ; 
	movl	%ebp, %eax
	addl	$-30, %eax
	pushl	%eax
	movl	%ebp, %eax
	addl	$-34, %eax
	movl	(%eax), %eax
	addl	$6660, %eax
	movl	(%eax), %eax
	pushl	%eax
	popl	%ebx
	addl	$1, %ebx
	pushl	%ebx
	popl	%eax
	pushl	%eax
	movl	%ebp, %eax
	addl	$-34, %eax
	movl	(%eax), %eax
	addl	$0, %eax
	popl	%esi
	imull	$13, %esi
	addl	%esi, %eax
	popl	%ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movb	(%eax), %cl
	movb	%cl, (%ebx)
	addl	$1, %eax
	addl	$1, %ebx
	#debug: if: c1 . value == '/' && c2 . value == '/' 
	movl	%ebp, %eax
	addl	$-17, %eax
	addl	$0, %eax
	movb	(%eax), %al
	movsbl	%al, %eax
	pushl	%eax
	popl	%ebx
	cmpl	$47, %ebx
	movl	$1, %eax
	je	commstage_getNext_reltrue_10
	movl	$0, %eax
commstage_getNext_reltrue_10:
	testl	%eax, %eax
	jz	commstage_getNext_logtermfalse_9
	movl	%ebp, %eax
	addl	$-30, %eax
	addl	$0, %eax
	movb	(%eax), %al
	movsbl	%al, %eax
	pushl	%eax
	popl	%ebx
	cmpl	$47, %ebx
	movl	$1, %eax
	je	commstage_getNext_reltrue_11
	movl	$0, %eax
commstage_getNext_reltrue_11:
	testl	%eax, %eax
	jz	commstage_getNext_logtermfalse_9
	movl	$1, %eax
	jmp	commstage_getNext_logtermtrue_9
commstage_getNext_logtermfalse_9:
	movl	$0, %eax
commstage_getNext_logtermtrue_9:
	testl	%eax, %eax
	jnz	commstage_getNext_ifbl_8
	jmp	commstage_getNext_elsebl_8
commstage_getNext_ifbl_8:
	#debug: assignment: line -> pos = line -> length - 1 ; 
	movl	%ebp, %eax
	addl	$-34, %eax
	movl	(%eax), %eax
	addl	$6660, %eax
	pushl	%eax
	movl	%ebp, %eax
	addl	$-34, %eax
	movl	(%eax), %eax
	addl	$6656, %eax
	movl	(%eax), %eax
	pushl	%eax
	popl	%ebx
	subl	$1, %ebx
	pushl	%ebx
	popl	%eax
	popl	%ebx
	movl	%eax, (%ebx)
	jmp	commstage_getNext_endif_8

commstage_getNext_elsebl_8:

	#debug: if: c1 . value == '/' && c2 . value == '*' 
	movl	%ebp, %eax
	addl	$-17, %eax
	addl	$0, %eax
	movb	(%eax), %al
	movsbl	%al, %eax
	pushl	%eax
	popl	%ebx
	cmpl	$47, %ebx
	movl	$1, %eax
	je	commstage_getNext_reltrue_14
	movl	$0, %eax
commstage_getNext_reltrue_14:
	testl	%eax, %eax
	jz	commstage_getNext_logtermfalse_13
	movl	%ebp, %eax
	addl	$-30, %eax
	addl	$0, %eax
	movb	(%eax), %al
	movsbl	%al, %eax
	pushl	%eax
	popl	%ebx
	cmpl	$42, %ebx
	movl	$1, %eax
	je	commstage_getNext_reltrue_15
	movl	$0, %eax
commstage_getNext_reltrue_15:
	testl	%eax, %eax
	jz	commstage_getNext_logtermfalse_13
	movl	$1, %eax
	jmp	commstage_getNext_logtermtrue_13
commstage_getNext_logtermfalse_13:
	movl	$0, %eax
commstage_getNext_logtermtrue_13:
	testl	%eax, %eax
	jnz	commstage_getNext_ifbl_12
	jmp	commstage_getNext_elsebl_12
commstage_getNext_ifbl_12:
	#debug: assignment: line -> pos = line -> pos + 1 ; 
	movl	%ebp, %eax
	addl	$-34, %eax
	movl	(%eax), %eax
	addl	$6660, %eax
	pushl	%eax
	movl	%ebp, %eax
	addl	$-34, %eax
	movl	(%eax), %eax
	addl	$6660, %eax
	movl	(%eax), %eax
	pushl	%eax
	popl	%ebx
	addl	$1, %ebx
	pushl	%ebx
	popl	%eax
	popl	%ebx
	movl	%eax, (%ebx)
	#debug: while: line -> pos < line -> length 
commstage_getNext_while_16:
	movl	%ebp, %eax
	addl	$-34, %eax
	movl	(%eax), %eax
	addl	$6660, %eax
	movl	(%eax), %eax
	pushl	%eax
	movl	%ebp, %eax
	addl	$-34, %eax
	movl	(%eax), %eax
	addl	$6656, %eax
	movl	(%eax), %eax
	popl	%ebx
	cmpl	%eax, %ebx
	movl	$1, %eax
	jl	commstage_getNext_reltrue_17
	movl	$0, %eax
commstage_getNext_reltrue_17:
	testl	%eax, %eax
	jz	commstage_getNext_endwhile_16

	#debug: assignment: c1 = line -> buffer [ line -> pos ] ; 
	movl	%ebp, %eax
	addl	$-17, %eax
	pushl	%eax
	movl	%ebp, %eax
	addl	$-34, %eax
	movl	(%eax), %eax
	addl	$6660, %eax
	movl	(%eax), %eax
	pushl	%eax
	movl	%ebp, %eax
	addl	$-34, %eax
	movl	(%eax), %eax
	addl	$0, %eax
	popl	%esi
	imull	$13, %esi
	addl	%esi, %eax
	popl	%ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movb	(%eax), %cl
	movb	%cl, (%ebx)
	addl	$1, %eax
	addl	$1, %ebx
	#debug: assignment: c2 = line -> buffer [ line -> pos + 1 ] ; 
	movl	%ebp, %eax
	addl	$-30, %eax
	pushl	%eax
	movl	%ebp, %eax
	addl	$-34, %eax
	movl	(%eax), %eax
	addl	$6660, %eax
	movl	(%eax), %eax
	pushl	%eax
	popl	%ebx
	addl	$1, %ebx
	pushl	%ebx
	popl	%eax
	pushl	%eax
	movl	%ebp, %eax
	addl	$-34, %eax
	movl	(%eax), %eax
	addl	$0, %eax
	popl	%esi
	imull	$13, %esi
	addl	%esi, %eax
	popl	%ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movb	(%eax), %cl
	movb	%cl, (%ebx)
	addl	$1, %eax
	addl	$1, %ebx
	#debug: if: c1 . value == '*' && c2 . value == '/' 
	movl	%ebp, %eax
	addl	$-17, %eax
	addl	$0, %eax
	movb	(%eax), %al
	movsbl	%al, %eax
	pushl	%eax
	popl	%ebx
	cmpl	$42, %ebx
	movl	$1, %eax
	je	commstage_getNext_reltrue_20
	movl	$0, %eax
commstage_getNext_reltrue_20:
	testl	%eax, %eax
	jz	commstage_getNext_logtermfalse_19
	movl	%ebp, %eax
	addl	$-30, %eax
	addl	$0, %eax
	movb	(%eax), %al
	movsbl	%al, %eax
	pushl	%eax
	popl	%ebx
	cmpl	$47, %ebx
	movl	$1, %eax
	je	commstage_getNext_reltrue_21
	movl	$0, %eax
commstage_getNext_reltrue_21:
	testl	%eax, %eax
	jz	commstage_getNext_logtermfalse_19
	movl	$1, %eax
	jmp	commstage_getNext_logtermtrue_19
commstage_getNext_logtermfalse_19:
	movl	$0, %eax
commstage_getNext_logtermtrue_19:
	testl	%eax, %eax
	jnz	commstage_getNext_ifbl_18
	jmp	commstage_getNext_elsebl_18
commstage_getNext_ifbl_18:
	#debug: assignment: line -> pos = line -> pos + 2 ; 
	movl	%ebp, %eax
	addl	$-34, %eax
	movl	(%eax), %eax
	addl	$6660, %eax
	pushl	%eax
	movl	%ebp, %eax
	addl	$-34, %eax
	movl	(%eax), %eax
	addl	$6660, %eax
	movl	(%eax), %eax
	pushl	%eax
	popl	%ebx
	addl	$2, %ebx
	pushl	%ebx
	popl	%eax
	popl	%ebx
	movl	%eax, (%ebx)
	jmp	commstage_getNext_endwhile_16
	jmp	commstage_getNext_endif_18

commstage_getNext_elsebl_18:

commstage_getNext_endif_18:

	#debug: assignment: line -> pos = line -> pos + 1 ; 
	movl	%ebp, %eax
	addl	$-34, %eax
	movl	(%eax), %eax
	addl	$6660, %eax
	pushl	%eax
	movl	%ebp, %eax
	addl	$-34, %eax
	movl	(%eax), %eax
	addl	$6660, %eax
	movl	(%eax), %eax
	pushl	%eax
	popl	%ebx
	addl	$1, %ebx
	pushl	%ebx
	popl	%eax
	popl	%ebx
	movl	%eax, (%ebx)
	#debug: if: line -> pos == line -> length 
	movl	%ebp, %eax
	addl	$-34, %eax
	movl	(%eax), %eax
	addl	$6660, %eax
	movl	(%eax), %eax
	pushl	%eax
	movl	%ebp, %eax
	addl	$-34, %eax
	movl	(%eax), %eax
	addl	$6656, %eax
	movl	(%eax), %eax
	popl	%ebx
	cmpl	%eax, %ebx
	movl	$1, %eax
	je	commstage_getNext_reltrue_23
	movl	$0, %eax
commstage_getNext_reltrue_23:
	testl	%eax, %eax
	jnz	commstage_getNext_ifbl_22
	jmp	commstage_getNext_elsebl_22
commstage_getNext_ifbl_22:
	#debug: assignment: result = getNextLine ( instance , 1 , & instance -> commstage ) ; 
	subl	$12, %esp
	movl	8(%ebp), %eax
	movl	%eax, 0(%esp)
	movl	$1, 4(%esp)
	movl	%ebp, %eax
	addl	$8, %eax
	movl	(%eax), %eax
	addl	$592, %eax
	movl	%eax, 8(%esp)
	call	getNextLine
	addl	$12, %esp
	movl	%eax, -4(%ebp)
	#debug: if: result != 0 
	pushl	-4(%ebp)
	popl	%ebx
	cmpl	$0, %ebx
	movl	$1, %eax
	jne	commstage_getNext_reltrue_25
	movl	$0, %eax
commstage_getNext_reltrue_25:
	testl	%eax, %eax
	jnz	commstage_getNext_ifbl_24
	jmp	commstage_getNext_elsebl_24
commstage_getNext_ifbl_24:
	#debug: return: return result ; 
	movl	-4(%ebp), %eax
	jmp	commstage_getNext_ret
	jmp	commstage_getNext_endif_24

commstage_getNext_elsebl_24:

commstage_getNext_endif_24:

	jmp	commstage_getNext_endif_22

commstage_getNext_elsebl_22:

commstage_getNext_endif_22:

	jmp	commstage_getNext_while_16
commstage_getNext_endwhile_16:

	jmp	commstage_getNext_endif_12

commstage_getNext_elsebl_12:

commstage_getNext_endif_12:

commstage_getNext_endif_8:

	jmp	commstage_getNext_endif_6

commstage_getNext_elsebl_6:

commstage_getNext_endif_6:

	#debug: assignment: * next = line -> buffer [ line -> pos ] ; 
	movl	%ebp, %eax
	addl	$12, %eax
	movl	(%eax), %eax
	pushl	%eax
	movl	%ebp, %eax
	addl	$-34, %eax
	movl	(%eax), %eax
	addl	$6660, %eax
	movl	(%eax), %eax
	pushl	%eax
	movl	%ebp, %eax
	addl	$-34, %eax
	movl	(%eax), %eax
	addl	$0, %eax
	popl	%esi
	imull	$13, %esi
	addl	%esi, %eax
	popl	%ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movb	(%eax), %cl
	movb	%cl, (%ebx)
	addl	$1, %eax
	addl	$1, %ebx
	#debug: assignment: line -> pos = line -> pos + 1 ; 
	movl	%ebp, %eax
	addl	$-34, %eax
	movl	(%eax), %eax
	addl	$6660, %eax
	pushl	%eax
	movl	%ebp, %eax
	addl	$-34, %eax
	movl	(%eax), %eax
	addl	$6660, %eax
	movl	(%eax), %eax
	pushl	%eax
	popl	%ebx
	addl	$1, %ebx
	pushl	%ebx
	popl	%eax
	popl	%ebx
	movl	%eax, (%ebx)
	jmp	commstage_getNext_while_0
commstage_getNext_endwhile_0:

	#debug: return: return 0 ; 
	movl	$0, %eax
	jmp	commstage_getNext_ret


commstage_getNext_ret:
	movl	%ebp, %esp
	popl	%ebp
	ret




# The symbol table 

.section .data
symtab:

