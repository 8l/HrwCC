
.section	.text

.globl	codegen_reportError
.type	codegen_reportError,@function
codegen_reportError	:	
	pushl	%ebp
	movl	%esp,%ebp
	subl	$4,%esp

	movl	%ebp,%eax
	addl	$8,%eax
	movl	(%eax),%eax
	addl	$4,%eax
	pushl	%eax
	movl	%ebp,%eax
	addl	$8,%eax
	movl	(%eax),%eax
	addl	$4,%eax
	movl	(%eax),%eax
	movl	%eax,%ebx
	addl	$1,%ebx
	movl	%ebx,%eax
	popl	%ebx
	movl	%eax,(%ebx)

	subl	$8,%esp
	movl	%ebp,%eax
	addl	$8,%eax
	movl	(%eax),%eax
	addl	$20,%eax
	movl	(%eax),%eax
	addl	$0,%eax
	movl	(%eax),%eax
	addl	$17,%eax
	movl	(%eax),%eax
	movl	%eax,0(%esp)
	movl	%ebp,%eax
	addl	$16,%eax
	addl	$12,%eax
	movl	(%eax),%eax
	movl	%eax,4(%esp)
	call	preproc_getFilename
	addl	$8,%esp
	movl	%eax,-4(%ebp)

	subl	$8,%esp
	movl	$symtab+0,0(%esp)
	movl	%ebp,%eax
	addl	$8,%eax
	movl	(%eax),%eax
	addl	$20,%eax
	movl	(%eax),%eax
	addl	$16,%eax
	movl	(%eax),%eax
	addl	$4,%eax
	movl	(%eax),%eax
	movl	%eax,4(%esp)
	call	printf
	addl	$8,%esp

	subl	$8,%esp
	movl	$symtab+20,0(%esp)
	movl	%ebp,%eax
	addl	$8,%eax
	movl	(%eax),%eax
	addl	$20,%eax
	movl	(%eax),%eax
	addl	$16,%eax
	movl	(%eax),%eax
	addl	$8,%eax
	movl	(%eax),%eax
	movl	%eax,4(%esp)
	call	printf
	addl	$8,%esp

	movl	-4(%ebp),%eax
	testl	%eax,%eax
	jnz	codegen_reportError_ifbl_0
	jmp	codegen_reportError_elsebl_0
codegen_reportError_ifbl_0	:	

	subl	$8,%esp
	movl	$symtab+25,0(%esp)
	movl	-4(%ebp),%eax
	movl	%eax,4(%esp)
	call	printf
	addl	$8,%esp
	jmp	codegen_reportError_endif_0
codegen_reportError_elsebl_0	:	

	subl	$8,%esp
	movl	$symtab+30,0(%esp)
	movl	-4(%ebp),%eax
	movl	%eax,4(%esp)
	call	printf
	addl	$8,%esp
codegen_reportError_endif_0	:	

	subl	$8,%esp
	movl	$symtab+51,0(%esp)
	movl	%ebp,%eax
	addl	$16,%eax
	addl	$16,%eax
	movl	%eax,4(%esp)
	call	printf
	addl	$8,%esp

	subl	$8,%esp
	movl	$symtab+72,0(%esp)
	movl	12(%ebp),%eax
	movl	%eax,4(%esp)
	call	printf
	addl	$8,%esp
codegen_reportError_ret	:	
	movl	%ebp,%esp
	popl	%ebp
	ret	

.globl	codegen_reportWarning
.type	codegen_reportWarning,@function
codegen_reportWarning	:	
	pushl	%ebp
	movl	%esp,%ebp
	subl	$4,%esp

	movl	%ebp,%eax
	addl	$8,%eax
	movl	(%eax),%eax
	addl	$8,%eax
	pushl	%eax
	movl	%ebp,%eax
	addl	$8,%eax
	movl	(%eax),%eax
	addl	$8,%eax
	movl	(%eax),%eax
	movl	%eax,%ebx
	addl	$1,%ebx
	movl	%ebx,%eax
	popl	%ebx
	movl	%eax,(%ebx)

	subl	$8,%esp
	movl	%ebp,%eax
	addl	$8,%eax
	movl	(%eax),%eax
	addl	$20,%eax
	movl	(%eax),%eax
	addl	$0,%eax
	movl	(%eax),%eax
	addl	$17,%eax
	movl	(%eax),%eax
	movl	%eax,0(%esp)
	movl	%ebp,%eax
	addl	$16,%eax
	addl	$12,%eax
	movl	(%eax),%eax
	movl	%eax,4(%esp)
	call	preproc_getFilename
	addl	$8,%esp
	movl	%eax,-4(%ebp)

	subl	$8,%esp
	movl	$symtab+76,0(%esp)
	movl	12(%ebp),%eax
	movl	%eax,4(%esp)
	call	printf
	addl	$8,%esp

	subl	$8,%esp
	movl	$symtab+96,0(%esp)
	movl	%ebp,%eax
	addl	$16,%eax
	addl	$0,%eax
	movl	(%eax),%eax
	movl	%eax,4(%esp)
	call	printf
	addl	$8,%esp

	subl	$8,%esp
	movl	$symtab+109,0(%esp)
	movl	%ebp,%eax
	addl	$16,%eax
	addl	$16,%eax
	movl	%eax,4(%esp)
	call	printf
	addl	$8,%esp

	subl	$8,%esp
	movl	$symtab+114,0(%esp)
	movl	%ebp,%eax
	addl	$16,%eax
	addl	$8,%eax
	movl	(%eax),%eax
	movl	%eax,4(%esp)
	call	printf
	addl	$8,%esp

	subl	$8,%esp
	movl	$symtab+120,0(%esp)
	movl	%ebp,%eax
	addl	$16,%eax
	addl	$4,%eax
	movl	(%eax),%eax
	movl	%eax,4(%esp)
	call	printf
	addl	$8,%esp

	movl	-4(%ebp),%eax
	testl	%eax,%eax
	jnz	codegen_reportWarning_ifbl_1
	jmp	codegen_reportWarning_elsebl_1
codegen_reportWarning_ifbl_1	:	

	subl	$8,%esp
	movl	$symtab+72,0(%esp)
	movl	-4(%ebp),%eax
	movl	%eax,4(%esp)
	call	printf
	addl	$8,%esp
	jmp	codegen_reportWarning_endif_1
codegen_reportWarning_elsebl_1	:	

	subl	$4,%esp
	movl	$symtab+126,0(%esp)
	call	puts
	addl	$4,%esp
codegen_reportWarning_endif_1	:	
codegen_reportWarning_ret	:	
	movl	%ebp,%esp
	popl	%ebp
	ret	

.globl	codegen_emit
.type	codegen_emit,@function
codegen_emit	:	
	pushl	%ebp
	movl	%esp,%ebp
	subl	$4,%esp

	movl	%ebp,%eax
	addl	$8,%eax
	movl	(%eax),%eax
	addl	$0,%eax
	movl	(%eax),%eax
	movl	%eax,%ebx
	cmpl	$0,%ebx
	movl	$1,%eax
	jl	codegen_emit_reltrue_3
	movl	$0,%eax
codegen_emit_reltrue_3	:	
	testl	%eax,%eax
	jnz	codegen_emit_ifbl_2
	jmp	codegen_emit_elsebl_2
codegen_emit_ifbl_2	:	

	jmp	codegen_emit_ret
codegen_emit_elsebl_2	:	
codegen_emit_endif_2	:	

	subl	$12,%esp
	movl	%ebp,%eax
	addl	$8,%eax
	movl	(%eax),%eax
	addl	$0,%eax
	movl	(%eax),%eax
	movl	%eax,0(%esp)
	movl	12(%ebp),%eax
	movl	%eax,4(%esp)
	subl	$4,%esp
	movl	12(%ebp),%eax
	movl	%eax,0(%esp)
	call	strlen
	addl	$4,%esp
	movl	%eax,8(%esp)
	call	write
	addl	$12,%esp
	movl	%eax,-4(%ebp)

	movl	-4(%ebp),%ebx
	cmpl	$0,%ebx
	movl	$1,%eax
	jl	codegen_emit_reltrue_5
	movl	$0,%eax
codegen_emit_reltrue_5	:	
	testl	%eax,%eax
	jnz	codegen_emit_ifbl_4
	jmp	codegen_emit_elsebl_4
codegen_emit_ifbl_4	:	

	subl	$4,%esp
	movl	$symtab+142,0(%esp)
	call	puts
	addl	$4,%esp

	movl	%ebp,%eax
	addl	$8,%eax
	movl	(%eax),%eax
	addl	$4,%eax
	pushl	%eax
	movl	%ebp,%eax
	addl	$8,%eax
	movl	(%eax),%eax
	addl	$4,%eax
	movl	(%eax),%eax
	movl	%eax,%ebx
	addl	$1,%ebx
	movl	%ebx,%eax
	popl	%ebx
	movl	%eax,(%ebx)

	movl	%ebp,%eax
	addl	$8,%eax
	movl	(%eax),%eax
	addl	$0,%eax
	pushl	%eax
	movl	$0,%ebx
	subl	$1,%ebx
	movl	%ebx,%eax
	popl	%ebx
	movl	%eax,(%ebx)
	jmp	codegen_emit_endif_4
codegen_emit_elsebl_4	:	
codegen_emit_endif_4	:	
codegen_emit_ret	:	
	movl	%ebp,%esp
	popl	%ebp
	ret	

.globl	codegen_emitTree
.type	codegen_emitTree,@function
codegen_emitTree	:	
	pushl	%ebp
	movl	%esp,%ebp
	subl	$8,%esp

	movl	12(%ebp),%ebx
	cmpl	$0,%ebx
	movl	$1,%eax
	je	codegen_emitTree_reltrue_7
	movl	$0,%eax
codegen_emitTree_reltrue_7	:	
	testl	%eax,%eax
	jnz	codegen_emitTree_ifbl_6
	jmp	codegen_emitTree_elsebl_6
codegen_emitTree_ifbl_6	:	

	jmp	codegen_emitTree_ret
codegen_emitTree_elsebl_6	:	
codegen_emitTree_endif_6	:	

	movl	%ebp,%eax
	addl	$12,%eax
	movl	(%eax),%eax
	addl	$8,%eax
	addl	$0,%eax
	movl	(%eax),%eax
	movl	%eax,%ebx
	cmpl	$0,%ebx
	movl	$1,%eax
	jne	codegen_emitTree_reltrue_9
	movl	$0,%eax
codegen_emitTree_reltrue_9	:	
	testl	%eax,%eax
	jnz	codegen_emitTree_ifbl_8
	jmp	codegen_emitTree_elsebl_8
codegen_emitTree_ifbl_8	:	

	subl	$8,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	%ebp,%eax
	addl	$12,%eax
	movl	(%eax),%eax
	addl	$8,%eax
	addl	$16,%eax
	movl	%eax,4(%esp)
	call	codegen_emit
	addl	$8,%esp

	subl	$8,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	$symtab+186,4(%esp)
	call	codegen_emit
	addl	$8,%esp
	jmp	codegen_emitTree_endif_8
codegen_emitTree_elsebl_8	:	
codegen_emitTree_endif_8	:	

	subl	$4,%esp
	movl	12(%ebp),%eax
	movl	%eax,0(%esp)
	call	syntax_CountChilds
	addl	$4,%esp
	movl	%eax,-8(%ebp)

	movl	$0,-4(%ebp)

codegen_emitTree_while_10	:	
	movl	-4(%ebp),%ebx
	cmpl	-8(%ebp),%ebx
	movl	$1,%eax
	jl	codegen_emitTree_reltrue_11
	movl	$0,%eax
codegen_emitTree_reltrue_11	:	
	testl	%eax,%eax
	jz	codegen_emitTree_endwhile_10

	subl	$8,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	subl	$8,%esp
	movl	12(%ebp),%eax
	movl	%eax,0(%esp)
	movl	-4(%ebp),%eax
	movl	%eax,4(%esp)
	call	syntax_GetChild
	addl	$8,%esp
	movl	%eax,4(%esp)
	call	codegen_emitTree
	addl	$8,%esp

	movl	-4(%ebp),%ebx
	addl	$1,%ebx
	movl	%ebx,%eax
	movl	%eax,-4(%ebp)
	jmp	codegen_emitTree_while_10
codegen_emitTree_endwhile_10	:	
codegen_emitTree_ret	:	
	movl	%ebp,%esp
	popl	%ebp
	ret	

.globl	codegen_debug
.type	codegen_debug,@function
codegen_debug	:	
	pushl	%ebp
	movl	%esp,%ebp
	subl	$0,%esp

	movl	%ebp,%eax
	addl	$8,%eax
	movl	(%eax),%eax
	addl	$12,%eax
	movl	(%eax),%eax
	testl	%eax,%eax
	movl	$1,%eax
	jz	codegen_debug_logfactfalse_13
	movl	$0,%eax
codegen_debug_logfactfalse_13	:	
	testl	%eax,%eax
	jnz	codegen_debug_ifbl_12
	jmp	codegen_debug_elsebl_12
codegen_debug_ifbl_12	:	

	jmp	codegen_debug_ret
codegen_debug_elsebl_12	:	
codegen_debug_endif_12	:	

	subl	$8,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	$symtab+188,4(%esp)
	call	codegen_emit
	addl	$8,%esp

	subl	$8,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	12(%ebp),%eax
	movl	%eax,4(%esp)
	call	codegen_emit
	addl	$8,%esp

	subl	$8,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	16(%ebp),%eax
	movl	%eax,4(%esp)
	call	codegen_emitTree
	addl	$8,%esp

	subl	$8,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	$symtab+198,4(%esp)
	call	codegen_emit
	addl	$8,%esp
codegen_debug_ret	:	
	movl	%ebp,%esp
	popl	%ebp
	ret	

.globl	codegen_CreateCodeGen
.type	codegen_CreateCodeGen,@function
codegen_CreateCodeGen	:	
	pushl	%ebp
	movl	%esp,%ebp
	subl	$0,%esp

	movl	%ebp,%eax
	addl	$8,%eax
	movl	(%eax),%eax
	addl	$4,%eax
	movl	%eax,%ebx
	movl	$0,(%ebx)

	movl	%ebp,%eax
	addl	$8,%eax
	movl	(%eax),%eax
	addl	$8,%eax
	movl	%eax,%ebx
	movl	$0,(%ebx)

	movl	%ebp,%eax
	addl	$8,%eax
	movl	(%eax),%eax
	addl	$0,%eax
	pushl	%eax
	movl	12(%ebp),%eax
	popl	%ebx
	movl	%eax,(%ebx)

	movl	%ebp,%eax
	addl	$8,%eax
	movl	(%eax),%eax
	addl	$20,%eax
	pushl	%eax
	movl	16(%ebp),%eax
	popl	%ebx
	movl	%eax,(%ebx)

	movl	%ebp,%eax
	addl	$8,%eax
	movl	(%eax),%eax
	addl	$12,%eax
	movl	%eax,%ebx
	movl	$0,(%ebx)

	movl	%ebp,%eax
	addl	$8,%eax
	movl	(%eax),%eax
	addl	$16,%eax
	movl	%eax,%ebx
	movl	$0,(%ebx)

	movl	%ebp,%eax
	addl	$8,%eax
	movl	(%eax),%eax
	addl	$24,%eax
	movl	%eax,%ebx
	movl	$0,(%ebx)

	movl	%ebp,%eax
	addl	$8,%eax
	movl	(%eax),%eax
	addl	$28,%eax
	pushl	%eax
	movl	$0,%ebx
	subl	$1,%ebx
	movl	%ebx,%eax
	popl	%ebx
	movl	%eax,(%ebx)

	subl	$8,%esp
	movl	%ebp,%eax
	addl	$8,%eax
	movl	(%eax),%eax
	addl	$32,%eax
	addl	$16,%eax
	movl	%eax,0(%esp)
	movl	$symtab+200,4(%esp)
	call	strcpy
	addl	$8,%esp
codegen_CreateCodeGen_ret	:	
	movl	%ebp,%esp
	popl	%ebp
	ret	

.globl	codegen_EmitAvoidConstant
.type	codegen_EmitAvoidConstant,@function
codegen_EmitAvoidConstant	:	
	pushl	%ebp
	movl	%esp,%ebp
	subl	$0,%esp

	pushl	$0
	movl	%ebp,%eax
	addl	$12,%eax
	movl	(%eax),%eax
	popl	%esi
	addl	%esi,%eax
	movb	(%eax),%al
	movsbl	%al,%eax
	movl	%eax,%ebx
	cmpl	$36,%ebx
	movl	$1,%eax
	je	codegen_EmitAvoidConstant_reltrue_15
	movl	$0,%eax
codegen_EmitAvoidConstant_reltrue_15	:	
	testl	%eax,%eax
	jnz	codegen_EmitAvoidConstant_ifbl_14
	jmp	codegen_EmitAvoidConstant_elsebl_14
codegen_EmitAvoidConstant_ifbl_14	:	

	subl	$8,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	$symtab+201,4(%esp)
	call	codegen_emit
	addl	$8,%esp

	subl	$8,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	12(%ebp),%eax
	movl	%eax,4(%esp)
	call	codegen_emit
	addl	$8,%esp

	subl	$8,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	$symtab+208,4(%esp)
	call	codegen_emit
	addl	$8,%esp

	subl	$8,%esp
	movl	12(%ebp),%eax
	movl	%eax,0(%esp)
	movl	$symtab+216,4(%esp)
	call	strcpy
	addl	$8,%esp
	jmp	codegen_EmitAvoidConstant_endif_14
codegen_EmitAvoidConstant_elsebl_14	:	
codegen_EmitAvoidConstant_endif_14	:	
codegen_EmitAvoidConstant_ret	:	
	movl	%ebp,%esp
	popl	%ebp
	ret	

.globl	codegen_EmitAvoidIndirect
.type	codegen_EmitAvoidIndirect,@function
codegen_EmitAvoidIndirect	:	
	pushl	%ebp
	movl	%esp,%ebp
	subl	$0,%esp

	pushl	$0
	movl	%ebp,%eax
	addl	$12,%eax
	movl	(%eax),%eax
	popl	%esi
	addl	%esi,%eax
	movb	(%eax),%al
	movsbl	%al,%eax
	movl	%eax,%ebx
	cmpl	$37,%ebx
	movl	$1,%eax
	jne	codegen_EmitAvoidIndirect_reltrue_18
	movl	$0,%eax
codegen_EmitAvoidIndirect_reltrue_18	:	
	testl	%eax,%eax
	jz	codegen_EmitAvoidIndirect_logtermfalse_17
	pushl	$0
	movl	%ebp,%eax
	addl	$12,%eax
	movl	(%eax),%eax
	popl	%esi
	addl	%esi,%eax
	movb	(%eax),%al
	movsbl	%al,%eax
	movl	%eax,%ebx
	cmpl	$36,%ebx
	movl	$1,%eax
	jne	codegen_EmitAvoidIndirect_reltrue_19
	movl	$0,%eax
codegen_EmitAvoidIndirect_reltrue_19	:	
	testl	%eax,%eax
	jz	codegen_EmitAvoidIndirect_logtermfalse_17
	movl	$1,%eax
	jmp	codegen_EmitAvoidIndirect_logtermtrue_17
codegen_EmitAvoidIndirect_logtermfalse_17	:	
	movl	$0,%eax
codegen_EmitAvoidIndirect_logtermtrue_17	:	
	testl	%eax,%eax
	jnz	codegen_EmitAvoidIndirect_ifbl_16
	jmp	codegen_EmitAvoidIndirect_elsebl_16
codegen_EmitAvoidIndirect_ifbl_16	:	

	subl	$4,%esp
	movl	16(%ebp),%eax
	movl	%eax,0(%esp)
	call	type_IsByteSized
	addl	$4,%esp
	testl	%eax,%eax
	jnz	codegen_EmitAvoidIndirect_ifbl_20
	jmp	codegen_EmitAvoidIndirect_elsebl_20
codegen_EmitAvoidIndirect_ifbl_20	:	

	subl	$8,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	$symtab+221,4(%esp)
	call	codegen_emit
	addl	$8,%esp
	jmp	codegen_EmitAvoidIndirect_endif_20
codegen_EmitAvoidIndirect_elsebl_20	:	

	subl	$8,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	$symtab+201,4(%esp)
	call	codegen_emit
	addl	$8,%esp
codegen_EmitAvoidIndirect_endif_20	:	

	subl	$8,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	12(%ebp),%eax
	movl	%eax,4(%esp)
	call	codegen_emit
	addl	$8,%esp

	subl	$4,%esp
	movl	16(%ebp),%eax
	movl	%eax,0(%esp)
	call	type_IsByteSized
	addl	$4,%esp
	testl	%eax,%eax
	jnz	codegen_EmitAvoidIndirect_ifbl_21
	jmp	codegen_EmitAvoidIndirect_elsebl_21
codegen_EmitAvoidIndirect_ifbl_21	:	

	subl	$8,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	$symtab+228,4(%esp)
	call	codegen_emit
	addl	$8,%esp

	subl	$8,%esp
	movl	12(%ebp),%eax
	movl	%eax,0(%esp)
	movl	$symtab+235,4(%esp)
	call	strcpy
	addl	$8,%esp
	jmp	codegen_EmitAvoidIndirect_endif_21
codegen_EmitAvoidIndirect_elsebl_21	:	

	subl	$8,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	$symtab+208,4(%esp)
	call	codegen_emit
	addl	$8,%esp

	subl	$8,%esp
	movl	12(%ebp),%eax
	movl	%eax,0(%esp)
	movl	$symtab+216,4(%esp)
	call	strcpy
	addl	$8,%esp
codegen_EmitAvoidIndirect_endif_21	:	
	jmp	codegen_EmitAvoidIndirect_endif_16
codegen_EmitAvoidIndirect_elsebl_16	:	
codegen_EmitAvoidIndirect_endif_16	:	
codegen_EmitAvoidIndirect_ret	:	
	movl	%ebp,%esp
	popl	%ebp
	ret	

.globl	codegen_EmitProgrammStart
.type	codegen_EmitProgrammStart,@function
codegen_EmitProgrammStart	:	
	pushl	%ebp
	movl	%esp,%ebp
	subl	$0,%esp

	subl	$8,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	$symtab+239,4(%esp)
	call	codegen_emit
	addl	$8,%esp

	subl	$8,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	$symtab+281,4(%esp)
	call	codegen_emit
	addl	$8,%esp

	movl	$0,%eax
	jmp	codegen_EmitProgrammStart_ret
codegen_EmitProgrammStart_ret	:	
	movl	%ebp,%esp
	popl	%ebp
	ret	

.globl	codegen_EmitSymboltable
.type	codegen_EmitSymboltable,@function
codegen_EmitSymboltable	:	
	pushl	%ebp
	movl	%esp,%ebp
	subl	$180,%esp

	subl	$8,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	$symtab+297,4(%esp)
	call	codegen_emit
	addl	$8,%esp

	subl	$8,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	$symtab+319,4(%esp)
	call	codegen_emit
	addl	$8,%esp

	subl	$8,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	$symtab+335,4(%esp)
	call	codegen_emit
	addl	$8,%esp

	movl	$0,-164(%ebp)

	subl	$4,%esp
	movl	%ebp,%eax
	addl	$8,%eax
	movl	(%eax),%eax
	addl	$20,%eax
	movl	(%eax),%eax
	addl	$4,%eax
	movl	(%eax),%eax
	movl	%eax,0(%esp)
	call	symbol_ClearNonGlobalVariables
	addl	$4,%esp

	subl	$4,%esp
	movl	%ebp,%eax
	addl	$8,%eax
	movl	(%eax),%eax
	addl	$20,%eax
	movl	(%eax),%eax
	addl	$4,%eax
	movl	(%eax),%eax
	movl	%eax,0(%esp)
	call	symbol_CountEntries
	addl	$4,%esp
	movl	%eax,-168(%ebp)

codegen_EmitSymboltable_while_22	:	
	movl	-164(%ebp),%ebx
	cmpl	-168(%ebp),%ebx
	movl	$1,%eax
	jl	codegen_EmitSymboltable_reltrue_23
	movl	$0,%eax
codegen_EmitSymboltable_reltrue_23	:	
	testl	%eax,%eax
	jz	codegen_EmitSymboltable_endwhile_22

	subl	$8,%esp
	movl	%ebp,%eax
	addl	$8,%eax
	movl	(%eax),%eax
	addl	$20,%eax
	movl	(%eax),%eax
	addl	$4,%eax
	movl	(%eax),%eax
	movl	%eax,0(%esp)
	movl	-164(%ebp),%eax
	movl	%eax,4(%esp)
	call	symbol_GetEntry
	addl	$8,%esp
	movl	%eax,-172(%ebp)

	movl	%ebp,%eax
	addl	$-172,%eax
	movl	(%eax),%eax
	addl	$148,%eax
	movl	(%eax),%eax
	movl	%eax,-176(%ebp)

	movl	%ebp,%eax
	addl	$-172,%eax
	movl	(%eax),%eax
	addl	$144,%eax
	movl	(%eax),%eax
	movl	%eax,%ebx
	cmpl	$7,%ebx
	movl	$1,%eax
	je	codegen_EmitSymboltable_reltrue_25
	movl	$0,%eax
codegen_EmitSymboltable_reltrue_25	:	
	testl	%eax,%eax
	jnz	codegen_EmitSymboltable_ifbl_24
	jmp	codegen_EmitSymboltable_elsebl_24
codegen_EmitSymboltable_ifbl_24	:	

	subl	$8,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	$symtab+344,4(%esp)
	call	codegen_emit
	addl	$8,%esp

	subl	$8,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	%ebp,%eax
	addl	$-176,%eax
	movl	(%eax),%eax
	addl	$8,%eax
	addl	$16,%eax
	movl	%eax,4(%esp)
	call	codegen_emit
	addl	$8,%esp

	subl	$8,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	$symtab+198,4(%esp)
	call	codegen_emit
	addl	$8,%esp
	jmp	codegen_EmitSymboltable_endif_24
codegen_EmitSymboltable_elsebl_24	:	
codegen_EmitSymboltable_endif_24	:	

	movl	%ebp,%eax
	addl	$-172,%eax
	movl	(%eax),%eax
	addl	$144,%eax
	movl	(%eax),%eax
	movl	%eax,%ebx
	cmpl	$5,%ebx
	movl	$1,%eax
	je	codegen_EmitSymboltable_reltrue_27
	movl	$0,%eax
codegen_EmitSymboltable_reltrue_27	:	
	testl	%eax,%eax
	jnz	codegen_EmitSymboltable_ifbl_26
	jmp	codegen_EmitSymboltable_elsebl_26
codegen_EmitSymboltable_ifbl_26	:	

	subl	$4,%esp
	movl	-176(%ebp),%eax
	movl	%eax,0(%esp)
	call	type_CreateType
	addl	$4,%esp
	movl	%eax,-180(%ebp)

	subl	$12,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	$symtab+354,4(%esp)
	movl	-176(%ebp),%eax
	movl	%eax,8(%esp)
	call	codegen_debug
	addl	$12,%esp

	subl	$4,%esp
	movl	-176(%ebp),%eax
	movl	%eax,0(%esp)
	call	type_IsAArrayVar
	addl	$4,%esp
	testl	%eax,%eax
	jnz	codegen_EmitSymboltable_logexprtrue_29
	subl	$4,%esp
	movl	-176(%ebp),%eax
	movl	%eax,0(%esp)
	call	type_IsAStructVar
	addl	$4,%esp
	testl	%eax,%eax
	jnz	codegen_EmitSymboltable_logexprtrue_29
	movl	$0,%eax
	jmp	codegen_EmitSymboltable_logexprfalse_29
codegen_EmitSymboltable_logexprtrue_29	:	
	movl	$1,%eax
codegen_EmitSymboltable_logexprfalse_29	:	
	testl	%eax,%eax
	jnz	codegen_EmitSymboltable_ifbl_28
	jmp	codegen_EmitSymboltable_elsebl_28
codegen_EmitSymboltable_ifbl_28	:	

	subl	$12,%esp
	movl	%ebp,%eax
	addl	$-160,%eax
	movl	%eax,0(%esp)
	movl	$symtab+367,4(%esp)
	subl	$8,%esp
	movl	%ebp,%eax
	addl	$8,%eax
	movl	(%eax),%eax
	addl	$20,%eax
	movl	(%eax),%eax
	addl	$4,%eax
	movl	(%eax),%eax
	movl	%eax,0(%esp)
	movl	-172(%ebp),%eax
	movl	%eax,4(%esp)
	call	symbol_Sizeof_Symbol
	addl	$8,%esp
	movl	%eax,8(%esp)
	call	sprintf
	addl	$12,%esp

	subl	$8,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	%ebp,%eax
	addl	$-160,%eax
	movl	%eax,4(%esp)
	call	codegen_emit
	addl	$8,%esp

	subl	$8,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	$symtab+378,4(%esp)
	call	codegen_emit
	addl	$8,%esp

	subl	$8,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	$symtab+389,4(%esp)
	call	codegen_emit
	addl	$8,%esp
	jmp	codegen_EmitSymboltable_endif_28
codegen_EmitSymboltable_elsebl_28	:	

	subl	$4,%esp
	movl	-180(%ebp),%eax
	movl	%eax,0(%esp)
	call	type_IsLongSized
	addl	$4,%esp
	testl	%eax,%eax
	jnz	codegen_EmitSymboltable_ifbl_30
	jmp	codegen_EmitSymboltable_elsebl_30
codegen_EmitSymboltable_ifbl_30	:	

	subl	$8,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	$symtab+397,4(%esp)
	call	codegen_emit
	addl	$8,%esp
	jmp	codegen_EmitSymboltable_endif_30
codegen_EmitSymboltable_elsebl_30	:	

	subl	$4,%esp
	movl	-180(%ebp),%eax
	movl	%eax,0(%esp)
	call	type_IsByteSized
	addl	$4,%esp
	testl	%eax,%eax
	jnz	codegen_EmitSymboltable_ifbl_31
	jmp	codegen_EmitSymboltable_elsebl_31
codegen_EmitSymboltable_ifbl_31	:	

	subl	$8,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	$symtab+407,4(%esp)
	call	codegen_emit
	addl	$8,%esp
	jmp	codegen_EmitSymboltable_endif_31
codegen_EmitSymboltable_elsebl_31	:	

	subl	$4,%esp
	movl	-176(%ebp),%eax
	movl	%eax,0(%esp)
	call	syntax_printTree
	addl	$4,%esp

	subl	$8,%esp
	movl	$symtab+417,0(%esp)
	subl	$4,%esp
	movl	-176(%ebp),%eax
	movl	%eax,0(%esp)
	call	type_IsAStructVar
	addl	$4,%esp
	movl	%eax,4(%esp)
	call	printf
	addl	$8,%esp

	subl	$8,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	$symtab+429,4(%esp)
	call	codegen_emit
	addl	$8,%esp
codegen_EmitSymboltable_endif_31	:	
codegen_EmitSymboltable_endif_30	:	
codegen_EmitSymboltable_endif_28	:	

	subl	$4,%esp
	movl	-180(%ebp),%eax
	movl	%eax,0(%esp)
	call	syntax_FreeSyntaxTree
	addl	$4,%esp
	jmp	codegen_EmitSymboltable_endif_26
codegen_EmitSymboltable_elsebl_26	:	
codegen_EmitSymboltable_endif_26	:	

	movl	-164(%ebp),%ebx
	addl	$1,%ebx
	movl	%ebx,%eax
	movl	%eax,-164(%ebp)
	jmp	codegen_EmitSymboltable_while_22
codegen_EmitSymboltable_endwhile_22	:	

	subl	$8,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	$symtab+198,4(%esp)
	call	codegen_emit
	addl	$8,%esp

	movl	$0,%eax
	jmp	codegen_EmitSymboltable_ret
codegen_EmitSymboltable_ret	:	
	movl	%ebp,%esp
	popl	%ebp
	ret	

.globl	codegen_EmitBeginFunction
.type	codegen_EmitBeginFunction,@function
codegen_EmitBeginFunction	:	
	pushl	%ebp
	movl	%esp,%ebp
	subl	$168,%esp

	movl	%ebp,%eax
	addl	$8,%eax
	movl	(%eax),%eax
	addl	$20,%eax
	movl	(%eax),%eax
	addl	$4,%eax
	movl	(%eax),%eax
	movl	%eax,-4(%ebp)

	subl	$148,%esp
	movl	-4(%ebp),%eax
	movl	%eax,0(%esp)
	movl	%ebp,%eax
	addl	$8,%eax
	movl	(%eax),%eax
	addl	$32,%eax
	movl	%esp,%ebx
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	call	symbol_FindFunction
	addl	$148,%esp
	movl	%eax,-8(%ebp)

	movl	-8(%ebp),%ebx
	cmpl	$0,%ebx
	movl	$1,%eax
	jne	codegen_EmitBeginFunction_reltrue_33
	movl	$0,%eax
codegen_EmitBeginFunction_reltrue_33	:	
	testl	%eax,%eax
	jnz	codegen_EmitBeginFunction_ifbl_32
	jmp	codegen_EmitBeginFunction_elsebl_32
codegen_EmitBeginFunction_ifbl_32	:	

	subl	$12,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	$symtab+461,4(%esp)
	subl	$8,%esp
	movl	%ebp,%eax
	addl	$-8,%eax
	movl	(%eax),%eax
	addl	$148,%eax
	movl	(%eax),%eax
	movl	%eax,0(%esp)
	movl	$1,4(%esp)
	call	syntax_GetChild
	addl	$8,%esp
	movl	%eax,8(%esp)
	call	codegen_debug
	addl	$12,%esp
	jmp	codegen_EmitBeginFunction_endif_32
codegen_EmitBeginFunction_elsebl_32	:	
codegen_EmitBeginFunction_endif_32	:	

	subl	$8,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	$symtab+472,4(%esp)
	call	codegen_emit
	addl	$8,%esp

	subl	$8,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	%ebp,%eax
	addl	$8,%eax
	movl	(%eax),%eax
	addl	$32,%eax
	addl	$16,%eax
	movl	%eax,4(%esp)
	call	codegen_emit
	addl	$8,%esp

	subl	$8,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	$symtab+198,4(%esp)
	call	codegen_emit
	addl	$8,%esp

	subl	$8,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	$symtab+480,4(%esp)
	call	codegen_emit
	addl	$8,%esp

	subl	$8,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	%ebp,%eax
	addl	$8,%eax
	movl	(%eax),%eax
	addl	$32,%eax
	addl	$16,%eax
	movl	%eax,4(%esp)
	call	codegen_emit
	addl	$8,%esp

	subl	$8,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	$symtab+487,4(%esp)
	call	codegen_emit
	addl	$8,%esp

	subl	$8,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	%ebp,%eax
	addl	$8,%eax
	movl	(%eax),%eax
	addl	$32,%eax
	addl	$16,%eax
	movl	%eax,4(%esp)
	call	codegen_emit
	addl	$8,%esp

	subl	$8,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	$symtab+500,4(%esp)
	call	codegen_emit
	addl	$8,%esp

	subl	$8,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	$symtab+503,4(%esp)
	call	codegen_emit
	addl	$8,%esp

	subl	$8,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	$symtab+516,4(%esp)
	call	codegen_emit
	addl	$8,%esp

	subl	$12,%esp
	movl	%ebp,%eax
	addl	$-168,%eax
	movl	%eax,0(%esp)
	movl	$symtab+534,4(%esp)
	subl	$4,%esp
	movl	-4(%ebp),%eax
	movl	%eax,0(%esp)
	call	symbol_GetLocalVarBlockSize
	addl	$4,%esp
	movl	%eax,8(%esp)
	call	sprintf
	addl	$12,%esp

	subl	$8,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	%ebp,%eax
	addl	$-168,%eax
	movl	%eax,4(%esp)
	call	codegen_emit
	addl	$8,%esp

	subl	$8,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	$symtab+552,4(%esp)
	call	codegen_emit
	addl	$8,%esp

	movl	$0,%eax
	jmp	codegen_EmitBeginFunction_ret
codegen_EmitBeginFunction_ret	:	
	movl	%ebp,%esp
	popl	%ebp
	ret	

.globl	codegen_EmitEndFunction
.type	codegen_EmitEndFunction,@function
codegen_EmitEndFunction	:	
	pushl	%ebp
	movl	%esp,%ebp
	subl	$4,%esp

	movl	%ebp,%eax
	addl	$8,%eax
	movl	(%eax),%eax
	addl	$20,%eax
	movl	(%eax),%eax
	addl	$4,%eax
	movl	(%eax),%eax
	movl	%eax,-4(%ebp)

	subl	$8,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	$symtab+552,4(%esp)
	call	codegen_emit
	addl	$8,%esp

	subl	$8,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	%ebp,%eax
	addl	$8,%eax
	movl	(%eax),%eax
	addl	$32,%eax
	addl	$16,%eax
	movl	%eax,4(%esp)
	call	codegen_emit
	addl	$8,%esp

	subl	$8,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	$symtab+555,4(%esp)
	call	codegen_emit
	addl	$8,%esp

	subl	$8,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	$symtab+562,4(%esp)
	call	codegen_emit
	addl	$8,%esp

	subl	$8,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	$symtab+580,4(%esp)
	call	codegen_emit
	addl	$8,%esp

	subl	$8,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	$symtab+592,4(%esp)
	call	codegen_emit
	addl	$8,%esp

	subl	$8,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	$symtab+598,4(%esp)
	call	codegen_emit
	addl	$8,%esp

	movl	$0,%eax
	jmp	codegen_EmitEndFunction_ret
codegen_EmitEndFunction_ret	:	
	movl	%ebp,%esp
	popl	%ebp
	ret	

.globl	codegen_EmitBeginIf
.type	codegen_EmitBeginIf,@function
codegen_EmitBeginIf	:	
	pushl	%ebp
	movl	%esp,%ebp
	subl	$328,%esp

	movl	%ebp,%eax
	addl	$16,%eax
	movl	(%eax),%eax
	pushl	%eax
	movl	%ebp,%eax
	addl	$8,%eax
	movl	(%eax),%eax
	addl	$24,%eax
	movl	(%eax),%eax
	popl	%ebx
	movl	%eax,(%ebx)

	movl	%ebp,%eax
	addl	$8,%eax
	movl	(%eax),%eax
	addl	$24,%eax
	pushl	%eax
	movl	%ebp,%eax
	addl	$8,%eax
	movl	(%eax),%eax
	addl	$24,%eax
	movl	(%eax),%eax
	movl	%eax,%ebx
	addl	$1,%ebx
	movl	%ebx,%eax
	popl	%ebx
	movl	%eax,(%ebx)

	subl	$12,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	$symtab+603,4(%esp)
	subl	$8,%esp
	movl	12(%ebp),%eax
	movl	%eax,0(%esp)
	movl	$2,4(%esp)
	call	syntax_GetChild
	addl	$8,%esp
	movl	%eax,8(%esp)
	call	codegen_debug
	addl	$12,%esp

	subl	$12,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	subl	$8,%esp
	movl	12(%ebp),%eax
	movl	%eax,0(%esp)
	movl	$2,4(%esp)
	call	syntax_GetChild
	addl	$8,%esp
	movl	%eax,4(%esp)
	movl	%ebp,%eax
	addl	$-160,%eax
	movl	%eax,8(%esp)
	call	codegen_EmitLogExpr
	addl	$12,%esp
	movl	%eax,-324(%ebp)

	subl	$8,%esp
	movl	12(%ebp),%eax
	movl	%eax,0(%esp)
	movl	$0,4(%esp)
	call	syntax_GetChild
	addl	$8,%esp
	movl	%eax,-328(%ebp)

	subl	$156,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	%ebp,%eax
	addl	$-328,%eax
	movl	(%eax),%eax
	addl	$8,%eax
	movl	%esp,%ebx
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	%ebp,%eax
	addl	$-160,%eax
	movl	%eax,148(%esp)
	movl	-324(%ebp),%eax
	movl	%eax,152(%esp)
	call	codegen_CastToInt
	addl	$156,%esp
	movl	%eax,-324(%ebp)

	subl	$8,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	%ebp,%eax
	addl	$-160,%eax
	movl	%eax,4(%esp)
	call	codegen_EmitAvoidConstant
	addl	$8,%esp

	subl	$12,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	%ebp,%eax
	addl	$-160,%eax
	movl	%eax,4(%esp)
	movl	-324(%ebp),%eax
	movl	%eax,8(%esp)
	call	codegen_EmitAvoidIndirect
	addl	$12,%esp

	subl	$4,%esp
	movl	-324(%ebp),%eax
	movl	%eax,0(%esp)
	call	syntax_FreeSyntaxTree
	addl	$4,%esp

	subl	$8,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	$symtab+608,4(%esp)
	call	codegen_emit
	addl	$8,%esp

	subl	$8,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	%ebp,%eax
	addl	$-160,%eax
	movl	%eax,4(%esp)
	call	codegen_emit
	addl	$8,%esp

	subl	$8,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	$symtab+616,4(%esp)
	call	codegen_emit
	addl	$8,%esp

	subl	$8,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	%ebp,%eax
	addl	$-160,%eax
	movl	%eax,4(%esp)
	call	codegen_emit
	addl	$8,%esp

	subl	$8,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	$symtab+198,4(%esp)
	call	codegen_emit
	addl	$8,%esp

	subl	$12,%esp
	movl	%ebp,%eax
	addl	$-320,%eax
	movl	%eax,0(%esp)
	movl	$symtab+619,4(%esp)
	movl	%ebp,%eax
	addl	$8,%eax
	movl	(%eax),%eax
	addl	$32,%eax
	addl	$16,%eax
	movl	%eax,8(%esp)
	call	sprintf
	addl	$12,%esp

	subl	$12,%esp
	movl	%ebp,%eax
	addl	$-160,%eax
	movl	%eax,0(%esp)
	movl	%ebp,%eax
	addl	$-320,%eax
	movl	%eax,4(%esp)
	movl	%ebp,%eax
	addl	$16,%eax
	movl	(%eax),%eax
	movl	(%eax),%eax
	movl	%eax,8(%esp)
	call	sprintf
	addl	$12,%esp

	subl	$8,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	%ebp,%eax
	addl	$-160,%eax
	movl	%eax,4(%esp)
	call	codegen_emit
	addl	$8,%esp

	subl	$12,%esp
	movl	%ebp,%eax
	addl	$-320,%eax
	movl	%eax,0(%esp)
	movl	$symtab+637,4(%esp)
	movl	%ebp,%eax
	addl	$8,%eax
	movl	(%eax),%eax
	addl	$32,%eax
	addl	$16,%eax
	movl	%eax,8(%esp)
	call	sprintf
	addl	$12,%esp

	subl	$12,%esp
	movl	%ebp,%eax
	addl	$-160,%eax
	movl	%eax,0(%esp)
	movl	%ebp,%eax
	addl	$-320,%eax
	movl	%eax,4(%esp)
	movl	%ebp,%eax
	addl	$16,%eax
	movl	(%eax),%eax
	movl	(%eax),%eax
	movl	%eax,8(%esp)
	call	sprintf
	addl	$12,%esp

	subl	$8,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	%ebp,%eax
	addl	$-160,%eax
	movl	%eax,4(%esp)
	call	codegen_emit
	addl	$8,%esp

	subl	$12,%esp
	movl	%ebp,%eax
	addl	$-320,%eax
	movl	%eax,0(%esp)
	movl	$symtab+657,4(%esp)
	movl	%ebp,%eax
	addl	$8,%eax
	movl	(%eax),%eax
	addl	$32,%eax
	addl	$16,%eax
	movl	%eax,8(%esp)
	call	sprintf
	addl	$12,%esp

	subl	$12,%esp
	movl	%ebp,%eax
	addl	$-160,%eax
	movl	%eax,0(%esp)
	movl	%ebp,%eax
	addl	$-320,%eax
	movl	%eax,4(%esp)
	movl	%ebp,%eax
	addl	$16,%eax
	movl	(%eax),%eax
	movl	(%eax),%eax
	movl	%eax,8(%esp)
	call	sprintf
	addl	$12,%esp

	subl	$8,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	%ebp,%eax
	addl	$-160,%eax
	movl	%eax,4(%esp)
	call	codegen_emit
	addl	$8,%esp

	movl	$1,%eax
	jmp	codegen_EmitBeginIf_ret
codegen_EmitBeginIf_ret	:	
	movl	%ebp,%esp
	popl	%ebp
	ret	

.globl	codegen_EmitElseIf
.type	codegen_EmitElseIf,@function
codegen_EmitElseIf	:	
	pushl	%ebp
	movl	%esp,%ebp
	subl	$320,%esp

	subl	$12,%esp
	movl	%ebp,%eax
	addl	$-320,%eax
	movl	%eax,0(%esp)
	movl	$symtab+671,4(%esp)
	movl	%ebp,%eax
	addl	$8,%eax
	movl	(%eax),%eax
	addl	$32,%eax
	addl	$16,%eax
	movl	%eax,8(%esp)
	call	sprintf
	addl	$12,%esp

	subl	$12,%esp
	movl	%ebp,%eax
	addl	$-160,%eax
	movl	%eax,0(%esp)
	movl	%ebp,%eax
	addl	$-320,%eax
	movl	%eax,4(%esp)
	movl	16(%ebp),%eax
	movl	%eax,8(%esp)
	call	sprintf
	addl	$12,%esp

	subl	$8,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	%ebp,%eax
	addl	$-160,%eax
	movl	%eax,4(%esp)
	call	codegen_emit
	addl	$8,%esp

	subl	$12,%esp
	movl	%ebp,%eax
	addl	$-320,%eax
	movl	%eax,0(%esp)
	movl	$symtab+691,4(%esp)
	movl	%ebp,%eax
	addl	$8,%eax
	movl	(%eax),%eax
	addl	$32,%eax
	addl	$16,%eax
	movl	%eax,8(%esp)
	call	sprintf
	addl	$12,%esp

	subl	$12,%esp
	movl	%ebp,%eax
	addl	$-160,%eax
	movl	%eax,0(%esp)
	movl	%ebp,%eax
	addl	$-320,%eax
	movl	%eax,4(%esp)
	movl	16(%ebp),%eax
	movl	%eax,8(%esp)
	call	sprintf
	addl	$12,%esp

	subl	$8,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	%ebp,%eax
	addl	$-160,%eax
	movl	%eax,4(%esp)
	call	codegen_emit
	addl	$8,%esp

	movl	$1,%eax
	jmp	codegen_EmitElseIf_ret
codegen_EmitElseIf_ret	:	
	movl	%ebp,%esp
	popl	%ebp
	ret	

.globl	codegen_EmitEndIf
.type	codegen_EmitEndIf,@function
codegen_EmitEndIf	:	
	pushl	%ebp
	movl	%esp,%ebp
	subl	$320,%esp

	subl	$12,%esp
	movl	%ebp,%eax
	addl	$-320,%eax
	movl	%eax,0(%esp)
	movl	$symtab+708,4(%esp)
	movl	%ebp,%eax
	addl	$8,%eax
	movl	(%eax),%eax
	addl	$32,%eax
	addl	$16,%eax
	movl	%eax,8(%esp)
	call	sprintf
	addl	$12,%esp

	subl	$12,%esp
	movl	%ebp,%eax
	addl	$-160,%eax
	movl	%eax,0(%esp)
	movl	%ebp,%eax
	addl	$-320,%eax
	movl	%eax,4(%esp)
	movl	16(%ebp),%eax
	movl	%eax,8(%esp)
	call	sprintf
	addl	$12,%esp

	subl	$8,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	%ebp,%eax
	addl	$-160,%eax
	movl	%eax,4(%esp)
	call	codegen_emit
	addl	$8,%esp

	movl	$1,%eax
	jmp	codegen_EmitEndIf_ret
codegen_EmitEndIf_ret	:	
	movl	%ebp,%esp
	popl	%ebp
	ret	

.globl	codegen_EmitBeginWhile
.type	codegen_EmitBeginWhile,@function
codegen_EmitBeginWhile	:	
	pushl	%ebp
	movl	%esp,%ebp
	subl	$328,%esp

	movl	%ebp,%eax
	addl	$16,%eax
	movl	(%eax),%eax
	pushl	%eax
	movl	%ebp,%eax
	addl	$8,%eax
	movl	(%eax),%eax
	addl	$24,%eax
	movl	(%eax),%eax
	popl	%ebx
	movl	%eax,(%ebx)

	movl	%ebp,%eax
	addl	$8,%eax
	movl	(%eax),%eax
	addl	$24,%eax
	pushl	%eax
	movl	%ebp,%eax
	addl	$8,%eax
	movl	(%eax),%eax
	addl	$24,%eax
	movl	(%eax),%eax
	movl	%eax,%ebx
	addl	$1,%ebx
	movl	%ebx,%eax
	popl	%ebx
	movl	%eax,(%ebx)

	subl	$12,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	$symtab+724,4(%esp)
	subl	$8,%esp
	movl	12(%ebp),%eax
	movl	%eax,0(%esp)
	movl	$2,4(%esp)
	call	syntax_GetChild
	addl	$8,%esp
	movl	%eax,8(%esp)
	call	codegen_debug
	addl	$12,%esp

	subl	$12,%esp
	movl	%ebp,%eax
	addl	$-320,%eax
	movl	%eax,0(%esp)
	movl	$symtab+732,4(%esp)
	movl	%ebp,%eax
	addl	$8,%eax
	movl	(%eax),%eax
	addl	$32,%eax
	addl	$16,%eax
	movl	%eax,8(%esp)
	call	sprintf
	addl	$12,%esp

	subl	$12,%esp
	movl	%ebp,%eax
	addl	$-160,%eax
	movl	%eax,0(%esp)
	movl	%ebp,%eax
	addl	$-320,%eax
	movl	%eax,4(%esp)
	movl	%ebp,%eax
	addl	$16,%eax
	movl	(%eax),%eax
	movl	(%eax),%eax
	movl	%eax,8(%esp)
	call	sprintf
	addl	$12,%esp

	subl	$8,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	%ebp,%eax
	addl	$-160,%eax
	movl	%eax,4(%esp)
	call	codegen_emit
	addl	$8,%esp

	subl	$12,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	subl	$8,%esp
	movl	12(%ebp),%eax
	movl	%eax,0(%esp)
	movl	$2,4(%esp)
	call	syntax_GetChild
	addl	$8,%esp
	movl	%eax,4(%esp)
	movl	%ebp,%eax
	addl	$-160,%eax
	movl	%eax,8(%esp)
	call	codegen_EmitLogExpr
	addl	$12,%esp
	movl	%eax,-324(%ebp)

	subl	$8,%esp
	movl	12(%ebp),%eax
	movl	%eax,0(%esp)
	movl	$0,4(%esp)
	call	syntax_GetChild
	addl	$8,%esp
	movl	%eax,-328(%ebp)

	subl	$156,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	%ebp,%eax
	addl	$-328,%eax
	movl	(%eax),%eax
	addl	$8,%eax
	movl	%esp,%ebx
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	%ebp,%eax
	addl	$-160,%eax
	movl	%eax,148(%esp)
	movl	-324(%ebp),%eax
	movl	%eax,152(%esp)
	call	codegen_CastToInt
	addl	$156,%esp
	movl	%eax,-324(%ebp)

	subl	$8,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	%ebp,%eax
	addl	$-160,%eax
	movl	%eax,4(%esp)
	call	codegen_EmitAvoidConstant
	addl	$8,%esp

	subl	$12,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	%ebp,%eax
	addl	$-160,%eax
	movl	%eax,4(%esp)
	movl	-324(%ebp),%eax
	movl	%eax,8(%esp)
	call	codegen_EmitAvoidIndirect
	addl	$12,%esp

	subl	$4,%esp
	movl	-324(%ebp),%eax
	movl	%eax,0(%esp)
	call	syntax_FreeSyntaxTree
	addl	$4,%esp

	subl	$8,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	$symtab+608,4(%esp)
	call	codegen_emit
	addl	$8,%esp

	subl	$8,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	%ebp,%eax
	addl	$-160,%eax
	movl	%eax,4(%esp)
	call	codegen_emit
	addl	$8,%esp

	subl	$8,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	$symtab+616,4(%esp)
	call	codegen_emit
	addl	$8,%esp

	subl	$8,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	%ebp,%eax
	addl	$-160,%eax
	movl	%eax,4(%esp)
	call	codegen_emit
	addl	$8,%esp

	subl	$8,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	$symtab+198,4(%esp)
	call	codegen_emit
	addl	$8,%esp

	subl	$12,%esp
	movl	%ebp,%eax
	addl	$-320,%eax
	movl	%eax,0(%esp)
	movl	$symtab+747,4(%esp)
	movl	%ebp,%eax
	addl	$8,%eax
	movl	(%eax),%eax
	addl	$32,%eax
	addl	$16,%eax
	movl	%eax,8(%esp)
	call	sprintf
	addl	$12,%esp

	subl	$12,%esp
	movl	%ebp,%eax
	addl	$-160,%eax
	movl	%eax,0(%esp)
	movl	%ebp,%eax
	addl	$-320,%eax
	movl	%eax,4(%esp)
	movl	%ebp,%eax
	addl	$16,%eax
	movl	(%eax),%eax
	movl	(%eax),%eax
	movl	%eax,8(%esp)
	call	sprintf
	addl	$12,%esp

	subl	$8,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	%ebp,%eax
	addl	$-160,%eax
	movl	%eax,4(%esp)
	call	codegen_emit
	addl	$8,%esp

	movl	$1,%eax
	jmp	codegen_EmitBeginWhile_ret
codegen_EmitBeginWhile_ret	:	
	movl	%ebp,%esp
	popl	%ebp
	ret	

.globl	codegen_EmitEndWhile
.type	codegen_EmitEndWhile,@function
codegen_EmitEndWhile	:	
	pushl	%ebp
	movl	%esp,%ebp
	subl	$320,%esp

	subl	$12,%esp
	movl	%ebp,%eax
	addl	$-320,%eax
	movl	%eax,0(%esp)
	movl	$symtab+769,4(%esp)
	movl	%ebp,%eax
	addl	$8,%eax
	movl	(%eax),%eax
	addl	$32,%eax
	addl	$16,%eax
	movl	%eax,8(%esp)
	call	sprintf
	addl	$12,%esp

	subl	$12,%esp
	movl	%ebp,%eax
	addl	$-160,%eax
	movl	%eax,0(%esp)
	movl	%ebp,%eax
	addl	$-320,%eax
	movl	%eax,4(%esp)
	movl	16(%ebp),%eax
	movl	%eax,8(%esp)
	call	sprintf
	addl	$12,%esp

	subl	$8,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	%ebp,%eax
	addl	$-160,%eax
	movl	%eax,4(%esp)
	call	codegen_emit
	addl	$8,%esp

	subl	$12,%esp
	movl	%ebp,%eax
	addl	$-320,%eax
	movl	%eax,0(%esp)
	movl	$symtab+788,4(%esp)
	movl	%ebp,%eax
	addl	$8,%eax
	movl	(%eax),%eax
	addl	$32,%eax
	addl	$16,%eax
	movl	%eax,8(%esp)
	call	sprintf
	addl	$12,%esp

	subl	$12,%esp
	movl	%ebp,%eax
	addl	$-160,%eax
	movl	%eax,0(%esp)
	movl	%ebp,%eax
	addl	$-320,%eax
	movl	%eax,4(%esp)
	movl	16(%ebp),%eax
	movl	%eax,8(%esp)
	call	sprintf
	addl	$12,%esp

	subl	$8,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	%ebp,%eax
	addl	$-160,%eax
	movl	%eax,4(%esp)
	call	codegen_emit
	addl	$8,%esp

	movl	$1,%eax
	jmp	codegen_EmitEndWhile_ret
codegen_EmitEndWhile_ret	:	
	movl	%ebp,%esp
	popl	%ebp
	ret	

.globl	codegen_EmitBreak
.type	codegen_EmitBreak,@function
codegen_EmitBreak	:	
	pushl	%ebp
	movl	%esp,%ebp
	subl	$324,%esp

	movl	%ebp,%eax
	addl	$8,%eax
	movl	(%eax),%eax
	addl	$28,%eax
	movl	(%eax),%eax
	movl	%eax,%ebx
	cmpl	$0,%ebx
	movl	$1,%eax
	jl	codegen_EmitBreak_reltrue_35
	movl	$0,%eax
codegen_EmitBreak_reltrue_35	:	
	testl	%eax,%eax
	jnz	codegen_EmitBreak_ifbl_34
	jmp	codegen_EmitBreak_elsebl_34
codegen_EmitBreak_ifbl_34	:	

	subl	$8,%esp
	movl	12(%ebp),%eax
	movl	%eax,0(%esp)
	movl	$0,4(%esp)
	call	syntax_GetChild
	addl	$8,%esp
	movl	%eax,-324(%ebp)

	subl	$152,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	$symtab+807,4(%esp)
	movl	%ebp,%eax
	addl	$-324,%eax
	movl	(%eax),%eax
	addl	$8,%eax
	movl	%esp,%ebx
	addl	$8,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	call	codegen_reportError
	addl	$152,%esp

	movl	$0,%ebx
	subl	$1,%ebx
	movl	%ebx,%eax
	jmp	codegen_EmitBreak_ret
codegen_EmitBreak_elsebl_34	:	
codegen_EmitBreak_endif_34	:	

	subl	$12,%esp
	movl	%ebp,%eax
	addl	$-320,%eax
	movl	%eax,0(%esp)
	movl	$symtab+867,4(%esp)
	movl	%ebp,%eax
	addl	$8,%eax
	movl	(%eax),%eax
	addl	$32,%eax
	addl	$16,%eax
	movl	%eax,8(%esp)
	call	sprintf
	addl	$12,%esp

	subl	$12,%esp
	movl	%ebp,%eax
	addl	$-160,%eax
	movl	%eax,0(%esp)
	movl	%ebp,%eax
	addl	$-320,%eax
	movl	%eax,4(%esp)
	movl	%ebp,%eax
	addl	$8,%eax
	movl	(%eax),%eax
	addl	$28,%eax
	movl	(%eax),%eax
	movl	%eax,8(%esp)
	call	sprintf
	addl	$12,%esp

	subl	$8,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	%ebp,%eax
	addl	$-160,%eax
	movl	%eax,4(%esp)
	call	codegen_emit
	addl	$8,%esp

	movl	$1,%eax
	jmp	codegen_EmitBreak_ret
codegen_EmitBreak_ret	:	
	movl	%ebp,%esp
	popl	%ebp
	ret	

.globl	codegen_EmitContinue
.type	codegen_EmitContinue,@function
codegen_EmitContinue	:	
	pushl	%ebp
	movl	%esp,%ebp
	subl	$324,%esp

	movl	%ebp,%eax
	addl	$8,%eax
	movl	(%eax),%eax
	addl	$28,%eax
	movl	(%eax),%eax
	movl	%eax,%ebx
	cmpl	$0,%ebx
	movl	$1,%eax
	jl	codegen_EmitContinue_reltrue_37
	movl	$0,%eax
codegen_EmitContinue_reltrue_37	:	
	testl	%eax,%eax
	jnz	codegen_EmitContinue_ifbl_36
	jmp	codegen_EmitContinue_elsebl_36
codegen_EmitContinue_ifbl_36	:	

	subl	$8,%esp
	movl	12(%ebp),%eax
	movl	%eax,0(%esp)
	movl	$0,4(%esp)
	call	syntax_GetChild
	addl	$8,%esp
	movl	%eax,-324(%ebp)

	subl	$152,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	$symtab+889,4(%esp)
	movl	%ebp,%eax
	addl	$-324,%eax
	movl	(%eax),%eax
	addl	$8,%eax
	movl	%esp,%ebx
	addl	$8,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	call	codegen_reportError
	addl	$152,%esp

	movl	$0,%ebx
	subl	$1,%ebx
	movl	%ebx,%eax
	jmp	codegen_EmitContinue_ret
codegen_EmitContinue_elsebl_36	:	
codegen_EmitContinue_endif_36	:	

	subl	$12,%esp
	movl	%ebp,%eax
	addl	$-320,%eax
	movl	%eax,0(%esp)
	movl	$symtab+769,4(%esp)
	movl	%ebp,%eax
	addl	$8,%eax
	movl	(%eax),%eax
	addl	$32,%eax
	addl	$16,%eax
	movl	%eax,8(%esp)
	call	sprintf
	addl	$12,%esp

	subl	$12,%esp
	movl	%ebp,%eax
	addl	$-160,%eax
	movl	%eax,0(%esp)
	movl	%ebp,%eax
	addl	$-320,%eax
	movl	%eax,4(%esp)
	movl	%ebp,%eax
	addl	$8,%eax
	movl	(%eax),%eax
	addl	$28,%eax
	movl	(%eax),%eax
	movl	%eax,8(%esp)
	call	sprintf
	addl	$12,%esp

	subl	$8,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	%ebp,%eax
	addl	$-160,%eax
	movl	%eax,4(%esp)
	call	codegen_emit
	addl	$8,%esp

	movl	$1,%eax
	jmp	codegen_EmitContinue_ret
codegen_EmitContinue_ret	:	
	movl	%ebp,%esp
	popl	%ebp
	ret	

.globl	codegen_EmitReturn
.type	codegen_EmitReturn,@function
codegen_EmitReturn	:	
	pushl	%ebp
	movl	%esp,%ebp
	subl	$180,%esp

	subl	$12,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	$symtab+952,4(%esp)
	movl	12(%ebp),%eax
	movl	%eax,8(%esp)
	call	codegen_debug
	addl	$12,%esp

	subl	$148,%esp
	movl	%ebp,%eax
	addl	$8,%eax
	movl	(%eax),%eax
	addl	$20,%eax
	movl	(%eax),%eax
	addl	$4,%eax
	movl	(%eax),%eax
	movl	%eax,0(%esp)
	movl	%ebp,%eax
	addl	$8,%eax
	movl	(%eax),%eax
	addl	$32,%eax
	movl	%esp,%ebx
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	call	symbol_FindFunction
	addl	$148,%esp
	movl	%eax,-168(%ebp)

	subl	$8,%esp
	movl	12(%ebp),%eax
	movl	%eax,0(%esp)
	movl	$0,4(%esp)
	call	syntax_GetChild
	addl	$8,%esp
	movl	%eax,-180(%ebp)

	movl	-168(%ebp),%ebx
	cmpl	$0,%ebx
	movl	$1,%eax
	je	codegen_EmitReturn_reltrue_39
	movl	$0,%eax
codegen_EmitReturn_reltrue_39	:	
	testl	%eax,%eax
	jnz	codegen_EmitReturn_ifbl_38
	jmp	codegen_EmitReturn_elsebl_38
codegen_EmitReturn_ifbl_38	:	

	movl	$0,%ebx
	subl	$1,%ebx
	movl	%ebx,%eax
	jmp	codegen_EmitReturn_ret
codegen_EmitReturn_elsebl_38	:	
codegen_EmitReturn_endif_38	:	

	subl	$4,%esp
	movl	12(%ebp),%eax
	movl	%eax,0(%esp)
	call	syntax_CountChilds
	addl	$4,%esp
	movl	%eax,%ebx
	cmpl	$2,%ebx
	movl	$1,%eax
	jg	codegen_EmitReturn_reltrue_41
	movl	$0,%eax
codegen_EmitReturn_reltrue_41	:	
	testl	%eax,%eax
	jnz	codegen_EmitReturn_ifbl_40
	jmp	codegen_EmitReturn_elsebl_40
codegen_EmitReturn_ifbl_40	:	

	movl	$1,-164(%ebp)
	jmp	codegen_EmitReturn_endif_40
codegen_EmitReturn_elsebl_40	:	

	movl	$0,-164(%ebp)
codegen_EmitReturn_endif_40	:	

	subl	$4,%esp
	movl	12(%ebp),%eax
	movl	%eax,0(%esp)
	call	syntax_CountChilds
	addl	$4,%esp
	movl	%eax,%ebx
	cmpl	$2,%ebx
	movl	$1,%eax
	jg	codegen_EmitReturn_reltrue_44
	movl	$0,%eax
codegen_EmitReturn_reltrue_44	:	
	testl	%eax,%eax
	jz	codegen_EmitReturn_logtermfalse_43
	subl	$8,%esp
	movl	%ebp,%eax
	addl	$8,%eax
	movl	(%eax),%eax
	addl	$20,%eax
	movl	(%eax),%eax
	addl	$4,%eax
	movl	(%eax),%eax
	movl	%eax,0(%esp)
	movl	%ebp,%eax
	addl	$-168,%eax
	movl	(%eax),%eax
	addl	$148,%eax
	movl	(%eax),%eax
	movl	%eax,4(%esp)
	call	symbol_IsReturnTypeVoid
	addl	$8,%esp
	testl	%eax,%eax
	movl	$1,%eax
	jz	codegen_EmitReturn_logfactfalse_45
	movl	$0,%eax
codegen_EmitReturn_logfactfalse_45	:	
	testl	%eax,%eax
	jz	codegen_EmitReturn_logtermfalse_43
	movl	$1,%eax
	jmp	codegen_EmitReturn_logtermtrue_43
codegen_EmitReturn_logtermfalse_43	:	
	movl	$0,%eax
codegen_EmitReturn_logtermtrue_43	:	
	testl	%eax,%eax
	jnz	codegen_EmitReturn_ifbl_42
	jmp	codegen_EmitReturn_elsebl_42
codegen_EmitReturn_ifbl_42	:	

	movl	%ebp,%eax
	addl	$-168,%eax
	movl	(%eax),%eax
	addl	$148,%eax
	movl	(%eax),%eax
	movl	%eax,-172(%ebp)

	subl	$8,%esp
	movl	%ebp,%eax
	addl	$8,%eax
	movl	(%eax),%eax
	addl	$20,%eax
	movl	(%eax),%eax
	addl	$4,%eax
	movl	(%eax),%eax
	movl	%eax,0(%esp)
	movl	-172(%ebp),%eax
	movl	%eax,4(%esp)
	call	symbol_GetReturnType
	addl	$8,%esp
	movl	%eax,-172(%ebp)

	subl	$12,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	subl	$8,%esp
	movl	12(%ebp),%eax
	movl	%eax,0(%esp)
	movl	$1,4(%esp)
	call	syntax_GetChild
	addl	$8,%esp
	movl	%eax,4(%esp)
	movl	%ebp,%eax
	addl	$-160,%eax
	movl	%eax,8(%esp)
	call	codegen_EmitLogExpr
	addl	$12,%esp
	movl	%eax,-176(%ebp)

	subl	$4,%esp
	movl	-172(%ebp),%eax
	movl	%eax,0(%esp)
	call	type_IsAIntType
	addl	$4,%esp
	testl	%eax,%eax
	jnz	codegen_EmitReturn_logexprtrue_47
	subl	$4,%esp
	movl	-172(%ebp),%eax
	movl	%eax,0(%esp)
	call	type_IsAPointerType
	addl	$4,%esp
	testl	%eax,%eax
	jnz	codegen_EmitReturn_logexprtrue_47
	movl	$0,%eax
	jmp	codegen_EmitReturn_logexprfalse_47
codegen_EmitReturn_logexprtrue_47	:	
	movl	$1,%eax
codegen_EmitReturn_logexprfalse_47	:	
	testl	%eax,%eax
	jnz	codegen_EmitReturn_ifbl_46
	jmp	codegen_EmitReturn_elsebl_46
codegen_EmitReturn_ifbl_46	:	

	subl	$156,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	%ebp,%eax
	addl	$-180,%eax
	movl	(%eax),%eax
	addl	$8,%eax
	movl	%esp,%ebx
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	%ebp,%eax
	addl	$-160,%eax
	movl	%eax,148(%esp)
	movl	-176(%ebp),%eax
	movl	%eax,152(%esp)
	call	codegen_CastToInt
	addl	$156,%esp
	movl	%eax,-176(%ebp)
	jmp	codegen_EmitReturn_endif_46
codegen_EmitReturn_elsebl_46	:	

	subl	$4,%esp
	movl	-172(%ebp),%eax
	movl	%eax,0(%esp)
	call	type_IsACharType
	addl	$4,%esp
	testl	%eax,%eax
	jnz	codegen_EmitReturn_ifbl_48
	jmp	codegen_EmitReturn_elsebl_48
codegen_EmitReturn_ifbl_48	:	

	subl	$156,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	%ebp,%eax
	addl	$-180,%eax
	movl	(%eax),%eax
	addl	$8,%eax
	movl	%esp,%ebx
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	%ebp,%eax
	addl	$-160,%eax
	movl	%eax,148(%esp)
	movl	-176(%ebp),%eax
	movl	%eax,152(%esp)
	call	codegen_CastToChar
	addl	$156,%esp
	movl	%eax,-176(%ebp)
	jmp	codegen_EmitReturn_endif_48
codegen_EmitReturn_elsebl_48	:	

	subl	$152,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	$symtab+961,4(%esp)
	movl	%ebp,%eax
	addl	$-180,%eax
	movl	(%eax),%eax
	addl	$8,%eax
	movl	%esp,%ebx
	addl	$8,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	call	codegen_reportError
	addl	$152,%esp
codegen_EmitReturn_endif_48	:	
codegen_EmitReturn_endif_46	:	

	subl	$8,%esp
	movl	%ebp,%eax
	addl	$-160,%eax
	movl	%eax,0(%esp)
	movl	$symtab+216,4(%esp)
	call	strcmp
	addl	$8,%esp
	movl	%eax,%ebx
	cmpl	$0,%ebx
	movl	$1,%eax
	jne	codegen_EmitReturn_reltrue_50
	movl	$0,%eax
codegen_EmitReturn_reltrue_50	:	
	testl	%eax,%eax
	jnz	codegen_EmitReturn_ifbl_49
	jmp	codegen_EmitReturn_elsebl_49
codegen_EmitReturn_ifbl_49	:	

	subl	$8,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	$symtab+201,4(%esp)
	call	codegen_emit
	addl	$8,%esp

	subl	$8,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	%ebp,%eax
	addl	$-160,%eax
	movl	%eax,4(%esp)
	call	codegen_emit
	addl	$8,%esp

	subl	$8,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	$symtab+208,4(%esp)
	call	codegen_emit
	addl	$8,%esp
	jmp	codegen_EmitReturn_endif_49
codegen_EmitReturn_elsebl_49	:	
codegen_EmitReturn_endif_49	:	

	subl	$4,%esp
	movl	-176(%ebp),%eax
	movl	%eax,0(%esp)
	call	syntax_FreeSyntaxTree
	addl	$4,%esp
	jmp	codegen_EmitReturn_endif_42
codegen_EmitReturn_elsebl_42	:	
codegen_EmitReturn_endif_42	:	

	subl	$12,%esp
	movl	%ebp,%eax
	addl	$-160,%eax
	movl	%eax,0(%esp)
	movl	$symtab+1011,4(%esp)
	movl	%ebp,%eax
	addl	$8,%eax
	movl	(%eax),%eax
	addl	$32,%eax
	addl	$16,%eax
	movl	%eax,8(%esp)
	call	sprintf
	addl	$12,%esp

	subl	$8,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	%ebp,%eax
	addl	$-160,%eax
	movl	%eax,4(%esp)
	call	codegen_emit
	addl	$8,%esp

	subl	$8,%esp
	movl	%ebp,%eax
	addl	$8,%eax
	movl	(%eax),%eax
	addl	$20,%eax
	movl	(%eax),%eax
	addl	$4,%eax
	movl	(%eax),%eax
	movl	%eax,0(%esp)
	movl	%ebp,%eax
	addl	$-168,%eax
	movl	(%eax),%eax
	addl	$148,%eax
	movl	(%eax),%eax
	movl	%eax,4(%esp)
	call	symbol_IsReturnTypeVoid
	addl	$8,%esp
	movl	%eax,%ebx
	cmpl	-164(%ebp),%ebx
	movl	$1,%eax
	je	codegen_EmitReturn_reltrue_52
	movl	$0,%eax
codegen_EmitReturn_reltrue_52	:	
	testl	%eax,%eax
	jnz	codegen_EmitReturn_ifbl_51
	jmp	codegen_EmitReturn_elsebl_51
codegen_EmitReturn_ifbl_51	:	

	subl	$152,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	$symtab+1024,4(%esp)
	movl	%ebp,%eax
	addl	$-180,%eax
	movl	(%eax),%eax
	addl	$8,%eax
	movl	%esp,%ebx
	addl	$8,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	call	codegen_reportError
	addl	$152,%esp

	movl	$0,%ebx
	subl	$1,%ebx
	movl	%ebx,%eax
	jmp	codegen_EmitReturn_ret
codegen_EmitReturn_elsebl_51	:	
codegen_EmitReturn_endif_51	:	

	movl	$1,%eax
	jmp	codegen_EmitReturn_ret
codegen_EmitReturn_ret	:	
	movl	%ebp,%esp
	popl	%ebp
	ret	

.globl	codegen_EmitFuncCallExpr
.type	codegen_EmitFuncCallExpr,@function
codegen_EmitFuncCallExpr	:	
	pushl	%ebp
	movl	%esp,%ebp
	subl	$4,%esp

	subl	$12,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	$symtab+1075,4(%esp)
	movl	12(%ebp),%eax
	movl	%eax,8(%esp)
	call	codegen_debug
	addl	$12,%esp

	subl	$12,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	12(%ebp),%eax
	movl	%eax,4(%esp)
	movl	16(%ebp),%eax
	movl	%eax,8(%esp)
	call	codegen_EmitFuncCall
	addl	$12,%esp
	movl	%eax,-4(%ebp)

	subl	$4,%esp
	movl	-4(%ebp),%eax
	movl	%eax,0(%esp)
	call	syntax_FreeSyntaxTree
	addl	$4,%esp

	movl	$1,%eax
	jmp	codegen_EmitFuncCallExpr_ret
codegen_EmitFuncCallExpr_ret	:	
	movl	%ebp,%esp
	popl	%ebp
	ret	

.globl	codegen_CheckCasting
.type	codegen_CheckCasting,@function
codegen_CheckCasting	:	
	pushl	%ebp
	movl	%esp,%ebp
	subl	$4,%esp

	subl	$4,%esp
	movl	12(%ebp),%eax
	movl	%eax,0(%esp)
	call	type_IsAPointerType
	addl	$4,%esp
	testl	%eax,%eax
	jz	codegen_CheckCasting_logtermfalse_54
	subl	$4,%esp
	movl	16(%ebp),%eax
	movl	%eax,0(%esp)
	call	type_IsAPointerType
	addl	$4,%esp
	testl	%eax,%eax
	jz	codegen_CheckCasting_logtermfalse_54
	movl	$1,%eax
	jmp	codegen_CheckCasting_logtermtrue_54
codegen_CheckCasting_logtermfalse_54	:	
	movl	$0,%eax
codegen_CheckCasting_logtermtrue_54	:	
	testl	%eax,%eax
	jnz	codegen_CheckCasting_ifbl_53
	jmp	codegen_CheckCasting_elsebl_53
codegen_CheckCasting_ifbl_53	:	

	subl	$0,%esp
	call	codegen_CreateVoidPntType
	addl	$0,%esp
	movl	%eax,-4(%ebp)

	movl	16(%ebp),%ebx
	cmpl	$0,%ebx
	movl	$1,%eax
	jne	codegen_CheckCasting_reltrue_57
	movl	$0,%eax
codegen_CheckCasting_reltrue_57	:	
	testl	%eax,%eax
	jz	codegen_CheckCasting_logtermfalse_56
	subl	$8,%esp
	movl	-4(%ebp),%eax
	movl	%eax,0(%esp)
	movl	12(%ebp),%eax
	movl	%eax,4(%esp)
	call	syntax_EqualTrees
	addl	$8,%esp
	testl	%eax,%eax
	movl	$1,%eax
	jz	codegen_CheckCasting_logfactfalse_58
	movl	$0,%eax
codegen_CheckCasting_logfactfalse_58	:	
	testl	%eax,%eax
	jz	codegen_CheckCasting_logtermfalse_56
	subl	$8,%esp
	movl	-4(%ebp),%eax
	movl	%eax,0(%esp)
	movl	16(%ebp),%eax
	movl	%eax,4(%esp)
	call	syntax_EqualTrees
	addl	$8,%esp
	testl	%eax,%eax
	movl	$1,%eax
	jz	codegen_CheckCasting_logfactfalse_59
	movl	$0,%eax
codegen_CheckCasting_logfactfalse_59	:	
	testl	%eax,%eax
	jz	codegen_CheckCasting_logtermfalse_56
	subl	$8,%esp
	movl	16(%ebp),%eax
	movl	%eax,0(%esp)
	movl	12(%ebp),%eax
	movl	%eax,4(%esp)
	call	syntax_EqualTrees
	addl	$8,%esp
	testl	%eax,%eax
	movl	$1,%eax
	jz	codegen_CheckCasting_logfactfalse_60
	movl	$0,%eax
codegen_CheckCasting_logfactfalse_60	:	
	testl	%eax,%eax
	jz	codegen_CheckCasting_logtermfalse_56
	movl	$1,%eax
	jmp	codegen_CheckCasting_logtermtrue_56
codegen_CheckCasting_logtermfalse_56	:	
	movl	$0,%eax
codegen_CheckCasting_logtermtrue_56	:	
	testl	%eax,%eax
	jnz	codegen_CheckCasting_ifbl_55
	jmp	codegen_CheckCasting_elsebl_55
codegen_CheckCasting_ifbl_55	:	

	subl	$152,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	$symtab+1087,4(%esp)
	movl	%ebp,%eax
	addl	$20,%eax
	movl	%esp,%ebx
	addl	$8,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	call	codegen_reportWarning
	addl	$152,%esp
	jmp	codegen_CheckCasting_endif_55
codegen_CheckCasting_elsebl_55	:	
codegen_CheckCasting_endif_55	:	

	subl	$4,%esp
	movl	-4(%ebp),%eax
	movl	%eax,0(%esp)
	call	syntax_FreeSyntaxTree
	addl	$4,%esp

	movl	$0,%ebx
	subl	$1,%ebx
	movl	%ebx,%eax
	jmp	codegen_CheckCasting_ret
codegen_CheckCasting_elsebl_53	:	
codegen_CheckCasting_endif_53	:	

	subl	$4,%esp
	movl	12(%ebp),%eax
	movl	%eax,0(%esp)
	call	type_IsAStructType
	addl	$4,%esp
	testl	%eax,%eax
	jnz	codegen_CheckCasting_logexprtrue_62
	subl	$4,%esp
	movl	16(%ebp),%eax
	movl	%eax,0(%esp)
	call	type_IsAStructType
	addl	$4,%esp
	testl	%eax,%eax
	jnz	codegen_CheckCasting_logexprtrue_62
	movl	$0,%eax
	jmp	codegen_CheckCasting_logexprfalse_62
codegen_CheckCasting_logexprtrue_62	:	
	movl	$1,%eax
codegen_CheckCasting_logexprfalse_62	:	
	testl	%eax,%eax
	jnz	codegen_CheckCasting_ifbl_61
	jmp	codegen_CheckCasting_elsebl_61
codegen_CheckCasting_ifbl_61	:	

	subl	$8,%esp
	movl	12(%ebp),%eax
	movl	%eax,0(%esp)
	movl	16(%ebp),%eax
	movl	%eax,4(%esp)
	call	syntax_EqualTrees
	addl	$8,%esp
	testl	%eax,%eax
	movl	$1,%eax
	jz	codegen_CheckCasting_logfactfalse_64
	movl	$0,%eax
codegen_CheckCasting_logfactfalse_64	:	
	testl	%eax,%eax
	jnz	codegen_CheckCasting_ifbl_63
	jmp	codegen_CheckCasting_elsebl_63
codegen_CheckCasting_ifbl_63	:	

	subl	$152,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	$symtab+1146,4(%esp)
	movl	%ebp,%eax
	addl	$20,%eax
	movl	%esp,%ebx
	addl	$8,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	call	codegen_reportError
	addl	$152,%esp
	jmp	codegen_CheckCasting_endif_63
codegen_CheckCasting_elsebl_63	:	
codegen_CheckCasting_endif_63	:	
	jmp	codegen_CheckCasting_endif_61
codegen_CheckCasting_elsebl_61	:	
codegen_CheckCasting_endif_61	:	

	movl	$0,%eax
	jmp	codegen_CheckCasting_ret
codegen_CheckCasting_ret	:	
	movl	%ebp,%esp
	popl	%ebp
	ret	

.globl	codegen_EmitCopyJunk
.type	codegen_EmitCopyJunk,@function
codegen_EmitCopyJunk	:	
	pushl	%ebp
	movl	%esp,%ebp
	subl	$172,%esp

	pushl	20(%ebp)
	movl	$4,%eax
	movl	%eax,%ebx
	popl	%eax
	movl	$0,%edx
	idivl	%ebx
	movl	%eax,-4(%ebp)

	pushl	20(%ebp)
	movl	$4,%eax
	movl	%eax,%ebx
	popl	%eax
	movl	$0,%edx
	idivl	%ebx
	movl	%edx,%eax
	movl	%eax,-8(%ebp)

	pushl	$0
	movl	%ebp,%eax
	addl	$12,%eax
	movl	(%eax),%eax
	popl	%esi
	addl	%esi,%eax
	movb	(%eax),%al
	movsbl	%al,%eax
	movl	%eax,%ebx
	cmpl	$37,%ebx
	movl	$1,%eax
	jne	codegen_EmitCopyJunk_reltrue_66
	movl	$0,%eax
codegen_EmitCopyJunk_reltrue_66	:	
	testl	%eax,%eax
	jnz	codegen_EmitCopyJunk_ifbl_65
	jmp	codegen_EmitCopyJunk_elsebl_65
codegen_EmitCopyJunk_ifbl_65	:	

	subl	$8,%esp
	movl	16(%ebp),%eax
	movl	%eax,0(%esp)
	movl	$symtab+216,4(%esp)
	call	strcmp
	addl	$8,%esp
	movl	%eax,%ebx
	cmpl	$0,%ebx
	movl	$1,%eax
	je	codegen_EmitCopyJunk_reltrue_68
	movl	$0,%eax
codegen_EmitCopyJunk_reltrue_68	:	
	testl	%eax,%eax
	jnz	codegen_EmitCopyJunk_ifbl_67
	jmp	codegen_EmitCopyJunk_elsebl_67
codegen_EmitCopyJunk_ifbl_67	:	

	subl	$8,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	$symtab+201,4(%esp)
	call	codegen_emit
	addl	$8,%esp

	subl	$8,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	12(%ebp),%eax
	movl	%eax,4(%esp)
	call	codegen_emit
	addl	$8,%esp

	subl	$8,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	$symtab+1192,4(%esp)
	call	codegen_emit
	addl	$8,%esp

	subl	$8,%esp
	movl	12(%ebp),%eax
	movl	%eax,0(%esp)
	movl	$symtab+1200,4(%esp)
	call	strcpy
	addl	$8,%esp
	jmp	codegen_EmitCopyJunk_endif_67
codegen_EmitCopyJunk_elsebl_67	:	

	subl	$8,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	$symtab+201,4(%esp)
	call	codegen_emit
	addl	$8,%esp

	subl	$8,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	12(%ebp),%eax
	movl	%eax,4(%esp)
	call	codegen_emit
	addl	$8,%esp

	subl	$8,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	$symtab+208,4(%esp)
	call	codegen_emit
	addl	$8,%esp

	subl	$8,%esp
	movl	12(%ebp),%eax
	movl	%eax,0(%esp)
	movl	$symtab+216,4(%esp)
	call	strcpy
	addl	$8,%esp
codegen_EmitCopyJunk_endif_67	:	
	jmp	codegen_EmitCopyJunk_endif_65
codegen_EmitCopyJunk_elsebl_65	:	
codegen_EmitCopyJunk_endif_65	:	

	pushl	$0
	movl	%ebp,%eax
	addl	$16,%eax
	movl	(%eax),%eax
	popl	%esi
	addl	%esi,%eax
	movb	(%eax),%al
	movsbl	%al,%eax
	movl	%eax,%ebx
	cmpl	$37,%ebx
	movl	$1,%eax
	jne	codegen_EmitCopyJunk_reltrue_70
	movl	$0,%eax
codegen_EmitCopyJunk_reltrue_70	:	
	testl	%eax,%eax
	jnz	codegen_EmitCopyJunk_ifbl_69
	jmp	codegen_EmitCopyJunk_elsebl_69
codegen_EmitCopyJunk_ifbl_69	:	

	subl	$8,%esp
	movl	12(%ebp),%eax
	movl	%eax,0(%esp)
	movl	$symtab+216,4(%esp)
	call	strcmp
	addl	$8,%esp
	movl	%eax,%ebx
	cmpl	$0,%ebx
	movl	$1,%eax
	je	codegen_EmitCopyJunk_reltrue_72
	movl	$0,%eax
codegen_EmitCopyJunk_reltrue_72	:	
	testl	%eax,%eax
	jnz	codegen_EmitCopyJunk_ifbl_71
	jmp	codegen_EmitCopyJunk_elsebl_71
codegen_EmitCopyJunk_ifbl_71	:	

	subl	$8,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	$symtab+201,4(%esp)
	call	codegen_emit
	addl	$8,%esp

	subl	$8,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	16(%ebp),%eax
	movl	%eax,4(%esp)
	call	codegen_emit
	addl	$8,%esp

	subl	$8,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	$symtab+1192,4(%esp)
	call	codegen_emit
	addl	$8,%esp

	subl	$8,%esp
	movl	16(%ebp),%eax
	movl	%eax,0(%esp)
	movl	$symtab+1200,4(%esp)
	call	strcpy
	addl	$8,%esp
	jmp	codegen_EmitCopyJunk_endif_71
codegen_EmitCopyJunk_elsebl_71	:	

	subl	$8,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	$symtab+201,4(%esp)
	call	codegen_emit
	addl	$8,%esp

	subl	$8,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	16(%ebp),%eax
	movl	%eax,4(%esp)
	call	codegen_emit
	addl	$8,%esp

	subl	$8,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	$symtab+208,4(%esp)
	call	codegen_emit
	addl	$8,%esp

	subl	$8,%esp
	movl	16(%ebp),%eax
	movl	%eax,0(%esp)
	movl	$symtab+216,4(%esp)
	call	strcpy
	addl	$8,%esp
codegen_EmitCopyJunk_endif_71	:	
	jmp	codegen_EmitCopyJunk_endif_69
codegen_EmitCopyJunk_elsebl_69	:	
codegen_EmitCopyJunk_endif_69	:	

	subl	$8,%esp
	movl	16(%ebp),%eax
	movl	%eax,0(%esp)
	movl	$symtab+216,4(%esp)
	call	strcmp
	addl	$8,%esp
	movl	%eax,%ebx
	cmpl	$0,%ebx
	movl	$1,%eax
	jne	codegen_EmitCopyJunk_reltrue_75
	movl	$0,%eax
codegen_EmitCopyJunk_reltrue_75	:	
	testl	%eax,%eax
	jz	codegen_EmitCopyJunk_logtermfalse_74
	subl	$8,%esp
	movl	12(%ebp),%eax
	movl	%eax,0(%esp)
	movl	$symtab+216,4(%esp)
	call	strcmp
	addl	$8,%esp
	movl	%eax,%ebx
	cmpl	$0,%ebx
	movl	$1,%eax
	jne	codegen_EmitCopyJunk_reltrue_76
	movl	$0,%eax
codegen_EmitCopyJunk_reltrue_76	:	
	testl	%eax,%eax
	jz	codegen_EmitCopyJunk_logtermfalse_74
	movl	$1,%eax
	jmp	codegen_EmitCopyJunk_logtermtrue_74
codegen_EmitCopyJunk_logtermfalse_74	:	
	movl	$0,%eax
codegen_EmitCopyJunk_logtermtrue_74	:	
	testl	%eax,%eax
	jnz	codegen_EmitCopyJunk_ifbl_73
	jmp	codegen_EmitCopyJunk_elsebl_73
codegen_EmitCopyJunk_ifbl_73	:	

	subl	$8,%esp
	movl	%ebp,%eax
	addl	$-172,%eax
	movl	%eax,0(%esp)
	movl	$symtab+216,4(%esp)
	call	strcpy
	addl	$8,%esp
	jmp	codegen_EmitCopyJunk_endif_73
codegen_EmitCopyJunk_elsebl_73	:	

	subl	$8,%esp
	movl	16(%ebp),%eax
	movl	%eax,0(%esp)
	movl	$symtab+1200,4(%esp)
	call	strcmp
	addl	$8,%esp
	movl	%eax,%ebx
	cmpl	$0,%ebx
	movl	$1,%eax
	jne	codegen_EmitCopyJunk_reltrue_79
	movl	$0,%eax
codegen_EmitCopyJunk_reltrue_79	:	
	testl	%eax,%eax
	jz	codegen_EmitCopyJunk_logtermfalse_78
	subl	$8,%esp
	movl	12(%ebp),%eax
	movl	%eax,0(%esp)
	movl	$symtab+1200,4(%esp)
	call	strcmp
	addl	$8,%esp
	movl	%eax,%ebx
	cmpl	$0,%ebx
	movl	$1,%eax
	jne	codegen_EmitCopyJunk_reltrue_80
	movl	$0,%eax
codegen_EmitCopyJunk_reltrue_80	:	
	testl	%eax,%eax
	jz	codegen_EmitCopyJunk_logtermfalse_78
	movl	$1,%eax
	jmp	codegen_EmitCopyJunk_logtermtrue_78
codegen_EmitCopyJunk_logtermfalse_78	:	
	movl	$0,%eax
codegen_EmitCopyJunk_logtermtrue_78	:	
	testl	%eax,%eax
	jnz	codegen_EmitCopyJunk_ifbl_77
	jmp	codegen_EmitCopyJunk_elsebl_77
codegen_EmitCopyJunk_ifbl_77	:	

	subl	$8,%esp
	movl	%ebp,%eax
	addl	$-172,%eax
	movl	%eax,0(%esp)
	movl	$symtab+1200,4(%esp)
	call	strcpy
	addl	$8,%esp
	jmp	codegen_EmitCopyJunk_endif_77
codegen_EmitCopyJunk_elsebl_77	:	

	subl	$8,%esp
	movl	%ebp,%eax
	addl	$-172,%eax
	movl	%eax,0(%esp)
	movl	$symtab+1205,4(%esp)
	call	strcpy
	addl	$8,%esp
codegen_EmitCopyJunk_endif_77	:	
codegen_EmitCopyJunk_endif_73	:	

	movl	$0,-12(%ebp)

codegen_EmitCopyJunk_while_81	:	
	movl	-12(%ebp),%ebx
	cmpl	-4(%ebp),%ebx
	movl	$1,%eax
	jl	codegen_EmitCopyJunk_reltrue_82
	movl	$0,%eax
codegen_EmitCopyJunk_reltrue_82	:	
	testl	%eax,%eax
	jz	codegen_EmitCopyJunk_endwhile_81

	subl	$8,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	$symtab+1210,4(%esp)
	call	codegen_emit
	addl	$8,%esp

	subl	$8,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	16(%ebp),%eax
	movl	%eax,4(%esp)
	call	codegen_emit
	addl	$8,%esp

	subl	$8,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	$symtab+1218,4(%esp)
	call	codegen_emit
	addl	$8,%esp

	subl	$8,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	%ebp,%eax
	addl	$-172,%eax
	movl	%eax,4(%esp)
	call	codegen_emit
	addl	$8,%esp

	subl	$8,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	$symtab+198,4(%esp)
	call	codegen_emit
	addl	$8,%esp

	subl	$8,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	$symtab+201,4(%esp)
	call	codegen_emit
	addl	$8,%esp

	subl	$8,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	%ebp,%eax
	addl	$-172,%eax
	movl	%eax,4(%esp)
	call	codegen_emit
	addl	$8,%esp

	subl	$8,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	$symtab+1222,4(%esp)
	call	codegen_emit
	addl	$8,%esp

	subl	$8,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	12(%ebp),%eax
	movl	%eax,4(%esp)
	call	codegen_emit
	addl	$8,%esp

	subl	$8,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	$symtab+1226,4(%esp)
	call	codegen_emit
	addl	$8,%esp

	subl	$8,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	$symtab+1229,4(%esp)
	call	codegen_emit
	addl	$8,%esp

	subl	$8,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	16(%ebp),%eax
	movl	%eax,4(%esp)
	call	codegen_emit
	addl	$8,%esp

	subl	$8,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	$symtab+198,4(%esp)
	call	codegen_emit
	addl	$8,%esp

	subl	$8,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	$symtab+1229,4(%esp)
	call	codegen_emit
	addl	$8,%esp

	subl	$8,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	12(%ebp),%eax
	movl	%eax,4(%esp)
	call	codegen_emit
	addl	$8,%esp

	subl	$8,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	$symtab+198,4(%esp)
	call	codegen_emit
	addl	$8,%esp

	movl	-12(%ebp),%ebx
	addl	$1,%ebx
	movl	%ebx,%eax
	movl	%eax,-12(%ebp)
	jmp	codegen_EmitCopyJunk_while_81
codegen_EmitCopyJunk_endwhile_81	:	

	pushl	$1
	pushl	$2
	movl	%ebp,%eax
	addl	$-172,%eax
	popl	%esi
	addl	%esi,%eax
	movb	(%eax),%al
	popl	%esi
	movb	%al,-172(%ebp,%esi,1)

	movl	$2,%esi
	movb	$108,-172(%ebp,%esi,1)

	movl	$3,%esi
	movb	$0,-172(%ebp,%esi,1)

	movl	$0,-12(%ebp)

codegen_EmitCopyJunk_while_83	:	
	movl	-12(%ebp),%ebx
	cmpl	-8(%ebp),%ebx
	movl	$1,%eax
	jl	codegen_EmitCopyJunk_reltrue_84
	movl	$0,%eax
codegen_EmitCopyJunk_reltrue_84	:	
	testl	%eax,%eax
	jz	codegen_EmitCopyJunk_endwhile_83

	subl	$8,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	$symtab+1240,4(%esp)
	call	codegen_emit
	addl	$8,%esp

	subl	$8,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	16(%ebp),%eax
	movl	%eax,4(%esp)
	call	codegen_emit
	addl	$8,%esp

	subl	$8,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	$symtab+1218,4(%esp)
	call	codegen_emit
	addl	$8,%esp

	subl	$8,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	%ebp,%eax
	addl	$-172,%eax
	movl	%eax,4(%esp)
	call	codegen_emit
	addl	$8,%esp

	subl	$8,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	$symtab+198,4(%esp)
	call	codegen_emit
	addl	$8,%esp

	subl	$8,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	$symtab+221,4(%esp)
	call	codegen_emit
	addl	$8,%esp

	subl	$8,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	%ebp,%eax
	addl	$-172,%eax
	movl	%eax,4(%esp)
	call	codegen_emit
	addl	$8,%esp

	subl	$8,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	$symtab+1222,4(%esp)
	call	codegen_emit
	addl	$8,%esp

	subl	$8,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	12(%ebp),%eax
	movl	%eax,4(%esp)
	call	codegen_emit
	addl	$8,%esp

	subl	$8,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	$symtab+1226,4(%esp)
	call	codegen_emit
	addl	$8,%esp

	subl	$8,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	$symtab+1248,4(%esp)
	call	codegen_emit
	addl	$8,%esp

	subl	$8,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	16(%ebp),%eax
	movl	%eax,4(%esp)
	call	codegen_emit
	addl	$8,%esp

	subl	$8,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	$symtab+198,4(%esp)
	call	codegen_emit
	addl	$8,%esp

	subl	$8,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	$symtab+1248,4(%esp)
	call	codegen_emit
	addl	$8,%esp

	subl	$8,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	12(%ebp),%eax
	movl	%eax,4(%esp)
	call	codegen_emit
	addl	$8,%esp

	subl	$8,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	$symtab+198,4(%esp)
	call	codegen_emit
	addl	$8,%esp

	movl	-12(%ebp),%ebx
	addl	$1,%ebx
	movl	%ebx,%eax
	movl	%eax,-12(%ebp)
	jmp	codegen_EmitCopyJunk_while_83
codegen_EmitCopyJunk_endwhile_83	:	

	movl	$0,%eax
	jmp	codegen_EmitCopyJunk_ret
codegen_EmitCopyJunk_ret	:	
	movl	%ebp,%esp
	popl	%ebp
	ret	

.globl	codegen_EmitFastAssign
.type	codegen_EmitFastAssign,@function
codegen_EmitFastAssign	:	
	pushl	%ebp
	movl	%esp,%ebp
	subl	$216,%esp

	subl	$8,%esp
	movl	12(%ebp),%eax
	movl	%eax,0(%esp)
	movl	$0,4(%esp)
	call	syntax_GetChild
	addl	$8,%esp
	movl	%eax,-4(%ebp)

	subl	$8,%esp
	movl	12(%ebp),%eax
	movl	%eax,0(%esp)
	movl	$2,4(%esp)
	call	syntax_GetChild
	addl	$8,%esp
	movl	%eax,-8(%ebp)

	movl	%ebp,%eax
	addl	$8,%eax
	movl	(%eax),%eax
	addl	$20,%eax
	movl	(%eax),%eax
	addl	$4,%eax
	movl	(%eax),%eax
	movl	%eax,-216(%ebp)

	subl	$4,%esp
	movl	-4(%ebp),%eax
	movl	%eax,0(%esp)
	call	syntax_CountChilds
	addl	$4,%esp
	movl	%eax,-12(%ebp)

	subl	$4,%esp
	movl	-4(%ebp),%eax
	movl	%eax,0(%esp)
	call	type_CountVarexprResolutions
	addl	$4,%esp
	movl	%eax,-16(%ebp)

	subl	$8,%esp
	movl	-4(%ebp),%eax
	movl	%eax,0(%esp)
	movl	-12(%ebp),%ebx
	subl	$1,%ebx
	movl	%ebx,%eax
	movl	%eax,4(%esp)
	call	syntax_GetChild
	addl	$8,%esp
	movl	%eax,-204(%ebp)

	movl	%ebp,%eax
	addl	$-204,%eax
	movl	(%eax),%eax
	addl	$8,%eax
	addl	$0,%eax
	movl	(%eax),%eax
	movl	%eax,%ebx
	cmpl	$4,%ebx
	movl	$1,%eax
	je	codegen_EmitFastAssign_reltrue_86
	movl	$0,%eax
codegen_EmitFastAssign_reltrue_86	:	
	testl	%eax,%eax
	jnz	codegen_EmitFastAssign_ifbl_85
	jmp	codegen_EmitFastAssign_elsebl_85
codegen_EmitFastAssign_ifbl_85	:	

	movl	$1,-20(%ebp)
	jmp	codegen_EmitFastAssign_endif_85
codegen_EmitFastAssign_elsebl_85	:	

	movl	$0,-20(%ebp)
codegen_EmitFastAssign_endif_85	:	

	subl	$8,%esp
	movl	-4(%ebp),%eax
	movl	%eax,0(%esp)
	movl	$0,4(%esp)
	call	syntax_GetChild
	addl	$8,%esp
	movl	%eax,-204(%ebp)

	movl	%ebp,%eax
	addl	$-204,%eax
	movl	(%eax),%eax
	addl	$8,%eax
	addl	$0,%eax
	movl	(%eax),%eax
	movl	%eax,%ebx
	cmpl	$43,%ebx
	movl	$1,%eax
	jne	codegen_EmitFastAssign_reltrue_88
	movl	$0,%eax
codegen_EmitFastAssign_reltrue_88	:	
	testl	%eax,%eax
	jnz	codegen_EmitFastAssign_ifbl_87
	jmp	codegen_EmitFastAssign_elsebl_87
codegen_EmitFastAssign_ifbl_87	:	

	movl	$1,-24(%ebp)
	jmp	codegen_EmitFastAssign_endif_87
codegen_EmitFastAssign_elsebl_87	:	

	movl	$0,-24(%ebp)
codegen_EmitFastAssign_endif_87	:	

	subl	$8,%esp
	movl	-4(%ebp),%eax
	movl	%eax,0(%esp)
	movl	-24(%ebp),%eax
	movl	%eax,4(%esp)
	call	syntax_GetChild
	addl	$8,%esp
	movl	%eax,-204(%ebp)

	subl	$148,%esp
	movl	-216(%ebp),%eax
	movl	%eax,0(%esp)
	movl	%ebp,%eax
	addl	$-204,%eax
	movl	(%eax),%eax
	addl	$8,%eax
	movl	%esp,%ebx
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	call	symbol_FindVariable
	addl	$148,%esp
	movl	%eax,-28(%ebp)

	movl	-28(%ebp),%ebx
	cmpl	$0,%ebx
	movl	$1,%eax
	je	codegen_EmitFastAssign_reltrue_90
	movl	$0,%eax
codegen_EmitFastAssign_reltrue_90	:	
	testl	%eax,%eax
	jnz	codegen_EmitFastAssign_ifbl_89
	jmp	codegen_EmitFastAssign_elsebl_89
codegen_EmitFastAssign_ifbl_89	:	

	subl	$4,%esp
	movl	-204(%ebp),%eax
	movl	%eax,0(%esp)
	call	syntax_printTree
	addl	$4,%esp

	subl	$152,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	$symtab+1259,4(%esp)
	movl	%ebp,%eax
	addl	$-204,%eax
	movl	(%eax),%eax
	addl	$8,%eax
	movl	%esp,%ebx
	addl	$8,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	call	codegen_reportError
	addl	$152,%esp

	movl	$0,%ebx
	subl	$1,%ebx
	movl	%ebx,%eax
	jmp	codegen_EmitFastAssign_ret
codegen_EmitFastAssign_elsebl_89	:	
codegen_EmitFastAssign_endif_89	:	

	movl	%ebp,%eax
	addl	$-28,%eax
	movl	(%eax),%eax
	addl	$148,%eax
	movl	(%eax),%eax
	movl	%eax,-212(%ebp)

	subl	$4,%esp
	movl	%ebp,%eax
	addl	$-28,%eax
	movl	(%eax),%eax
	addl	$148,%eax
	movl	(%eax),%eax
	movl	%eax,0(%esp)
	call	type_CreateType
	addl	$4,%esp
	movl	%eax,-36(%ebp)

	movl	-24(%ebp),%ebx
	cmpl	$0,%ebx
	movl	$1,%eax
	je	codegen_EmitFastAssign_reltrue_93
	movl	$0,%eax
codegen_EmitFastAssign_reltrue_93	:	
	testl	%eax,%eax
	jz	codegen_EmitFastAssign_logtermfalse_92
	movl	-20(%ebp),%ebx
	cmpl	$0,%ebx
	movl	$1,%eax
	je	codegen_EmitFastAssign_reltrue_94
	movl	$0,%eax
codegen_EmitFastAssign_reltrue_94	:	
	testl	%eax,%eax
	jz	codegen_EmitFastAssign_logtermfalse_92
	movl	-16(%ebp),%ebx
	cmpl	$1,%ebx
	movl	$1,%eax
	je	codegen_EmitFastAssign_reltrue_95
	movl	$0,%eax
codegen_EmitFastAssign_reltrue_95	:	
	testl	%eax,%eax
	jz	codegen_EmitFastAssign_logtermfalse_92
	subl	$4,%esp
	movl	-36(%ebp),%eax
	movl	%eax,0(%esp)
	call	type_IsAStructType
	addl	$4,%esp
	testl	%eax,%eax
	movl	$1,%eax
	jz	codegen_EmitFastAssign_logfactfalse_96
	movl	$0,%eax
codegen_EmitFastAssign_logfactfalse_96	:	
	testl	%eax,%eax
	jz	codegen_EmitFastAssign_logtermfalse_92
	subl	$4,%esp
	movl	-212(%ebp),%eax
	movl	%eax,0(%esp)
	call	type_IsAArrayVar
	addl	$4,%esp
	testl	%eax,%eax
	movl	$1,%eax
	jz	codegen_EmitFastAssign_logfactfalse_97
	movl	$0,%eax
codegen_EmitFastAssign_logfactfalse_97	:	
	testl	%eax,%eax
	jz	codegen_EmitFastAssign_logtermfalse_92
	movl	$1,%eax
	jmp	codegen_EmitFastAssign_logtermtrue_92
codegen_EmitFastAssign_logtermfalse_92	:	
	movl	$0,%eax
codegen_EmitFastAssign_logtermtrue_92	:	
	testl	%eax,%eax
	jnz	codegen_EmitFastAssign_ifbl_91
	jmp	codegen_EmitFastAssign_elsebl_91
codegen_EmitFastAssign_ifbl_91	:	

	subl	$12,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	-8(%ebp),%eax
	movl	%eax,4(%esp)
	movl	%ebp,%eax
	addl	$-200,%eax
	movl	%eax,8(%esp)
	call	codegen_EmitLogExpr
	addl	$12,%esp
	movl	%eax,-32(%ebp)

	subl	$12,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	%ebp,%eax
	addl	$-200,%eax
	movl	%eax,4(%esp)
	movl	-32(%ebp),%eax
	movl	%eax,8(%esp)
	call	codegen_EmitAvoidIndirect
	addl	$12,%esp

	subl	$8,%esp
	movl	12(%ebp),%eax
	movl	%eax,0(%esp)
	movl	$1,4(%esp)
	call	syntax_GetChild
	addl	$8,%esp
	movl	%eax,-204(%ebp)

	subl	$156,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	-36(%ebp),%eax
	movl	%eax,4(%esp)
	movl	-32(%ebp),%eax
	movl	%eax,8(%esp)
	movl	%ebp,%eax
	addl	$-204,%eax
	movl	(%eax),%eax
	addl	$8,%eax
	movl	%esp,%ebx
	addl	$12,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	call	codegen_CheckCasting
	addl	$156,%esp

	subl	$4,%esp
	movl	-36(%ebp),%eax
	movl	%eax,0(%esp)
	call	type_IsLongSized
	addl	$4,%esp
	testl	%eax,%eax
	jnz	codegen_EmitFastAssign_ifbl_98
	jmp	codegen_EmitFastAssign_elsebl_98
codegen_EmitFastAssign_ifbl_98	:	

	subl	$156,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	%ebp,%eax
	addl	$-204,%eax
	movl	(%eax),%eax
	addl	$8,%eax
	movl	%esp,%ebx
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	%ebp,%eax
	addl	$-200,%eax
	movl	%eax,148(%esp)
	movl	-32(%ebp),%eax
	movl	%eax,152(%esp)
	call	codegen_CastToInt
	addl	$156,%esp
	movl	%eax,-32(%ebp)

	subl	$8,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	$symtab+201,4(%esp)
	call	codegen_emit
	addl	$8,%esp

	subl	$8,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	%ebp,%eax
	addl	$-200,%eax
	movl	%eax,4(%esp)
	call	codegen_emit
	addl	$8,%esp

	subl	$8,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	$symtab+616,4(%esp)
	call	codegen_emit
	addl	$8,%esp
	jmp	codegen_EmitFastAssign_endif_98
codegen_EmitFastAssign_elsebl_98	:	

	subl	$4,%esp
	movl	-36(%ebp),%eax
	movl	%eax,0(%esp)
	call	type_IsByteSized
	addl	$4,%esp
	testl	%eax,%eax
	jnz	codegen_EmitFastAssign_ifbl_99
	jmp	codegen_EmitFastAssign_elsebl_99
codegen_EmitFastAssign_ifbl_99	:	

	subl	$156,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	%ebp,%eax
	addl	$-204,%eax
	movl	(%eax),%eax
	addl	$8,%eax
	movl	%esp,%ebx
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	%ebp,%eax
	addl	$-200,%eax
	movl	%eax,148(%esp)
	movl	-32(%ebp),%eax
	movl	%eax,152(%esp)
	call	codegen_CastToChar
	addl	$156,%esp
	movl	%eax,-32(%ebp)

	subl	$8,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	$symtab+221,4(%esp)
	call	codegen_emit
	addl	$8,%esp

	subl	$8,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	%ebp,%eax
	addl	$-200,%eax
	movl	%eax,4(%esp)
	call	codegen_emit
	addl	$8,%esp

	subl	$8,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	$symtab+616,4(%esp)
	call	codegen_emit
	addl	$8,%esp
	jmp	codegen_EmitFastAssign_endif_99
codegen_EmitFastAssign_elsebl_99	:	

	subl	$8,%esp
	movl	12(%ebp),%eax
	movl	%eax,0(%esp)
	movl	$1,4(%esp)
	call	syntax_GetChild
	addl	$8,%esp
	movl	%eax,-204(%ebp)

	subl	$152,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	$symtab+1278,4(%esp)
	movl	%ebp,%eax
	addl	$-204,%eax
	movl	(%eax),%eax
	addl	$8,%eax
	movl	%esp,%ebx
	addl	$8,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	call	codegen_reportError
	addl	$152,%esp

	subl	$4,%esp
	movl	-36(%ebp),%eax
	movl	%eax,0(%esp)
	call	syntax_FreeSyntaxTree
	addl	$4,%esp

	movl	$0,%ebx
	subl	$1,%ebx
	movl	%ebx,%eax
	jmp	codegen_EmitFastAssign_ret
codegen_EmitFastAssign_endif_99	:	
codegen_EmitFastAssign_endif_98	:	

	movl	%ebp,%eax
	addl	$-28,%eax
	movl	(%eax),%eax
	addl	$144,%eax
	movl	(%eax),%eax
	movl	%eax,%ebx
	cmpl	$4,%ebx
	movl	$1,%eax
	je	codegen_EmitFastAssign_reltrue_102
	movl	$0,%eax
codegen_EmitFastAssign_reltrue_102	:	
	testl	%eax,%eax
	jnz	codegen_EmitFastAssign_logexprtrue_101
	movl	%ebp,%eax
	addl	$-28,%eax
	movl	(%eax),%eax
	addl	$144,%eax
	movl	(%eax),%eax
	movl	%eax,%ebx
	cmpl	$6,%ebx
	movl	$1,%eax
	je	codegen_EmitFastAssign_reltrue_103
	movl	$0,%eax
codegen_EmitFastAssign_reltrue_103	:	
	testl	%eax,%eax
	jnz	codegen_EmitFastAssign_logexprtrue_101
	movl	$0,%eax
	jmp	codegen_EmitFastAssign_logexprfalse_101
codegen_EmitFastAssign_logexprtrue_101	:	
	movl	$1,%eax
codegen_EmitFastAssign_logexprfalse_101	:	
	testl	%eax,%eax
	jnz	codegen_EmitFastAssign_ifbl_100
	jmp	codegen_EmitFastAssign_elsebl_100
codegen_EmitFastAssign_ifbl_100	:	

	subl	$12,%esp
	movl	%ebp,%eax
	addl	$-200,%eax
	movl	%eax,0(%esp)
	movl	$symtab+1318,4(%esp)
	subl	$8,%esp
	movl	-216(%ebp),%eax
	movl	%eax,0(%esp)
	movl	-28(%ebp),%eax
	movl	%eax,4(%esp)
	call	symbol_GetNonGlobalOffset
	addl	$8,%esp
	movl	%eax,8(%esp)
	call	sprintf
	addl	$12,%esp
	jmp	codegen_EmitFastAssign_endif_100
codegen_EmitFastAssign_elsebl_100	:	

	subl	$12,%esp
	movl	%ebp,%eax
	addl	$-200,%eax
	movl	%eax,0(%esp)
	movl	$symtab+1328,4(%esp)
	subl	$8,%esp
	movl	-216(%ebp),%eax
	movl	%eax,0(%esp)
	movl	-28(%ebp),%eax
	movl	%eax,4(%esp)
	call	symbol_GetGlobalOffset
	addl	$8,%esp
	movl	%eax,8(%esp)
	call	sprintf
	addl	$12,%esp
codegen_EmitFastAssign_endif_100	:	

	subl	$8,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	%ebp,%eax
	addl	$-200,%eax
	movl	%eax,4(%esp)
	call	codegen_emit
	addl	$8,%esp

	subl	$8,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	$symtab+198,4(%esp)
	call	codegen_emit
	addl	$8,%esp

	subl	$4,%esp
	movl	-36(%ebp),%eax
	movl	%eax,0(%esp)
	call	syntax_FreeSyntaxTree
	addl	$4,%esp

	movl	$1,%eax
	jmp	codegen_EmitFastAssign_ret
codegen_EmitFastAssign_elsebl_91	:	
codegen_EmitFastAssign_endif_91	:	

	movl	-24(%ebp),%ebx
	cmpl	$0,%ebx
	movl	$1,%eax
	je	codegen_EmitFastAssign_reltrue_106
	movl	$0,%eax
codegen_EmitFastAssign_reltrue_106	:	
	testl	%eax,%eax
	jz	codegen_EmitFastAssign_logtermfalse_105
	movl	-20(%ebp),%ebx
	cmpl	$1,%ebx
	movl	$1,%eax
	je	codegen_EmitFastAssign_reltrue_107
	movl	$0,%eax
codegen_EmitFastAssign_reltrue_107	:	
	testl	%eax,%eax
	jz	codegen_EmitFastAssign_logtermfalse_105
	movl	-16(%ebp),%ebx
	cmpl	$1,%ebx
	movl	$1,%eax
	je	codegen_EmitFastAssign_reltrue_108
	movl	$0,%eax
codegen_EmitFastAssign_reltrue_108	:	
	testl	%eax,%eax
	jz	codegen_EmitFastAssign_logtermfalse_105
	subl	$4,%esp
	movl	-212(%ebp),%eax
	movl	%eax,0(%esp)
	call	type_IsAArrayVar
	addl	$4,%esp
	testl	%eax,%eax
	jz	codegen_EmitFastAssign_logtermfalse_105
	movl	$1,%eax
	jmp	codegen_EmitFastAssign_logtermtrue_105
codegen_EmitFastAssign_logtermfalse_105	:	
	movl	$0,%eax
codegen_EmitFastAssign_logtermtrue_105	:	
	testl	%eax,%eax
	jnz	codegen_EmitFastAssign_ifbl_104
	jmp	codegen_EmitFastAssign_elsebl_104
codegen_EmitFastAssign_ifbl_104	:	

	subl	$4,%esp
	movl	-212(%ebp),%eax
	movl	%eax,0(%esp)
	call	type_CreateArrayElmType
	addl	$4,%esp
	movl	%eax,-40(%ebp)

	subl	$4,%esp
	movl	-40(%ebp),%eax
	movl	%eax,0(%esp)
	call	type_IsAStructType
	addl	$4,%esp
	testl	%eax,%eax
	jnz	codegen_EmitFastAssign_ifbl_109
	jmp	codegen_EmitFastAssign_elsebl_109
codegen_EmitFastAssign_ifbl_109	:	

	subl	$4,%esp
	movl	-36(%ebp),%eax
	movl	%eax,0(%esp)
	call	syntax_FreeSyntaxTree
	addl	$4,%esp

	subl	$4,%esp
	movl	-40(%ebp),%eax
	movl	%eax,0(%esp)
	call	syntax_FreeSyntaxTree
	addl	$4,%esp

	movl	$0,%eax
	jmp	codegen_EmitFastAssign_ret
codegen_EmitFastAssign_elsebl_109	:	
codegen_EmitFastAssign_endif_109	:	

	subl	$8,%esp
	movl	-4(%ebp),%eax
	movl	%eax,0(%esp)
	movl	-12(%ebp),%ebx
	subl	$1,%ebx
	movl	%ebx,%eax
	movl	%eax,4(%esp)
	call	syntax_GetChild
	addl	$8,%esp
	movl	%eax,-204(%ebp)

	subl	$12,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	subl	$8,%esp
	movl	-4(%ebp),%eax
	movl	%eax,0(%esp)
	movl	-12(%ebp),%ebx
	subl	$2,%ebx
	movl	%ebx,%eax
	movl	%eax,4(%esp)
	call	syntax_GetChild
	addl	$8,%esp
	movl	%eax,4(%esp)
	movl	%ebp,%eax
	addl	$-200,%eax
	movl	%eax,8(%esp)
	call	codegen_EmitLogExpr
	addl	$12,%esp
	movl	%eax,-208(%ebp)

	subl	$156,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	%ebp,%eax
	addl	$-204,%eax
	movl	(%eax),%eax
	addl	$8,%eax
	movl	%esp,%ebx
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	%ebp,%eax
	addl	$-200,%eax
	movl	%eax,148(%esp)
	movl	-208(%ebp),%eax
	movl	%eax,152(%esp)
	call	codegen_CastToInt
	addl	$156,%esp
	movl	%eax,-208(%ebp)

	subl	$4,%esp
	movl	-208(%ebp),%eax
	movl	%eax,0(%esp)
	call	syntax_FreeSyntaxTree
	addl	$4,%esp

	subl	$8,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	$symtab+1338,4(%esp)
	call	codegen_emit
	addl	$8,%esp

	subl	$8,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	%ebp,%eax
	addl	$-200,%eax
	movl	%eax,4(%esp)
	call	codegen_emit
	addl	$8,%esp

	subl	$8,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	$symtab+198,4(%esp)
	call	codegen_emit
	addl	$8,%esp

	subl	$12,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	-8(%ebp),%eax
	movl	%eax,4(%esp)
	movl	%ebp,%eax
	addl	$-200,%eax
	movl	%eax,8(%esp)
	call	codegen_EmitLogExpr
	addl	$12,%esp
	movl	%eax,-32(%ebp)

	subl	$12,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	%ebp,%eax
	addl	$-200,%eax
	movl	%eax,4(%esp)
	movl	-32(%ebp),%eax
	movl	%eax,8(%esp)
	call	codegen_EmitAvoidIndirect
	addl	$12,%esp

	subl	$8,%esp
	movl	12(%ebp),%eax
	movl	%eax,0(%esp)
	movl	$1,4(%esp)
	call	syntax_GetChild
	addl	$8,%esp
	movl	%eax,-204(%ebp)

	subl	$156,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	-40(%ebp),%eax
	movl	%eax,4(%esp)
	movl	-32(%ebp),%eax
	movl	%eax,8(%esp)
	movl	%ebp,%eax
	addl	$-204,%eax
	movl	(%eax),%eax
	addl	$8,%eax
	movl	%esp,%ebx
	addl	$12,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	call	codegen_CheckCasting
	addl	$156,%esp

	subl	$8,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	$symtab+1346,4(%esp)
	call	codegen_emit
	addl	$8,%esp

	subl	$4,%esp
	movl	-40(%ebp),%eax
	movl	%eax,0(%esp)
	call	type_IsLongSized
	addl	$4,%esp
	testl	%eax,%eax
	jnz	codegen_EmitFastAssign_ifbl_110
	jmp	codegen_EmitFastAssign_elsebl_110
codegen_EmitFastAssign_ifbl_110	:	

	subl	$156,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	%ebp,%eax
	addl	$-204,%eax
	movl	(%eax),%eax
	addl	$8,%eax
	movl	%esp,%ebx
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	%ebp,%eax
	addl	$-200,%eax
	movl	%eax,148(%esp)
	movl	-32(%ebp),%eax
	movl	%eax,152(%esp)
	call	codegen_CastToInt
	addl	$156,%esp
	movl	%eax,-32(%ebp)

	subl	$8,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	$symtab+201,4(%esp)
	call	codegen_emit
	addl	$8,%esp

	subl	$8,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	%ebp,%eax
	addl	$-200,%eax
	movl	%eax,4(%esp)
	call	codegen_emit
	addl	$8,%esp

	subl	$8,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	$symtab+616,4(%esp)
	call	codegen_emit
	addl	$8,%esp
	jmp	codegen_EmitFastAssign_endif_110
codegen_EmitFastAssign_elsebl_110	:	

	subl	$4,%esp
	movl	-40(%ebp),%eax
	movl	%eax,0(%esp)
	call	type_IsByteSized
	addl	$4,%esp
	testl	%eax,%eax
	jnz	codegen_EmitFastAssign_ifbl_111
	jmp	codegen_EmitFastAssign_elsebl_111
codegen_EmitFastAssign_ifbl_111	:	

	subl	$156,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	%ebp,%eax
	addl	$-204,%eax
	movl	(%eax),%eax
	addl	$8,%eax
	movl	%esp,%ebx
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	%ebp,%eax
	addl	$-200,%eax
	movl	%eax,148(%esp)
	movl	-32(%ebp),%eax
	movl	%eax,152(%esp)
	call	codegen_CastToChar
	addl	$156,%esp
	movl	%eax,-32(%ebp)

	subl	$8,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	$symtab+221,4(%esp)
	call	codegen_emit
	addl	$8,%esp

	subl	$8,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	%ebp,%eax
	addl	$-200,%eax
	movl	%eax,4(%esp)
	call	codegen_emit
	addl	$8,%esp

	subl	$8,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	$symtab+616,4(%esp)
	call	codegen_emit
	addl	$8,%esp
	jmp	codegen_EmitFastAssign_endif_111
codegen_EmitFastAssign_elsebl_111	:	

	subl	$8,%esp
	movl	12(%ebp),%eax
	movl	%eax,0(%esp)
	movl	$1,4(%esp)
	call	syntax_GetChild
	addl	$8,%esp
	movl	%eax,-204(%ebp)

	subl	$152,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	$symtab+1278,4(%esp)
	movl	%ebp,%eax
	addl	$-204,%eax
	movl	(%eax),%eax
	addl	$8,%eax
	movl	%esp,%ebx
	addl	$8,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	call	codegen_reportError
	addl	$152,%esp

	subl	$4,%esp
	movl	-36(%ebp),%eax
	movl	%eax,0(%esp)
	call	syntax_FreeSyntaxTree
	addl	$4,%esp

	subl	$4,%esp
	movl	-40(%ebp),%eax
	movl	%eax,0(%esp)
	call	syntax_FreeSyntaxTree
	addl	$4,%esp

	movl	$0,%ebx
	subl	$1,%ebx
	movl	%ebx,%eax
	jmp	codegen_EmitFastAssign_ret
codegen_EmitFastAssign_endif_111	:	
codegen_EmitFastAssign_endif_110	:	

	movl	%ebp,%eax
	addl	$-28,%eax
	movl	(%eax),%eax
	addl	$144,%eax
	movl	(%eax),%eax
	movl	%eax,%ebx
	cmpl	$4,%ebx
	movl	$1,%eax
	je	codegen_EmitFastAssign_reltrue_114
	movl	$0,%eax
codegen_EmitFastAssign_reltrue_114	:	
	testl	%eax,%eax
	jnz	codegen_EmitFastAssign_logexprtrue_113
	movl	%ebp,%eax
	addl	$-28,%eax
	movl	(%eax),%eax
	addl	$144,%eax
	movl	(%eax),%eax
	movl	%eax,%ebx
	cmpl	$6,%ebx
	movl	$1,%eax
	je	codegen_EmitFastAssign_reltrue_115
	movl	$0,%eax
codegen_EmitFastAssign_reltrue_115	:	
	testl	%eax,%eax
	jnz	codegen_EmitFastAssign_logexprtrue_113
	movl	$0,%eax
	jmp	codegen_EmitFastAssign_logexprfalse_113
codegen_EmitFastAssign_logexprtrue_113	:	
	movl	$1,%eax
codegen_EmitFastAssign_logexprfalse_113	:	
	testl	%eax,%eax
	jnz	codegen_EmitFastAssign_ifbl_112
	jmp	codegen_EmitFastAssign_elsebl_112
codegen_EmitFastAssign_ifbl_112	:	

	subl	$12,%esp
	movl	%ebp,%eax
	addl	$-200,%eax
	movl	%eax,0(%esp)
	movl	$symtab+1358,4(%esp)
	subl	$8,%esp
	movl	-216(%ebp),%eax
	movl	%eax,0(%esp)
	movl	-28(%ebp),%eax
	movl	%eax,4(%esp)
	call	symbol_GetNonGlobalOffset
	addl	$8,%esp
	movl	%eax,8(%esp)
	call	sprintf
	addl	$12,%esp

	subl	$8,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	%ebp,%eax
	addl	$-200,%eax
	movl	%eax,4(%esp)
	call	codegen_emit
	addl	$8,%esp

	subl	$12,%esp
	movl	%ebp,%eax
	addl	$-200,%eax
	movl	%eax,0(%esp)
	movl	$symtab+1361,4(%esp)
	subl	$8,%esp
	movl	-216(%ebp),%eax
	movl	%eax,0(%esp)
	movl	-212(%ebp),%eax
	movl	%eax,4(%esp)
	call	type_GetArrayElmSize
	addl	$8,%esp
	movl	%eax,8(%esp)
	call	sprintf
	addl	$12,%esp

	subl	$8,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	%ebp,%eax
	addl	$-200,%eax
	movl	%eax,4(%esp)
	call	codegen_emit
	addl	$8,%esp
	jmp	codegen_EmitFastAssign_endif_112
codegen_EmitFastAssign_elsebl_112	:	

	subl	$12,%esp
	movl	%ebp,%eax
	addl	$-200,%eax
	movl	%eax,0(%esp)
	movl	$symtab+1328,4(%esp)
	subl	$8,%esp
	movl	-216(%ebp),%eax
	movl	%eax,0(%esp)
	movl	-28(%ebp),%eax
	movl	%eax,4(%esp)
	call	symbol_GetGlobalOffset
	addl	$8,%esp
	movl	%eax,8(%esp)
	call	sprintf
	addl	$12,%esp

	subl	$8,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	%ebp,%eax
	addl	$-200,%eax
	movl	%eax,4(%esp)
	call	codegen_emit
	addl	$8,%esp

	subl	$12,%esp
	movl	%ebp,%eax
	addl	$-200,%eax
	movl	%eax,0(%esp)
	movl	$symtab+1381,4(%esp)
	subl	$8,%esp
	movl	-216(%ebp),%eax
	movl	%eax,0(%esp)
	movl	-212(%ebp),%eax
	movl	%eax,4(%esp)
	call	type_GetArrayElmSize
	addl	$8,%esp
	movl	%eax,8(%esp)
	call	sprintf
	addl	$12,%esp

	subl	$8,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	%ebp,%eax
	addl	$-200,%eax
	movl	%eax,4(%esp)
	call	codegen_emit
	addl	$8,%esp
codegen_EmitFastAssign_endif_112	:	

	subl	$4,%esp
	movl	-36(%ebp),%eax
	movl	%eax,0(%esp)
	call	syntax_FreeSyntaxTree
	addl	$4,%esp

	subl	$4,%esp
	movl	-40(%ebp),%eax
	movl	%eax,0(%esp)
	call	syntax_FreeSyntaxTree
	addl	$4,%esp

	movl	$1,%eax
	jmp	codegen_EmitFastAssign_ret
codegen_EmitFastAssign_elsebl_104	:	
codegen_EmitFastAssign_endif_104	:	

	subl	$4,%esp
	movl	-36(%ebp),%eax
	movl	%eax,0(%esp)
	call	syntax_FreeSyntaxTree
	addl	$4,%esp

	movl	$0,%eax
	jmp	codegen_EmitFastAssign_ret
codegen_EmitFastAssign_ret	:	
	movl	%ebp,%esp
	popl	%ebp
	ret	

.globl	codegen_EmitAssign
.type	codegen_EmitAssign,@function
codegen_EmitAssign	:	
	pushl	%ebp
	movl	%esp,%ebp
	subl	$336,%esp

	subl	$12,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	$symtab+1396,4(%esp)
	movl	12(%ebp),%eax
	movl	%eax,8(%esp)
	call	codegen_debug
	addl	$12,%esp

	subl	$8,%esp
	movl	%ebp,%eax
	addl	$-160,%eax
	movl	%eax,0(%esp)
	movl	$symtab+200,4(%esp)
	call	strcpy
	addl	$8,%esp

	movl	%ebp,%eax
	addl	$8,%eax
	movl	(%eax),%eax
	addl	$16,%eax
	movl	(%eax),%eax
	testl	%eax,%eax
	jnz	codegen_EmitAssign_ifbl_116
	jmp	codegen_EmitAssign_elsebl_116
codegen_EmitAssign_ifbl_116	:	

	subl	$8,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	12(%ebp),%eax
	movl	%eax,4(%esp)
	call	codegen_EmitFastAssign
	addl	$8,%esp
	movl	%eax,-336(%ebp)

	movl	-336(%ebp),%ebx
	cmpl	$0,%ebx
	movl	$1,%eax
	jne	codegen_EmitAssign_reltrue_118
	movl	$0,%eax
codegen_EmitAssign_reltrue_118	:	
	testl	%eax,%eax
	jnz	codegen_EmitAssign_ifbl_117
	jmp	codegen_EmitAssign_elsebl_117
codegen_EmitAssign_ifbl_117	:	

	movl	-336(%ebp),%eax
	jmp	codegen_EmitAssign_ret
codegen_EmitAssign_elsebl_117	:	
codegen_EmitAssign_endif_117	:	
	jmp	codegen_EmitAssign_endif_116
codegen_EmitAssign_elsebl_116	:	
codegen_EmitAssign_endif_116	:	

	subl	$12,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	subl	$8,%esp
	movl	12(%ebp),%eax
	movl	%eax,0(%esp)
	movl	$0,4(%esp)
	call	syntax_GetChild
	addl	$8,%esp
	movl	%eax,4(%esp)
	movl	%ebp,%eax
	addl	$-160,%eax
	movl	%eax,8(%esp)
	call	codegen_EmitVarExprAdress
	addl	$12,%esp
	movl	%eax,-324(%ebp)

	subl	$8,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	$symtab+1338,4(%esp)
	call	codegen_emit
	addl	$8,%esp

	subl	$8,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	%ebp,%eax
	addl	$-160,%eax
	movl	%eax,4(%esp)
	call	codegen_emit
	addl	$8,%esp

	subl	$8,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	$symtab+198,4(%esp)
	call	codegen_emit
	addl	$8,%esp

	subl	$12,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	subl	$8,%esp
	movl	12(%ebp),%eax
	movl	%eax,0(%esp)
	movl	$2,4(%esp)
	call	syntax_GetChild
	addl	$8,%esp
	movl	%eax,4(%esp)
	movl	%ebp,%eax
	addl	$-160,%eax
	movl	%eax,8(%esp)
	call	codegen_EmitLogExpr
	addl	$12,%esp
	movl	%eax,-328(%ebp)

	subl	$12,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	%ebp,%eax
	addl	$-160,%eax
	movl	%eax,4(%esp)
	movl	-328(%ebp),%eax
	movl	%eax,8(%esp)
	call	codegen_EmitAvoidIndirect
	addl	$12,%esp

	subl	$8,%esp
	movl	%ebp,%eax
	addl	$-160,%eax
	movl	%eax,0(%esp)
	movl	$symtab+1409,4(%esp)
	call	strcmp
	addl	$8,%esp
	movl	%eax,%ebx
	cmpl	$0,%ebx
	movl	$1,%eax
	je	codegen_EmitAssign_reltrue_120
	movl	$0,%eax
codegen_EmitAssign_reltrue_120	:	
	testl	%eax,%eax
	jnz	codegen_EmitAssign_ifbl_119
	jmp	codegen_EmitAssign_elsebl_119
codegen_EmitAssign_ifbl_119	:	

	subl	$8,%esp
	movl	%ebp,%eax
	addl	$-320,%eax
	movl	%eax,0(%esp)
	movl	$symtab+216,4(%esp)
	call	strcpy
	addl	$8,%esp
	jmp	codegen_EmitAssign_endif_119
codegen_EmitAssign_elsebl_119	:	

	subl	$8,%esp
	movl	%ebp,%eax
	addl	$-320,%eax
	movl	%eax,0(%esp)
	movl	$symtab+1200,4(%esp)
	call	strcpy
	addl	$8,%esp
codegen_EmitAssign_endif_119	:	

	subl	$8,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	$symtab+1413,4(%esp)
	call	codegen_emit
	addl	$8,%esp

	subl	$8,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	%ebp,%eax
	addl	$-320,%eax
	movl	%eax,4(%esp)
	call	codegen_emit
	addl	$8,%esp

	subl	$8,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	$symtab+198,4(%esp)
	call	codegen_emit
	addl	$8,%esp

	subl	$8,%esp
	movl	12(%ebp),%eax
	movl	%eax,0(%esp)
	movl	$1,4(%esp)
	call	syntax_GetChild
	addl	$8,%esp
	movl	%eax,-332(%ebp)

	subl	$156,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	-324(%ebp),%eax
	movl	%eax,4(%esp)
	movl	-328(%ebp),%eax
	movl	%eax,8(%esp)
	movl	%ebp,%eax
	addl	$-332,%eax
	movl	(%eax),%eax
	addl	$8,%eax
	movl	%esp,%ebx
	addl	$12,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	call	codegen_CheckCasting
	addl	$156,%esp

	subl	$4,%esp
	movl	-324(%ebp),%eax
	movl	%eax,0(%esp)
	call	type_IsLongSized
	addl	$4,%esp
	testl	%eax,%eax
	jnz	codegen_EmitAssign_ifbl_121
	jmp	codegen_EmitAssign_elsebl_121
codegen_EmitAssign_ifbl_121	:	

	subl	$156,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	%ebp,%eax
	addl	$-332,%eax
	movl	(%eax),%eax
	addl	$8,%eax
	movl	%esp,%ebx
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	%ebp,%eax
	addl	$-160,%eax
	movl	%eax,148(%esp)
	movl	-328(%ebp),%eax
	movl	%eax,152(%esp)
	call	codegen_CastToInt
	addl	$156,%esp
	movl	%eax,-328(%ebp)

	subl	$8,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	$symtab+201,4(%esp)
	call	codegen_emit
	addl	$8,%esp

	subl	$8,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	%ebp,%eax
	addl	$-160,%eax
	movl	%eax,4(%esp)
	call	codegen_emit
	addl	$8,%esp

	subl	$8,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	$symtab+1222,4(%esp)
	call	codegen_emit
	addl	$8,%esp

	subl	$8,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	%ebp,%eax
	addl	$-320,%eax
	movl	%eax,4(%esp)
	call	codegen_emit
	addl	$8,%esp

	subl	$8,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	$symtab+1226,4(%esp)
	call	codegen_emit
	addl	$8,%esp
	jmp	codegen_EmitAssign_endif_121
codegen_EmitAssign_elsebl_121	:	

	subl	$4,%esp
	movl	-324(%ebp),%eax
	movl	%eax,0(%esp)
	call	type_IsByteSized
	addl	$4,%esp
	testl	%eax,%eax
	jnz	codegen_EmitAssign_ifbl_122
	jmp	codegen_EmitAssign_elsebl_122
codegen_EmitAssign_ifbl_122	:	

	subl	$156,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	%ebp,%eax
	addl	$-332,%eax
	movl	(%eax),%eax
	addl	$8,%eax
	movl	%esp,%ebx
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	%ebp,%eax
	addl	$-160,%eax
	movl	%eax,148(%esp)
	movl	-328(%ebp),%eax
	movl	%eax,152(%esp)
	call	codegen_CastToChar
	addl	$156,%esp
	movl	%eax,-328(%ebp)

	subl	$8,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	$symtab+221,4(%esp)
	call	codegen_emit
	addl	$8,%esp

	subl	$8,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	%ebp,%eax
	addl	$-160,%eax
	movl	%eax,4(%esp)
	call	codegen_emit
	addl	$8,%esp

	subl	$8,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	$symtab+1222,4(%esp)
	call	codegen_emit
	addl	$8,%esp

	subl	$8,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	%ebp,%eax
	addl	$-320,%eax
	movl	%eax,4(%esp)
	call	codegen_emit
	addl	$8,%esp

	subl	$8,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	$symtab+1226,4(%esp)
	call	codegen_emit
	addl	$8,%esp
	jmp	codegen_EmitAssign_endif_122
codegen_EmitAssign_elsebl_122	:	

	subl	$4,%esp
	movl	-324(%ebp),%eax
	movl	%eax,0(%esp)
	call	type_IsAStructType
	addl	$4,%esp
	testl	%eax,%eax
	jnz	codegen_EmitAssign_ifbl_123
	jmp	codegen_EmitAssign_elsebl_123
codegen_EmitAssign_ifbl_123	:	

	subl	$16,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	%ebp,%eax
	addl	$-320,%eax
	movl	%eax,4(%esp)
	movl	%ebp,%eax
	addl	$-160,%eax
	movl	%eax,8(%esp)
	subl	$8,%esp
	movl	%ebp,%eax
	addl	$8,%eax
	movl	(%eax),%eax
	addl	$20,%eax
	movl	(%eax),%eax
	addl	$4,%eax
	movl	(%eax),%eax
	movl	%eax,0(%esp)
	movl	-324(%ebp),%eax
	movl	%eax,4(%esp)
	call	symbol_Sizeof_DataType
	addl	$8,%esp
	movl	%eax,12(%esp)
	call	codegen_EmitCopyJunk
	addl	$16,%esp
	jmp	codegen_EmitAssign_endif_123
codegen_EmitAssign_elsebl_123	:	

	subl	$152,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	$symtab+1420,4(%esp)
	movl	%ebp,%eax
	addl	$-332,%eax
	movl	(%eax),%eax
	addl	$8,%eax
	movl	%esp,%ebx
	addl	$8,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	call	codegen_reportError
	addl	$152,%esp
codegen_EmitAssign_endif_123	:	
codegen_EmitAssign_endif_122	:	
codegen_EmitAssign_endif_121	:	

	subl	$4,%esp
	movl	-324(%ebp),%eax
	movl	%eax,0(%esp)
	call	syntax_FreeSyntaxTree
	addl	$4,%esp

	subl	$4,%esp
	movl	-328(%ebp),%eax
	movl	%eax,0(%esp)
	call	syntax_FreeSyntaxTree
	addl	$4,%esp

	movl	$1,%eax
	jmp	codegen_EmitAssign_ret
codegen_EmitAssign_ret	:	
	movl	%ebp,%esp
	popl	%ebp
	ret	

.globl	codegen_CreateIntType
.type	codegen_CreateIntType,@function
codegen_CreateIntType	:	
	pushl	%ebp
	movl	%esp,%ebp
	subl	$148,%esp

	subl	$8,%esp
	movl	%ebp,%eax
	addl	$-148,%eax
	addl	$16,%eax
	movl	%eax,0(%esp)
	movl	$symtab+1466,4(%esp)
	call	strcpy
	addl	$8,%esp

	movl	%ebp,%eax
	addl	$-148,%eax
	addl	$0,%eax
	movl	%eax,%ebx
	movl	$36,(%ebx)

	subl	$0,%esp
	call	syntax_CreateTreeNode
	addl	$0,%esp
	movl	%eax,-4(%ebp)

	subl	$148,%esp
	movl	-4(%ebp),%eax
	movl	%eax,0(%esp)
	movl	%ebp,%eax
	addl	$-148,%eax
	movl	%esp,%ebx
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	call	syntax_AddChildNode
	addl	$148,%esp

	movl	-4(%ebp),%eax
	jmp	codegen_CreateIntType_ret
codegen_CreateIntType_ret	:	
	movl	%ebp,%esp
	popl	%ebp
	ret	

.globl	codegen_CreateCharType
.type	codegen_CreateCharType,@function
codegen_CreateCharType	:	
	pushl	%ebp
	movl	%esp,%ebp
	subl	$148,%esp

	subl	$8,%esp
	movl	%ebp,%eax
	addl	$-148,%eax
	addl	$16,%eax
	movl	%eax,0(%esp)
	movl	$symtab+1470,4(%esp)
	call	strcpy
	addl	$8,%esp

	movl	%ebp,%eax
	addl	$-148,%eax
	addl	$0,%eax
	movl	%eax,%ebx
	movl	$37,(%ebx)

	subl	$0,%esp
	call	syntax_CreateTreeNode
	addl	$0,%esp
	movl	%eax,-4(%ebp)

	subl	$148,%esp
	movl	-4(%ebp),%eax
	movl	%eax,0(%esp)
	movl	%ebp,%eax
	addl	$-148,%eax
	movl	%esp,%ebx
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	call	syntax_AddChildNode
	addl	$148,%esp

	movl	-4(%ebp),%eax
	jmp	codegen_CreateCharType_ret
codegen_CreateCharType_ret	:	
	movl	%ebp,%esp
	popl	%ebp
	ret	

.globl	codegen_CreateVoidPntType
.type	codegen_CreateVoidPntType,@function
codegen_CreateVoidPntType	:	
	pushl	%ebp
	movl	%esp,%ebp
	subl	$148,%esp

	subl	$0,%esp
	call	syntax_CreateTreeNode
	addl	$0,%esp
	movl	%eax,-4(%ebp)

	movl	%ebp,%eax
	addl	$-148,%eax
	addl	$0,%eax
	movl	%eax,%ebx
	movl	$38,(%ebx)

	subl	$8,%esp
	movl	%ebp,%eax
	addl	$-148,%eax
	addl	$16,%eax
	movl	%eax,0(%esp)
	movl	$symtab+1475,4(%esp)
	call	strcpy
	addl	$8,%esp

	subl	$148,%esp
	movl	-4(%ebp),%eax
	movl	%eax,0(%esp)
	movl	%ebp,%eax
	addl	$-148,%eax
	movl	%esp,%ebx
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	call	syntax_AddChildNode
	addl	$148,%esp

	movl	%ebp,%eax
	addl	$-148,%eax
	addl	$0,%eax
	movl	%eax,%ebx
	movl	$18,(%ebx)

	subl	$8,%esp
	movl	%ebp,%eax
	addl	$-148,%eax
	addl	$16,%eax
	movl	%eax,0(%esp)
	movl	$symtab+1480,4(%esp)
	call	strcpy
	addl	$8,%esp

	subl	$148,%esp
	movl	-4(%ebp),%eax
	movl	%eax,0(%esp)
	movl	%ebp,%eax
	addl	$-148,%eax
	movl	%esp,%ebx
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	call	syntax_AddChildNode
	addl	$148,%esp

	movl	-4(%ebp),%eax
	jmp	codegen_CreateVoidPntType_ret
codegen_CreateVoidPntType_ret	:	
	movl	%ebp,%esp
	popl	%ebp
	ret	

.globl	codegen_CastToInt
.type	codegen_CastToInt,@function
codegen_CastToInt	:	
	pushl	%ebp
	movl	%esp,%ebp
	subl	$0,%esp

	movl	160(%ebp),%ebx
	cmpl	$0,%ebx
	movl	$1,%eax
	je	codegen_CastToInt_reltrue_125
	movl	$0,%eax
codegen_CastToInt_reltrue_125	:	
	testl	%eax,%eax
	jnz	codegen_CastToInt_ifbl_124
	jmp	codegen_CastToInt_elsebl_124
codegen_CastToInt_ifbl_124	:	

	subl	$0,%esp
	call	codegen_CreateIntType
	addl	$0,%esp
	jmp	codegen_CastToInt_ret
codegen_CastToInt_elsebl_124	:	
codegen_CastToInt_endif_124	:	

	subl	$4,%esp
	movl	160(%ebp),%eax
	movl	%eax,0(%esp)
	call	type_IsAIntType
	addl	$4,%esp
	testl	%eax,%eax
	jnz	codegen_CastToInt_ifbl_126
	jmp	codegen_CastToInt_elsebl_126
codegen_CastToInt_ifbl_126	:	

	movl	160(%ebp),%eax
	jmp	codegen_CastToInt_ret
codegen_CastToInt_elsebl_126	:	
codegen_CastToInt_endif_126	:	

	subl	$4,%esp
	movl	160(%ebp),%eax
	movl	%eax,0(%esp)
	call	type_IsACharType
	addl	$4,%esp
	testl	%eax,%eax
	jnz	codegen_CastToInt_ifbl_127
	jmp	codegen_CastToInt_elsebl_127
codegen_CastToInt_ifbl_127	:	

	subl	$8,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	$symtab+1482,4(%esp)
	call	codegen_emit
	addl	$8,%esp

	subl	$8,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	156(%ebp),%eax
	movl	%eax,4(%esp)
	call	codegen_emit
	addl	$8,%esp

	subl	$8,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	$symtab+208,4(%esp)
	call	codegen_emit
	addl	$8,%esp

	subl	$8,%esp
	movl	156(%ebp),%eax
	movl	%eax,0(%esp)
	movl	$symtab+216,4(%esp)
	call	strcpy
	addl	$8,%esp
	jmp	codegen_CastToInt_endif_127
codegen_CastToInt_elsebl_127	:	

	subl	$4,%esp
	movl	160(%ebp),%eax
	movl	%eax,0(%esp)
	call	type_IsAPointerType
	addl	$4,%esp
	testl	%eax,%eax
	jnz	codegen_CastToInt_ifbl_128
	jmp	codegen_CastToInt_elsebl_128
codegen_CastToInt_ifbl_128	:	
	jmp	codegen_CastToInt_endif_128
codegen_CastToInt_elsebl_128	:	

	subl	$152,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	$symtab+1491,4(%esp)
	movl	%ebp,%eax
	addl	$12,%eax
	movl	%esp,%ebx
	addl	$8,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	call	codegen_reportError
	addl	$152,%esp
codegen_CastToInt_endif_128	:	
codegen_CastToInt_endif_127	:	

	subl	$4,%esp
	movl	160(%ebp),%eax
	movl	%eax,0(%esp)
	call	syntax_FreeSyntaxTree
	addl	$4,%esp

	subl	$0,%esp
	call	codegen_CreateIntType
	addl	$0,%esp
	jmp	codegen_CastToInt_ret
codegen_CastToInt_ret	:	
	movl	%ebp,%esp
	popl	%ebp
	ret	

.globl	codegen_CastToChar
.type	codegen_CastToChar,@function
codegen_CastToChar	:	
	pushl	%ebp
	movl	%esp,%ebp
	subl	$1,%esp

	movl	160(%ebp),%ebx
	cmpl	$0,%ebx
	movl	$1,%eax
	je	codegen_CastToChar_reltrue_130
	movl	$0,%eax
codegen_CastToChar_reltrue_130	:	
	testl	%eax,%eax
	jnz	codegen_CastToChar_ifbl_129
	jmp	codegen_CastToChar_elsebl_129
codegen_CastToChar_ifbl_129	:	

	subl	$0,%esp
	call	codegen_CreateCharType
	addl	$0,%esp
	jmp	codegen_CastToChar_ret
codegen_CastToChar_elsebl_129	:	
codegen_CastToChar_endif_129	:	

	subl	$4,%esp
	movl	160(%ebp),%eax
	movl	%eax,0(%esp)
	call	type_IsACharType
	addl	$4,%esp
	testl	%eax,%eax
	jnz	codegen_CastToChar_ifbl_131
	jmp	codegen_CastToChar_elsebl_131
codegen_CastToChar_ifbl_131	:	

	movl	160(%ebp),%eax
	jmp	codegen_CastToChar_ret
codegen_CastToChar_elsebl_131	:	
codegen_CastToChar_endif_131	:	

	subl	$4,%esp
	movl	160(%ebp),%eax
	movl	%eax,0(%esp)
	call	type_IsAIntType
	addl	$4,%esp
	testl	%eax,%eax
	jnz	codegen_CastToChar_ifbl_132
	jmp	codegen_CastToChar_elsebl_132
codegen_CastToChar_ifbl_132	:	

	pushl	$0
	movl	%ebp,%eax
	addl	$156,%eax
	movl	(%eax),%eax
	popl	%esi
	addl	%esi,%eax
	movb	(%eax),%al
	movsbl	%al,%eax
	movl	%eax,%ebx
	cmpl	$37,%ebx
	movl	$1,%eax
	je	codegen_CastToChar_reltrue_134
	movl	$0,%eax
codegen_CastToChar_reltrue_134	:	
	testl	%eax,%eax
	jnz	codegen_CastToChar_ifbl_133
	jmp	codegen_CastToChar_elsebl_133
codegen_CastToChar_ifbl_133	:	

	pushl	$2
	movl	%ebp,%eax
	addl	$156,%eax
	movl	(%eax),%eax
	popl	%esi
	addl	%esi,%eax
	movb	(%eax),%al
	movb	%al,-1(%ebp)

	subl	$8,%esp
	movl	156(%ebp),%eax
	movl	%eax,0(%esp)
	movl	$symtab+1512,4(%esp)
	call	strcpy
	addl	$8,%esp

	pushl	$1
	movl	%ebp,%eax
	addl	$156,%eax
	movl	(%eax),%eax
	popl	%esi
	addl	%esi,%eax
	pushl	%eax
	movb	-1(%ebp),%ah
	popl	%ebx
	movb	%ah,(%ebx)
	jmp	codegen_CastToChar_endif_133
codegen_CastToChar_elsebl_133	:	
codegen_CastToChar_endif_133	:	
	jmp	codegen_CastToChar_endif_132
codegen_CastToChar_elsebl_132	:	

	subl	$152,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	$symtab+1516,4(%esp)
	movl	%ebp,%eax
	addl	$12,%eax
	movl	%esp,%ebx
	addl	$8,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	call	codegen_reportError
	addl	$152,%esp
codegen_CastToChar_endif_132	:	

	subl	$4,%esp
	movl	160(%ebp),%eax
	movl	%eax,0(%esp)
	call	syntax_FreeSyntaxTree
	addl	$4,%esp

	subl	$0,%esp
	call	codegen_CreateCharType
	addl	$0,%esp
	jmp	codegen_CastToChar_ret
codegen_CastToChar_ret	:	
	movl	%ebp,%esp
	popl	%ebp
	ret	

.globl	codegen_EmitAtomicValue
.type	codegen_EmitAtomicValue,@function
codegen_EmitAtomicValue	:	
	pushl	%ebp
	movl	%esp,%ebp
	subl	$8,%esp

	subl	$8,%esp
	movl	12(%ebp),%eax
	movl	%eax,0(%esp)
	movl	$0,4(%esp)
	call	syntax_GetChild
	addl	$8,%esp
	movl	%eax,12(%ebp)

	movl	%ebp,%eax
	addl	$12,%eax
	movl	(%eax),%eax
	addl	$8,%eax
	addl	$0,%eax
	movl	(%eax),%eax
	movl	%eax,%ebx
	cmpl	$44,%ebx
	movl	$1,%eax
	je	codegen_EmitAtomicValue_reltrue_136
	movl	$0,%eax
codegen_EmitAtomicValue_reltrue_136	:	
	testl	%eax,%eax
	jnz	codegen_EmitAtomicValue_ifbl_135
	jmp	codegen_EmitAtomicValue_elsebl_135
codegen_EmitAtomicValue_ifbl_135	:	

	subl	$8,%esp
	movl	16(%ebp),%ebx
	movl	$1,%esi
	imull	$1,%esi
	addl	%esi,%ebx
	movl	%ebx,%eax
	movl	%eax,0(%esp)
	movl	%ebp,%eax
	addl	$12,%eax
	movl	(%eax),%eax
	addl	$8,%eax
	addl	$16,%eax
	movl	%eax,4(%esp)
	call	strcpy
	addl	$8,%esp

	pushl	$0
	movl	%ebp,%eax
	addl	$16,%eax
	movl	(%eax),%eax
	popl	%esi
	addl	%esi,%eax
	movl	%eax,%ebx
	movb	$36,(%ebx)

	movl	$0,%eax
	jmp	codegen_EmitAtomicValue_ret
codegen_EmitAtomicValue_elsebl_135	:	
codegen_EmitAtomicValue_endif_135	:	

	movl	%ebp,%eax
	addl	$12,%eax
	movl	(%eax),%eax
	addl	$8,%eax
	addl	$0,%eax
	movl	(%eax),%eax
	movl	%eax,%ebx
	cmpl	$46,%ebx
	movl	$1,%eax
	je	codegen_EmitAtomicValue_reltrue_138
	movl	$0,%eax
codegen_EmitAtomicValue_reltrue_138	:	
	testl	%eax,%eax
	jnz	codegen_EmitAtomicValue_ifbl_137
	jmp	codegen_EmitAtomicValue_elsebl_137
codegen_EmitAtomicValue_ifbl_137	:	

	subl	$12,%esp
	movl	16(%ebp),%eax
	movl	%eax,0(%esp)
	movl	$symtab+1538,4(%esp)
	subl	$4,%esp
	movl	%ebp,%eax
	addl	$12,%eax
	movl	(%eax),%eax
	addl	$8,%eax
	addl	$16,%eax
	movl	%eax,0(%esp)
	call	type_ConvertSinglechar
	addl	$4,%esp
	movl	%eax,8(%esp)
	call	sprintf
	addl	$12,%esp

	movl	$0,%eax
	jmp	codegen_EmitAtomicValue_ret
codegen_EmitAtomicValue_elsebl_137	:	
codegen_EmitAtomicValue_endif_137	:	

	movl	%ebp,%eax
	addl	$12,%eax
	movl	(%eax),%eax
	addl	$8,%eax
	addl	$0,%eax
	movl	(%eax),%eax
	movl	%eax,%ebx
	cmpl	$45,%ebx
	movl	$1,%eax
	je	codegen_EmitAtomicValue_reltrue_140
	movl	$0,%eax
codegen_EmitAtomicValue_reltrue_140	:	
	testl	%eax,%eax
	jnz	codegen_EmitAtomicValue_ifbl_139
	jmp	codegen_EmitAtomicValue_elsebl_139
codegen_EmitAtomicValue_ifbl_139	:	

	subl	$148,%esp
	movl	%ebp,%eax
	addl	$8,%eax
	movl	(%eax),%eax
	addl	$20,%eax
	movl	(%eax),%eax
	addl	$4,%eax
	movl	(%eax),%eax
	movl	%eax,0(%esp)
	movl	%ebp,%eax
	addl	$12,%eax
	movl	(%eax),%eax
	addl	$8,%eax
	movl	%esp,%ebx
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	call	symbol_FindString
	addl	$148,%esp
	movl	%eax,-4(%ebp)

	subl	$12,%esp
	movl	16(%ebp),%eax
	movl	%eax,0(%esp)
	movl	$symtab+1542,4(%esp)
	subl	$8,%esp
	movl	%ebp,%eax
	addl	$8,%eax
	movl	(%eax),%eax
	addl	$20,%eax
	movl	(%eax),%eax
	addl	$4,%eax
	movl	(%eax),%eax
	movl	%eax,0(%esp)
	movl	-4(%ebp),%eax
	movl	%eax,4(%esp)
	call	symbol_GetGlobalOffset
	addl	$8,%esp
	movl	%eax,8(%esp)
	call	sprintf
	addl	$12,%esp

	movl	$0,%eax
	jmp	codegen_EmitAtomicValue_ret
codegen_EmitAtomicValue_elsebl_139	:	
codegen_EmitAtomicValue_endif_139	:	

	subl	$8,%esp
	movl	12(%ebp),%eax
	movl	%eax,0(%esp)
	movl	$0,4(%esp)
	call	syntax_GetChild
	addl	$8,%esp
	movl	%eax,-8(%ebp)

	movl	%ebp,%eax
	addl	$-8,%eax
	movl	(%eax),%eax
	addl	$8,%eax
	addl	$0,%eax
	movl	(%eax),%eax
	movl	%eax,%ebx
	cmpl	$39,%ebx
	movl	$1,%eax
	je	codegen_EmitAtomicValue_reltrue_142
	movl	$0,%eax
codegen_EmitAtomicValue_reltrue_142	:	
	testl	%eax,%eax
	jnz	codegen_EmitAtomicValue_ifbl_141
	jmp	codegen_EmitAtomicValue_elsebl_141
codegen_EmitAtomicValue_ifbl_141	:	

	subl	$12,%esp
	movl	16(%ebp),%eax
	movl	%eax,0(%esp)
	movl	$symtab+1538,4(%esp)
	subl	$8,%esp
	movl	%ebp,%eax
	addl	$8,%eax
	movl	(%eax),%eax
	addl	$20,%eax
	movl	(%eax),%eax
	addl	$4,%eax
	movl	(%eax),%eax
	movl	%eax,0(%esp)
	subl	$8,%esp
	movl	12(%ebp),%eax
	movl	%eax,0(%esp)
	movl	$2,4(%esp)
	call	syntax_GetChild
	addl	$8,%esp
	movl	%eax,4(%esp)
	call	symbol_Sizeof_DataType
	addl	$8,%esp
	movl	%eax,8(%esp)
	call	sprintf
	addl	$12,%esp

	movl	$0,%eax
	jmp	codegen_EmitAtomicValue_ret
codegen_EmitAtomicValue_elsebl_141	:	
codegen_EmitAtomicValue_endif_141	:	

	subl	$4,%esp
	movl	12(%ebp),%eax
	movl	%eax,0(%esp)
	call	syntax_CountChilds
	addl	$4,%esp
	movl	%eax,%ebx
	cmpl	$1,%ebx
	movl	$1,%eax
	jg	codegen_EmitAtomicValue_reltrue_144
	movl	$0,%eax
codegen_EmitAtomicValue_reltrue_144	:	
	testl	%eax,%eax
	jnz	codegen_EmitAtomicValue_ifbl_143
	jmp	codegen_EmitAtomicValue_elsebl_143
codegen_EmitAtomicValue_ifbl_143	:	

	subl	$8,%esp
	movl	12(%ebp),%eax
	movl	%eax,0(%esp)
	movl	$1,4(%esp)
	call	syntax_GetChild
	addl	$8,%esp
	movl	%eax,-8(%ebp)

	movl	%ebp,%eax
	addl	$-8,%eax
	movl	(%eax),%eax
	addl	$8,%eax
	addl	$0,%eax
	movl	(%eax),%eax
	movl	%eax,%ebx
	cmpl	$5,%ebx
	movl	$1,%eax
	je	codegen_EmitAtomicValue_reltrue_146
	movl	$0,%eax
codegen_EmitAtomicValue_reltrue_146	:	
	testl	%eax,%eax
	jnz	codegen_EmitAtomicValue_ifbl_145
	jmp	codegen_EmitAtomicValue_elsebl_145
codegen_EmitAtomicValue_ifbl_145	:	

	subl	$12,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	12(%ebp),%eax
	movl	%eax,4(%esp)
	movl	16(%ebp),%eax
	movl	%eax,8(%esp)
	call	codegen_EmitFuncCall
	addl	$12,%esp
	jmp	codegen_EmitAtomicValue_ret
codegen_EmitAtomicValue_elsebl_145	:	
codegen_EmitAtomicValue_endif_145	:	
	jmp	codegen_EmitAtomicValue_endif_143
codegen_EmitAtomicValue_elsebl_143	:	
codegen_EmitAtomicValue_endif_143	:	

	subl	$12,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	12(%ebp),%eax
	movl	%eax,4(%esp)
	movl	16(%ebp),%eax
	movl	%eax,8(%esp)
	call	codegen_EmitVariableExpr
	addl	$12,%esp
	jmp	codegen_EmitAtomicValue_ret
codegen_EmitAtomicValue_ret	:	
	movl	%ebp,%esp
	popl	%ebp
	ret	

.globl	codegen_EmitArithFactor
.type	codegen_EmitArithFactor,@function
codegen_EmitArithFactor	:	
	pushl	%ebp
	movl	%esp,%ebp
	subl	$8,%esp

	subl	$4,%esp
	movl	12(%ebp),%eax
	movl	%eax,0(%esp)
	call	syntax_CountChilds
	addl	$4,%esp
	movl	%eax,%ebx
	cmpl	$1,%ebx
	movl	$1,%eax
	je	codegen_EmitArithFactor_reltrue_148
	movl	$0,%eax
codegen_EmitArithFactor_reltrue_148	:	
	testl	%eax,%eax
	jnz	codegen_EmitArithFactor_ifbl_147
	jmp	codegen_EmitArithFactor_elsebl_147
codegen_EmitArithFactor_ifbl_147	:	

	subl	$12,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	subl	$8,%esp
	movl	12(%ebp),%eax
	movl	%eax,0(%esp)
	movl	$0,4(%esp)
	call	syntax_GetChild
	addl	$8,%esp
	movl	%eax,4(%esp)
	movl	16(%ebp),%eax
	movl	%eax,8(%esp)
	call	codegen_EmitAtomicValue
	addl	$12,%esp
	jmp	codegen_EmitArithFactor_ret
codegen_EmitArithFactor_elsebl_147	:	
codegen_EmitArithFactor_endif_147	:	

	subl	$4,%esp
	movl	12(%ebp),%eax
	movl	%eax,0(%esp)
	call	syntax_CountChilds
	addl	$4,%esp
	movl	%eax,%ebx
	cmpl	$2,%ebx
	movl	$1,%eax
	je	codegen_EmitArithFactor_reltrue_150
	movl	$0,%eax
codegen_EmitArithFactor_reltrue_150	:	
	testl	%eax,%eax
	jnz	codegen_EmitArithFactor_ifbl_149
	jmp	codegen_EmitArithFactor_elsebl_149
codegen_EmitArithFactor_ifbl_149	:	

	subl	$8,%esp
	movl	12(%ebp),%eax
	movl	%eax,0(%esp)
	movl	$0,4(%esp)
	call	syntax_GetChild
	addl	$8,%esp
	movl	%eax,-4(%ebp)

	subl	$12,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	subl	$8,%esp
	movl	12(%ebp),%eax
	movl	%eax,0(%esp)
	movl	$1,4(%esp)
	call	syntax_GetChild
	addl	$8,%esp
	movl	%eax,4(%esp)
	movl	16(%ebp),%eax
	movl	%eax,8(%esp)
	call	codegen_EmitAtomicValue
	addl	$12,%esp
	movl	%eax,-8(%ebp)

	subl	$156,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	%ebp,%eax
	addl	$-4,%eax
	movl	(%eax),%eax
	addl	$8,%eax
	movl	%esp,%ebx
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	16(%ebp),%eax
	movl	%eax,148(%esp)
	movl	-8(%ebp),%eax
	movl	%eax,152(%esp)
	call	codegen_CastToInt
	addl	$156,%esp
	movl	%eax,-8(%ebp)

	subl	$8,%esp
	movl	16(%ebp),%eax
	movl	%eax,0(%esp)
	movl	$symtab+216,4(%esp)
	call	strcmp
	addl	$8,%esp
	movl	%eax,%ebx
	cmpl	$0,%ebx
	movl	$1,%eax
	jne	codegen_EmitArithFactor_reltrue_152
	movl	$0,%eax
codegen_EmitArithFactor_reltrue_152	:	
	testl	%eax,%eax
	jnz	codegen_EmitArithFactor_ifbl_151
	jmp	codegen_EmitArithFactor_elsebl_151
codegen_EmitArithFactor_ifbl_151	:	

	subl	$8,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	$symtab+201,4(%esp)
	call	codegen_emit
	addl	$8,%esp

	subl	$8,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	16(%ebp),%eax
	movl	%eax,4(%esp)
	call	codegen_emit
	addl	$8,%esp

	subl	$8,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	$symtab+208,4(%esp)
	call	codegen_emit
	addl	$8,%esp
	jmp	codegen_EmitArithFactor_endif_151
codegen_EmitArithFactor_elsebl_151	:	
codegen_EmitArithFactor_endif_151	:	

	subl	$8,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	$symtab+1553,4(%esp)
	call	codegen_emit
	addl	$8,%esp

	subl	$8,%esp
	movl	16(%ebp),%eax
	movl	%eax,0(%esp)
	movl	$symtab+216,4(%esp)
	call	strcpy
	addl	$8,%esp

	movl	-8(%ebp),%eax
	jmp	codegen_EmitArithFactor_ret
codegen_EmitArithFactor_elsebl_149	:	
codegen_EmitArithFactor_endif_149	:	

	subl	$12,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	subl	$8,%esp
	movl	12(%ebp),%eax
	movl	%eax,0(%esp)
	movl	$1,4(%esp)
	call	syntax_GetChild
	addl	$8,%esp
	movl	%eax,4(%esp)
	movl	16(%ebp),%eax
	movl	%eax,8(%esp)
	call	codegen_EmitLogExpr
	addl	$12,%esp
	jmp	codegen_EmitArithFactor_ret
codegen_EmitArithFactor_ret	:	
	movl	%ebp,%esp
	popl	%ebp
	ret	

.globl	codegen_EmitArithTerm
.type	codegen_EmitArithTerm,@function
codegen_EmitArithTerm	:	
	pushl	%ebp
	movl	%esp,%ebp
	subl	$176,%esp

	subl	$4,%esp
	movl	12(%ebp),%eax
	movl	%eax,0(%esp)
	call	syntax_CountChilds
	addl	$4,%esp
	movl	%eax,%ebx
	cmpl	$1,%ebx
	movl	$1,%eax
	je	codegen_EmitArithTerm_reltrue_154
	movl	$0,%eax
codegen_EmitArithTerm_reltrue_154	:	
	testl	%eax,%eax
	jnz	codegen_EmitArithTerm_ifbl_153
	jmp	codegen_EmitArithTerm_elsebl_153
codegen_EmitArithTerm_ifbl_153	:	

	subl	$12,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	subl	$8,%esp
	movl	12(%ebp),%eax
	movl	%eax,0(%esp)
	movl	$0,4(%esp)
	call	syntax_GetChild
	addl	$8,%esp
	movl	%eax,4(%esp)
	movl	16(%ebp),%eax
	movl	%eax,8(%esp)
	call	codegen_EmitArithFactor
	addl	$12,%esp
	jmp	codegen_EmitArithTerm_ret
codegen_EmitArithTerm_elsebl_153	:	
codegen_EmitArithTerm_endif_153	:	

	subl	$4,%esp
	movl	12(%ebp),%eax
	movl	%eax,0(%esp)
	call	syntax_CountChilds
	addl	$4,%esp
	movl	%eax,-12(%ebp)

	subl	$8,%esp
	movl	12(%ebp),%eax
	movl	%eax,0(%esp)
	movl	$0,4(%esp)
	call	syntax_GetChild
	addl	$8,%esp
	movl	%eax,-4(%ebp)

	subl	$12,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	-4(%ebp),%eax
	movl	%eax,4(%esp)
	movl	16(%ebp),%eax
	movl	%eax,8(%esp)
	call	codegen_EmitArithFactor
	addl	$12,%esp
	movl	%eax,-8(%ebp)

	subl	$8,%esp
	movl	12(%ebp),%eax
	movl	%eax,0(%esp)
	movl	$1,4(%esp)
	call	syntax_GetChild
	addl	$8,%esp
	movl	%eax,-4(%ebp)

	subl	$156,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	%ebp,%eax
	addl	$-4,%eax
	movl	(%eax),%eax
	addl	$8,%eax
	movl	%esp,%ebx
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	16(%ebp),%eax
	movl	%eax,148(%esp)
	movl	-8(%ebp),%eax
	movl	%eax,152(%esp)
	call	codegen_CastToInt
	addl	$156,%esp
	movl	%eax,-8(%ebp)

	subl	$8,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	$symtab+1338,4(%esp)
	call	codegen_emit
	addl	$8,%esp

	subl	$8,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	16(%ebp),%eax
	movl	%eax,4(%esp)
	call	codegen_emit
	addl	$8,%esp

	subl	$8,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	$symtab+198,4(%esp)
	call	codegen_emit
	addl	$8,%esp

	movl	$2,-16(%ebp)

codegen_EmitArithTerm_while_155	:	
	movl	-16(%ebp),%ebx
	cmpl	-12(%ebp),%ebx
	movl	$1,%eax
	jl	codegen_EmitArithTerm_reltrue_156
	movl	$0,%eax
codegen_EmitArithTerm_reltrue_156	:	
	testl	%eax,%eax
	jz	codegen_EmitArithTerm_endwhile_155

	subl	$8,%esp
	movl	12(%ebp),%eax
	movl	%eax,0(%esp)
	movl	-16(%ebp),%ebx
	subl	$1,%ebx
	movl	%ebx,%eax
	movl	%eax,4(%esp)
	call	syntax_GetChild
	addl	$8,%esp
	movl	%eax,-4(%ebp)

	subl	$4,%esp
	movl	-8(%ebp),%eax
	movl	%eax,0(%esp)
	call	syntax_FreeSyntaxTree
	addl	$4,%esp

	subl	$12,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	subl	$8,%esp
	movl	12(%ebp),%eax
	movl	%eax,0(%esp)
	movl	-16(%ebp),%eax
	movl	%eax,4(%esp)
	call	syntax_GetChild
	addl	$8,%esp
	movl	%eax,4(%esp)
	movl	%ebp,%eax
	addl	$-176,%eax
	movl	%eax,8(%esp)
	call	codegen_EmitArithFactor
	addl	$12,%esp
	movl	%eax,-8(%ebp)

	subl	$156,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	%ebp,%eax
	addl	$-4,%eax
	movl	(%eax),%eax
	addl	$8,%eax
	movl	%esp,%ebx
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	%ebp,%eax
	addl	$-176,%eax
	movl	%eax,148(%esp)
	movl	-8(%ebp),%eax
	movl	%eax,152(%esp)
	call	codegen_CastToInt
	addl	$156,%esp
	movl	%eax,-8(%ebp)

	movl	%ebp,%eax
	addl	$-4,%eax
	movl	(%eax),%eax
	addl	$8,%eax
	addl	$0,%eax
	movl	(%eax),%eax
	movl	%eax,%ebx
	cmpl	$19,%ebx
	movl	$1,%eax
	je	codegen_EmitArithTerm_reltrue_159
	movl	$0,%eax
codegen_EmitArithTerm_reltrue_159	:	
	testl	%eax,%eax
	jnz	codegen_EmitArithTerm_logexprtrue_158
	movl	%ebp,%eax
	addl	$-4,%eax
	movl	(%eax),%eax
	addl	$8,%eax
	addl	$0,%eax
	movl	(%eax),%eax
	movl	%eax,%ebx
	cmpl	$20,%ebx
	movl	$1,%eax
	je	codegen_EmitArithTerm_reltrue_160
	movl	$0,%eax
codegen_EmitArithTerm_reltrue_160	:	
	testl	%eax,%eax
	jnz	codegen_EmitArithTerm_logexprtrue_158
	movl	$0,%eax
	jmp	codegen_EmitArithTerm_logexprfalse_158
codegen_EmitArithTerm_logexprtrue_158	:	
	movl	$1,%eax
codegen_EmitArithTerm_logexprfalse_158	:	
	testl	%eax,%eax
	jnz	codegen_EmitArithTerm_ifbl_157
	jmp	codegen_EmitArithTerm_elsebl_157
codegen_EmitArithTerm_ifbl_157	:	

	subl	$8,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	%ebp,%eax
	addl	$-176,%eax
	movl	%eax,4(%esp)
	call	codegen_EmitAvoidConstant
	addl	$8,%esp

	subl	$8,%esp
	movl	%ebp,%eax
	addl	$-176,%eax
	movl	%eax,0(%esp)
	movl	$symtab+216,4(%esp)
	call	strcmp
	addl	$8,%esp
	movl	%eax,%ebx
	cmpl	$0,%ebx
	movl	$1,%eax
	je	codegen_EmitArithTerm_reltrue_162
	movl	$0,%eax
codegen_EmitArithTerm_reltrue_162	:	
	testl	%eax,%eax
	jnz	codegen_EmitArithTerm_ifbl_161
	jmp	codegen_EmitArithTerm_elsebl_161
codegen_EmitArithTerm_ifbl_161	:	

	subl	$8,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	$symtab+201,4(%esp)
	call	codegen_emit
	addl	$8,%esp

	subl	$8,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	%ebp,%eax
	addl	$-176,%eax
	movl	%eax,4(%esp)
	call	codegen_emit
	addl	$8,%esp

	subl	$8,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	$symtab+1192,4(%esp)
	call	codegen_emit
	addl	$8,%esp

	subl	$8,%esp
	movl	%ebp,%eax
	addl	$-176,%eax
	movl	%eax,0(%esp)
	movl	$symtab+1200,4(%esp)
	call	strcpy
	addl	$8,%esp
	jmp	codegen_EmitArithTerm_endif_161
codegen_EmitArithTerm_elsebl_161	:	
codegen_EmitArithTerm_endif_161	:	

	subl	$8,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	$symtab+1565,4(%esp)
	call	codegen_emit
	addl	$8,%esp

	subl	$8,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	$symtab+1577,4(%esp)
	call	codegen_emit
	addl	$8,%esp

	subl	$8,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	$symtab+1593,4(%esp)
	call	codegen_emit
	addl	$8,%esp

	subl	$8,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	%ebp,%eax
	addl	$-176,%eax
	movl	%eax,4(%esp)
	call	codegen_emit
	addl	$8,%esp

	subl	$8,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	$symtab+198,4(%esp)
	call	codegen_emit
	addl	$8,%esp

	movl	%ebp,%eax
	addl	$-4,%eax
	movl	(%eax),%eax
	addl	$8,%eax
	addl	$0,%eax
	movl	(%eax),%eax
	movl	%eax,%ebx
	cmpl	$19,%ebx
	movl	$1,%eax
	je	codegen_EmitArithTerm_reltrue_164
	movl	$0,%eax
codegen_EmitArithTerm_reltrue_164	:	
	testl	%eax,%eax
	jnz	codegen_EmitArithTerm_ifbl_163
	jmp	codegen_EmitArithTerm_elsebl_163
codegen_EmitArithTerm_ifbl_163	:	

	subl	$8,%esp
	movl	16(%ebp),%eax
	movl	%eax,0(%esp)
	movl	$symtab+216,4(%esp)
	call	strcpy
	addl	$8,%esp
	jmp	codegen_EmitArithTerm_endif_163
codegen_EmitArithTerm_elsebl_163	:	

	subl	$8,%esp
	movl	16(%ebp),%eax
	movl	%eax,0(%esp)
	movl	$symtab+1601,4(%esp)
	call	strcpy
	addl	$8,%esp
codegen_EmitArithTerm_endif_163	:	
	jmp	codegen_EmitArithTerm_endif_157
codegen_EmitArithTerm_elsebl_157	:	

	subl	$8,%esp
	movl	%ebp,%eax
	addl	$-176,%eax
	movl	%eax,0(%esp)
	movl	$symtab+1200,4(%esp)
	call	strcmp
	addl	$8,%esp
	movl	%eax,%ebx
	cmpl	$0,%ebx
	movl	$1,%eax
	je	codegen_EmitArithTerm_reltrue_166
	movl	$0,%eax
codegen_EmitArithTerm_reltrue_166	:	
	testl	%eax,%eax
	jnz	codegen_EmitArithTerm_ifbl_165
	jmp	codegen_EmitArithTerm_elsebl_165
codegen_EmitArithTerm_ifbl_165	:	

	subl	$8,%esp
	movl	16(%ebp),%eax
	movl	%eax,0(%esp)
	movl	$symtab+216,4(%esp)
	call	strcpy
	addl	$8,%esp
	jmp	codegen_EmitArithTerm_endif_165
codegen_EmitArithTerm_elsebl_165	:	

	subl	$8,%esp
	movl	16(%ebp),%eax
	movl	%eax,0(%esp)
	movl	$symtab+1200,4(%esp)
	call	strcpy
	addl	$8,%esp
codegen_EmitArithTerm_endif_165	:	

	subl	$8,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	$symtab+1413,4(%esp)
	call	codegen_emit
	addl	$8,%esp

	subl	$8,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	16(%ebp),%eax
	movl	%eax,4(%esp)
	call	codegen_emit
	addl	$8,%esp

	subl	$8,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	$symtab+198,4(%esp)
	call	codegen_emit
	addl	$8,%esp

	movl	%ebp,%eax
	addl	$-4,%eax
	movl	(%eax),%eax
	addl	$8,%eax
	addl	$0,%eax
	movl	(%eax),%eax
	movl	%eax,%ebx
	cmpl	$21,%ebx
	movl	$1,%eax
	je	codegen_EmitArithTerm_reltrue_168
	movl	$0,%eax
codegen_EmitArithTerm_reltrue_168	:	
	testl	%eax,%eax
	jnz	codegen_EmitArithTerm_ifbl_167
	jmp	codegen_EmitArithTerm_elsebl_167
codegen_EmitArithTerm_ifbl_167	:	

	subl	$8,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	$symtab+1606,4(%esp)
	call	codegen_emit
	addl	$8,%esp
	jmp	codegen_EmitArithTerm_endif_167
codegen_EmitArithTerm_elsebl_167	:	
codegen_EmitArithTerm_endif_167	:	

	movl	%ebp,%eax
	addl	$-4,%eax
	movl	(%eax),%eax
	addl	$8,%eax
	addl	$0,%eax
	movl	(%eax),%eax
	movl	%eax,%ebx
	cmpl	$23,%ebx
	movl	$1,%eax
	je	codegen_EmitArithTerm_reltrue_170
	movl	$0,%eax
codegen_EmitArithTerm_reltrue_170	:	
	testl	%eax,%eax
	jnz	codegen_EmitArithTerm_ifbl_169
	jmp	codegen_EmitArithTerm_elsebl_169
codegen_EmitArithTerm_ifbl_169	:	

	subl	$8,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	$symtab+1613,4(%esp)
	call	codegen_emit
	addl	$8,%esp
	jmp	codegen_EmitArithTerm_endif_169
codegen_EmitArithTerm_elsebl_169	:	
codegen_EmitArithTerm_endif_169	:	

	movl	%ebp,%eax
	addl	$-4,%eax
	movl	(%eax),%eax
	addl	$8,%eax
	addl	$0,%eax
	movl	(%eax),%eax
	movl	%eax,%ebx
	cmpl	$18,%ebx
	movl	$1,%eax
	je	codegen_EmitArithTerm_reltrue_172
	movl	$0,%eax
codegen_EmitArithTerm_reltrue_172	:	
	testl	%eax,%eax
	jnz	codegen_EmitArithTerm_ifbl_171
	jmp	codegen_EmitArithTerm_elsebl_171
codegen_EmitArithTerm_ifbl_171	:	

	subl	$8,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	$symtab+1620,4(%esp)
	call	codegen_emit
	addl	$8,%esp
	jmp	codegen_EmitArithTerm_endif_171
codegen_EmitArithTerm_elsebl_171	:	
codegen_EmitArithTerm_endif_171	:	

	subl	$8,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	%ebp,%eax
	addl	$-176,%eax
	movl	%eax,4(%esp)
	call	codegen_emit
	addl	$8,%esp

	subl	$8,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	$symtab+616,4(%esp)
	call	codegen_emit
	addl	$8,%esp

	subl	$8,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	16(%ebp),%eax
	movl	%eax,4(%esp)
	call	codegen_emit
	addl	$8,%esp

	subl	$8,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	$symtab+198,4(%esp)
	call	codegen_emit
	addl	$8,%esp
codegen_EmitArithTerm_endif_157	:	

	subl	$8,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	$symtab+1338,4(%esp)
	call	codegen_emit
	addl	$8,%esp

	subl	$8,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	16(%ebp),%eax
	movl	%eax,4(%esp)
	call	codegen_emit
	addl	$8,%esp

	subl	$8,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	$symtab+198,4(%esp)
	call	codegen_emit
	addl	$8,%esp

	movl	-16(%ebp),%ebx
	addl	$2,%ebx
	movl	%ebx,%eax
	movl	%eax,-16(%ebp)
	jmp	codegen_EmitArithTerm_while_155
codegen_EmitArithTerm_endwhile_155	:	

	subl	$8,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	$symtab+1565,4(%esp)
	call	codegen_emit
	addl	$8,%esp

	subl	$8,%esp
	movl	16(%ebp),%eax
	movl	%eax,0(%esp)
	movl	$symtab+216,4(%esp)
	call	strcpy
	addl	$8,%esp

	movl	-8(%ebp),%eax
	jmp	codegen_EmitArithTerm_ret
codegen_EmitArithTerm_ret	:	
	movl	%ebp,%esp
	popl	%ebp
	ret	

.globl	codegen_EmitArithExpr
.type	codegen_EmitArithExpr,@function
codegen_EmitArithExpr	:	
	pushl	%ebp
	movl	%esp,%ebp
	subl	$340,%esp

	subl	$4,%esp
	movl	12(%ebp),%eax
	movl	%eax,0(%esp)
	call	syntax_CountChilds
	addl	$4,%esp
	movl	%eax,%ebx
	cmpl	$1,%ebx
	movl	$1,%eax
	je	codegen_EmitArithExpr_reltrue_174
	movl	$0,%eax
codegen_EmitArithExpr_reltrue_174	:	
	testl	%eax,%eax
	jnz	codegen_EmitArithExpr_ifbl_173
	jmp	codegen_EmitArithExpr_elsebl_173
codegen_EmitArithExpr_ifbl_173	:	

	subl	$12,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	subl	$8,%esp
	movl	12(%ebp),%eax
	movl	%eax,0(%esp)
	movl	$0,4(%esp)
	call	syntax_GetChild
	addl	$8,%esp
	movl	%eax,4(%esp)
	movl	16(%ebp),%eax
	movl	%eax,8(%esp)
	call	codegen_EmitArithTerm
	addl	$12,%esp
	jmp	codegen_EmitArithExpr_ret
codegen_EmitArithExpr_elsebl_173	:	
codegen_EmitArithExpr_endif_173	:	

	subl	$4,%esp
	movl	12(%ebp),%eax
	movl	%eax,0(%esp)
	call	syntax_CountChilds
	addl	$4,%esp
	movl	%eax,-16(%ebp)

	subl	$8,%esp
	movl	12(%ebp),%eax
	movl	%eax,0(%esp)
	movl	$0,4(%esp)
	call	syntax_GetChild
	addl	$8,%esp
	movl	%eax,-4(%ebp)

	movl	%ebp,%eax
	addl	$-4,%eax
	movl	(%eax),%eax
	addl	$8,%eax
	addl	$0,%eax
	movl	(%eax),%eax
	movl	%eax,%ebx
	cmpl	$17,%ebx
	movl	$1,%eax
	je	codegen_EmitArithExpr_reltrue_176
	movl	$0,%eax
codegen_EmitArithExpr_reltrue_176	:	
	testl	%eax,%eax
	jnz	codegen_EmitArithExpr_ifbl_175
	jmp	codegen_EmitArithExpr_elsebl_175
codegen_EmitArithExpr_ifbl_175	:	

	subl	$8,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	$symtab+1628,4(%esp)
	call	codegen_emit
	addl	$8,%esp

	subl	$0,%esp
	call	codegen_CreateIntType
	addl	$0,%esp
	movl	%eax,-8(%ebp)

	movl	$1,-20(%ebp)
	jmp	codegen_EmitArithExpr_endif_175
codegen_EmitArithExpr_elsebl_175	:	

	subl	$12,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	-4(%ebp),%eax
	movl	%eax,4(%esp)
	movl	16(%ebp),%eax
	movl	%eax,8(%esp)
	call	codegen_EmitArithTerm
	addl	$12,%esp
	movl	%eax,-8(%ebp)

	subl	$8,%esp
	movl	12(%ebp),%eax
	movl	%eax,0(%esp)
	movl	$1,4(%esp)
	call	syntax_GetChild
	addl	$8,%esp
	movl	%eax,-4(%ebp)

	subl	$4,%esp
	movl	-8(%ebp),%eax
	movl	%eax,0(%esp)
	call	type_IsAPointerType
	addl	$4,%esp
	testl	%eax,%eax
	movl	$1,%eax
	jz	codegen_EmitArithExpr_logfactfalse_178
	movl	$0,%eax
codegen_EmitArithExpr_logfactfalse_178	:	
	testl	%eax,%eax
	jnz	codegen_EmitArithExpr_ifbl_177
	jmp	codegen_EmitArithExpr_elsebl_177
codegen_EmitArithExpr_ifbl_177	:	

	subl	$156,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	%ebp,%eax
	addl	$-4,%eax
	movl	(%eax),%eax
	addl	$8,%eax
	movl	%esp,%ebx
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	16(%ebp),%eax
	movl	%eax,148(%esp)
	movl	-8(%ebp),%eax
	movl	%eax,152(%esp)
	call	codegen_CastToInt
	addl	$156,%esp
	movl	%eax,-8(%ebp)
	jmp	codegen_EmitArithExpr_endif_177
codegen_EmitArithExpr_elsebl_177	:	
codegen_EmitArithExpr_endif_177	:	

	subl	$8,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	$symtab+1338,4(%esp)
	call	codegen_emit
	addl	$8,%esp

	subl	$8,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	16(%ebp),%eax
	movl	%eax,4(%esp)
	call	codegen_emit
	addl	$8,%esp

	subl	$8,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	$symtab+198,4(%esp)
	call	codegen_emit
	addl	$8,%esp

	movl	$2,-20(%ebp)
codegen_EmitArithExpr_endif_175	:	

codegen_EmitArithExpr_while_179	:	
	movl	-20(%ebp),%ebx
	cmpl	-16(%ebp),%ebx
	movl	$1,%eax
	jl	codegen_EmitArithExpr_reltrue_180
	movl	$0,%eax
codegen_EmitArithExpr_reltrue_180	:	
	testl	%eax,%eax
	jz	codegen_EmitArithExpr_endwhile_179

	subl	$8,%esp
	movl	12(%ebp),%eax
	movl	%eax,0(%esp)
	movl	-20(%ebp),%ebx
	subl	$1,%ebx
	movl	%ebx,%eax
	movl	%eax,4(%esp)
	call	syntax_GetChild
	addl	$8,%esp
	movl	%eax,-4(%ebp)

	movl	-8(%ebp),%eax
	movl	%eax,-12(%ebp)

	subl	$12,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	subl	$8,%esp
	movl	12(%ebp),%eax
	movl	%eax,0(%esp)
	movl	-20(%ebp),%eax
	movl	%eax,4(%esp)
	call	syntax_GetChild
	addl	$8,%esp
	movl	%eax,4(%esp)
	movl	%ebp,%eax
	addl	$-180,%eax
	movl	%eax,8(%esp)
	call	codegen_EmitArithTerm
	addl	$12,%esp
	movl	%eax,-8(%ebp)

	subl	$156,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	%ebp,%eax
	addl	$-4,%eax
	movl	(%eax),%eax
	addl	$8,%eax
	movl	%esp,%ebx
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	%ebp,%eax
	addl	$-180,%eax
	movl	%eax,148(%esp)
	movl	-8(%ebp),%eax
	movl	%eax,152(%esp)
	call	codegen_CastToInt
	addl	$156,%esp
	movl	%eax,-8(%ebp)

	subl	$8,%esp
	movl	%ebp,%eax
	addl	$-180,%eax
	movl	%eax,0(%esp)
	movl	$symtab+1200,4(%esp)
	call	strcmp
	addl	$8,%esp
	movl	%eax,%ebx
	cmpl	$0,%ebx
	movl	$1,%eax
	je	codegen_EmitArithExpr_reltrue_182
	movl	$0,%eax
codegen_EmitArithExpr_reltrue_182	:	
	testl	%eax,%eax
	jnz	codegen_EmitArithExpr_ifbl_181
	jmp	codegen_EmitArithExpr_elsebl_181
codegen_EmitArithExpr_ifbl_181	:	

	subl	$8,%esp
	movl	16(%ebp),%eax
	movl	%eax,0(%esp)
	movl	$symtab+216,4(%esp)
	call	strcpy
	addl	$8,%esp
	jmp	codegen_EmitArithExpr_endif_181
codegen_EmitArithExpr_elsebl_181	:	

	subl	$8,%esp
	movl	16(%ebp),%eax
	movl	%eax,0(%esp)
	movl	$symtab+1200,4(%esp)
	call	strcpy
	addl	$8,%esp
codegen_EmitArithExpr_endif_181	:	

	subl	$8,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	$symtab+1413,4(%esp)
	call	codegen_emit
	addl	$8,%esp

	subl	$8,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	16(%ebp),%eax
	movl	%eax,4(%esp)
	call	codegen_emit
	addl	$8,%esp

	subl	$8,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	$symtab+198,4(%esp)
	call	codegen_emit
	addl	$8,%esp

	subl	$8,%esp
	movl	12(%ebp),%eax
	movl	%eax,0(%esp)
	movl	-20(%ebp),%ebx
	subl	$1,%ebx
	movl	%ebx,%eax
	movl	%eax,4(%esp)
	call	syntax_GetChild
	addl	$8,%esp
	movl	%eax,-4(%ebp)

	subl	$4,%esp
	movl	-12(%ebp),%eax
	movl	%eax,0(%esp)
	call	type_IsAPointerType
	addl	$4,%esp
	testl	%eax,%eax
	jz	codegen_EmitArithExpr_logtermfalse_184
	movl	%ebp,%eax
	addl	$-4,%eax
	movl	(%eax),%eax
	addl	$8,%eax
	addl	$0,%eax
	movl	(%eax),%eax
	movl	%eax,%ebx
	cmpl	$16,%ebx
	movl	$1,%eax
	je	codegen_EmitArithExpr_reltrue_186
	movl	$0,%eax
codegen_EmitArithExpr_reltrue_186	:	
	testl	%eax,%eax
	jnz	codegen_EmitArithExpr_logexprtrue_185
	movl	%ebp,%eax
	addl	$-4,%eax
	movl	(%eax),%eax
	addl	$8,%eax
	addl	$0,%eax
	movl	(%eax),%eax
	movl	%eax,%ebx
	cmpl	$17,%ebx
	movl	$1,%eax
	je	codegen_EmitArithExpr_reltrue_187
	movl	$0,%eax
codegen_EmitArithExpr_reltrue_187	:	
	testl	%eax,%eax
	jnz	codegen_EmitArithExpr_logexprtrue_185
	movl	$0,%eax
	jmp	codegen_EmitArithExpr_logexprfalse_185
codegen_EmitArithExpr_logexprtrue_185	:	
	movl	$1,%eax
codegen_EmitArithExpr_logexprfalse_185	:	
	testl	%eax,%eax
	jz	codegen_EmitArithExpr_logtermfalse_184
	movl	$1,%eax
	jmp	codegen_EmitArithExpr_logtermtrue_184
codegen_EmitArithExpr_logtermfalse_184	:	
	movl	$0,%eax
codegen_EmitArithExpr_logtermtrue_184	:	
	testl	%eax,%eax
	jnz	codegen_EmitArithExpr_ifbl_183
	jmp	codegen_EmitArithExpr_elsebl_183
codegen_EmitArithExpr_ifbl_183	:	

	subl	$4,%esp
	movl	-12(%ebp),%eax
	movl	%eax,0(%esp)
	call	type_RemoveStarFromType
	addl	$4,%esp
	movl	%eax,-4(%ebp)

	subl	$12,%esp
	movl	%ebp,%eax
	addl	$-340,%eax
	movl	%eax,0(%esp)
	movl	$symtab+1639,4(%esp)
	subl	$8,%esp
	movl	%ebp,%eax
	addl	$8,%eax
	movl	(%eax),%eax
	addl	$20,%eax
	movl	(%eax),%eax
	addl	$4,%eax
	movl	(%eax),%eax
	movl	%eax,0(%esp)
	movl	-4(%ebp),%eax
	movl	%eax,4(%esp)
	call	symbol_Sizeof_DataType
	addl	$8,%esp
	movl	%eax,8(%esp)
	call	sprintf
	addl	$12,%esp

	subl	$8,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	%ebp,%eax
	addl	$-340,%eax
	movl	%eax,4(%esp)
	call	codegen_emit
	addl	$8,%esp

	subl	$8,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	$symtab+1620,4(%esp)
	call	codegen_emit
	addl	$8,%esp

	subl	$8,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	%ebp,%eax
	addl	$-180,%eax
	movl	%eax,4(%esp)
	call	codegen_emit
	addl	$8,%esp

	subl	$8,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	$symtab+1657,4(%esp)
	call	codegen_emit
	addl	$8,%esp

	subl	$8,%esp
	movl	%ebp,%eax
	addl	$-180,%eax
	movl	%eax,0(%esp)
	movl	$symtab+1665,4(%esp)
	call	strcpy
	addl	$8,%esp

	subl	$4,%esp
	movl	-4(%ebp),%eax
	movl	%eax,0(%esp)
	call	syntax_FreeSyntaxTree
	addl	$4,%esp

	movl	-12(%ebp),%eax
	movl	%eax,-4(%ebp)

	movl	-8(%ebp),%eax
	movl	%eax,-12(%ebp)

	movl	-4(%ebp),%eax
	movl	%eax,-8(%ebp)
	jmp	codegen_EmitArithExpr_endif_183
codegen_EmitArithExpr_elsebl_183	:	
codegen_EmitArithExpr_endif_183	:	

	subl	$8,%esp
	movl	12(%ebp),%eax
	movl	%eax,0(%esp)
	movl	-20(%ebp),%ebx
	subl	$1,%ebx
	movl	%ebx,%eax
	movl	%eax,4(%esp)
	call	syntax_GetChild
	addl	$8,%esp
	movl	%eax,-4(%ebp)

	movl	%ebp,%eax
	addl	$-4,%eax
	movl	(%eax),%eax
	addl	$8,%eax
	addl	$0,%eax
	movl	(%eax),%eax
	movl	%eax,%ebx
	cmpl	$16,%ebx
	movl	$1,%eax
	je	codegen_EmitArithExpr_reltrue_189
	movl	$0,%eax
codegen_EmitArithExpr_reltrue_189	:	
	testl	%eax,%eax
	jnz	codegen_EmitArithExpr_ifbl_188
	jmp	codegen_EmitArithExpr_elsebl_188
codegen_EmitArithExpr_ifbl_188	:	

	subl	$8,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	$symtab+1670,4(%esp)
	call	codegen_emit
	addl	$8,%esp
	jmp	codegen_EmitArithExpr_endif_188
codegen_EmitArithExpr_elsebl_188	:	
codegen_EmitArithExpr_endif_188	:	

	movl	%ebp,%eax
	addl	$-4,%eax
	movl	(%eax),%eax
	addl	$8,%eax
	addl	$0,%eax
	movl	(%eax),%eax
	movl	%eax,%ebx
	cmpl	$17,%ebx
	movl	$1,%eax
	je	codegen_EmitArithExpr_reltrue_191
	movl	$0,%eax
codegen_EmitArithExpr_reltrue_191	:	
	testl	%eax,%eax
	jnz	codegen_EmitArithExpr_ifbl_190
	jmp	codegen_EmitArithExpr_elsebl_190
codegen_EmitArithExpr_ifbl_190	:	

	subl	$8,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	$symtab+1677,4(%esp)
	call	codegen_emit
	addl	$8,%esp
	jmp	codegen_EmitArithExpr_endif_190
codegen_EmitArithExpr_elsebl_190	:	
codegen_EmitArithExpr_endif_190	:	

	movl	%ebp,%eax
	addl	$-4,%eax
	movl	(%eax),%eax
	addl	$8,%eax
	addl	$0,%eax
	movl	(%eax),%eax
	movl	%eax,%ebx
	cmpl	$22,%ebx
	movl	$1,%eax
	je	codegen_EmitArithExpr_reltrue_193
	movl	$0,%eax
codegen_EmitArithExpr_reltrue_193	:	
	testl	%eax,%eax
	jnz	codegen_EmitArithExpr_ifbl_192
	jmp	codegen_EmitArithExpr_elsebl_192
codegen_EmitArithExpr_ifbl_192	:	

	subl	$8,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	$symtab+1684,4(%esp)
	call	codegen_emit
	addl	$8,%esp
	jmp	codegen_EmitArithExpr_endif_192
codegen_EmitArithExpr_elsebl_192	:	
codegen_EmitArithExpr_endif_192	:	

	subl	$8,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	%ebp,%eax
	addl	$-180,%eax
	movl	%eax,4(%esp)
	call	codegen_emit
	addl	$8,%esp

	subl	$8,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	$symtab+616,4(%esp)
	call	codegen_emit
	addl	$8,%esp

	subl	$8,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	16(%ebp),%eax
	movl	%eax,4(%esp)
	call	codegen_emit
	addl	$8,%esp

	subl	$8,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	$symtab+198,4(%esp)
	call	codegen_emit
	addl	$8,%esp

	subl	$8,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	$symtab+1338,4(%esp)
	call	codegen_emit
	addl	$8,%esp

	subl	$8,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	16(%ebp),%eax
	movl	%eax,4(%esp)
	call	codegen_emit
	addl	$8,%esp

	subl	$8,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	$symtab+198,4(%esp)
	call	codegen_emit
	addl	$8,%esp

	movl	-20(%ebp),%ebx
	addl	$2,%ebx
	movl	%ebx,%eax
	movl	%eax,-20(%ebp)

	subl	$4,%esp
	movl	-12(%ebp),%eax
	movl	%eax,0(%esp)
	call	syntax_FreeSyntaxTree
	addl	$4,%esp
	jmp	codegen_EmitArithExpr_while_179
codegen_EmitArithExpr_endwhile_179	:	

	subl	$8,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	$symtab+1565,4(%esp)
	call	codegen_emit
	addl	$8,%esp

	subl	$8,%esp
	movl	16(%ebp),%eax
	movl	%eax,0(%esp)
	movl	$symtab+216,4(%esp)
	call	strcpy
	addl	$8,%esp

	movl	-8(%ebp),%eax
	jmp	codegen_EmitArithExpr_ret
codegen_EmitArithExpr_ret	:	
	movl	%ebp,%esp
	popl	%ebp
	ret	

.globl	codegen_EmitRelExpr
.type	codegen_EmitRelExpr,@function
codegen_EmitRelExpr	:	
	pushl	%ebp
	movl	%esp,%ebp
	subl	$336,%esp

	subl	$4,%esp
	movl	12(%ebp),%eax
	movl	%eax,0(%esp)
	call	syntax_CountChilds
	addl	$4,%esp
	movl	%eax,%ebx
	cmpl	$1,%ebx
	movl	$1,%eax
	je	codegen_EmitRelExpr_reltrue_195
	movl	$0,%eax
codegen_EmitRelExpr_reltrue_195	:	
	testl	%eax,%eax
	jnz	codegen_EmitRelExpr_ifbl_194
	jmp	codegen_EmitRelExpr_elsebl_194
codegen_EmitRelExpr_ifbl_194	:	

	subl	$12,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	subl	$8,%esp
	movl	12(%ebp),%eax
	movl	%eax,0(%esp)
	movl	$0,4(%esp)
	call	syntax_GetChild
	addl	$8,%esp
	movl	%eax,4(%esp)
	movl	16(%ebp),%eax
	movl	%eax,8(%esp)
	call	codegen_EmitArithExpr
	addl	$12,%esp
	jmp	codegen_EmitRelExpr_ret
codegen_EmitRelExpr_elsebl_194	:	
codegen_EmitRelExpr_endif_194	:	

	subl	$8,%esp
	movl	12(%ebp),%eax
	movl	%eax,0(%esp)
	movl	$1,4(%esp)
	call	syntax_GetChild
	addl	$8,%esp
	movl	%eax,-336(%ebp)

	movl	%ebp,%eax
	addl	$8,%eax
	movl	(%eax),%eax
	addl	$24,%eax
	movl	(%eax),%eax
	movl	%eax,-4(%ebp)

	movl	%ebp,%eax
	addl	$8,%eax
	movl	(%eax),%eax
	addl	$24,%eax
	pushl	%eax
	movl	%ebp,%eax
	addl	$8,%eax
	movl	(%eax),%eax
	addl	$24,%eax
	movl	(%eax),%eax
	movl	%eax,%ebx
	addl	$1,%ebx
	movl	%ebx,%eax
	popl	%ebx
	movl	%eax,(%ebx)

	subl	$12,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	subl	$8,%esp
	movl	12(%ebp),%eax
	movl	%eax,0(%esp)
	movl	$0,4(%esp)
	call	syntax_GetChild
	addl	$8,%esp
	movl	%eax,4(%esp)
	movl	16(%ebp),%eax
	movl	%eax,8(%esp)
	call	codegen_EmitArithExpr
	addl	$12,%esp
	movl	%eax,-332(%ebp)

	subl	$156,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	%ebp,%eax
	addl	$-336,%eax
	movl	(%eax),%eax
	addl	$8,%eax
	movl	%esp,%ebx
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	16(%ebp),%eax
	movl	%eax,148(%esp)
	movl	-332(%ebp),%eax
	movl	%eax,152(%esp)
	call	codegen_CastToInt
	addl	$156,%esp
	movl	%eax,-332(%ebp)

	subl	$8,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	$symtab+1338,4(%esp)
	call	codegen_emit
	addl	$8,%esp

	subl	$8,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	16(%ebp),%eax
	movl	%eax,4(%esp)
	call	codegen_emit
	addl	$8,%esp

	subl	$8,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	$symtab+198,4(%esp)
	call	codegen_emit
	addl	$8,%esp

	subl	$4,%esp
	movl	-332(%ebp),%eax
	movl	%eax,0(%esp)
	call	syntax_FreeSyntaxTree
	addl	$4,%esp

	subl	$12,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	subl	$8,%esp
	movl	12(%ebp),%eax
	movl	%eax,0(%esp)
	movl	$2,4(%esp)
	call	syntax_GetChild
	addl	$8,%esp
	movl	%eax,4(%esp)
	movl	%ebp,%eax
	addl	$-164,%eax
	movl	%eax,8(%esp)
	call	codegen_EmitArithExpr
	addl	$12,%esp
	movl	%eax,-332(%ebp)

	subl	$156,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	%ebp,%eax
	addl	$-336,%eax
	movl	(%eax),%eax
	addl	$8,%eax
	movl	%esp,%ebx
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	%ebp,%eax
	addl	$-164,%eax
	movl	%eax,148(%esp)
	movl	-332(%ebp),%eax
	movl	%eax,152(%esp)
	call	codegen_CastToInt
	addl	$156,%esp
	movl	%eax,-332(%ebp)

	subl	$8,%esp
	movl	%ebp,%eax
	addl	$-164,%eax
	movl	%eax,0(%esp)
	movl	$symtab+1200,4(%esp)
	call	strcmp
	addl	$8,%esp
	movl	%eax,%ebx
	cmpl	$0,%ebx
	movl	$1,%eax
	je	codegen_EmitRelExpr_reltrue_197
	movl	$0,%eax
codegen_EmitRelExpr_reltrue_197	:	
	testl	%eax,%eax
	jnz	codegen_EmitRelExpr_ifbl_196
	jmp	codegen_EmitRelExpr_elsebl_196
codegen_EmitRelExpr_ifbl_196	:	

	subl	$8,%esp
	movl	16(%ebp),%eax
	movl	%eax,0(%esp)
	movl	$symtab+216,4(%esp)
	call	strcpy
	addl	$8,%esp
	jmp	codegen_EmitRelExpr_endif_196
codegen_EmitRelExpr_elsebl_196	:	

	subl	$8,%esp
	movl	16(%ebp),%eax
	movl	%eax,0(%esp)
	movl	$symtab+1200,4(%esp)
	call	strcpy
	addl	$8,%esp
codegen_EmitRelExpr_endif_196	:	

	subl	$8,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	$symtab+1413,4(%esp)
	call	codegen_emit
	addl	$8,%esp

	subl	$8,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	16(%ebp),%eax
	movl	%eax,4(%esp)
	call	codegen_emit
	addl	$8,%esp

	subl	$8,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	$symtab+198,4(%esp)
	call	codegen_emit
	addl	$8,%esp

	subl	$8,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	$symtab+1690,4(%esp)
	call	codegen_emit
	addl	$8,%esp

	subl	$8,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	%ebp,%eax
	addl	$-164,%eax
	movl	%eax,4(%esp)
	call	codegen_emit
	addl	$8,%esp

	subl	$8,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	$symtab+616,4(%esp)
	call	codegen_emit
	addl	$8,%esp

	subl	$8,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	16(%ebp),%eax
	movl	%eax,4(%esp)
	call	codegen_emit
	addl	$8,%esp

	subl	$8,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	$symtab+198,4(%esp)
	call	codegen_emit
	addl	$8,%esp

	subl	$8,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	$symtab+1697,4(%esp)
	call	codegen_emit
	addl	$8,%esp

	movl	%ebp,%eax
	addl	$-336,%eax
	movl	(%eax),%eax
	addl	$8,%eax
	movl	%eax,-328(%ebp)

	movl	%ebp,%eax
	addl	$-328,%eax
	movl	(%eax),%eax
	addl	$0,%eax
	movl	(%eax),%eax
	movl	%eax,%ebx
	cmpl	$26,%ebx
	movl	$1,%eax
	je	codegen_EmitRelExpr_reltrue_199
	movl	$0,%eax
codegen_EmitRelExpr_reltrue_199	:	
	testl	%eax,%eax
	jnz	codegen_EmitRelExpr_ifbl_198
	jmp	codegen_EmitRelExpr_elsebl_198
codegen_EmitRelExpr_ifbl_198	:	

	subl	$8,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	$symtab+1713,4(%esp)
	call	codegen_emit
	addl	$8,%esp
	jmp	codegen_EmitRelExpr_endif_198
codegen_EmitRelExpr_elsebl_198	:	

	movl	%ebp,%eax
	addl	$-328,%eax
	movl	(%eax),%eax
	addl	$0,%eax
	movl	(%eax),%eax
	movl	%eax,%ebx
	cmpl	$27,%ebx
	movl	$1,%eax
	je	codegen_EmitRelExpr_reltrue_201
	movl	$0,%eax
codegen_EmitRelExpr_reltrue_201	:	
	testl	%eax,%eax
	jnz	codegen_EmitRelExpr_ifbl_200
	jmp	codegen_EmitRelExpr_elsebl_200
codegen_EmitRelExpr_ifbl_200	:	

	subl	$8,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	$symtab+1718,4(%esp)
	call	codegen_emit
	addl	$8,%esp
	jmp	codegen_EmitRelExpr_endif_200
codegen_EmitRelExpr_elsebl_200	:	

	movl	%ebp,%eax
	addl	$-328,%eax
	movl	(%eax),%eax
	addl	$0,%eax
	movl	(%eax),%eax
	movl	%eax,%ebx
	cmpl	$28,%ebx
	movl	$1,%eax
	je	codegen_EmitRelExpr_reltrue_203
	movl	$0,%eax
codegen_EmitRelExpr_reltrue_203	:	
	testl	%eax,%eax
	jnz	codegen_EmitRelExpr_ifbl_202
	jmp	codegen_EmitRelExpr_elsebl_202
codegen_EmitRelExpr_ifbl_202	:	

	subl	$8,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	$symtab+1724,4(%esp)
	call	codegen_emit
	addl	$8,%esp
	jmp	codegen_EmitRelExpr_endif_202
codegen_EmitRelExpr_elsebl_202	:	

	movl	%ebp,%eax
	addl	$-328,%eax
	movl	(%eax),%eax
	addl	$0,%eax
	movl	(%eax),%eax
	movl	%eax,%ebx
	cmpl	$29,%ebx
	movl	$1,%eax
	je	codegen_EmitRelExpr_reltrue_205
	movl	$0,%eax
codegen_EmitRelExpr_reltrue_205	:	
	testl	%eax,%eax
	jnz	codegen_EmitRelExpr_ifbl_204
	jmp	codegen_EmitRelExpr_elsebl_204
codegen_EmitRelExpr_ifbl_204	:	

	subl	$8,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	$symtab+1729,4(%esp)
	call	codegen_emit
	addl	$8,%esp
	jmp	codegen_EmitRelExpr_endif_204
codegen_EmitRelExpr_elsebl_204	:	

	movl	%ebp,%eax
	addl	$-328,%eax
	movl	(%eax),%eax
	addl	$0,%eax
	movl	(%eax),%eax
	movl	%eax,%ebx
	cmpl	$30,%ebx
	movl	$1,%eax
	je	codegen_EmitRelExpr_reltrue_207
	movl	$0,%eax
codegen_EmitRelExpr_reltrue_207	:	
	testl	%eax,%eax
	jnz	codegen_EmitRelExpr_ifbl_206
	jmp	codegen_EmitRelExpr_elsebl_206
codegen_EmitRelExpr_ifbl_206	:	

	subl	$8,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	$symtab+1735,4(%esp)
	call	codegen_emit
	addl	$8,%esp
	jmp	codegen_EmitRelExpr_endif_206
codegen_EmitRelExpr_elsebl_206	:	

	movl	%ebp,%eax
	addl	$-328,%eax
	movl	(%eax),%eax
	addl	$0,%eax
	movl	(%eax),%eax
	movl	%eax,%ebx
	cmpl	$31,%ebx
	movl	$1,%eax
	je	codegen_EmitRelExpr_reltrue_209
	movl	$0,%eax
codegen_EmitRelExpr_reltrue_209	:	
	testl	%eax,%eax
	jnz	codegen_EmitRelExpr_ifbl_208
	jmp	codegen_EmitRelExpr_elsebl_208
codegen_EmitRelExpr_ifbl_208	:	

	subl	$8,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	$symtab+1740,4(%esp)
	call	codegen_emit
	addl	$8,%esp
	jmp	codegen_EmitRelExpr_endif_208
codegen_EmitRelExpr_elsebl_208	:	

	subl	$152,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	$symtab+1746,4(%esp)
	movl	%ebp,%eax
	addl	$-328,%eax
	movl	(%eax),%eax
	movl	%esp,%ebx
	addl	$8,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	call	codegen_reportError
	addl	$152,%esp
codegen_EmitRelExpr_endif_208	:	
codegen_EmitRelExpr_endif_206	:	
codegen_EmitRelExpr_endif_204	:	
codegen_EmitRelExpr_endif_202	:	
codegen_EmitRelExpr_endif_200	:	
codegen_EmitRelExpr_endif_198	:	

	subl	$12,%esp
	movl	%ebp,%eax
	addl	$-324,%eax
	movl	%eax,0(%esp)
	movl	$symtab+1775,4(%esp)
	movl	%ebp,%eax
	addl	$8,%eax
	movl	(%eax),%eax
	addl	$32,%eax
	addl	$16,%eax
	movl	%eax,8(%esp)
	call	sprintf
	addl	$12,%esp

	subl	$12,%esp
	movl	16(%ebp),%eax
	movl	%eax,0(%esp)
	movl	%ebp,%eax
	addl	$-324,%eax
	movl	%eax,4(%esp)
	movl	-4(%ebp),%eax
	movl	%eax,8(%esp)
	call	sprintf
	addl	$12,%esp

	subl	$8,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	16(%ebp),%eax
	movl	%eax,4(%esp)
	call	codegen_emit
	addl	$8,%esp

	subl	$8,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	$symtab+1791,4(%esp)
	call	codegen_emit
	addl	$8,%esp

	subl	$12,%esp
	movl	%ebp,%eax
	addl	$-324,%eax
	movl	%eax,0(%esp)
	movl	$symtab+1807,4(%esp)
	movl	%ebp,%eax
	addl	$8,%eax
	movl	(%eax),%eax
	addl	$32,%eax
	addl	$16,%eax
	movl	%eax,8(%esp)
	call	sprintf
	addl	$12,%esp

	subl	$12,%esp
	movl	16(%ebp),%eax
	movl	%eax,0(%esp)
	movl	%ebp,%eax
	addl	$-324,%eax
	movl	%eax,4(%esp)
	movl	-4(%ebp),%eax
	movl	%eax,8(%esp)
	call	sprintf
	addl	$12,%esp

	subl	$8,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	16(%ebp),%eax
	movl	%eax,4(%esp)
	call	codegen_emit
	addl	$8,%esp

	subl	$8,%esp
	movl	16(%ebp),%eax
	movl	%eax,0(%esp)
	movl	$symtab+216,4(%esp)
	call	strcpy
	addl	$8,%esp

	movl	-332(%ebp),%eax
	jmp	codegen_EmitRelExpr_ret
codegen_EmitRelExpr_ret	:	
	movl	%ebp,%esp
	popl	%ebp
	ret	

.globl	codegen_EmitLogFactor
.type	codegen_EmitLogFactor,@function
codegen_EmitLogFactor	:	
	pushl	%ebp
	movl	%esp,%ebp
	subl	$172,%esp

	subl	$8,%esp
	movl	12(%ebp),%eax
	movl	%eax,0(%esp)
	movl	$0,4(%esp)
	call	syntax_GetChild
	addl	$8,%esp
	movl	%eax,-12(%ebp)

	subl	$4,%esp
	movl	12(%ebp),%eax
	movl	%eax,0(%esp)
	call	syntax_CountChilds
	addl	$4,%esp
	movl	%eax,%ebx
	cmpl	$1,%ebx
	movl	$1,%eax
	je	codegen_EmitLogFactor_reltrue_211
	movl	$0,%eax
codegen_EmitLogFactor_reltrue_211	:	
	testl	%eax,%eax
	jnz	codegen_EmitLogFactor_ifbl_210
	jmp	codegen_EmitLogFactor_elsebl_210
codegen_EmitLogFactor_ifbl_210	:	

	subl	$12,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	-12(%ebp),%eax
	movl	%eax,4(%esp)
	movl	16(%ebp),%eax
	movl	%eax,8(%esp)
	call	codegen_EmitRelExpr
	addl	$12,%esp
	jmp	codegen_EmitLogFactor_ret
codegen_EmitLogFactor_elsebl_210	:	
codegen_EmitLogFactor_endif_210	:	

	movl	%ebp,%eax
	addl	$8,%eax
	movl	(%eax),%eax
	addl	$24,%eax
	movl	(%eax),%eax
	movl	%eax,-4(%ebp)

	movl	%ebp,%eax
	addl	$8,%eax
	movl	(%eax),%eax
	addl	$24,%eax
	pushl	%eax
	movl	%ebp,%eax
	addl	$8,%eax
	movl	(%eax),%eax
	addl	$24,%eax
	movl	(%eax),%eax
	movl	%eax,%ebx
	addl	$1,%ebx
	movl	%ebx,%eax
	popl	%ebx
	movl	%eax,(%ebx)

	subl	$12,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	subl	$8,%esp
	movl	12(%ebp),%eax
	movl	%eax,0(%esp)
	movl	$1,4(%esp)
	call	syntax_GetChild
	addl	$8,%esp
	movl	%eax,4(%esp)
	movl	16(%ebp),%eax
	movl	%eax,8(%esp)
	call	codegen_EmitRelExpr
	addl	$12,%esp
	movl	%eax,-8(%ebp)

	subl	$156,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	%ebp,%eax
	addl	$-12,%eax
	movl	(%eax),%eax
	addl	$8,%eax
	movl	%esp,%ebx
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	16(%ebp),%eax
	movl	%eax,148(%esp)
	movl	-8(%ebp),%eax
	movl	%eax,152(%esp)
	call	codegen_CastToInt
	addl	$156,%esp
	movl	%eax,-8(%ebp)

	subl	$8,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	16(%ebp),%eax
	movl	%eax,4(%esp)
	call	codegen_EmitAvoidConstant
	addl	$8,%esp

	subl	$12,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	16(%ebp),%eax
	movl	%eax,4(%esp)
	movl	-8(%ebp),%eax
	movl	%eax,8(%esp)
	call	codegen_EmitAvoidIndirect
	addl	$12,%esp

	subl	$8,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	$symtab+608,4(%esp)
	call	codegen_emit
	addl	$8,%esp

	subl	$8,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	16(%ebp),%eax
	movl	%eax,4(%esp)
	call	codegen_emit
	addl	$8,%esp

	subl	$8,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	$symtab+616,4(%esp)
	call	codegen_emit
	addl	$8,%esp

	subl	$8,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	16(%ebp),%eax
	movl	%eax,4(%esp)
	call	codegen_emit
	addl	$8,%esp

	subl	$8,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	$symtab+198,4(%esp)
	call	codegen_emit
	addl	$8,%esp

	subl	$8,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	$symtab+1697,4(%esp)
	call	codegen_emit
	addl	$8,%esp

	subl	$12,%esp
	movl	%ebp,%eax
	addl	$-172,%eax
	movl	%eax,0(%esp)
	movl	$symtab+1824,4(%esp)
	movl	%ebp,%eax
	addl	$8,%eax
	movl	(%eax),%eax
	addl	$32,%eax
	addl	$16,%eax
	movl	%eax,8(%esp)
	call	sprintf
	addl	$12,%esp

	subl	$12,%esp
	movl	16(%ebp),%eax
	movl	%eax,0(%esp)
	movl	%ebp,%eax
	addl	$-172,%eax
	movl	%eax,4(%esp)
	movl	-4(%ebp),%eax
	movl	%eax,8(%esp)
	call	sprintf
	addl	$12,%esp

	subl	$8,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	16(%ebp),%eax
	movl	%eax,4(%esp)
	call	codegen_emit
	addl	$8,%esp

	subl	$8,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	$symtab+1791,4(%esp)
	call	codegen_emit
	addl	$8,%esp

	subl	$12,%esp
	movl	%ebp,%eax
	addl	$-172,%eax
	movl	%eax,0(%esp)
	movl	$symtab+1849,4(%esp)
	movl	%ebp,%eax
	addl	$8,%eax
	movl	(%eax),%eax
	addl	$32,%eax
	addl	$16,%eax
	movl	%eax,8(%esp)
	call	sprintf
	addl	$12,%esp

	subl	$12,%esp
	movl	16(%ebp),%eax
	movl	%eax,0(%esp)
	movl	%ebp,%eax
	addl	$-172,%eax
	movl	%eax,4(%esp)
	movl	-4(%ebp),%eax
	movl	%eax,8(%esp)
	call	sprintf
	addl	$12,%esp

	subl	$8,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	16(%ebp),%eax
	movl	%eax,4(%esp)
	call	codegen_emit
	addl	$8,%esp

	subl	$8,%esp
	movl	16(%ebp),%eax
	movl	%eax,0(%esp)
	movl	$symtab+216,4(%esp)
	call	strcpy
	addl	$8,%esp

	movl	-8(%ebp),%eax
	jmp	codegen_EmitLogFactor_ret
codegen_EmitLogFactor_ret	:	
	movl	%ebp,%esp
	popl	%ebp
	ret	

.globl	codegen_EmitLogTerm
.type	codegen_EmitLogTerm,@function
codegen_EmitLogTerm	:	
	pushl	%ebp
	movl	%esp,%ebp
	subl	$184,%esp

	subl	$4,%esp
	movl	12(%ebp),%eax
	movl	%eax,0(%esp)
	call	syntax_CountChilds
	addl	$4,%esp
	movl	%eax,%ebx
	cmpl	$1,%ebx
	movl	$1,%eax
	je	codegen_EmitLogTerm_reltrue_213
	movl	$0,%eax
codegen_EmitLogTerm_reltrue_213	:	
	testl	%eax,%eax
	jnz	codegen_EmitLogTerm_ifbl_212
	jmp	codegen_EmitLogTerm_elsebl_212
codegen_EmitLogTerm_ifbl_212	:	

	subl	$12,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	subl	$8,%esp
	movl	12(%ebp),%eax
	movl	%eax,0(%esp)
	movl	$0,4(%esp)
	call	syntax_GetChild
	addl	$8,%esp
	movl	%eax,4(%esp)
	movl	16(%ebp),%eax
	movl	%eax,8(%esp)
	call	codegen_EmitLogFactor
	addl	$12,%esp
	jmp	codegen_EmitLogTerm_ret
codegen_EmitLogTerm_elsebl_212	:	
codegen_EmitLogTerm_endif_212	:	

	subl	$8,%esp
	movl	12(%ebp),%eax
	movl	%eax,0(%esp)
	movl	$1,4(%esp)
	call	syntax_GetChild
	addl	$8,%esp
	movl	%eax,-24(%ebp)

	subl	$4,%esp
	movl	12(%ebp),%eax
	movl	%eax,0(%esp)
	call	syntax_CountChilds
	addl	$4,%esp
	movl	%eax,%ebx
	addl	$1,%ebx
	movl	%ebx,%eax
	pushl	%eax
	movl	$2,%eax
	movl	%eax,%ebx
	popl	%eax
	movl	$0,%edx
	idivl	%ebx
	movl	%eax,-8(%ebp)

	movl	$0,-4(%ebp)

	movl	$0,-12(%ebp)

	movl	$0,-20(%ebp)

	movl	%ebp,%eax
	addl	$8,%eax
	movl	(%eax),%eax
	addl	$24,%eax
	movl	(%eax),%eax
	movl	%eax,-16(%ebp)

	movl	%ebp,%eax
	addl	$8,%eax
	movl	(%eax),%eax
	addl	$24,%eax
	pushl	%eax
	movl	%ebp,%eax
	addl	$8,%eax
	movl	(%eax),%eax
	addl	$24,%eax
	movl	(%eax),%eax
	movl	%eax,%ebx
	addl	$1,%ebx
	movl	%ebx,%eax
	popl	%ebx
	movl	%eax,(%ebx)

codegen_EmitLogTerm_while_214	:	
	movl	-4(%ebp),%ebx
	cmpl	-8(%ebp),%ebx
	movl	$1,%eax
	jl	codegen_EmitLogTerm_reltrue_215
	movl	$0,%eax
codegen_EmitLogTerm_reltrue_215	:	
	testl	%eax,%eax
	jz	codegen_EmitLogTerm_endwhile_214

	subl	$4,%esp
	movl	-20(%ebp),%eax
	movl	%eax,0(%esp)
	call	syntax_FreeSyntaxTree
	addl	$4,%esp

	subl	$12,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	subl	$8,%esp
	movl	12(%ebp),%eax
	movl	%eax,0(%esp)
	movl	$2,%ebx
	imull	-4(%ebp),%ebx
	movl	%ebx,%eax
	movl	%eax,4(%esp)
	call	syntax_GetChild
	addl	$8,%esp
	movl	%eax,4(%esp)
	movl	16(%ebp),%eax
	movl	%eax,8(%esp)
	call	codegen_EmitLogFactor
	addl	$12,%esp
	movl	%eax,-20(%ebp)

	subl	$156,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	%ebp,%eax
	addl	$-24,%eax
	movl	(%eax),%eax
	addl	$8,%eax
	movl	%esp,%ebx
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	16(%ebp),%eax
	movl	%eax,148(%esp)
	movl	-20(%ebp),%eax
	movl	%eax,152(%esp)
	call	codegen_CastToInt
	addl	$156,%esp
	movl	%eax,-20(%ebp)

	subl	$8,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	16(%ebp),%eax
	movl	%eax,4(%esp)
	call	codegen_EmitAvoidConstant
	addl	$8,%esp

	subl	$12,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	16(%ebp),%eax
	movl	%eax,4(%esp)
	movl	-20(%ebp),%eax
	movl	%eax,8(%esp)
	call	codegen_EmitAvoidIndirect
	addl	$12,%esp

	subl	$8,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	$symtab+608,4(%esp)
	call	codegen_emit
	addl	$8,%esp

	subl	$8,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	16(%ebp),%eax
	movl	%eax,4(%esp)
	call	codegen_emit
	addl	$8,%esp

	subl	$8,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	$symtab+616,4(%esp)
	call	codegen_emit
	addl	$8,%esp

	subl	$8,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	16(%ebp),%eax
	movl	%eax,4(%esp)
	call	codegen_emit
	addl	$8,%esp

	subl	$8,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	$symtab+198,4(%esp)
	call	codegen_emit
	addl	$8,%esp

	subl	$12,%esp
	movl	%ebp,%eax
	addl	$-184,%eax
	movl	%eax,0(%esp)
	movl	$symtab+1871,4(%esp)
	movl	%ebp,%eax
	addl	$8,%eax
	movl	(%eax),%eax
	addl	$32,%eax
	addl	$16,%eax
	movl	%eax,8(%esp)
	call	sprintf
	addl	$12,%esp

	subl	$12,%esp
	movl	16(%ebp),%eax
	movl	%eax,0(%esp)
	movl	%ebp,%eax
	addl	$-184,%eax
	movl	%eax,4(%esp)
	movl	-16(%ebp),%eax
	movl	%eax,8(%esp)
	call	sprintf
	addl	$12,%esp

	subl	$8,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	16(%ebp),%eax
	movl	%eax,4(%esp)
	call	codegen_emit
	addl	$8,%esp

	movl	-4(%ebp),%ebx
	addl	$1,%ebx
	movl	%ebx,%eax
	movl	%eax,-4(%ebp)
	jmp	codegen_EmitLogTerm_while_214
codegen_EmitLogTerm_endwhile_214	:	

	subl	$8,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	$symtab+1697,4(%esp)
	call	codegen_emit
	addl	$8,%esp

	subl	$12,%esp
	movl	%ebp,%eax
	addl	$-184,%eax
	movl	%eax,0(%esp)
	movl	$symtab+1896,4(%esp)
	movl	%ebp,%eax
	addl	$8,%eax
	movl	(%eax),%eax
	addl	$32,%eax
	addl	$16,%eax
	movl	%eax,8(%esp)
	call	sprintf
	addl	$12,%esp

	subl	$12,%esp
	movl	16(%ebp),%eax
	movl	%eax,0(%esp)
	movl	%ebp,%eax
	addl	$-184,%eax
	movl	%eax,4(%esp)
	movl	-16(%ebp),%eax
	movl	%eax,8(%esp)
	call	sprintf
	addl	$12,%esp

	subl	$8,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	16(%ebp),%eax
	movl	%eax,4(%esp)
	call	codegen_emit
	addl	$8,%esp

	subl	$12,%esp
	movl	%ebp,%eax
	addl	$-184,%eax
	movl	%eax,0(%esp)
	movl	$symtab+1921,4(%esp)
	movl	%ebp,%eax
	addl	$8,%eax
	movl	(%eax),%eax
	addl	$32,%eax
	addl	$16,%eax
	movl	%eax,8(%esp)
	call	sprintf
	addl	$12,%esp

	subl	$12,%esp
	movl	16(%ebp),%eax
	movl	%eax,0(%esp)
	movl	%ebp,%eax
	addl	$-184,%eax
	movl	%eax,4(%esp)
	movl	-16(%ebp),%eax
	movl	%eax,8(%esp)
	call	sprintf
	addl	$12,%esp

	subl	$8,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	16(%ebp),%eax
	movl	%eax,4(%esp)
	call	codegen_emit
	addl	$8,%esp

	subl	$8,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	$symtab+1791,4(%esp)
	call	codegen_emit
	addl	$8,%esp

	subl	$12,%esp
	movl	%ebp,%eax
	addl	$-184,%eax
	movl	%eax,0(%esp)
	movl	$symtab+1943,4(%esp)
	movl	%ebp,%eax
	addl	$8,%eax
	movl	(%eax),%eax
	addl	$32,%eax
	addl	$16,%eax
	movl	%eax,8(%esp)
	call	sprintf
	addl	$12,%esp

	subl	$12,%esp
	movl	16(%ebp),%eax
	movl	%eax,0(%esp)
	movl	%ebp,%eax
	addl	$-184,%eax
	movl	%eax,4(%esp)
	movl	-16(%ebp),%eax
	movl	%eax,8(%esp)
	call	sprintf
	addl	$12,%esp

	subl	$8,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	16(%ebp),%eax
	movl	%eax,4(%esp)
	call	codegen_emit
	addl	$8,%esp

	subl	$8,%esp
	movl	16(%ebp),%eax
	movl	%eax,0(%esp)
	movl	$symtab+216,4(%esp)
	call	strcpy
	addl	$8,%esp

	movl	-20(%ebp),%eax
	jmp	codegen_EmitLogTerm_ret
codegen_EmitLogTerm_ret	:	
	movl	%ebp,%esp
	popl	%ebp
	ret	

.globl	codegen_EmitLogExpr
.type	codegen_EmitLogExpr,@function
codegen_EmitLogExpr	:	
	pushl	%ebp
	movl	%esp,%ebp
	subl	$184,%esp

	subl	$4,%esp
	movl	12(%ebp),%eax
	movl	%eax,0(%esp)
	call	syntax_CountChilds
	addl	$4,%esp
	movl	%eax,%ebx
	cmpl	$1,%ebx
	movl	$1,%eax
	je	codegen_EmitLogExpr_reltrue_217
	movl	$0,%eax
codegen_EmitLogExpr_reltrue_217	:	
	testl	%eax,%eax
	jnz	codegen_EmitLogExpr_ifbl_216
	jmp	codegen_EmitLogExpr_elsebl_216
codegen_EmitLogExpr_ifbl_216	:	

	subl	$12,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	subl	$8,%esp
	movl	12(%ebp),%eax
	movl	%eax,0(%esp)
	movl	$0,4(%esp)
	call	syntax_GetChild
	addl	$8,%esp
	movl	%eax,4(%esp)
	movl	16(%ebp),%eax
	movl	%eax,8(%esp)
	call	codegen_EmitLogTerm
	addl	$12,%esp
	jmp	codegen_EmitLogExpr_ret
codegen_EmitLogExpr_elsebl_216	:	
codegen_EmitLogExpr_endif_216	:	

	subl	$8,%esp
	movl	12(%ebp),%eax
	movl	%eax,0(%esp)
	movl	$1,4(%esp)
	call	syntax_GetChild
	addl	$8,%esp
	movl	%eax,-24(%ebp)

	subl	$4,%esp
	movl	12(%ebp),%eax
	movl	%eax,0(%esp)
	call	syntax_CountChilds
	addl	$4,%esp
	movl	%eax,%ebx
	addl	$1,%ebx
	movl	%ebx,%eax
	pushl	%eax
	movl	$2,%eax
	movl	%eax,%ebx
	popl	%eax
	movl	$0,%edx
	idivl	%ebx
	movl	%eax,-8(%ebp)

	movl	$0,-4(%ebp)

	movl	$0,-12(%ebp)

	movl	$0,-20(%ebp)

	movl	%ebp,%eax
	addl	$8,%eax
	movl	(%eax),%eax
	addl	$24,%eax
	movl	(%eax),%eax
	movl	%eax,-16(%ebp)

	movl	%ebp,%eax
	addl	$8,%eax
	movl	(%eax),%eax
	addl	$24,%eax
	pushl	%eax
	movl	%ebp,%eax
	addl	$8,%eax
	movl	(%eax),%eax
	addl	$24,%eax
	movl	(%eax),%eax
	movl	%eax,%ebx
	addl	$1,%ebx
	movl	%ebx,%eax
	popl	%ebx
	movl	%eax,(%ebx)

codegen_EmitLogExpr_while_218	:	
	movl	-4(%ebp),%ebx
	cmpl	-8(%ebp),%ebx
	movl	$1,%eax
	jl	codegen_EmitLogExpr_reltrue_219
	movl	$0,%eax
codegen_EmitLogExpr_reltrue_219	:	
	testl	%eax,%eax
	jz	codegen_EmitLogExpr_endwhile_218

	subl	$4,%esp
	movl	-20(%ebp),%eax
	movl	%eax,0(%esp)
	call	syntax_FreeSyntaxTree
	addl	$4,%esp

	subl	$12,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	subl	$8,%esp
	movl	12(%ebp),%eax
	movl	%eax,0(%esp)
	movl	$2,%ebx
	imull	-4(%ebp),%ebx
	movl	%ebx,%eax
	movl	%eax,4(%esp)
	call	syntax_GetChild
	addl	$8,%esp
	movl	%eax,4(%esp)
	movl	16(%ebp),%eax
	movl	%eax,8(%esp)
	call	codegen_EmitLogTerm
	addl	$12,%esp
	movl	%eax,-20(%ebp)

	subl	$156,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	%ebp,%eax
	addl	$-24,%eax
	movl	(%eax),%eax
	addl	$8,%eax
	movl	%esp,%ebx
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	16(%ebp),%eax
	movl	%eax,148(%esp)
	movl	-20(%ebp),%eax
	movl	%eax,152(%esp)
	call	codegen_CastToInt
	addl	$156,%esp
	movl	%eax,-20(%ebp)

	subl	$8,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	16(%ebp),%eax
	movl	%eax,4(%esp)
	call	codegen_EmitAvoidConstant
	addl	$8,%esp

	subl	$12,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	16(%ebp),%eax
	movl	%eax,4(%esp)
	movl	-20(%ebp),%eax
	movl	%eax,8(%esp)
	call	codegen_EmitAvoidIndirect
	addl	$12,%esp

	subl	$8,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	$symtab+608,4(%esp)
	call	codegen_emit
	addl	$8,%esp

	subl	$8,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	16(%ebp),%eax
	movl	%eax,4(%esp)
	call	codegen_emit
	addl	$8,%esp

	subl	$8,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	$symtab+616,4(%esp)
	call	codegen_emit
	addl	$8,%esp

	subl	$8,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	16(%ebp),%eax
	movl	%eax,4(%esp)
	call	codegen_emit
	addl	$8,%esp

	subl	$8,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	$symtab+198,4(%esp)
	call	codegen_emit
	addl	$8,%esp

	subl	$12,%esp
	movl	%ebp,%eax
	addl	$-184,%eax
	movl	%eax,0(%esp)
	movl	$symtab+1964,4(%esp)
	movl	%ebp,%eax
	addl	$8,%eax
	movl	(%eax),%eax
	addl	$32,%eax
	addl	$16,%eax
	movl	%eax,8(%esp)
	call	sprintf
	addl	$12,%esp

	subl	$12,%esp
	movl	16(%ebp),%eax
	movl	%eax,0(%esp)
	movl	%ebp,%eax
	addl	$-184,%eax
	movl	%eax,4(%esp)
	movl	-16(%ebp),%eax
	movl	%eax,8(%esp)
	call	sprintf
	addl	$12,%esp

	subl	$8,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	16(%ebp),%eax
	movl	%eax,4(%esp)
	call	codegen_emit
	addl	$8,%esp

	movl	-4(%ebp),%ebx
	addl	$1,%ebx
	movl	%ebx,%eax
	movl	%eax,-4(%ebp)
	jmp	codegen_EmitLogExpr_while_218
codegen_EmitLogExpr_endwhile_218	:	

	subl	$8,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	$symtab+1791,4(%esp)
	call	codegen_emit
	addl	$8,%esp

	subl	$12,%esp
	movl	%ebp,%eax
	addl	$-184,%eax
	movl	%eax,0(%esp)
	movl	$symtab+1989,4(%esp)
	movl	%ebp,%eax
	addl	$8,%eax
	movl	(%eax),%eax
	addl	$32,%eax
	addl	$16,%eax
	movl	%eax,8(%esp)
	call	sprintf
	addl	$12,%esp

	subl	$12,%esp
	movl	16(%ebp),%eax
	movl	%eax,0(%esp)
	movl	%ebp,%eax
	addl	$-184,%eax
	movl	%eax,4(%esp)
	movl	-16(%ebp),%eax
	movl	%eax,8(%esp)
	call	sprintf
	addl	$12,%esp

	subl	$8,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	16(%ebp),%eax
	movl	%eax,4(%esp)
	call	codegen_emit
	addl	$8,%esp

	subl	$12,%esp
	movl	%ebp,%eax
	addl	$-184,%eax
	movl	%eax,0(%esp)
	movl	$symtab+2015,4(%esp)
	movl	%ebp,%eax
	addl	$8,%eax
	movl	(%eax),%eax
	addl	$32,%eax
	addl	$16,%eax
	movl	%eax,8(%esp)
	call	sprintf
	addl	$12,%esp

	subl	$12,%esp
	movl	16(%ebp),%eax
	movl	%eax,0(%esp)
	movl	%ebp,%eax
	addl	$-184,%eax
	movl	%eax,4(%esp)
	movl	-16(%ebp),%eax
	movl	%eax,8(%esp)
	call	sprintf
	addl	$12,%esp

	subl	$8,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	16(%ebp),%eax
	movl	%eax,4(%esp)
	call	codegen_emit
	addl	$8,%esp

	subl	$8,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	$symtab+1697,4(%esp)
	call	codegen_emit
	addl	$8,%esp

	subl	$12,%esp
	movl	%ebp,%eax
	addl	$-184,%eax
	movl	%eax,0(%esp)
	movl	$symtab+2036,4(%esp)
	movl	%ebp,%eax
	addl	$8,%eax
	movl	(%eax),%eax
	addl	$32,%eax
	addl	$16,%eax
	movl	%eax,8(%esp)
	call	sprintf
	addl	$12,%esp

	subl	$12,%esp
	movl	16(%ebp),%eax
	movl	%eax,0(%esp)
	movl	%ebp,%eax
	addl	$-184,%eax
	movl	%eax,4(%esp)
	movl	-16(%ebp),%eax
	movl	%eax,8(%esp)
	call	sprintf
	addl	$12,%esp

	subl	$8,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	16(%ebp),%eax
	movl	%eax,4(%esp)
	call	codegen_emit
	addl	$8,%esp

	subl	$8,%esp
	movl	16(%ebp),%eax
	movl	%eax,0(%esp)
	movl	$symtab+216,4(%esp)
	call	strcpy
	addl	$8,%esp

	movl	-20(%ebp),%eax
	jmp	codegen_EmitLogExpr_ret
codegen_EmitLogExpr_ret	:	
	movl	%ebp,%esp
	popl	%ebp
	ret	

.globl	codegen_EmitVariableAdress
.type	codegen_EmitVariableAdress,@function
codegen_EmitVariableAdress	:	
	pushl	%ebp
	movl	%esp,%ebp
	subl	$168,%esp

	movl	%ebp,%eax
	addl	$8,%eax
	movl	(%eax),%eax
	addl	$20,%eax
	movl	(%eax),%eax
	addl	$4,%eax
	movl	(%eax),%eax
	movl	%eax,-4(%ebp)

	subl	$148,%esp
	movl	-4(%ebp),%eax
	movl	%eax,0(%esp)
	movl	%ebp,%eax
	addl	$12,%eax
	movl	%esp,%ebx
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	call	symbol_FindVariable
	addl	$148,%esp
	movl	%eax,-8(%ebp)

	movl	-8(%ebp),%ebx
	cmpl	$0,%ebx
	movl	$1,%eax
	je	codegen_EmitVariableAdress_reltrue_221
	movl	$0,%eax
codegen_EmitVariableAdress_reltrue_221	:	
	testl	%eax,%eax
	jnz	codegen_EmitVariableAdress_ifbl_220
	jmp	codegen_EmitVariableAdress_elsebl_220
codegen_EmitVariableAdress_ifbl_220	:	

	movl	$0,%eax
	jmp	codegen_EmitVariableAdress_ret
codegen_EmitVariableAdress_elsebl_220	:	
codegen_EmitVariableAdress_endif_220	:	

	movl	%ebp,%eax
	addl	$-8,%eax
	movl	(%eax),%eax
	addl	$144,%eax
	movl	(%eax),%eax
	movl	%eax,%ebx
	cmpl	$5,%ebx
	movl	$1,%eax
	je	codegen_EmitVariableAdress_reltrue_223
	movl	$0,%eax
codegen_EmitVariableAdress_reltrue_223	:	
	testl	%eax,%eax
	jnz	codegen_EmitVariableAdress_ifbl_222
	jmp	codegen_EmitVariableAdress_elsebl_222
codegen_EmitVariableAdress_ifbl_222	:	

	subl	$8,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	$symtab+2058,4(%esp)
	call	codegen_emit
	addl	$8,%esp

	subl	$12,%esp
	movl	%ebp,%eax
	addl	$-168,%eax
	movl	%eax,0(%esp)
	movl	$symtab+2079,4(%esp)
	subl	$8,%esp
	movl	-4(%ebp),%eax
	movl	%eax,0(%esp)
	movl	-8(%ebp),%eax
	movl	%eax,4(%esp)
	call	symbol_GetGlobalOffset
	addl	$8,%esp
	movl	%eax,8(%esp)
	call	sprintf
	addl	$12,%esp

	subl	$8,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	%ebp,%eax
	addl	$-168,%eax
	movl	%eax,4(%esp)
	call	codegen_emit
	addl	$8,%esp
	jmp	codegen_EmitVariableAdress_endif_222
codegen_EmitVariableAdress_elsebl_222	:	

	subl	$8,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	$symtab+2097,4(%esp)
	call	codegen_emit
	addl	$8,%esp

	subl	$12,%esp
	movl	%ebp,%eax
	addl	$-168,%eax
	movl	%eax,0(%esp)
	movl	$symtab+2079,4(%esp)
	subl	$8,%esp
	movl	-4(%ebp),%eax
	movl	%eax,0(%esp)
	movl	-8(%ebp),%eax
	movl	%eax,4(%esp)
	call	symbol_GetNonGlobalOffset
	addl	$8,%esp
	movl	%eax,8(%esp)
	call	sprintf
	addl	$12,%esp

	subl	$8,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	%ebp,%eax
	addl	$-168,%eax
	movl	%eax,4(%esp)
	call	codegen_emit
	addl	$8,%esp
codegen_EmitVariableAdress_endif_222	:	

	movl	%ebp,%eax
	addl	$-8,%eax
	movl	(%eax),%eax
	addl	$148,%eax
	movl	(%eax),%eax
	jmp	codegen_EmitVariableAdress_ret
codegen_EmitVariableAdress_ret	:	
	movl	%ebp,%esp
	popl	%ebp
	ret	

.globl	codegen_EmitStartAddrOfNestedVar
.type	codegen_EmitStartAddrOfNestedVar,@function
codegen_EmitStartAddrOfNestedVar	:	
	pushl	%ebp
	movl	%esp,%ebp
	subl	$176,%esp

	movl	%ebp,%eax
	addl	$8,%eax
	movl	(%eax),%eax
	addl	$20,%eax
	movl	(%eax),%eax
	addl	$4,%eax
	movl	(%eax),%eax
	movl	%eax,-32(%ebp)

	subl	$4,%esp
	movl	12(%ebp),%eax
	movl	%eax,0(%esp)
	call	type_CountVarexprResolutions
	addl	$4,%esp
	movl	%eax,-4(%ebp)

	subl	$8,%esp
	movl	12(%ebp),%eax
	movl	%eax,0(%esp)
	movl	$0,4(%esp)
	call	syntax_GetChild
	addl	$8,%esp
	movl	%eax,-20(%ebp)

	movl	%ebp,%eax
	addl	$-20,%eax
	movl	(%eax),%eax
	addl	$8,%eax
	addl	$0,%eax
	movl	(%eax),%eax
	movl	%eax,%ebx
	cmpl	$43,%ebx
	movl	$1,%eax
	jne	codegen_EmitStartAddrOfNestedVar_reltrue_225
	movl	$0,%eax
codegen_EmitStartAddrOfNestedVar_reltrue_225	:	
	testl	%eax,%eax
	jnz	codegen_EmitStartAddrOfNestedVar_ifbl_224
	jmp	codegen_EmitStartAddrOfNestedVar_elsebl_224
codegen_EmitStartAddrOfNestedVar_ifbl_224	:	

	movl	$1,-8(%ebp)
	jmp	codegen_EmitStartAddrOfNestedVar_endif_224
codegen_EmitStartAddrOfNestedVar_elsebl_224	:	

	movl	$0,-8(%ebp)
codegen_EmitStartAddrOfNestedVar_endif_224	:	

	subl	$8,%esp
	movl	12(%ebp),%eax
	movl	%eax,0(%esp)
	movl	-8(%ebp),%eax
	movl	%eax,4(%esp)
	call	syntax_GetChild
	addl	$8,%esp
	movl	%eax,-20(%ebp)

	subl	$148,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	%ebp,%eax
	addl	$-20,%eax
	movl	(%eax),%eax
	addl	$8,%eax
	movl	%esp,%ebx
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	call	codegen_EmitVariableAdress
	addl	$148,%esp
	movl	%eax,-28(%ebp)

	movl	$1,-12(%ebp)

	movl	-28(%ebp),%ebx
	cmpl	$0,%ebx
	movl	$1,%eax
	je	codegen_EmitStartAddrOfNestedVar_reltrue_227
	movl	$0,%eax
codegen_EmitStartAddrOfNestedVar_reltrue_227	:	
	testl	%eax,%eax
	jnz	codegen_EmitStartAddrOfNestedVar_ifbl_226
	jmp	codegen_EmitStartAddrOfNestedVar_elsebl_226
codegen_EmitStartAddrOfNestedVar_ifbl_226	:	

	subl	$152,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	$symtab+2115,4(%esp)
	movl	%ebp,%eax
	addl	$-20,%eax
	movl	(%eax),%eax
	addl	$8,%eax
	movl	%esp,%ebx
	addl	$8,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	call	codegen_reportError
	addl	$152,%esp

	movl	$0,%eax
	jmp	codegen_EmitStartAddrOfNestedVar_ret
codegen_EmitStartAddrOfNestedVar_elsebl_226	:	
codegen_EmitStartAddrOfNestedVar_endif_226	:	

codegen_EmitStartAddrOfNestedVar_while_228	:	
	movl	-12(%ebp),%ebx
	cmpl	-4(%ebp),%ebx
	movl	$1,%eax
	jl	codegen_EmitStartAddrOfNestedVar_reltrue_229
	movl	$0,%eax
codegen_EmitStartAddrOfNestedVar_reltrue_229	:	
	testl	%eax,%eax
	jz	codegen_EmitStartAddrOfNestedVar_endwhile_228

	subl	$4,%esp
	movl	-28(%ebp),%eax
	movl	%eax,0(%esp)
	call	type_IsAArrayVar
	addl	$4,%esp
	testl	%eax,%eax
	jnz	codegen_EmitStartAddrOfNestedVar_ifbl_230
	jmp	codegen_EmitStartAddrOfNestedVar_elsebl_230
codegen_EmitStartAddrOfNestedVar_ifbl_230	:	

	subl	$152,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	$symtab+2133,4(%esp)
	movl	%ebp,%eax
	addl	$-20,%eax
	movl	(%eax),%eax
	addl	$8,%eax
	movl	%esp,%ebx
	addl	$8,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	call	codegen_reportError
	addl	$152,%esp

	movl	$0,%eax
	jmp	codegen_EmitStartAddrOfNestedVar_ret
codegen_EmitStartAddrOfNestedVar_elsebl_230	:	
codegen_EmitStartAddrOfNestedVar_endif_230	:	

	subl	$8,%esp
	subl	$8,%esp
	movl	-28(%ebp),%eax
	movl	%eax,0(%esp)
	movl	$0,4(%esp)
	call	syntax_GetChild
	addl	$8,%esp
	movl	%eax,0(%esp)
	movl	$0,4(%esp)
	call	syntax_GetChild
	addl	$8,%esp
	movl	%eax,-24(%ebp)

	subl	$8,%esp
	movl	12(%ebp),%eax
	movl	%eax,0(%esp)
	pushl	-8(%ebp)
	movl	$2,%ebx
	imull	-12(%ebp),%ebx
	movl	%ebx,%eax
	popl	%ebx
	addl	%eax,%ebx
	subl	$1,%ebx
	movl	%ebx,%eax
	movl	%eax,4(%esp)
	call	syntax_GetChild
	addl	$8,%esp
	movl	%eax,-20(%ebp)

	movl	%ebp,%eax
	addl	$-20,%eax
	movl	(%eax),%eax
	addl	$8,%eax
	addl	$0,%eax
	movl	(%eax),%eax
	movl	%eax,%ebx
	cmpl	$10,%ebx
	movl	$1,%eax
	je	codegen_EmitStartAddrOfNestedVar_reltrue_232
	movl	$0,%eax
codegen_EmitStartAddrOfNestedVar_reltrue_232	:	
	testl	%eax,%eax
	jnz	codegen_EmitStartAddrOfNestedVar_ifbl_231
	jmp	codegen_EmitStartAddrOfNestedVar_elsebl_231
codegen_EmitStartAddrOfNestedVar_ifbl_231	:	

	subl	$4,%esp
	movl	-24(%ebp),%eax
	movl	%eax,0(%esp)
	call	syntax_CountChilds
	addl	$4,%esp
	movl	%eax,%ebx
	cmpl	$2,%ebx
	movl	$1,%eax
	jne	codegen_EmitStartAddrOfNestedVar_reltrue_234
	movl	$0,%eax
codegen_EmitStartAddrOfNestedVar_reltrue_234	:	
	testl	%eax,%eax
	jnz	codegen_EmitStartAddrOfNestedVar_ifbl_233
	jmp	codegen_EmitStartAddrOfNestedVar_elsebl_233
codegen_EmitStartAddrOfNestedVar_ifbl_233	:	

	subl	$152,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	$symtab+2159,4(%esp)
	movl	%ebp,%eax
	addl	$-20,%eax
	movl	(%eax),%eax
	addl	$8,%eax
	movl	%esp,%ebx
	addl	$8,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	call	codegen_reportError
	addl	$152,%esp

	movl	$0,%eax
	jmp	codegen_EmitStartAddrOfNestedVar_ret
codegen_EmitStartAddrOfNestedVar_elsebl_233	:	
codegen_EmitStartAddrOfNestedVar_endif_233	:	

	subl	$8,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	$symtab+2194,4(%esp)
	call	codegen_emit
	addl	$8,%esp
	jmp	codegen_EmitStartAddrOfNestedVar_endif_231
codegen_EmitStartAddrOfNestedVar_elsebl_231	:	

	subl	$4,%esp
	movl	-24(%ebp),%eax
	movl	%eax,0(%esp)
	call	syntax_CountChilds
	addl	$4,%esp
	movl	%eax,%ebx
	cmpl	$1,%ebx
	movl	$1,%eax
	jg	codegen_EmitStartAddrOfNestedVar_reltrue_236
	movl	$0,%eax
codegen_EmitStartAddrOfNestedVar_reltrue_236	:	
	testl	%eax,%eax
	jnz	codegen_EmitStartAddrOfNestedVar_ifbl_235
	jmp	codegen_EmitStartAddrOfNestedVar_elsebl_235
codegen_EmitStartAddrOfNestedVar_ifbl_235	:	

	subl	$152,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	$symtab+2214,4(%esp)
	movl	%ebp,%eax
	addl	$-20,%eax
	movl	(%eax),%eax
	addl	$8,%eax
	movl	%esp,%ebx
	addl	$8,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	call	codegen_reportError
	addl	$152,%esp

	movl	$0,%eax
	jmp	codegen_EmitStartAddrOfNestedVar_ret
codegen_EmitStartAddrOfNestedVar_elsebl_235	:	
codegen_EmitStartAddrOfNestedVar_endif_235	:	
codegen_EmitStartAddrOfNestedVar_endif_231	:	

	subl	$8,%esp
	movl	12(%ebp),%eax
	movl	%eax,0(%esp)
	pushl	-8(%ebp)
	movl	$2,%ebx
	imull	-12(%ebp),%ebx
	movl	%ebx,%eax
	popl	%ebx
	addl	%eax,%ebx
	movl	%ebx,%eax
	movl	%eax,4(%esp)
	call	syntax_GetChild
	addl	$8,%esp
	movl	%eax,-20(%ebp)

	movl	%ebp,%eax
	addl	$-176,%eax
	pushl	%eax
	movl	%ebp,%eax
	addl	$-20,%eax
	movl	(%eax),%eax
	addl	$8,%eax
	popl	%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx

	subl	$152,%esp
	movl	-32(%ebp),%eax
	movl	%eax,0(%esp)
	movl	-24(%ebp),%eax
	movl	%eax,4(%esp)
	movl	%ebp,%eax
	addl	$-176,%eax
	movl	%esp,%ebx
	addl	$8,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	call	type_GetMemberOffset
	addl	$152,%esp
	movl	%eax,-16(%ebp)

	movl	-16(%ebp),%ebx
	cmpl	$0,%ebx
	movl	$1,%eax
	jl	codegen_EmitStartAddrOfNestedVar_reltrue_238
	movl	$0,%eax
codegen_EmitStartAddrOfNestedVar_reltrue_238	:	
	testl	%eax,%eax
	jnz	codegen_EmitStartAddrOfNestedVar_ifbl_237
	jmp	codegen_EmitStartAddrOfNestedVar_elsebl_237
codegen_EmitStartAddrOfNestedVar_ifbl_237	:	

	subl	$152,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	$symtab+2250,4(%esp)
	movl	%ebp,%eax
	addl	$-20,%eax
	movl	(%eax),%eax
	addl	$8,%eax
	movl	%esp,%ebx
	addl	$8,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	call	codegen_reportError
	addl	$152,%esp

	movl	$0,%eax
	jmp	codegen_EmitStartAddrOfNestedVar_ret
codegen_EmitStartAddrOfNestedVar_elsebl_237	:	
codegen_EmitStartAddrOfNestedVar_endif_237	:	

	subl	$12,%esp
	movl	16(%ebp),%eax
	movl	%eax,0(%esp)
	movl	$symtab+2079,4(%esp)
	movl	-16(%ebp),%eax
	movl	%eax,8(%esp)
	call	sprintf
	addl	$12,%esp

	subl	$8,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	16(%ebp),%eax
	movl	%eax,4(%esp)
	call	codegen_emit
	addl	$8,%esp

	subl	$152,%esp
	movl	-32(%ebp),%eax
	movl	%eax,0(%esp)
	movl	-24(%ebp),%eax
	movl	%eax,4(%esp)
	movl	%ebp,%eax
	addl	$-176,%eax
	movl	%esp,%ebx
	addl	$8,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	call	type_GetMemberDeclaration
	addl	$152,%esp
	movl	%eax,-28(%ebp)

	movl	-12(%ebp),%ebx
	addl	$1,%ebx
	movl	%ebx,%eax
	movl	%eax,-12(%ebp)
	jmp	codegen_EmitStartAddrOfNestedVar_while_228
codegen_EmitStartAddrOfNestedVar_endwhile_228	:	

	subl	$8,%esp
	movl	16(%ebp),%eax
	movl	%eax,0(%esp)
	movl	$symtab+216,4(%esp)
	call	strcpy
	addl	$8,%esp

	movl	-28(%ebp),%eax
	jmp	codegen_EmitStartAddrOfNestedVar_ret
codegen_EmitStartAddrOfNestedVar_ret	:	
	movl	%ebp,%esp
	popl	%ebp
	ret	

.globl	codegen_EmitVarExprAdress
.type	codegen_EmitVarExprAdress,@function
codegen_EmitVarExprAdress	:	
	pushl	%ebp
	movl	%esp,%ebp
	subl	$40,%esp

	movl	%ebp,%eax
	addl	$8,%eax
	movl	(%eax),%eax
	addl	$20,%eax
	movl	(%eax),%eax
	addl	$4,%eax
	movl	(%eax),%eax
	movl	%eax,-40(%ebp)

	subl	$4,%esp
	movl	12(%ebp),%eax
	movl	%eax,0(%esp)
	call	syntax_CountChilds
	addl	$4,%esp
	movl	%eax,-4(%ebp)

	subl	$4,%esp
	movl	12(%ebp),%eax
	movl	%eax,0(%esp)
	call	type_CountVarexprResolutions
	addl	$4,%esp
	movl	%eax,-8(%ebp)

	subl	$8,%esp
	movl	12(%ebp),%eax
	movl	%eax,0(%esp)
	movl	-4(%ebp),%ebx
	subl	$1,%ebx
	movl	%ebx,%eax
	movl	%eax,4(%esp)
	call	syntax_GetChild
	addl	$8,%esp
	movl	%eax,-28(%ebp)

	movl	%ebp,%eax
	addl	$-28,%eax
	movl	(%eax),%eax
	addl	$8,%eax
	addl	$0,%eax
	movl	(%eax),%eax
	movl	%eax,%ebx
	cmpl	$4,%ebx
	movl	$1,%eax
	je	codegen_EmitVarExprAdress_reltrue_240
	movl	$0,%eax
codegen_EmitVarExprAdress_reltrue_240	:	
	testl	%eax,%eax
	jnz	codegen_EmitVarExprAdress_ifbl_239
	jmp	codegen_EmitVarExprAdress_elsebl_239
codegen_EmitVarExprAdress_ifbl_239	:	

	movl	$1,-12(%ebp)
	jmp	codegen_EmitVarExprAdress_endif_239
codegen_EmitVarExprAdress_elsebl_239	:	

	movl	$0,-12(%ebp)
codegen_EmitVarExprAdress_endif_239	:	

	subl	$8,%esp
	movl	12(%ebp),%eax
	movl	%eax,0(%esp)
	movl	$0,4(%esp)
	call	syntax_GetChild
	addl	$8,%esp
	movl	%eax,-28(%ebp)

	movl	%ebp,%eax
	addl	$-28,%eax
	movl	(%eax),%eax
	addl	$8,%eax
	addl	$0,%eax
	movl	(%eax),%eax
	movl	%eax,%ebx
	cmpl	$43,%ebx
	movl	$1,%eax
	jne	codegen_EmitVarExprAdress_reltrue_242
	movl	$0,%eax
codegen_EmitVarExprAdress_reltrue_242	:	
	testl	%eax,%eax
	jnz	codegen_EmitVarExprAdress_ifbl_241
	jmp	codegen_EmitVarExprAdress_elsebl_241
codegen_EmitVarExprAdress_ifbl_241	:	

	movl	$1,-16(%ebp)
	jmp	codegen_EmitVarExprAdress_endif_241
codegen_EmitVarExprAdress_elsebl_241	:	

	movl	$0,-16(%ebp)
codegen_EmitVarExprAdress_endif_241	:	

	movl	-12(%ebp),%eax
	testl	%eax,%eax
	jnz	codegen_EmitVarExprAdress_ifbl_243
	jmp	codegen_EmitVarExprAdress_elsebl_243
codegen_EmitVarExprAdress_ifbl_243	:	

	subl	$8,%esp
	movl	12(%ebp),%eax
	movl	%eax,0(%esp)
	movl	-4(%ebp),%ebx
	subl	$1,%ebx
	movl	%ebx,%eax
	movl	%eax,4(%esp)
	call	syntax_GetChild
	addl	$8,%esp
	movl	%eax,-28(%ebp)

	subl	$12,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	subl	$8,%esp
	movl	12(%ebp),%eax
	movl	%eax,0(%esp)
	movl	-4(%ebp),%ebx
	subl	$2,%ebx
	movl	%ebx,%eax
	movl	%eax,4(%esp)
	call	syntax_GetChild
	addl	$8,%esp
	movl	%eax,4(%esp)
	movl	16(%ebp),%eax
	movl	%eax,8(%esp)
	call	codegen_EmitLogExpr
	addl	$12,%esp
	movl	%eax,-36(%ebp)

	subl	$156,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	%ebp,%eax
	addl	$-28,%eax
	movl	(%eax),%eax
	addl	$8,%eax
	movl	%esp,%ebx
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	16(%ebp),%eax
	movl	%eax,148(%esp)
	movl	-36(%ebp),%eax
	movl	%eax,152(%esp)
	call	codegen_CastToInt
	addl	$156,%esp
	movl	%eax,-36(%ebp)

	subl	$4,%esp
	movl	-36(%ebp),%eax
	movl	%eax,0(%esp)
	call	syntax_FreeSyntaxTree
	addl	$4,%esp

	subl	$8,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	$symtab+1338,4(%esp)
	call	codegen_emit
	addl	$8,%esp

	subl	$8,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	16(%ebp),%eax
	movl	%eax,4(%esp)
	call	codegen_emit
	addl	$8,%esp

	subl	$8,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	$symtab+198,4(%esp)
	call	codegen_emit
	addl	$8,%esp
	jmp	codegen_EmitVarExprAdress_endif_243
codegen_EmitVarExprAdress_elsebl_243	:	
codegen_EmitVarExprAdress_endif_243	:	

	subl	$12,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	12(%ebp),%eax
	movl	%eax,4(%esp)
	movl	16(%ebp),%eax
	movl	%eax,8(%esp)
	call	codegen_EmitStartAddrOfNestedVar
	addl	$12,%esp
	movl	%eax,-32(%ebp)

	movl	-32(%ebp),%ebx
	cmpl	$0,%ebx
	movl	$1,%eax
	je	codegen_EmitVarExprAdress_reltrue_245
	movl	$0,%eax
codegen_EmitVarExprAdress_reltrue_245	:	
	testl	%eax,%eax
	jnz	codegen_EmitVarExprAdress_ifbl_244
	jmp	codegen_EmitVarExprAdress_elsebl_244
codegen_EmitVarExprAdress_ifbl_244	:	

	movl	$0,%eax
	jmp	codegen_EmitVarExprAdress_ret
codegen_EmitVarExprAdress_elsebl_244	:	
codegen_EmitVarExprAdress_endif_244	:	

	subl	$4,%esp
	movl	-32(%ebp),%eax
	movl	%eax,0(%esp)
	call	type_IsAArrayVar
	addl	$4,%esp
	testl	%eax,%eax
	jnz	codegen_EmitVarExprAdress_ifbl_246
	jmp	codegen_EmitVarExprAdress_elsebl_246
codegen_EmitVarExprAdress_ifbl_246	:	

	movl	$1,-24(%ebp)
	jmp	codegen_EmitVarExprAdress_endif_246
codegen_EmitVarExprAdress_elsebl_246	:	

	movl	$0,-24(%ebp)
codegen_EmitVarExprAdress_endif_246	:	

	subl	$8,%esp
	movl	16(%ebp),%eax
	movl	%eax,0(%esp)
	movl	$symtab+216,4(%esp)
	call	strcmp
	addl	$8,%esp
	movl	%eax,%ebx
	cmpl	$0,%ebx
	movl	$1,%eax
	jne	codegen_EmitVarExprAdress_reltrue_248
	movl	$0,%eax
codegen_EmitVarExprAdress_reltrue_248	:	
	testl	%eax,%eax
	jnz	codegen_EmitVarExprAdress_ifbl_247
	jmp	codegen_EmitVarExprAdress_elsebl_247
codegen_EmitVarExprAdress_ifbl_247	:	

	subl	$8,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	$symtab+201,4(%esp)
	call	codegen_emit
	addl	$8,%esp

	subl	$8,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	16(%ebp),%eax
	movl	%eax,4(%esp)
	call	codegen_emit
	addl	$8,%esp

	subl	$8,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	$symtab+208,4(%esp)
	call	codegen_emit
	addl	$8,%esp
	jmp	codegen_EmitVarExprAdress_endif_247
codegen_EmitVarExprAdress_elsebl_247	:	
codegen_EmitVarExprAdress_endif_247	:	

	movl	-12(%ebp),%eax
	testl	%eax,%eax
	jnz	codegen_EmitVarExprAdress_ifbl_249
	jmp	codegen_EmitVarExprAdress_elsebl_249
codegen_EmitVarExprAdress_ifbl_249	:	

	subl	$8,%esp
	movl	-40(%ebp),%eax
	movl	%eax,0(%esp)
	movl	-32(%ebp),%eax
	movl	%eax,4(%esp)
	call	type_GetArrayElmSize
	addl	$8,%esp
	movl	%eax,-20(%ebp)

	movl	-20(%ebp),%ebx
	cmpl	$0,%ebx
	movl	$1,%eax
	jl	codegen_EmitVarExprAdress_reltrue_251
	movl	$0,%eax
codegen_EmitVarExprAdress_reltrue_251	:	
	testl	%eax,%eax
	jnz	codegen_EmitVarExprAdress_ifbl_250
	jmp	codegen_EmitVarExprAdress_elsebl_250
codegen_EmitVarExprAdress_ifbl_250	:	

	subl	$8,%esp
	movl	12(%ebp),%eax
	movl	%eax,0(%esp)
	movl	-4(%ebp),%ebx
	subl	$1,%ebx
	movl	%ebx,%eax
	movl	%eax,4(%esp)
	call	syntax_GetChild
	addl	$8,%esp
	movl	%eax,-28(%ebp)

	subl	$152,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	$symtab+2279,4(%esp)
	movl	%ebp,%eax
	addl	$-28,%eax
	movl	(%eax),%eax
	addl	$8,%eax
	movl	%esp,%ebx
	addl	$8,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	call	codegen_reportError
	addl	$152,%esp

	movl	$0,%eax
	jmp	codegen_EmitVarExprAdress_ret
codegen_EmitVarExprAdress_elsebl_250	:	
codegen_EmitVarExprAdress_endif_250	:	

	movl	-24(%ebp),%eax
	testl	%eax,%eax
	movl	$1,%eax
	jz	codegen_EmitVarExprAdress_logfactfalse_253
	movl	$0,%eax
codegen_EmitVarExprAdress_logfactfalse_253	:	
	testl	%eax,%eax
	jnz	codegen_EmitVarExprAdress_ifbl_252
	jmp	codegen_EmitVarExprAdress_elsebl_252
codegen_EmitVarExprAdress_ifbl_252	:	

	subl	$8,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	$symtab+2194,4(%esp)
	call	codegen_emit
	addl	$8,%esp
	jmp	codegen_EmitVarExprAdress_endif_252
codegen_EmitVarExprAdress_elsebl_252	:	
codegen_EmitVarExprAdress_endif_252	:	

	subl	$8,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	$symtab+1346,4(%esp)
	call	codegen_emit
	addl	$8,%esp

	movl	-20(%ebp),%ebx
	cmpl	$1,%ebx
	movl	$1,%eax
	jne	codegen_EmitVarExprAdress_reltrue_255
	movl	$0,%eax
codegen_EmitVarExprAdress_reltrue_255	:	
	testl	%eax,%eax
	jnz	codegen_EmitVarExprAdress_ifbl_254
	jmp	codegen_EmitVarExprAdress_elsebl_254
codegen_EmitVarExprAdress_ifbl_254	:	

	subl	$12,%esp
	movl	16(%ebp),%eax
	movl	%eax,0(%esp)
	movl	$symtab+2318,4(%esp)
	movl	-20(%ebp),%eax
	movl	%eax,8(%esp)
	call	sprintf
	addl	$12,%esp

	subl	$8,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	16(%ebp),%eax
	movl	%eax,4(%esp)
	call	codegen_emit
	addl	$8,%esp
	jmp	codegen_EmitVarExprAdress_endif_254
codegen_EmitVarExprAdress_elsebl_254	:	
codegen_EmitVarExprAdress_endif_254	:	

	subl	$8,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	$symtab+2337,4(%esp)
	call	codegen_emit
	addl	$8,%esp

	subl	$4,%esp
	movl	-32(%ebp),%eax
	movl	%eax,0(%esp)
	call	type_CreateArrayElmType
	addl	$4,%esp
	movl	%eax,-36(%ebp)

	movl	$0,-24(%ebp)
	jmp	codegen_EmitVarExprAdress_endif_249
codegen_EmitVarExprAdress_elsebl_249	:	

	subl	$4,%esp
	movl	-32(%ebp),%eax
	movl	%eax,0(%esp)
	call	type_CreateType
	addl	$4,%esp
	movl	%eax,-36(%ebp)
codegen_EmitVarExprAdress_endif_249	:	

	subl	$8,%esp
	movl	12(%ebp),%eax
	movl	%eax,0(%esp)
	movl	$0,4(%esp)
	call	syntax_GetChild
	addl	$8,%esp
	movl	%eax,-28(%ebp)

	subl	$8,%esp
	movl	16(%ebp),%eax
	movl	%eax,0(%esp)
	movl	$symtab+216,4(%esp)
	call	strcpy
	addl	$8,%esp

	movl	%ebp,%eax
	addl	$-28,%eax
	movl	(%eax),%eax
	addl	$8,%eax
	addl	$0,%eax
	movl	(%eax),%eax
	movl	%eax,%ebx
	cmpl	$21,%ebx
	movl	$1,%eax
	je	codegen_EmitVarExprAdress_reltrue_257
	movl	$0,%eax
codegen_EmitVarExprAdress_reltrue_257	:	
	testl	%eax,%eax
	jnz	codegen_EmitVarExprAdress_ifbl_256
	jmp	codegen_EmitVarExprAdress_elsebl_256
codegen_EmitVarExprAdress_ifbl_256	:	

	subl	$152,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	$symtab+2355,4(%esp)
	movl	%ebp,%eax
	addl	$-28,%eax
	movl	(%eax),%eax
	addl	$8,%eax
	movl	%esp,%ebx
	addl	$8,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	call	codegen_reportError
	addl	$152,%esp

	subl	$4,%esp
	movl	-36(%ebp),%eax
	movl	%eax,0(%esp)
	call	syntax_FreeSyntaxTree
	addl	$4,%esp

	movl	$0,%eax
	jmp	codegen_EmitVarExprAdress_ret
codegen_EmitVarExprAdress_elsebl_256	:	

	movl	%ebp,%eax
	addl	$-28,%eax
	movl	(%eax),%eax
	addl	$8,%eax
	addl	$0,%eax
	movl	(%eax),%eax
	movl	%eax,%ebx
	cmpl	$43,%ebx
	movl	$1,%eax
	je	codegen_EmitVarExprAdress_reltrue_259
	movl	$0,%eax
codegen_EmitVarExprAdress_reltrue_259	:	
	testl	%eax,%eax
	jnz	codegen_EmitVarExprAdress_ifbl_258
	jmp	codegen_EmitVarExprAdress_elsebl_258
codegen_EmitVarExprAdress_ifbl_258	:	

	movl	-24(%ebp),%eax
	testl	%eax,%eax
	jnz	codegen_EmitVarExprAdress_ifbl_260
	jmp	codegen_EmitVarExprAdress_elsebl_260
codegen_EmitVarExprAdress_ifbl_260	:	

	subl	$152,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	$symtab+2414,4(%esp)
	movl	%ebp,%eax
	addl	$-28,%eax
	movl	(%eax),%eax
	addl	$8,%eax
	movl	%esp,%ebx
	addl	$8,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	call	codegen_reportError
	addl	$152,%esp

	subl	$4,%esp
	movl	-36(%ebp),%eax
	movl	%eax,0(%esp)
	call	syntax_FreeSyntaxTree
	addl	$4,%esp

	movl	$0,%eax
	jmp	codegen_EmitVarExprAdress_ret
codegen_EmitVarExprAdress_elsebl_260	:	
codegen_EmitVarExprAdress_endif_260	:	
	jmp	codegen_EmitVarExprAdress_endif_258
codegen_EmitVarExprAdress_elsebl_258	:	

	subl	$4,%esp
	movl	-36(%ebp),%eax
	movl	%eax,0(%esp)
	call	type_IsAPointerType
	addl	$4,%esp
	testl	%eax,%eax
	movl	$1,%eax
	jz	codegen_EmitVarExprAdress_logfactfalse_263
	movl	$0,%eax
codegen_EmitVarExprAdress_logfactfalse_263	:	
	testl	%eax,%eax
	jnz	codegen_EmitVarExprAdress_logexprtrue_262
	movl	-24(%ebp),%eax
	testl	%eax,%eax
	jnz	codegen_EmitVarExprAdress_logexprtrue_262
	movl	$0,%eax
	jmp	codegen_EmitVarExprAdress_logexprfalse_262
codegen_EmitVarExprAdress_logexprtrue_262	:	
	movl	$1,%eax
codegen_EmitVarExprAdress_logexprfalse_262	:	
	testl	%eax,%eax
	jnz	codegen_EmitVarExprAdress_ifbl_261
	jmp	codegen_EmitVarExprAdress_elsebl_261
codegen_EmitVarExprAdress_ifbl_261	:	

	subl	$152,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	$symtab+2443,4(%esp)
	movl	%ebp,%eax
	addl	$-28,%eax
	movl	(%eax),%eax
	addl	$8,%eax
	movl	%esp,%ebx
	addl	$8,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	call	codegen_reportError
	addl	$152,%esp

	subl	$4,%esp
	movl	-36(%ebp),%eax
	movl	%eax,0(%esp)
	call	syntax_FreeSyntaxTree
	addl	$4,%esp

	movl	$0,%eax
	jmp	codegen_EmitVarExprAdress_ret
codegen_EmitVarExprAdress_elsebl_261	:	
codegen_EmitVarExprAdress_endif_261	:	

	subl	$8,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	$symtab+2194,4(%esp)
	call	codegen_emit
	addl	$8,%esp

	subl	$4,%esp
	movl	-36(%ebp),%eax
	movl	%eax,0(%esp)
	call	type_RemoveStarFromType
	addl	$4,%esp
	movl	%eax,-28(%ebp)

	subl	$4,%esp
	movl	-36(%ebp),%eax
	movl	%eax,0(%esp)
	call	syntax_FreeSyntaxTree
	addl	$4,%esp

	movl	-28(%ebp),%eax
	movl	%eax,-36(%ebp)
codegen_EmitVarExprAdress_endif_258	:	
codegen_EmitVarExprAdress_endif_256	:	

	movl	-36(%ebp),%eax
	jmp	codegen_EmitVarExprAdress_ret
codegen_EmitVarExprAdress_ret	:	
	movl	%ebp,%esp
	popl	%ebp
	ret	

.globl	codegen_EmitFastVariableExpr
.type	codegen_EmitFastVariableExpr,@function
codegen_EmitFastVariableExpr	:	
	pushl	%ebp
	movl	%esp,%ebp
	subl	$36,%esp

	movl	%ebp,%eax
	addl	$8,%eax
	movl	(%eax),%eax
	addl	$20,%eax
	movl	(%eax),%eax
	addl	$4,%eax
	movl	(%eax),%eax
	movl	%eax,-36(%ebp)

	subl	$4,%esp
	movl	12(%ebp),%eax
	movl	%eax,0(%esp)
	call	syntax_CountChilds
	addl	$4,%esp
	movl	%eax,-4(%ebp)

	subl	$4,%esp
	movl	12(%ebp),%eax
	movl	%eax,0(%esp)
	call	type_CountVarexprResolutions
	addl	$4,%esp
	movl	%eax,-8(%ebp)

	subl	$8,%esp
	movl	12(%ebp),%eax
	movl	%eax,0(%esp)
	movl	-4(%ebp),%ebx
	subl	$1,%ebx
	movl	%ebx,%eax
	movl	%eax,4(%esp)
	call	syntax_GetChild
	addl	$8,%esp
	movl	%eax,-24(%ebp)

	movl	%ebp,%eax
	addl	$-24,%eax
	movl	(%eax),%eax
	addl	$8,%eax
	addl	$0,%eax
	movl	(%eax),%eax
	movl	%eax,%ebx
	cmpl	$4,%ebx
	movl	$1,%eax
	je	codegen_EmitFastVariableExpr_reltrue_265
	movl	$0,%eax
codegen_EmitFastVariableExpr_reltrue_265	:	
	testl	%eax,%eax
	jnz	codegen_EmitFastVariableExpr_ifbl_264
	jmp	codegen_EmitFastVariableExpr_elsebl_264
codegen_EmitFastVariableExpr_ifbl_264	:	

	movl	$1,-12(%ebp)
	jmp	codegen_EmitFastVariableExpr_endif_264
codegen_EmitFastVariableExpr_elsebl_264	:	

	movl	$0,-12(%ebp)
codegen_EmitFastVariableExpr_endif_264	:	

	subl	$8,%esp
	movl	12(%ebp),%eax
	movl	%eax,0(%esp)
	movl	$0,4(%esp)
	call	syntax_GetChild
	addl	$8,%esp
	movl	%eax,-24(%ebp)

	movl	%ebp,%eax
	addl	$-24,%eax
	movl	(%eax),%eax
	addl	$8,%eax
	addl	$0,%eax
	movl	(%eax),%eax
	movl	%eax,%ebx
	cmpl	$43,%ebx
	movl	$1,%eax
	jne	codegen_EmitFastVariableExpr_reltrue_267
	movl	$0,%eax
codegen_EmitFastVariableExpr_reltrue_267	:	
	testl	%eax,%eax
	jnz	codegen_EmitFastVariableExpr_ifbl_266
	jmp	codegen_EmitFastVariableExpr_elsebl_266
codegen_EmitFastVariableExpr_ifbl_266	:	

	movl	$1,-16(%ebp)
	jmp	codegen_EmitFastVariableExpr_endif_266
codegen_EmitFastVariableExpr_elsebl_266	:	

	movl	$0,-16(%ebp)
codegen_EmitFastVariableExpr_endif_266	:	

	subl	$8,%esp
	movl	12(%ebp),%eax
	movl	%eax,0(%esp)
	movl	-16(%ebp),%eax
	movl	%eax,4(%esp)
	call	syntax_GetChild
	addl	$8,%esp
	movl	%eax,-24(%ebp)

	subl	$148,%esp
	movl	-36(%ebp),%eax
	movl	%eax,0(%esp)
	movl	%ebp,%eax
	addl	$-24,%eax
	movl	(%eax),%eax
	addl	$8,%eax
	movl	%esp,%ebx
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	call	symbol_FindVariable
	addl	$148,%esp
	movl	%eax,-20(%ebp)

	movl	-20(%ebp),%ebx
	cmpl	$0,%ebx
	movl	$1,%eax
	je	codegen_EmitFastVariableExpr_reltrue_269
	movl	$0,%eax
codegen_EmitFastVariableExpr_reltrue_269	:	
	testl	%eax,%eax
	jnz	codegen_EmitFastVariableExpr_ifbl_268
	jmp	codegen_EmitFastVariableExpr_elsebl_268
codegen_EmitFastVariableExpr_ifbl_268	:	

	movl	$0,%eax
	jmp	codegen_EmitFastVariableExpr_ret
codegen_EmitFastVariableExpr_elsebl_268	:	
codegen_EmitFastVariableExpr_endif_268	:	

	movl	%ebp,%eax
	addl	$-20,%eax
	movl	(%eax),%eax
	addl	$148,%eax
	movl	(%eax),%eax
	movl	%eax,-28(%ebp)

	subl	$4,%esp
	movl	%ebp,%eax
	addl	$-20,%eax
	movl	(%eax),%eax
	addl	$148,%eax
	movl	(%eax),%eax
	movl	%eax,0(%esp)
	call	type_CreateType
	addl	$4,%esp
	movl	%eax,-32(%ebp)

	movl	-16(%ebp),%ebx
	cmpl	$0,%ebx
	movl	$1,%eax
	je	codegen_EmitFastVariableExpr_reltrue_272
	movl	$0,%eax
codegen_EmitFastVariableExpr_reltrue_272	:	
	testl	%eax,%eax
	jz	codegen_EmitFastVariableExpr_logtermfalse_271
	movl	-12(%ebp),%ebx
	cmpl	$0,%ebx
	movl	$1,%eax
	je	codegen_EmitFastVariableExpr_reltrue_273
	movl	$0,%eax
codegen_EmitFastVariableExpr_reltrue_273	:	
	testl	%eax,%eax
	jz	codegen_EmitFastVariableExpr_logtermfalse_271
	movl	-8(%ebp),%ebx
	cmpl	$1,%ebx
	movl	$1,%eax
	je	codegen_EmitFastVariableExpr_reltrue_274
	movl	$0,%eax
codegen_EmitFastVariableExpr_reltrue_274	:	
	testl	%eax,%eax
	jz	codegen_EmitFastVariableExpr_logtermfalse_271
	subl	$4,%esp
	movl	-28(%ebp),%eax
	movl	%eax,0(%esp)
	call	type_IsAArrayVar
	addl	$4,%esp
	testl	%eax,%eax
	movl	$1,%eax
	jz	codegen_EmitFastVariableExpr_logfactfalse_275
	movl	$0,%eax
codegen_EmitFastVariableExpr_logfactfalse_275	:	
	testl	%eax,%eax
	jz	codegen_EmitFastVariableExpr_logtermfalse_271
	subl	$4,%esp
	movl	-32(%ebp),%eax
	movl	%eax,0(%esp)
	call	type_IsAStructType
	addl	$4,%esp
	testl	%eax,%eax
	movl	$1,%eax
	jz	codegen_EmitFastVariableExpr_logfactfalse_276
	movl	$0,%eax
codegen_EmitFastVariableExpr_logfactfalse_276	:	
	testl	%eax,%eax
	jz	codegen_EmitFastVariableExpr_logtermfalse_271
	movl	$1,%eax
	jmp	codegen_EmitFastVariableExpr_logtermtrue_271
codegen_EmitFastVariableExpr_logtermfalse_271	:	
	movl	$0,%eax
codegen_EmitFastVariableExpr_logtermtrue_271	:	
	testl	%eax,%eax
	jnz	codegen_EmitFastVariableExpr_ifbl_270
	jmp	codegen_EmitFastVariableExpr_elsebl_270
codegen_EmitFastVariableExpr_ifbl_270	:	

	movl	%ebp,%eax
	addl	$-20,%eax
	movl	(%eax),%eax
	addl	$144,%eax
	movl	(%eax),%eax
	movl	%eax,%ebx
	cmpl	$6,%ebx
	movl	$1,%eax
	je	codegen_EmitFastVariableExpr_reltrue_279
	movl	$0,%eax
codegen_EmitFastVariableExpr_reltrue_279	:	
	testl	%eax,%eax
	jnz	codegen_EmitFastVariableExpr_logexprtrue_278
	movl	%ebp,%eax
	addl	$-20,%eax
	movl	(%eax),%eax
	addl	$144,%eax
	movl	(%eax),%eax
	movl	%eax,%ebx
	cmpl	$4,%ebx
	movl	$1,%eax
	je	codegen_EmitFastVariableExpr_reltrue_280
	movl	$0,%eax
codegen_EmitFastVariableExpr_reltrue_280	:	
	testl	%eax,%eax
	jnz	codegen_EmitFastVariableExpr_logexprtrue_278
	movl	$0,%eax
	jmp	codegen_EmitFastVariableExpr_logexprfalse_278
codegen_EmitFastVariableExpr_logexprtrue_278	:	
	movl	$1,%eax
codegen_EmitFastVariableExpr_logexprfalse_278	:	
	testl	%eax,%eax
	jnz	codegen_EmitFastVariableExpr_ifbl_277
	jmp	codegen_EmitFastVariableExpr_elsebl_277
codegen_EmitFastVariableExpr_ifbl_277	:	

	subl	$12,%esp
	movl	16(%ebp),%eax
	movl	%eax,0(%esp)
	movl	$symtab+1318,4(%esp)
	subl	$8,%esp
	movl	-36(%ebp),%eax
	movl	%eax,0(%esp)
	movl	-20(%ebp),%eax
	movl	%eax,4(%esp)
	call	symbol_GetNonGlobalOffset
	addl	$8,%esp
	movl	%eax,8(%esp)
	call	sprintf
	addl	$12,%esp
	jmp	codegen_EmitFastVariableExpr_endif_277
codegen_EmitFastVariableExpr_elsebl_277	:	

	subl	$12,%esp
	movl	16(%ebp),%eax
	movl	%eax,0(%esp)
	movl	$symtab+1328,4(%esp)
	subl	$8,%esp
	movl	-36(%ebp),%eax
	movl	%eax,0(%esp)
	movl	-20(%ebp),%eax
	movl	%eax,4(%esp)
	call	symbol_GetGlobalOffset
	addl	$8,%esp
	movl	%eax,8(%esp)
	call	sprintf
	addl	$12,%esp
codegen_EmitFastVariableExpr_endif_277	:	

	movl	-32(%ebp),%eax
	jmp	codegen_EmitFastVariableExpr_ret
codegen_EmitFastVariableExpr_elsebl_270	:	
codegen_EmitFastVariableExpr_endif_270	:	

	subl	$4,%esp
	movl	-32(%ebp),%eax
	movl	%eax,0(%esp)
	call	syntax_FreeSyntaxTree
	addl	$4,%esp

	movl	$0,%eax
	jmp	codegen_EmitFastVariableExpr_ret
codegen_EmitFastVariableExpr_ret	:	
	movl	%ebp,%esp
	popl	%ebp
	ret	

.globl	codegen_EmitVariableExpr
.type	codegen_EmitVariableExpr,@function
codegen_EmitVariableExpr	:	
	pushl	%ebp
	movl	%esp,%ebp
	subl	$40,%esp

	movl	%ebp,%eax
	addl	$8,%eax
	movl	(%eax),%eax
	addl	$16,%eax
	movl	(%eax),%eax
	testl	%eax,%eax
	jnz	codegen_EmitVariableExpr_ifbl_281
	jmp	codegen_EmitVariableExpr_elsebl_281
codegen_EmitVariableExpr_ifbl_281	:	

	subl	$12,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	12(%ebp),%eax
	movl	%eax,4(%esp)
	movl	16(%ebp),%eax
	movl	%eax,8(%esp)
	call	codegen_EmitFastVariableExpr
	addl	$12,%esp
	movl	%eax,-28(%ebp)

	movl	-28(%ebp),%ebx
	cmpl	$0,%ebx
	movl	$1,%eax
	jne	codegen_EmitVariableExpr_reltrue_283
	movl	$0,%eax
codegen_EmitVariableExpr_reltrue_283	:	
	testl	%eax,%eax
	jnz	codegen_EmitVariableExpr_ifbl_282
	jmp	codegen_EmitVariableExpr_elsebl_282
codegen_EmitVariableExpr_ifbl_282	:	

	movl	-28(%ebp),%eax
	jmp	codegen_EmitVariableExpr_ret
codegen_EmitVariableExpr_elsebl_282	:	
codegen_EmitVariableExpr_endif_282	:	
	jmp	codegen_EmitVariableExpr_endif_281
codegen_EmitVariableExpr_elsebl_281	:	
codegen_EmitVariableExpr_endif_281	:	

	movl	%ebp,%eax
	addl	$8,%eax
	movl	(%eax),%eax
	addl	$20,%eax
	movl	(%eax),%eax
	addl	$4,%eax
	movl	(%eax),%eax
	movl	%eax,-40(%ebp)

	subl	$4,%esp
	movl	12(%ebp),%eax
	movl	%eax,0(%esp)
	call	syntax_CountChilds
	addl	$4,%esp
	movl	%eax,-4(%ebp)

	subl	$4,%esp
	movl	12(%ebp),%eax
	movl	%eax,0(%esp)
	call	type_CountVarexprResolutions
	addl	$4,%esp
	movl	%eax,-8(%ebp)

	subl	$8,%esp
	movl	12(%ebp),%eax
	movl	%eax,0(%esp)
	movl	-4(%ebp),%ebx
	subl	$1,%ebx
	movl	%ebx,%eax
	movl	%eax,4(%esp)
	call	syntax_GetChild
	addl	$8,%esp
	movl	%eax,-28(%ebp)

	movl	%ebp,%eax
	addl	$-28,%eax
	movl	(%eax),%eax
	addl	$8,%eax
	addl	$0,%eax
	movl	(%eax),%eax
	movl	%eax,%ebx
	cmpl	$4,%ebx
	movl	$1,%eax
	je	codegen_EmitVariableExpr_reltrue_285
	movl	$0,%eax
codegen_EmitVariableExpr_reltrue_285	:	
	testl	%eax,%eax
	jnz	codegen_EmitVariableExpr_ifbl_284
	jmp	codegen_EmitVariableExpr_elsebl_284
codegen_EmitVariableExpr_ifbl_284	:	

	movl	$1,-12(%ebp)
	jmp	codegen_EmitVariableExpr_endif_284
codegen_EmitVariableExpr_elsebl_284	:	

	movl	$0,-12(%ebp)
codegen_EmitVariableExpr_endif_284	:	

	subl	$8,%esp
	movl	12(%ebp),%eax
	movl	%eax,0(%esp)
	movl	$0,4(%esp)
	call	syntax_GetChild
	addl	$8,%esp
	movl	%eax,-28(%ebp)

	movl	%ebp,%eax
	addl	$-28,%eax
	movl	(%eax),%eax
	addl	$8,%eax
	addl	$0,%eax
	movl	(%eax),%eax
	movl	%eax,%ebx
	cmpl	$43,%ebx
	movl	$1,%eax
	jne	codegen_EmitVariableExpr_reltrue_287
	movl	$0,%eax
codegen_EmitVariableExpr_reltrue_287	:	
	testl	%eax,%eax
	jnz	codegen_EmitVariableExpr_ifbl_286
	jmp	codegen_EmitVariableExpr_elsebl_286
codegen_EmitVariableExpr_ifbl_286	:	

	movl	$1,-16(%ebp)
	jmp	codegen_EmitVariableExpr_endif_286
codegen_EmitVariableExpr_elsebl_286	:	

	movl	$0,-16(%ebp)
codegen_EmitVariableExpr_endif_286	:	

	movl	-12(%ebp),%eax
	testl	%eax,%eax
	jnz	codegen_EmitVariableExpr_ifbl_288
	jmp	codegen_EmitVariableExpr_elsebl_288
codegen_EmitVariableExpr_ifbl_288	:	

	subl	$8,%esp
	movl	12(%ebp),%eax
	movl	%eax,0(%esp)
	movl	-4(%ebp),%ebx
	subl	$1,%ebx
	movl	%ebx,%eax
	movl	%eax,4(%esp)
	call	syntax_GetChild
	addl	$8,%esp
	movl	%eax,-28(%ebp)

	subl	$12,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	subl	$8,%esp
	movl	12(%ebp),%eax
	movl	%eax,0(%esp)
	movl	-4(%ebp),%ebx
	subl	$2,%ebx
	movl	%ebx,%eax
	movl	%eax,4(%esp)
	call	syntax_GetChild
	addl	$8,%esp
	movl	%eax,4(%esp)
	movl	16(%ebp),%eax
	movl	%eax,8(%esp)
	call	codegen_EmitLogExpr
	addl	$12,%esp
	movl	%eax,-36(%ebp)

	subl	$156,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	%ebp,%eax
	addl	$-28,%eax
	movl	(%eax),%eax
	addl	$8,%eax
	movl	%esp,%ebx
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	16(%ebp),%eax
	movl	%eax,148(%esp)
	movl	-36(%ebp),%eax
	movl	%eax,152(%esp)
	call	codegen_CastToInt
	addl	$156,%esp
	movl	%eax,-36(%ebp)

	subl	$4,%esp
	movl	-36(%ebp),%eax
	movl	%eax,0(%esp)
	call	syntax_FreeSyntaxTree
	addl	$4,%esp

	subl	$8,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	$symtab+1338,4(%esp)
	call	codegen_emit
	addl	$8,%esp

	subl	$8,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	16(%ebp),%eax
	movl	%eax,4(%esp)
	call	codegen_emit
	addl	$8,%esp

	subl	$8,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	$symtab+198,4(%esp)
	call	codegen_emit
	addl	$8,%esp
	jmp	codegen_EmitVariableExpr_endif_288
codegen_EmitVariableExpr_elsebl_288	:	
codegen_EmitVariableExpr_endif_288	:	

	subl	$12,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	12(%ebp),%eax
	movl	%eax,4(%esp)
	movl	16(%ebp),%eax
	movl	%eax,8(%esp)
	call	codegen_EmitStartAddrOfNestedVar
	addl	$12,%esp
	movl	%eax,-32(%ebp)

	movl	-32(%ebp),%ebx
	cmpl	$0,%ebx
	movl	$1,%eax
	je	codegen_EmitVariableExpr_reltrue_290
	movl	$0,%eax
codegen_EmitVariableExpr_reltrue_290	:	
	testl	%eax,%eax
	jnz	codegen_EmitVariableExpr_ifbl_289
	jmp	codegen_EmitVariableExpr_elsebl_289
codegen_EmitVariableExpr_ifbl_289	:	

	movl	$0,%eax
	jmp	codegen_EmitVariableExpr_ret
codegen_EmitVariableExpr_elsebl_289	:	
codegen_EmitVariableExpr_endif_289	:	

	subl	$4,%esp
	movl	-32(%ebp),%eax
	movl	%eax,0(%esp)
	call	type_IsAArrayVar
	addl	$4,%esp
	testl	%eax,%eax
	jnz	codegen_EmitVariableExpr_ifbl_291
	jmp	codegen_EmitVariableExpr_elsebl_291
codegen_EmitVariableExpr_ifbl_291	:	

	movl	$1,-24(%ebp)
	jmp	codegen_EmitVariableExpr_endif_291
codegen_EmitVariableExpr_elsebl_291	:	

	movl	$0,-24(%ebp)
codegen_EmitVariableExpr_endif_291	:	

	subl	$8,%esp
	movl	16(%ebp),%eax
	movl	%eax,0(%esp)
	movl	$symtab+216,4(%esp)
	call	strcmp
	addl	$8,%esp
	movl	%eax,%ebx
	cmpl	$0,%ebx
	movl	$1,%eax
	jne	codegen_EmitVariableExpr_reltrue_293
	movl	$0,%eax
codegen_EmitVariableExpr_reltrue_293	:	
	testl	%eax,%eax
	jnz	codegen_EmitVariableExpr_ifbl_292
	jmp	codegen_EmitVariableExpr_elsebl_292
codegen_EmitVariableExpr_ifbl_292	:	

	subl	$8,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	$symtab+201,4(%esp)
	call	codegen_emit
	addl	$8,%esp

	subl	$8,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	16(%ebp),%eax
	movl	%eax,4(%esp)
	call	codegen_emit
	addl	$8,%esp

	subl	$8,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	$symtab+208,4(%esp)
	call	codegen_emit
	addl	$8,%esp
	jmp	codegen_EmitVariableExpr_endif_292
codegen_EmitVariableExpr_elsebl_292	:	
codegen_EmitVariableExpr_endif_292	:	

	movl	-12(%ebp),%eax
	testl	%eax,%eax
	jnz	codegen_EmitVariableExpr_ifbl_294
	jmp	codegen_EmitVariableExpr_elsebl_294
codegen_EmitVariableExpr_ifbl_294	:	

	subl	$8,%esp
	movl	-40(%ebp),%eax
	movl	%eax,0(%esp)
	movl	-32(%ebp),%eax
	movl	%eax,4(%esp)
	call	type_GetArrayElmSize
	addl	$8,%esp
	movl	%eax,-20(%ebp)

	movl	-20(%ebp),%ebx
	cmpl	$0,%ebx
	movl	$1,%eax
	jl	codegen_EmitVariableExpr_reltrue_296
	movl	$0,%eax
codegen_EmitVariableExpr_reltrue_296	:	
	testl	%eax,%eax
	jnz	codegen_EmitVariableExpr_ifbl_295
	jmp	codegen_EmitVariableExpr_elsebl_295
codegen_EmitVariableExpr_ifbl_295	:	

	subl	$8,%esp
	movl	12(%ebp),%eax
	movl	%eax,0(%esp)
	movl	-4(%ebp),%ebx
	subl	$1,%ebx
	movl	%ebx,%eax
	movl	%eax,4(%esp)
	call	syntax_GetChild
	addl	$8,%esp
	movl	%eax,-28(%ebp)

	subl	$152,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	$symtab+2279,4(%esp)
	movl	%ebp,%eax
	addl	$-28,%eax
	movl	(%eax),%eax
	addl	$8,%eax
	movl	%esp,%ebx
	addl	$8,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	call	codegen_reportError
	addl	$152,%esp

	movl	$0,%eax
	jmp	codegen_EmitVariableExpr_ret
codegen_EmitVariableExpr_elsebl_295	:	
codegen_EmitVariableExpr_endif_295	:	

	movl	-24(%ebp),%eax
	testl	%eax,%eax
	movl	$1,%eax
	jz	codegen_EmitVariableExpr_logfactfalse_298
	movl	$0,%eax
codegen_EmitVariableExpr_logfactfalse_298	:	
	testl	%eax,%eax
	jnz	codegen_EmitVariableExpr_ifbl_297
	jmp	codegen_EmitVariableExpr_elsebl_297
codegen_EmitVariableExpr_ifbl_297	:	

	subl	$8,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	$symtab+2194,4(%esp)
	call	codegen_emit
	addl	$8,%esp
	jmp	codegen_EmitVariableExpr_endif_297
codegen_EmitVariableExpr_elsebl_297	:	
codegen_EmitVariableExpr_endif_297	:	

	subl	$8,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	$symtab+1346,4(%esp)
	call	codegen_emit
	addl	$8,%esp

	movl	-20(%ebp),%ebx
	cmpl	$1,%ebx
	movl	$1,%eax
	jne	codegen_EmitVariableExpr_reltrue_300
	movl	$0,%eax
codegen_EmitVariableExpr_reltrue_300	:	
	testl	%eax,%eax
	jnz	codegen_EmitVariableExpr_ifbl_299
	jmp	codegen_EmitVariableExpr_elsebl_299
codegen_EmitVariableExpr_ifbl_299	:	

	subl	$12,%esp
	movl	16(%ebp),%eax
	movl	%eax,0(%esp)
	movl	$symtab+2318,4(%esp)
	movl	-20(%ebp),%eax
	movl	%eax,8(%esp)
	call	sprintf
	addl	$12,%esp

	subl	$8,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	16(%ebp),%eax
	movl	%eax,4(%esp)
	call	codegen_emit
	addl	$8,%esp
	jmp	codegen_EmitVariableExpr_endif_299
codegen_EmitVariableExpr_elsebl_299	:	
codegen_EmitVariableExpr_endif_299	:	

	subl	$8,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	$symtab+2337,4(%esp)
	call	codegen_emit
	addl	$8,%esp

	subl	$4,%esp
	movl	-32(%ebp),%eax
	movl	%eax,0(%esp)
	call	type_CreateArrayElmType
	addl	$4,%esp
	movl	%eax,-36(%ebp)

	movl	$0,-24(%ebp)
	jmp	codegen_EmitVariableExpr_endif_294
codegen_EmitVariableExpr_elsebl_294	:	

	subl	$4,%esp
	movl	-32(%ebp),%eax
	movl	%eax,0(%esp)
	call	type_CreateType
	addl	$4,%esp
	movl	%eax,-36(%ebp)
codegen_EmitVariableExpr_endif_294	:	

	subl	$8,%esp
	movl	12(%ebp),%eax
	movl	%eax,0(%esp)
	movl	$0,4(%esp)
	call	syntax_GetChild
	addl	$8,%esp
	movl	%eax,-28(%ebp)

	subl	$8,%esp
	movl	16(%ebp),%eax
	movl	%eax,0(%esp)
	movl	$symtab+216,4(%esp)
	call	strcpy
	addl	$8,%esp

	movl	%ebp,%eax
	addl	$-28,%eax
	movl	(%eax),%eax
	addl	$8,%eax
	addl	$0,%eax
	movl	(%eax),%eax
	movl	%eax,%ebx
	cmpl	$21,%ebx
	movl	$1,%eax
	je	codegen_EmitVariableExpr_reltrue_302
	movl	$0,%eax
codegen_EmitVariableExpr_reltrue_302	:	
	testl	%eax,%eax
	jnz	codegen_EmitVariableExpr_ifbl_301
	jmp	codegen_EmitVariableExpr_elsebl_301
codegen_EmitVariableExpr_ifbl_301	:	

	movl	-24(%ebp),%eax
	testl	%eax,%eax
	jnz	codegen_EmitVariableExpr_ifbl_303
	jmp	codegen_EmitVariableExpr_elsebl_303
codegen_EmitVariableExpr_ifbl_303	:	

	subl	$152,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	$symtab+2477,4(%esp)
	movl	%ebp,%eax
	addl	$-28,%eax
	movl	(%eax),%eax
	addl	$8,%eax
	movl	%esp,%ebx
	addl	$8,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	call	codegen_reportError
	addl	$152,%esp

	movl	$0,%eax
	jmp	codegen_EmitVariableExpr_ret
codegen_EmitVariableExpr_elsebl_303	:	
codegen_EmitVariableExpr_endif_303	:	

	subl	$4,%esp
	movl	-36(%ebp),%eax
	movl	%eax,0(%esp)
	call	type_AddStarToType
	addl	$4,%esp
	movl	%eax,-28(%ebp)

	subl	$4,%esp
	movl	-36(%ebp),%eax
	movl	%eax,0(%esp)
	call	syntax_FreeSyntaxTree
	addl	$4,%esp

	movl	-28(%ebp),%eax
	movl	%eax,-36(%ebp)
	jmp	codegen_EmitVariableExpr_endif_301
codegen_EmitVariableExpr_elsebl_301	:	

	movl	%ebp,%eax
	addl	$-28,%eax
	movl	(%eax),%eax
	addl	$8,%eax
	addl	$0,%eax
	movl	(%eax),%eax
	movl	%eax,%ebx
	cmpl	$43,%ebx
	movl	$1,%eax
	je	codegen_EmitVariableExpr_reltrue_305
	movl	$0,%eax
codegen_EmitVariableExpr_reltrue_305	:	
	testl	%eax,%eax
	jnz	codegen_EmitVariableExpr_ifbl_304
	jmp	codegen_EmitVariableExpr_elsebl_304
codegen_EmitVariableExpr_ifbl_304	:	

	movl	-24(%ebp),%eax
	testl	%eax,%eax
	jnz	codegen_EmitVariableExpr_ifbl_306
	jmp	codegen_EmitVariableExpr_elsebl_306
codegen_EmitVariableExpr_ifbl_306	:	

	subl	$4,%esp
	movl	-36(%ebp),%eax
	movl	%eax,0(%esp)
	call	type_AddStarToType
	addl	$4,%esp
	movl	%eax,-28(%ebp)

	subl	$4,%esp
	movl	-36(%ebp),%eax
	movl	%eax,0(%esp)
	call	syntax_FreeSyntaxTree
	addl	$4,%esp

	movl	-28(%ebp),%eax
	movl	%eax,-36(%ebp)
	jmp	codegen_EmitVariableExpr_endif_306
codegen_EmitVariableExpr_elsebl_306	:	

	subl	$4,%esp
	movl	-36(%ebp),%eax
	movl	%eax,0(%esp)
	call	type_IsAStructType
	addl	$4,%esp
	testl	%eax,%eax
	jnz	codegen_EmitVariableExpr_ifbl_307
	jmp	codegen_EmitVariableExpr_elsebl_307
codegen_EmitVariableExpr_ifbl_307	:	
	jmp	codegen_EmitVariableExpr_endif_307
codegen_EmitVariableExpr_elsebl_307	:	

	subl	$4,%esp
	movl	-36(%ebp),%eax
	movl	%eax,0(%esp)
	call	type_IsLongSized
	addl	$4,%esp
	testl	%eax,%eax
	jnz	codegen_EmitVariableExpr_ifbl_308
	jmp	codegen_EmitVariableExpr_elsebl_308
codegen_EmitVariableExpr_ifbl_308	:	

	subl	$8,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	$symtab+2194,4(%esp)
	call	codegen_emit
	addl	$8,%esp
	jmp	codegen_EmitVariableExpr_endif_308
codegen_EmitVariableExpr_elsebl_308	:	

	subl	$4,%esp
	movl	-36(%ebp),%eax
	movl	%eax,0(%esp)
	call	type_IsByteSized
	addl	$4,%esp
	testl	%eax,%eax
	jnz	codegen_EmitVariableExpr_ifbl_309
	jmp	codegen_EmitVariableExpr_elsebl_309
codegen_EmitVariableExpr_ifbl_309	:	

	subl	$8,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	$symtab+2529,4(%esp)
	call	codegen_emit
	addl	$8,%esp

	subl	$8,%esp
	movl	16(%ebp),%eax
	movl	%eax,0(%esp)
	movl	$symtab+2548,4(%esp)
	call	strcpy
	addl	$8,%esp
	jmp	codegen_EmitVariableExpr_endif_309
codegen_EmitVariableExpr_elsebl_309	:	

	subl	$152,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	$symtab+2552,4(%esp)
	movl	%ebp,%eax
	addl	$-28,%eax
	movl	(%eax),%eax
	addl	$8,%eax
	movl	%esp,%ebx
	addl	$8,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	call	codegen_reportError
	addl	$152,%esp

	movl	$0,%eax
	jmp	codegen_EmitVariableExpr_ret
codegen_EmitVariableExpr_endif_309	:	
codegen_EmitVariableExpr_endif_308	:	
codegen_EmitVariableExpr_endif_307	:	
codegen_EmitVariableExpr_endif_306	:	
	jmp	codegen_EmitVariableExpr_endif_304
codegen_EmitVariableExpr_elsebl_304	:	

	subl	$4,%esp
	movl	-36(%ebp),%eax
	movl	%eax,0(%esp)
	call	type_IsAPointerType
	addl	$4,%esp
	testl	%eax,%eax
	movl	$1,%eax
	jz	codegen_EmitVariableExpr_logfactfalse_312
	movl	$0,%eax
codegen_EmitVariableExpr_logfactfalse_312	:	
	testl	%eax,%eax
	jnz	codegen_EmitVariableExpr_logexprtrue_311
	movl	-24(%ebp),%eax
	testl	%eax,%eax
	jnz	codegen_EmitVariableExpr_logexprtrue_311
	movl	$0,%eax
	jmp	codegen_EmitVariableExpr_logexprfalse_311
codegen_EmitVariableExpr_logexprtrue_311	:	
	movl	$1,%eax
codegen_EmitVariableExpr_logexprfalse_311	:	
	testl	%eax,%eax
	jnz	codegen_EmitVariableExpr_ifbl_310
	jmp	codegen_EmitVariableExpr_elsebl_310
codegen_EmitVariableExpr_ifbl_310	:	

	subl	$152,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	$symtab+2443,4(%esp)
	movl	%ebp,%eax
	addl	$-28,%eax
	movl	(%eax),%eax
	addl	$8,%eax
	movl	%esp,%ebx
	addl	$8,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	call	codegen_reportError
	addl	$152,%esp

	movl	$0,%eax
	jmp	codegen_EmitVariableExpr_ret
codegen_EmitVariableExpr_elsebl_310	:	
codegen_EmitVariableExpr_endif_310	:	

	subl	$8,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	$symtab+2194,4(%esp)
	call	codegen_emit
	addl	$8,%esp

	subl	$4,%esp
	movl	-36(%ebp),%eax
	movl	%eax,0(%esp)
	call	type_RemoveStarFromType
	addl	$4,%esp
	movl	%eax,-28(%ebp)

	subl	$4,%esp
	movl	-36(%ebp),%eax
	movl	%eax,0(%esp)
	call	syntax_FreeSyntaxTree
	addl	$4,%esp

	movl	-28(%ebp),%eax
	movl	%eax,-36(%ebp)

	subl	$4,%esp
	movl	-36(%ebp),%eax
	movl	%eax,0(%esp)
	call	type_IsAStructType
	addl	$4,%esp
	testl	%eax,%eax
	jnz	codegen_EmitVariableExpr_ifbl_313
	jmp	codegen_EmitVariableExpr_elsebl_313
codegen_EmitVariableExpr_ifbl_313	:	
	jmp	codegen_EmitVariableExpr_endif_313
codegen_EmitVariableExpr_elsebl_313	:	

	subl	$4,%esp
	movl	-36(%ebp),%eax
	movl	%eax,0(%esp)
	call	type_IsLongSized
	addl	$4,%esp
	testl	%eax,%eax
	jnz	codegen_EmitVariableExpr_ifbl_314
	jmp	codegen_EmitVariableExpr_elsebl_314
codegen_EmitVariableExpr_ifbl_314	:	

	subl	$8,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	$symtab+2194,4(%esp)
	call	codegen_emit
	addl	$8,%esp
	jmp	codegen_EmitVariableExpr_endif_314
codegen_EmitVariableExpr_elsebl_314	:	

	subl	$4,%esp
	movl	-36(%ebp),%eax
	movl	%eax,0(%esp)
	call	type_IsByteSized
	addl	$4,%esp
	testl	%eax,%eax
	jnz	codegen_EmitVariableExpr_ifbl_315
	jmp	codegen_EmitVariableExpr_elsebl_315
codegen_EmitVariableExpr_ifbl_315	:	

	subl	$8,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	$symtab+2529,4(%esp)
	call	codegen_emit
	addl	$8,%esp

	subl	$8,%esp
	movl	16(%ebp),%eax
	movl	%eax,0(%esp)
	movl	$symtab+2548,4(%esp)
	call	strcpy
	addl	$8,%esp
	jmp	codegen_EmitVariableExpr_endif_315
codegen_EmitVariableExpr_elsebl_315	:	

	subl	$152,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	$symtab+2552,4(%esp)
	movl	%ebp,%eax
	addl	$-28,%eax
	movl	(%eax),%eax
	addl	$8,%eax
	movl	%esp,%ebx
	addl	$8,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	call	codegen_reportError
	addl	$152,%esp

	movl	$0,%eax
	jmp	codegen_EmitVariableExpr_ret
codegen_EmitVariableExpr_endif_315	:	
codegen_EmitVariableExpr_endif_314	:	
codegen_EmitVariableExpr_endif_313	:	
codegen_EmitVariableExpr_endif_304	:	
codegen_EmitVariableExpr_endif_301	:	

	movl	-36(%ebp),%eax
	jmp	codegen_EmitVariableExpr_ret
codegen_EmitVariableExpr_ret	:	
	movl	%ebp,%esp
	popl	%ebp
	ret	

.globl	codegen_EmitFuncCall
.type	codegen_EmitFuncCall,@function
codegen_EmitFuncCall	:	
	pushl	%ebp
	movl	%esp,%ebp
	subl	$528,%esp

	movl	%ebp,%eax
	addl	$8,%eax
	movl	(%eax),%eax
	addl	$20,%eax
	movl	(%eax),%eax
	addl	$4,%eax
	movl	(%eax),%eax
	movl	%eax,-4(%ebp)

	subl	$8,%esp
	movl	12(%ebp),%eax
	movl	%eax,0(%esp)
	movl	$0,4(%esp)
	call	syntax_GetChild
	addl	$8,%esp
	movl	%eax,-12(%ebp)

	subl	$148,%esp
	movl	-4(%ebp),%eax
	movl	%eax,0(%esp)
	movl	%ebp,%eax
	addl	$-12,%eax
	movl	(%eax),%eax
	addl	$8,%eax
	movl	%esp,%ebx
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	call	symbol_FindFunction
	addl	$148,%esp
	movl	%eax,-8(%ebp)

	movl	-8(%ebp),%ebx
	cmpl	$0,%ebx
	movl	$1,%eax
	je	codegen_EmitFuncCall_reltrue_317
	movl	$0,%eax
codegen_EmitFuncCall_reltrue_317	:	
	testl	%eax,%eax
	jnz	codegen_EmitFuncCall_ifbl_316
	jmp	codegen_EmitFuncCall_elsebl_316
codegen_EmitFuncCall_ifbl_316	:	

	subl	$152,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	$symtab+2613,4(%esp)
	movl	%ebp,%eax
	addl	$-12,%eax
	movl	(%eax),%eax
	addl	$8,%eax
	movl	%esp,%ebx
	addl	$8,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	call	codegen_reportError
	addl	$152,%esp

	subl	$8,%esp
	movl	16(%ebp),%eax
	movl	%eax,0(%esp)
	movl	$symtab+216,4(%esp)
	call	strcpy
	addl	$8,%esp

	movl	$0,%eax
	jmp	codegen_EmitFuncCall_ret
codegen_EmitFuncCall_elsebl_316	:	
codegen_EmitFuncCall_endif_316	:	

	subl	$8,%esp
	movl	-4(%ebp),%eax
	movl	%eax,0(%esp)
	movl	%ebp,%eax
	addl	$-8,%eax
	movl	(%eax),%eax
	addl	$148,%eax
	movl	(%eax),%eax
	movl	%eax,4(%esp)
	call	symbol_Sizeof_FunctionArgs
	addl	$8,%esp
	movl	%eax,-36(%ebp)

	subl	$12,%esp
	movl	16(%ebp),%eax
	movl	%eax,0(%esp)
	movl	$symtab+534,4(%esp)
	movl	-36(%ebp),%eax
	movl	%eax,8(%esp)
	call	sprintf
	addl	$12,%esp

	subl	$8,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	16(%ebp),%eax
	movl	%eax,4(%esp)
	call	codegen_emit
	addl	$8,%esp

	movl	$0,-40(%ebp)

	movl	$0,-44(%ebp)

	subl	$8,%esp
	movl	-4(%ebp),%eax
	movl	%eax,0(%esp)
	movl	%ebp,%eax
	addl	$-8,%eax
	movl	(%eax),%eax
	addl	$148,%eax
	movl	(%eax),%eax
	movl	%eax,4(%esp)
	call	symbol_CountFunctionArgs
	addl	$8,%esp
	movl	%eax,-48(%ebp)

	subl	$4,%esp
	movl	12(%ebp),%eax
	movl	%eax,0(%esp)
	call	syntax_CountChilds
	addl	$4,%esp
	movl	%eax,%ebx
	subl	$2,%ebx
	movl	%ebx,%eax
	pushl	%eax
	movl	$2,%eax
	movl	%eax,%ebx
	popl	%eax
	movl	$0,%edx
	idivl	%ebx
	movl	%eax,%ebx
	cmpl	-48(%ebp),%ebx
	movl	$1,%eax
	jne	codegen_EmitFuncCall_reltrue_319
	movl	$0,%eax
codegen_EmitFuncCall_reltrue_319	:	
	testl	%eax,%eax
	jnz	codegen_EmitFuncCall_ifbl_318
	jmp	codegen_EmitFuncCall_elsebl_318
codegen_EmitFuncCall_ifbl_318	:	

	subl	$152,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	$symtab+2639,4(%esp)
	movl	%ebp,%eax
	addl	$-12,%eax
	movl	(%eax),%eax
	addl	$8,%eax
	movl	%esp,%ebx
	addl	$8,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	call	codegen_reportError
	addl	$152,%esp

	subl	$8,%esp
	movl	16(%ebp),%eax
	movl	%eax,0(%esp)
	movl	$symtab+216,4(%esp)
	call	strcpy
	addl	$8,%esp

	movl	$0,%eax
	jmp	codegen_EmitFuncCall_ret
codegen_EmitFuncCall_elsebl_318	:	
codegen_EmitFuncCall_endif_318	:	

codegen_EmitFuncCall_while_320	:	
	movl	-44(%ebp),%ebx
	cmpl	-48(%ebp),%ebx
	movl	$1,%eax
	jl	codegen_EmitFuncCall_reltrue_321
	movl	$0,%eax
codegen_EmitFuncCall_reltrue_321	:	
	testl	%eax,%eax
	jz	codegen_EmitFuncCall_endwhile_320

	subl	$12,%esp
	movl	-4(%ebp),%eax
	movl	%eax,0(%esp)
	movl	%ebp,%eax
	addl	$-8,%eax
	movl	(%eax),%eax
	addl	$148,%eax
	movl	(%eax),%eax
	movl	%eax,4(%esp)
	movl	-44(%ebp),%eax
	movl	%eax,8(%esp)
	call	symbol_GetFunctionArg
	addl	$12,%esp
	movl	%eax,-24(%ebp)

	subl	$8,%esp
	subl	$8,%esp
	movl	-24(%ebp),%eax
	movl	%eax,0(%esp)
	movl	$0,4(%esp)
	call	syntax_GetChild
	addl	$8,%esp
	movl	%eax,0(%esp)
	movl	$0,4(%esp)
	call	syntax_GetChild
	addl	$8,%esp
	movl	%eax,-24(%ebp)

	subl	$12,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	subl	$8,%esp
	movl	12(%ebp),%eax
	movl	%eax,0(%esp)
	movl	$2,%ebx
	imull	-44(%ebp),%ebx
	movl	%ebx,%eax
	movl	%eax,%ebx
	addl	$2,%ebx
	movl	%ebx,%eax
	movl	%eax,4(%esp)
	call	syntax_GetChild
	addl	$8,%esp
	movl	%eax,4(%esp)
	movl	16(%ebp),%eax
	movl	%eax,8(%esp)
	call	codegen_EmitLogExpr
	addl	$12,%esp
	movl	%eax,-28(%ebp)

	subl	$12,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	16(%ebp),%eax
	movl	%eax,4(%esp)
	movl	-28(%ebp),%eax
	movl	%eax,8(%esp)
	call	codegen_EmitAvoidIndirect
	addl	$12,%esp

	subl	$8,%esp
	movl	12(%ebp),%eax
	movl	%eax,0(%esp)
	movl	$2,%ebx
	imull	-44(%ebp),%ebx
	movl	%ebx,%eax
	movl	%eax,%ebx
	addl	$1,%ebx
	movl	%ebx,%eax
	movl	%eax,4(%esp)
	call	syntax_GetChild
	addl	$8,%esp
	movl	%eax,-32(%ebp)

	subl	$156,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	-24(%ebp),%eax
	movl	%eax,4(%esp)
	movl	-28(%ebp),%eax
	movl	%eax,8(%esp)
	movl	%ebp,%eax
	addl	$-32,%eax
	movl	(%eax),%eax
	addl	$8,%eax
	movl	%esp,%ebx
	addl	$12,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	call	codegen_CheckCasting
	addl	$156,%esp

	subl	$4,%esp
	movl	-24(%ebp),%eax
	movl	%eax,0(%esp)
	call	type_IsLongSized
	addl	$4,%esp
	testl	%eax,%eax
	jnz	codegen_EmitFuncCall_ifbl_322
	jmp	codegen_EmitFuncCall_elsebl_322
codegen_EmitFuncCall_ifbl_322	:	

	subl	$156,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	%ebp,%eax
	addl	$-32,%eax
	movl	(%eax),%eax
	addl	$8,%eax
	movl	%esp,%ebx
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	16(%ebp),%eax
	movl	%eax,148(%esp)
	movl	-28(%ebp),%eax
	movl	%eax,152(%esp)
	call	codegen_CastToInt
	addl	$156,%esp
	movl	%eax,-28(%ebp)

	subl	$12,%esp
	movl	%ebp,%eax
	addl	$-528,%eax
	movl	%eax,0(%esp)
	movl	$symtab+2664,4(%esp)
	movl	-40(%ebp),%eax
	movl	%eax,8(%esp)
	call	sprintf
	addl	$12,%esp

	subl	$12,%esp
	movl	%ebp,%eax
	addl	$-208,%eax
	movl	%eax,0(%esp)
	movl	%ebp,%eax
	addl	$-528,%eax
	movl	%eax,4(%esp)
	movl	16(%ebp),%eax
	movl	%eax,8(%esp)
	call	sprintf
	addl	$12,%esp

	subl	$8,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	%ebp,%eax
	addl	$-208,%eax
	movl	%eax,4(%esp)
	call	codegen_emit
	addl	$8,%esp
	jmp	codegen_EmitFuncCall_endif_322
codegen_EmitFuncCall_elsebl_322	:	

	subl	$4,%esp
	movl	-24(%ebp),%eax
	movl	%eax,0(%esp)
	call	type_IsByteSized
	addl	$4,%esp
	testl	%eax,%eax
	jnz	codegen_EmitFuncCall_ifbl_323
	jmp	codegen_EmitFuncCall_elsebl_323
codegen_EmitFuncCall_ifbl_323	:	

	subl	$156,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	%ebp,%eax
	addl	$-32,%eax
	movl	(%eax),%eax
	addl	$8,%eax
	movl	%esp,%ebx
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	16(%ebp),%eax
	movl	%eax,148(%esp)
	movl	-28(%ebp),%eax
	movl	%eax,152(%esp)
	call	codegen_CastToChar
	addl	$156,%esp
	movl	%eax,-28(%ebp)

	subl	$12,%esp
	movl	%ebp,%eax
	addl	$-528,%eax
	movl	%eax,0(%esp)
	movl	$symtab+2688,4(%esp)
	movl	-40(%ebp),%eax
	movl	%eax,8(%esp)
	call	sprintf
	addl	$12,%esp

	subl	$12,%esp
	movl	%ebp,%eax
	addl	$-208,%eax
	movl	%eax,0(%esp)
	movl	%ebp,%eax
	addl	$-528,%eax
	movl	%eax,4(%esp)
	movl	16(%ebp),%eax
	movl	%eax,8(%esp)
	call	sprintf
	addl	$12,%esp

	subl	$8,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	%ebp,%eax
	addl	$-208,%eax
	movl	%eax,4(%esp)
	call	codegen_emit
	addl	$8,%esp
	jmp	codegen_EmitFuncCall_endif_323
codegen_EmitFuncCall_elsebl_323	:	

	subl	$4,%esp
	movl	-24(%ebp),%eax
	movl	%eax,0(%esp)
	call	type_IsAStructType
	addl	$4,%esp
	testl	%eax,%eax
	jnz	codegen_EmitFuncCall_ifbl_324
	jmp	codegen_EmitFuncCall_elsebl_324
codegen_EmitFuncCall_ifbl_324	:	

	subl	$8,%esp
	movl	16(%ebp),%eax
	movl	%eax,0(%esp)
	movl	$symtab+216,4(%esp)
	call	strcmp
	addl	$8,%esp
	movl	%eax,%ebx
	cmpl	$0,%ebx
	movl	$1,%eax
	je	codegen_EmitFuncCall_reltrue_326
	movl	$0,%eax
codegen_EmitFuncCall_reltrue_326	:	
	testl	%eax,%eax
	jnz	codegen_EmitFuncCall_ifbl_325
	jmp	codegen_EmitFuncCall_elsebl_325
codegen_EmitFuncCall_ifbl_325	:	

	subl	$8,%esp
	movl	%ebp,%eax
	addl	$-208,%eax
	movl	%eax,0(%esp)
	movl	$symtab+1200,4(%esp)
	call	strcpy
	addl	$8,%esp
	jmp	codegen_EmitFuncCall_endif_325
codegen_EmitFuncCall_elsebl_325	:	

	subl	$8,%esp
	movl	%ebp,%eax
	addl	$-208,%eax
	movl	%eax,0(%esp)
	movl	$symtab+216,4(%esp)
	call	strcpy
	addl	$8,%esp
codegen_EmitFuncCall_endif_325	:	

	subl	$8,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	$symtab+2712,4(%esp)
	call	codegen_emit
	addl	$8,%esp

	subl	$8,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	%ebp,%eax
	addl	$-208,%eax
	movl	%eax,4(%esp)
	call	codegen_emit
	addl	$8,%esp

	subl	$8,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	$symtab+198,4(%esp)
	call	codegen_emit
	addl	$8,%esp

	subl	$12,%esp
	movl	%ebp,%eax
	addl	$-528,%eax
	movl	%eax,0(%esp)
	movl	$symtab+2725,4(%esp)
	movl	-40(%ebp),%eax
	movl	%eax,8(%esp)
	call	sprintf
	addl	$12,%esp

	subl	$12,%esp
	movl	%ebp,%eax
	addl	$-368,%eax
	movl	%eax,0(%esp)
	movl	%ebp,%eax
	addl	$-528,%eax
	movl	%eax,4(%esp)
	movl	%ebp,%eax
	addl	$-208,%eax
	movl	%eax,8(%esp)
	call	sprintf
	addl	$12,%esp

	subl	$8,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	%ebp,%eax
	addl	$-368,%eax
	movl	%eax,4(%esp)
	call	codegen_emit
	addl	$8,%esp

	subl	$16,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	%ebp,%eax
	addl	$-208,%eax
	movl	%eax,4(%esp)
	movl	16(%ebp),%eax
	movl	%eax,8(%esp)
	subl	$8,%esp
	movl	-4(%ebp),%eax
	movl	%eax,0(%esp)
	movl	-24(%ebp),%eax
	movl	%eax,4(%esp)
	call	symbol_Sizeof_DataType
	addl	$8,%esp
	movl	%eax,12(%esp)
	call	codegen_EmitCopyJunk
	addl	$16,%esp
	jmp	codegen_EmitFuncCall_endif_324
codegen_EmitFuncCall_elsebl_324	:	

	subl	$152,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	$symtab+2741,4(%esp)
	movl	%ebp,%eax
	addl	$-12,%eax
	movl	(%eax),%eax
	addl	$8,%eax
	movl	%esp,%ebx
	addl	$8,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	call	codegen_reportError
	addl	$152,%esp
codegen_EmitFuncCall_endif_324	:	
codegen_EmitFuncCall_endif_323	:	
codegen_EmitFuncCall_endif_322	:	

	subl	$4,%esp
	movl	-28(%ebp),%eax
	movl	%eax,0(%esp)
	call	syntax_FreeSyntaxTree
	addl	$4,%esp

	pushl	-40(%ebp)
	subl	$8,%esp
	movl	-4(%ebp),%eax
	movl	%eax,0(%esp)
	movl	-24(%ebp),%eax
	movl	%eax,4(%esp)
	call	symbol_Sizeof_DataType
	addl	$8,%esp
	popl	%ebx
	addl	%eax,%ebx
	movl	%ebx,%eax
	movl	%eax,-40(%ebp)

	movl	-44(%ebp),%ebx
	addl	$1,%ebx
	movl	%ebx,%eax
	movl	%eax,-44(%ebp)
	jmp	codegen_EmitFuncCall_while_320
codegen_EmitFuncCall_endwhile_320	:	

	subl	$8,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	$symtab+2791,4(%esp)
	call	codegen_emit
	addl	$8,%esp

	subl	$8,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	%ebp,%eax
	addl	$-12,%eax
	movl	(%eax),%eax
	addl	$8,%eax
	addl	$16,%eax
	movl	%eax,4(%esp)
	call	codegen_emit
	addl	$8,%esp

	subl	$8,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	$symtab+198,4(%esp)
	call	codegen_emit
	addl	$8,%esp

	subl	$12,%esp
	movl	16(%ebp),%eax
	movl	%eax,0(%esp)
	movl	$symtab+2798,4(%esp)
	movl	-36(%ebp),%eax
	movl	%eax,8(%esp)
	call	sprintf
	addl	$12,%esp

	subl	$8,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	16(%ebp),%eax
	movl	%eax,4(%esp)
	call	codegen_emit
	addl	$8,%esp

	subl	$8,%esp
	movl	16(%ebp),%eax
	movl	%eax,0(%esp)
	movl	$symtab+216,4(%esp)
	call	strcpy
	addl	$8,%esp

	subl	$8,%esp
	movl	-4(%ebp),%eax
	movl	%eax,0(%esp)
	movl	%ebp,%eax
	addl	$-8,%eax
	movl	(%eax),%eax
	addl	$148,%eax
	movl	(%eax),%eax
	movl	%eax,4(%esp)
	call	symbol_GetReturnType
	addl	$8,%esp
	movl	%eax,-20(%ebp)

	subl	$4,%esp
	movl	-20(%ebp),%eax
	movl	%eax,0(%esp)
	call	type_IsByteSized
	addl	$4,%esp
	testl	%eax,%eax
	jnz	codegen_EmitFuncCall_ifbl_327
	jmp	codegen_EmitFuncCall_elsebl_327
codegen_EmitFuncCall_ifbl_327	:	

	subl	$0,%esp
	call	codegen_CreateIntType
	addl	$0,%esp
	movl	%eax,-16(%ebp)

	subl	$156,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	%ebp,%eax
	addl	$-12,%eax
	movl	(%eax),%eax
	addl	$8,%eax
	movl	%esp,%ebx
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	16(%ebp),%eax
	movl	%eax,148(%esp)
	movl	-16(%ebp),%eax
	movl	%eax,152(%esp)
	call	codegen_CastToChar
	addl	$156,%esp
	movl	%eax,-16(%ebp)

	subl	$4,%esp
	movl	-16(%ebp),%eax
	movl	%eax,0(%esp)
	call	syntax_FreeSyntaxTree
	addl	$4,%esp
	jmp	codegen_EmitFuncCall_endif_327
codegen_EmitFuncCall_elsebl_327	:	
codegen_EmitFuncCall_endif_327	:	

	subl	$4,%esp
	movl	%ebp,%eax
	addl	$-8,%eax
	movl	(%eax),%eax
	addl	$148,%eax
	movl	(%eax),%eax
	movl	%eax,0(%esp)
	call	type_CreateType
	addl	$4,%esp
	jmp	codegen_EmitFuncCall_ret
codegen_EmitFuncCall_ret	:	
	movl	%ebp,%esp
	popl	%ebp
	ret	

.section	.data
symtab	:	
.string	"CODEGEN_ERROR: %d, "
.string	"%d, "
.string	"%s:\n"
.string	"[ERR filename] (%p)\n"
.string	"\tToken is '%s' ::   "
.string	"%s\n"
.string	"CODEGEN_WARNING: %s"
.string	" Token is %d"
.string	", %s"
.string	" @ %d"
.string	",%d, "
.string	"[ERR filename]\n"
.string	"CODEGEN_ERROR: Error emitting code to file!"
.string	" "
.string	"\t#debug: "
.string	"\n"
.string	""
.string	"\tmovl\t"
.string	", %eax\n"
.string	"%eax"
.string	"\tmovb\t"
.string	", %ah\n"
.string	"%ah"
.string	"# gas-assembler code generated by HrwCC\n\n"
.string	".section .text\n"
.string	"# The symbol table \n\n"
.string	".section .data\n"
.string	"symtab:\n"
.string	"\t.string\t"
.string	"global-var: "
.string	"\t.rept %d\n"
.string	"\t\t.byte 0\n"
.string	"\t.endr\n"
.string	"\t.long 0\n"
.string	"\t.byte 0\n"
.string	"struct: %d\n"
.string	"\tunknown type of symtab-entry!\n"
.string	"func-def: "
.string	".globl "
.string	".type "
.string	", @function\n"
.string	":\n"
.string	"\tpushl\t%ebp\n"
.string	"\tmovl\t%esp, %ebp\n"
.string	"\tsubl\t$%d, %%esp\n"
.string	"\n\n"
.string	"_ret:\n"
.string	"\tmovl\t%ebp, %esp\n"
.string	"\tpopl\t%ebp\n"
.string	"\tret\n"
.string	"\n\n\n\n"
.string	"if: "
.string	"\ttestl\t"
.string	", "
.string	"\tjnz\t%s_ifbl_%%d\n"
.string	"\tjmp\t%s_elsebl_%%d\n"
.string	"%s_ifbl_%%d:\n"
.string	"\tjmp\t%s_endif_%%d\n\n"
.string	"%s_elsebl_%%d:\n\n"
.string	"%s_endif_%%d:\n\n"
.string	"while: "
.string	"%s_while_%%d:\n"
.string	"\tjz\t%s_endwhile_%%d\n\n"
.string	"\tjmp\t%s_while_%%d\n"
.string	"%s_endwhile_%%d:\n\n"
.string	"Detected a break-statement which is not bounded by a while."
.string	"\tjmp\t%s_endwhile_%%d\n"
.string	"Detected a continue-statement which is not bounded by a while."
.string	"return: "
.string	"Return-type of struct-instance is not supported.\n"
.string	"\tjmp\t%s_ret\n"
.string	"Non-void return-typed functions need return value!"
.string	"func-call: "
.string	"Pointer types must be equal or one of both is void* typed."
.string	"Casting between struct-instances not allowed."
.string	", %ebx\n"
.string	"%ebx"
.string	"%ecx"
.string	"\tmovl\t("
.string	"), "
.string	", ("
.string	")\n"
.string	"\taddl\t$4, "
.string	"\tmovb\t("
.string	"\taddl\t$1, "
.string	"Unknown variable.\n"
.string	"Internal compiler error: EmitFastAssign"
.string	"%d(%%ebp)"
.string	"symtab+%d"
.string	"\tpushl\t"
.string	"\tpopl\t%esi\n"
.string	"%d"
.string	"(%%ebp, %%esi, %d)\n"
.string	"(, %%esi, %d)\n"
.string	"assignment: "
.string	"ebx"
.string	"\tpopl\t"
.string	"Internal Error: Unhandled case in assignment."
.string	"int"
.string	"char"
.string	"void"
.string	"*"
.string	"\tmovsbl\t"
.string	"Can not cast to int."
.string	"%Xl"
.string	"Can not cast to char."
.string	"$%d"
.string	"$symtab+%d"
.string	"\tnotl\t%eax\n"
.string	"\tpopl\t%eax\n"
.string	"\tmovl\t$0, %edx\n"
.string	"\tidivl\t"
.string	"%edx"
.string	"\tandl\t"
.string	"\txorl\t"
.string	"\timull\t"
.string	"\tpushl\t$0\n"
.string	"\tmovl\t$%d, %%esi\n"
.string	", %esi\n"
.string	"%esi"
.string	"\taddl\t"
.string	"\tsubl\t"
.string	"\torl\t"
.string	"\tcmpl\t"
.string	"\tmovl\t$1, %eax\n"
.string	"\tje\t"
.string	"\tjne\t"
.string	"\tjl\t"
.string	"\tjle\t"
.string	"\tjg\t"
.string	"\tjge\t"
.string	"Unknown relational operator."
.string	"%s_reltrue_%%d\n"
.string	"\tmovl\t$0, %eax\n"
.string	"%s_reltrue_%%d:\n"
.string	"\tjz\t%s_logfactfalse_%%d\n"
.string	"%s_logfactfalse_%%d:\n"
.string	"\tjz\t%s_logtermfalse_%%d\n"
.string	"\tjmp\t%s_logtermtrue_%%d\n"
.string	"%s_logtermfalse_%%d:\n"
.string	"%s_logtermtrue_%%d:\n"
.string	"\tjnz\t%s_logexprtrue_%%d\n"
.string	"\tjmp\t%s_logexprfalse_%%d\n"
.string	"%s_logexprtrue_%%d:\n"
.string	"%s_logexprfalse_%%d:\n"
.string	"\tmovl\t$symtab, %eax\n"
.string	"\taddl\t$%d, %%eax\n"
.string	"\tmovl\t%ebp, %eax\n"
.string	"Unknown variable."
.string	"Cannot access array here."
.string	"Deref with '->' implies a pointer."
.string	"\tmovl\t(%eax), %eax\n"
.string	"Deref with '.' implies non-pointer."
.string	"Error when accessing member."
.string	"Can't get array-element of expression."
.string	"\timull\t$%d, %%esi\n"
.string	"\taddl\t%esi, %eax\n"
.string	"Can't get address of variable-expr with address operator.\n"
.string	"Can't get address of array.\n"
.string	"Can only de-reference a pointer!\n"
.string	"Can't get address of an array, only from elements.\n"
.string	"\tmovb\t(%eax), %al\n"
.string	"%al"
.string	"Internal Error: Unhandled case in codegen_EmitVariableExpr!\n"
.string	"Calling unknown function."
.string	"Invalid argument number!"
.string	"\tmovl\t%%s, %d(%%%%esp)\n"
.string	"\tmovb\t%%s, %d(%%%%esp)\n"
.string	"\tmovl\t%esp, "
.string	"\taddl\t$%d, %%s\n"
.string	"Internal Error: Unhandled case in function call.\n"
.string	"\tcall\t"
.string	"\taddl\t$%d, %%esp\n"
