
.section	.text

.globl	type_CreateArrayElmType
.type	type_CreateArrayElmType,@function
type_CreateArrayElmType	:	
	pushl	%ebp
	movl	%esp,%ebp
	subl	$0,%esp

	subl	$4,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	call	type_IsAPointerVar
	addl	$4,%esp
	testl	%eax,%eax
	jnz	type_CreateArrayElmType_ifbl_0
	jmp	type_CreateArrayElmType_elsebl_0
type_CreateArrayElmType_ifbl_0	:	

	subl	$4,%esp
	subl	$8,%esp
	subl	$8,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	$0,4(%esp)
	call	syntax_GetChild
	addl	$8,%esp
	movl	%eax,0(%esp)
	movl	$0,4(%esp)
	call	syntax_GetChild
	addl	$8,%esp
	movl	%eax,0(%esp)
	call	type_RemoveStarFromType
	addl	$4,%esp
	jmp	type_CreateArrayElmType_ret
type_CreateArrayElmType_elsebl_0	:	
type_CreateArrayElmType_endif_0	:	

	subl	$4,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	call	type_IsAArrayVar
	addl	$4,%esp
	testl	%eax,%eax
	jnz	type_CreateArrayElmType_ifbl_1
	jmp	type_CreateArrayElmType_elsebl_1
type_CreateArrayElmType_ifbl_1	:	

	subl	$4,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	call	type_CreateType
	addl	$4,%esp
	jmp	type_CreateArrayElmType_ret
type_CreateArrayElmType_elsebl_1	:	
type_CreateArrayElmType_endif_1	:	

	movl	$0,%eax
	jmp	type_CreateArrayElmType_ret
type_CreateArrayElmType_ret	:	
	movl	%ebp,%esp
	popl	%ebp
	ret	

.globl	type_GetArrayElmSize
.type	type_GetArrayElmSize,@function
type_GetArrayElmSize	:	
	pushl	%ebp
	movl	%esp,%ebp
	subl	$8,%esp

	subl	$4,%esp
	movl	12(%ebp),%eax
	movl	%eax,0(%esp)
	call	type_CreateArrayElmType
	addl	$4,%esp
	movl	%eax,-4(%ebp)

	movl	-4(%ebp),%ebx
	cmpl	$0,%ebx
	movl	$1,%eax
	je	type_GetArrayElmSize_reltrue_3
	movl	$0,%eax
type_GetArrayElmSize_reltrue_3	:	
	testl	%eax,%eax
	jnz	type_GetArrayElmSize_ifbl_2
	jmp	type_GetArrayElmSize_elsebl_2
type_GetArrayElmSize_ifbl_2	:	

	movl	$0,%ebx
	subl	$1,%ebx
	movl	%ebx,%eax
	jmp	type_GetArrayElmSize_ret
type_GetArrayElmSize_elsebl_2	:	
type_GetArrayElmSize_endif_2	:	

	subl	$8,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	-4(%ebp),%eax
	movl	%eax,4(%esp)
	call	symbol_Sizeof_DataType
	addl	$8,%esp
	movl	%eax,-8(%ebp)

	subl	$4,%esp
	movl	-4(%ebp),%eax
	movl	%eax,0(%esp)
	call	syntax_FreeSyntaxTree
	addl	$4,%esp

	movl	-8(%ebp),%eax
	jmp	type_GetArrayElmSize_ret
type_GetArrayElmSize_ret	:	
	movl	%ebp,%esp
	popl	%ebp
	ret	

.globl	type_IsAPointerVar
.type	type_IsAPointerVar,@function
type_IsAPointerVar	:	
	pushl	%ebp
	movl	%esp,%ebp
	subl	$0,%esp

	subl	$4,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	call	type_IsAArrayVar
	addl	$4,%esp
	testl	%eax,%eax
	jnz	type_IsAPointerVar_ifbl_4
	jmp	type_IsAPointerVar_elsebl_4
type_IsAPointerVar_ifbl_4	:	

	movl	$0,%eax
	jmp	type_IsAPointerVar_ret
type_IsAPointerVar_elsebl_4	:	
type_IsAPointerVar_endif_4	:	

	subl	$8,%esp
	subl	$8,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	$0,4(%esp)
	call	syntax_GetChild
	addl	$8,%esp
	movl	%eax,0(%esp)
	movl	$0,4(%esp)
	call	syntax_GetChild
	addl	$8,%esp
	movl	%eax,8(%ebp)

	subl	$4,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	call	syntax_CountChilds
	addl	$4,%esp
	movl	%eax,%ebx
	cmpl	$1,%ebx
	movl	$1,%eax
	jg	type_IsAPointerVar_reltrue_6
	movl	$0,%eax
type_IsAPointerVar_reltrue_6	:	
	testl	%eax,%eax
	jnz	type_IsAPointerVar_ifbl_5
	jmp	type_IsAPointerVar_elsebl_5
type_IsAPointerVar_ifbl_5	:	

	movl	$1,%eax
	jmp	type_IsAPointerVar_ret
type_IsAPointerVar_elsebl_5	:	
type_IsAPointerVar_endif_5	:	

	movl	$0,%eax
	jmp	type_IsAPointerVar_ret
type_IsAPointerVar_ret	:	
	movl	%ebp,%esp
	popl	%ebp
	ret	

.globl	type_IsAArrayVar
.type	type_IsAArrayVar,@function
type_IsAArrayVar	:	
	pushl	%ebp
	movl	%esp,%ebp
	subl	$0,%esp

	subl	$4,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	call	syntax_CountChilds
	addl	$4,%esp
	movl	%eax,%ebx
	cmpl	$5,%ebx
	movl	$1,%eax
	je	type_IsAArrayVar_reltrue_8
	movl	$0,%eax
type_IsAArrayVar_reltrue_8	:	
	testl	%eax,%eax
	jnz	type_IsAArrayVar_ifbl_7
	jmp	type_IsAArrayVar_elsebl_7
type_IsAArrayVar_ifbl_7	:	

	movl	$1,%eax
	jmp	type_IsAArrayVar_ret
type_IsAArrayVar_elsebl_7	:	
type_IsAArrayVar_endif_7	:	

	movl	$0,%eax
	jmp	type_IsAArrayVar_ret
type_IsAArrayVar_ret	:	
	movl	%ebp,%esp
	popl	%ebp
	ret	

.globl	type_IsAStructVar
.type	type_IsAStructVar,@function
type_IsAStructVar	:	
	pushl	%ebp
	movl	%esp,%ebp
	subl	$4,%esp

	subl	$4,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	call	type_IsAArrayVar
	addl	$4,%esp
	testl	%eax,%eax
	jnz	type_IsAStructVar_ifbl_9
	jmp	type_IsAStructVar_elsebl_9
type_IsAStructVar_ifbl_9	:	

	movl	$0,%eax
	jmp	type_IsAStructVar_ret
type_IsAStructVar_elsebl_9	:	
type_IsAStructVar_endif_9	:	

	movl	8(%ebp),%ebx
	cmpl	$0,%ebx
	movl	$1,%eax
	je	type_IsAStructVar_reltrue_11
	movl	$0,%eax
type_IsAStructVar_reltrue_11	:	
	testl	%eax,%eax
	jnz	type_IsAStructVar_ifbl_10
	jmp	type_IsAStructVar_elsebl_10
type_IsAStructVar_ifbl_10	:	

	movl	$0,%eax
	jmp	type_IsAStructVar_ret
type_IsAStructVar_elsebl_10	:	
type_IsAStructVar_endif_10	:	

	subl	$8,%esp
	subl	$8,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	$0,4(%esp)
	call	syntax_GetChild
	addl	$8,%esp
	movl	%eax,0(%esp)
	movl	$0,4(%esp)
	call	syntax_GetChild
	addl	$8,%esp
	movl	%eax,8(%ebp)

	subl	$4,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	call	syntax_CountChilds
	addl	$4,%esp
	movl	%eax,%ebx
	cmpl	$1,%ebx
	movl	$1,%eax
	jg	type_IsAStructVar_reltrue_13
	movl	$0,%eax
type_IsAStructVar_reltrue_13	:	
	testl	%eax,%eax
	jnz	type_IsAStructVar_ifbl_12
	jmp	type_IsAStructVar_elsebl_12
type_IsAStructVar_ifbl_12	:	

	movl	$0,%eax
	jmp	type_IsAStructVar_ret
type_IsAStructVar_elsebl_12	:	
type_IsAStructVar_endif_12	:	

	subl	$8,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	$0,4(%esp)
	call	syntax_GetChild
	addl	$8,%esp
	movl	%eax,-4(%ebp)

	movl	%ebp,%eax
	addl	$-4,%eax
	movl	(%eax),%eax
	addl	$8,%eax
	addl	$0,%eax
	movl	(%eax),%eax
	movl	%eax,%ebx
	cmpl	$43,%ebx
	movl	$1,%eax
	je	type_IsAStructVar_reltrue_15
	movl	$0,%eax
type_IsAStructVar_reltrue_15	:	
	testl	%eax,%eax
	jnz	type_IsAStructVar_ifbl_14
	jmp	type_IsAStructVar_elsebl_14
type_IsAStructVar_ifbl_14	:	

	movl	$1,%eax
	jmp	type_IsAStructVar_ret
type_IsAStructVar_elsebl_14	:	
type_IsAStructVar_endif_14	:	

	movl	$0,%eax
	jmp	type_IsAStructVar_ret
type_IsAStructVar_ret	:	
	movl	%ebp,%esp
	popl	%ebp
	ret	

.globl	type_IsAPointerType
.type	type_IsAPointerType,@function
type_IsAPointerType	:	
	pushl	%ebp
	movl	%esp,%ebp
	subl	$0,%esp

	movl	8(%ebp),%ebx
	cmpl	$0,%ebx
	movl	$1,%eax
	je	type_IsAPointerType_reltrue_17
	movl	$0,%eax
type_IsAPointerType_reltrue_17	:	
	testl	%eax,%eax
	jnz	type_IsAPointerType_ifbl_16
	jmp	type_IsAPointerType_elsebl_16
type_IsAPointerType_ifbl_16	:	

	movl	$0,%eax
	jmp	type_IsAPointerType_ret
type_IsAPointerType_elsebl_16	:	
type_IsAPointerType_endif_16	:	

	subl	$4,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	call	syntax_CountChilds
	addl	$4,%esp
	movl	%eax,%ebx
	cmpl	$1,%ebx
	movl	$1,%eax
	jg	type_IsAPointerType_reltrue_19
	movl	$0,%eax
type_IsAPointerType_reltrue_19	:	
	testl	%eax,%eax
	jnz	type_IsAPointerType_ifbl_18
	jmp	type_IsAPointerType_elsebl_18
type_IsAPointerType_ifbl_18	:	

	movl	$1,%eax
	jmp	type_IsAPointerType_ret
type_IsAPointerType_elsebl_18	:	
type_IsAPointerType_endif_18	:	

	movl	$0,%eax
	jmp	type_IsAPointerType_ret
type_IsAPointerType_ret	:	
	movl	%ebp,%esp
	popl	%ebp
	ret	

.globl	type_IsAIntType
.type	type_IsAIntType,@function
type_IsAIntType	:	
	pushl	%ebp
	movl	%esp,%ebp
	subl	$4,%esp

	subl	$4,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	call	type_IsAPointerType
	addl	$4,%esp
	testl	%eax,%eax
	jnz	type_IsAIntType_ifbl_20
	jmp	type_IsAIntType_elsebl_20
type_IsAIntType_ifbl_20	:	

	movl	$0,%eax
	jmp	type_IsAIntType_ret
type_IsAIntType_elsebl_20	:	
type_IsAIntType_endif_20	:	

	subl	$8,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	$0,4(%esp)
	call	syntax_GetChild
	addl	$8,%esp
	movl	%eax,-4(%ebp)

	movl	%ebp,%eax
	addl	$-4,%eax
	movl	(%eax),%eax
	addl	$8,%eax
	addl	$0,%eax
	movl	(%eax),%eax
	movl	%eax,%ebx
	cmpl	$36,%ebx
	movl	$1,%eax
	je	type_IsAIntType_reltrue_22
	movl	$0,%eax
type_IsAIntType_reltrue_22	:	
	testl	%eax,%eax
	jnz	type_IsAIntType_ifbl_21
	jmp	type_IsAIntType_elsebl_21
type_IsAIntType_ifbl_21	:	

	movl	$1,%eax
	jmp	type_IsAIntType_ret
type_IsAIntType_elsebl_21	:	
type_IsAIntType_endif_21	:	

	movl	$0,%eax
	jmp	type_IsAIntType_ret
type_IsAIntType_ret	:	
	movl	%ebp,%esp
	popl	%ebp
	ret	

.globl	type_IsACharType
.type	type_IsACharType,@function
type_IsACharType	:	
	pushl	%ebp
	movl	%esp,%ebp
	subl	$4,%esp

	subl	$4,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	call	type_IsAPointerType
	addl	$4,%esp
	testl	%eax,%eax
	jnz	type_IsACharType_ifbl_23
	jmp	type_IsACharType_elsebl_23
type_IsACharType_ifbl_23	:	

	movl	$0,%eax
	jmp	type_IsACharType_ret
type_IsACharType_elsebl_23	:	
type_IsACharType_endif_23	:	

	subl	$8,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	$0,4(%esp)
	call	syntax_GetChild
	addl	$8,%esp
	movl	%eax,-4(%ebp)

	movl	%ebp,%eax
	addl	$-4,%eax
	movl	(%eax),%eax
	addl	$8,%eax
	addl	$0,%eax
	movl	(%eax),%eax
	movl	%eax,%ebx
	cmpl	$37,%ebx
	movl	$1,%eax
	je	type_IsACharType_reltrue_25
	movl	$0,%eax
type_IsACharType_reltrue_25	:	
	testl	%eax,%eax
	jnz	type_IsACharType_ifbl_24
	jmp	type_IsACharType_elsebl_24
type_IsACharType_ifbl_24	:	

	movl	$1,%eax
	jmp	type_IsACharType_ret
type_IsACharType_elsebl_24	:	
type_IsACharType_endif_24	:	

	movl	$0,%eax
	jmp	type_IsACharType_ret
type_IsACharType_ret	:	
	movl	%ebp,%esp
	popl	%ebp
	ret	

.globl	type_IsAStructType
.type	type_IsAStructType,@function
type_IsAStructType	:	
	pushl	%ebp
	movl	%esp,%ebp
	subl	$4,%esp

	movl	8(%ebp),%ebx
	cmpl	$0,%ebx
	movl	$1,%eax
	je	type_IsAStructType_reltrue_27
	movl	$0,%eax
type_IsAStructType_reltrue_27	:	
	testl	%eax,%eax
	jnz	type_IsAStructType_ifbl_26
	jmp	type_IsAStructType_elsebl_26
type_IsAStructType_ifbl_26	:	

	movl	$0,%eax
	jmp	type_IsAStructType_ret
type_IsAStructType_elsebl_26	:	
type_IsAStructType_endif_26	:	

	subl	$4,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	call	type_IsAPointerType
	addl	$4,%esp
	testl	%eax,%eax
	jnz	type_IsAStructType_ifbl_28
	jmp	type_IsAStructType_elsebl_28
type_IsAStructType_ifbl_28	:	

	movl	$0,%eax
	jmp	type_IsAStructType_ret
type_IsAStructType_elsebl_28	:	
type_IsAStructType_endif_28	:	

	subl	$8,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	$0,4(%esp)
	call	syntax_GetChild
	addl	$8,%esp
	movl	%eax,-4(%ebp)

	movl	%ebp,%eax
	addl	$-4,%eax
	movl	(%eax),%eax
	addl	$8,%eax
	addl	$0,%eax
	movl	(%eax),%eax
	movl	%eax,%ebx
	cmpl	$43,%ebx
	movl	$1,%eax
	je	type_IsAStructType_reltrue_30
	movl	$0,%eax
type_IsAStructType_reltrue_30	:	
	testl	%eax,%eax
	jnz	type_IsAStructType_ifbl_29
	jmp	type_IsAStructType_elsebl_29
type_IsAStructType_ifbl_29	:	

	movl	$1,%eax
	jmp	type_IsAStructType_ret
type_IsAStructType_elsebl_29	:	
type_IsAStructType_endif_29	:	

	movl	$0,%eax
	jmp	type_IsAStructType_ret
type_IsAStructType_ret	:	
	movl	%ebp,%esp
	popl	%ebp
	ret	

.globl	type_IsLongSized
.type	type_IsLongSized,@function
type_IsLongSized	:	
	pushl	%ebp
	movl	%esp,%ebp
	subl	$0,%esp

	movl	8(%ebp),%ebx
	cmpl	$0,%ebx
	movl	$1,%eax
	je	type_IsLongSized_reltrue_33
	movl	$0,%eax
type_IsLongSized_reltrue_33	:	
	testl	%eax,%eax
	jnz	type_IsLongSized_logexprtrue_32
	subl	$4,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	call	type_IsAPointerType
	addl	$4,%esp
	testl	%eax,%eax
	jnz	type_IsLongSized_logexprtrue_32
	subl	$4,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	call	type_IsAIntType
	addl	$4,%esp
	testl	%eax,%eax
	jnz	type_IsLongSized_logexprtrue_32
	movl	$0,%eax
	jmp	type_IsLongSized_logexprfalse_32
type_IsLongSized_logexprtrue_32	:	
	movl	$1,%eax
type_IsLongSized_logexprfalse_32	:	
	testl	%eax,%eax
	jnz	type_IsLongSized_ifbl_31
	jmp	type_IsLongSized_elsebl_31
type_IsLongSized_ifbl_31	:	

	movl	$1,%eax
	jmp	type_IsLongSized_ret
type_IsLongSized_elsebl_31	:	
type_IsLongSized_endif_31	:	

	movl	$0,%eax
	jmp	type_IsLongSized_ret
type_IsLongSized_ret	:	
	movl	%ebp,%esp
	popl	%ebp
	ret	

.globl	type_IsByteSized
.type	type_IsByteSized,@function
type_IsByteSized	:	
	pushl	%ebp
	movl	%esp,%ebp
	subl	$0,%esp

	movl	8(%ebp),%ebx
	cmpl	$0,%ebx
	movl	$1,%eax
	je	type_IsByteSized_reltrue_36
	movl	$0,%eax
type_IsByteSized_reltrue_36	:	
	testl	%eax,%eax
	jnz	type_IsByteSized_logexprtrue_35
	subl	$4,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	call	type_IsACharType
	addl	$4,%esp
	testl	%eax,%eax
	jnz	type_IsByteSized_logexprtrue_35
	movl	$0,%eax
	jmp	type_IsByteSized_logexprfalse_35
type_IsByteSized_logexprtrue_35	:	
	movl	$1,%eax
type_IsByteSized_logexprfalse_35	:	
	testl	%eax,%eax
	jnz	type_IsByteSized_ifbl_34
	jmp	type_IsByteSized_elsebl_34
type_IsByteSized_ifbl_34	:	

	movl	$1,%eax
	jmp	type_IsByteSized_ret
type_IsByteSized_elsebl_34	:	
type_IsByteSized_endif_34	:	

	movl	$0,%eax
	jmp	type_IsByteSized_ret
type_IsByteSized_ret	:	
	movl	%ebp,%esp
	popl	%ebp
	ret	

.globl	type_RemoveStarFromType
.type	type_RemoveStarFromType,@function
type_RemoveStarFromType	:	
	pushl	%ebp
	movl	%esp,%ebp
	subl	$12,%esp

	subl	$4,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	call	type_IsAPointerType
	addl	$4,%esp
	testl	%eax,%eax
	movl	$1,%eax
	jz	type_RemoveStarFromType_logfactfalse_38
	movl	$0,%eax
type_RemoveStarFromType_logfactfalse_38	:	
	testl	%eax,%eax
	jnz	type_RemoveStarFromType_ifbl_37
	jmp	type_RemoveStarFromType_elsebl_37
type_RemoveStarFromType_ifbl_37	:	

	movl	$0,%eax
	jmp	type_RemoveStarFromType_ret
type_RemoveStarFromType_elsebl_37	:	
type_RemoveStarFromType_endif_37	:	

	subl	$0,%esp
	call	syntax_CreateTreeNode
	addl	$0,%esp
	movl	%eax,-4(%ebp)

	movl	$0,-8(%ebp)

	subl	$4,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	call	syntax_CountChilds
	addl	$4,%esp
	movl	%eax,%ebx
	subl	$1,%ebx
	movl	%ebx,%eax
	movl	%eax,-12(%ebp)

type_RemoveStarFromType_while_39	:	
	movl	-8(%ebp),%ebx
	cmpl	-12(%ebp),%ebx
	movl	$1,%eax
	jl	type_RemoveStarFromType_reltrue_40
	movl	$0,%eax
type_RemoveStarFromType_reltrue_40	:	
	testl	%eax,%eax
	jz	type_RemoveStarFromType_endwhile_39

	subl	$8,%esp
	movl	-4(%ebp),%eax
	movl	%eax,0(%esp)
	subl	$4,%esp
	subl	$8,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	-8(%ebp),%eax
	movl	%eax,4(%esp)
	call	syntax_GetChild
	addl	$8,%esp
	movl	%eax,0(%esp)
	call	syntax_CopyTree
	addl	$4,%esp
	movl	%eax,4(%esp)
	call	syntax_AddChildTree
	addl	$8,%esp

	movl	-8(%ebp),%ebx
	addl	$1,%ebx
	movl	%ebx,%eax
	movl	%eax,-8(%ebp)
	jmp	type_RemoveStarFromType_while_39
type_RemoveStarFromType_endwhile_39	:	

	movl	-4(%ebp),%eax
	jmp	type_RemoveStarFromType_ret
type_RemoveStarFromType_ret	:	
	movl	%ebp,%esp
	popl	%ebp
	ret	

.globl	type_AddStarToType
.type	type_AddStarToType,@function
type_AddStarToType	:	
	pushl	%ebp
	movl	%esp,%ebp
	subl	$156,%esp

	subl	$0,%esp
	call	syntax_CreateTreeNode
	addl	$0,%esp
	movl	%eax,-4(%ebp)

	movl	$0,-8(%ebp)

	subl	$4,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	call	syntax_CountChilds
	addl	$4,%esp
	movl	%eax,-12(%ebp)

type_AddStarToType_while_41	:	
	movl	-8(%ebp),%ebx
	cmpl	-12(%ebp),%ebx
	movl	$1,%eax
	jl	type_AddStarToType_reltrue_42
	movl	$0,%eax
type_AddStarToType_reltrue_42	:	
	testl	%eax,%eax
	jz	type_AddStarToType_endwhile_41

	subl	$8,%esp
	movl	-4(%ebp),%eax
	movl	%eax,0(%esp)
	subl	$4,%esp
	subl	$8,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	-8(%ebp),%eax
	movl	%eax,4(%esp)
	call	syntax_GetChild
	addl	$8,%esp
	movl	%eax,0(%esp)
	call	syntax_CopyTree
	addl	$4,%esp
	movl	%eax,4(%esp)
	call	syntax_AddChildTree
	addl	$8,%esp

	movl	-8(%ebp),%ebx
	addl	$1,%ebx
	movl	%ebx,%eax
	movl	%eax,-8(%ebp)
	jmp	type_AddStarToType_while_41
type_AddStarToType_endwhile_41	:	

	subl	$8,%esp
	movl	%ebp,%eax
	addl	$-156,%eax
	addl	$16,%eax
	movl	%eax,0(%esp)
	movl	$symtab+0,4(%esp)
	call	strcpy
	addl	$8,%esp

	movl	%ebp,%eax
	addl	$-156,%eax
	addl	$0,%eax
	movl	%eax,%ebx
	movl	$18,(%ebx)

	subl	$148,%esp
	movl	-4(%ebp),%eax
	movl	%eax,0(%esp)
	movl	%ebp,%eax
	addl	$-156,%eax
	movl	%esp,%ebx
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	call	syntax_AddChildNode
	addl	$148,%esp

	movl	-4(%ebp),%eax
	jmp	type_AddStarToType_ret
type_AddStarToType_ret	:	
	movl	%ebp,%esp
	popl	%ebp
	ret	

.globl	type_CreateType
.type	type_CreateType,@function
type_CreateType	:	
	pushl	%ebp
	movl	%esp,%ebp
	subl	$12,%esp

	subl	$8,%esp
	subl	$8,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	$0,4(%esp)
	call	syntax_GetChild
	addl	$8,%esp
	movl	%eax,0(%esp)
	movl	$0,4(%esp)
	call	syntax_GetChild
	addl	$8,%esp
	movl	%eax,8(%ebp)

	subl	$0,%esp
	call	syntax_CreateTreeNode
	addl	$0,%esp
	movl	%eax,-4(%ebp)

	movl	$0,-8(%ebp)

	subl	$4,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	call	syntax_CountChilds
	addl	$4,%esp
	movl	%eax,-12(%ebp)

type_CreateType_while_43	:	
	movl	-8(%ebp),%ebx
	cmpl	-12(%ebp),%ebx
	movl	$1,%eax
	jl	type_CreateType_reltrue_44
	movl	$0,%eax
type_CreateType_reltrue_44	:	
	testl	%eax,%eax
	jz	type_CreateType_endwhile_43

	subl	$8,%esp
	movl	-4(%ebp),%eax
	movl	%eax,0(%esp)
	subl	$4,%esp
	subl	$8,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	-8(%ebp),%eax
	movl	%eax,4(%esp)
	call	syntax_GetChild
	addl	$8,%esp
	movl	%eax,0(%esp)
	call	syntax_CopyTree
	addl	$4,%esp
	movl	%eax,4(%esp)
	call	syntax_AddChildTree
	addl	$8,%esp

	movl	-8(%ebp),%ebx
	addl	$1,%ebx
	movl	%ebx,%eax
	movl	%eax,-8(%ebp)
	jmp	type_CreateType_while_43
type_CreateType_endwhile_43	:	

	movl	-4(%ebp),%eax
	jmp	type_CreateType_ret
type_CreateType_ret	:	
	movl	%ebp,%esp
	popl	%ebp
	ret	

.globl	type_GetMemberOffset
.type	type_GetMemberOffset,@function
type_GetMemberOffset	:	
	pushl	%ebp
	movl	%esp,%ebp
	subl	$4,%esp

	subl	$8,%esp
	movl	12(%ebp),%eax
	movl	%eax,0(%esp)
	movl	$0,4(%esp)
	call	syntax_GetChild
	addl	$8,%esp
	movl	%eax,12(%ebp)

	subl	$148,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	%ebp,%eax
	addl	$12,%eax
	movl	(%eax),%eax
	addl	$8,%eax
	movl	%esp,%ebx
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	call	symbol_FindStruct
	addl	$148,%esp
	movl	%eax,-4(%ebp)

	movl	-4(%ebp),%ebx
	cmpl	$0,%ebx
	movl	$1,%eax
	je	type_GetMemberOffset_reltrue_46
	movl	$0,%eax
type_GetMemberOffset_reltrue_46	:	
	testl	%eax,%eax
	jnz	type_GetMemberOffset_ifbl_45
	jmp	type_GetMemberOffset_elsebl_45
type_GetMemberOffset_ifbl_45	:	

	movl	$0,%ebx
	subl	$1,%ebx
	movl	%ebx,%eax
	jmp	type_GetMemberOffset_ret
type_GetMemberOffset_elsebl_45	:	
type_GetMemberOffset_endif_45	:	

	subl	$152,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	-4(%ebp),%eax
	movl	%eax,4(%esp)
	movl	%ebp,%eax
	addl	$16,%eax
	movl	%esp,%ebx
	addl	$8,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	call	symbol_GetOffsetInStruct
	addl	$152,%esp
	jmp	type_GetMemberOffset_ret
type_GetMemberOffset_ret	:	
	movl	%ebp,%esp
	popl	%ebp
	ret	

.globl	type_GetMemberDeclaration
.type	type_GetMemberDeclaration,@function
type_GetMemberDeclaration	:	
	pushl	%ebp
	movl	%esp,%ebp
	subl	$4,%esp

	subl	$8,%esp
	movl	12(%ebp),%eax
	movl	%eax,0(%esp)
	movl	$0,4(%esp)
	call	syntax_GetChild
	addl	$8,%esp
	movl	%eax,12(%ebp)

	subl	$148,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	%ebp,%eax
	addl	$12,%eax
	movl	(%eax),%eax
	addl	$8,%eax
	movl	%esp,%ebx
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	call	symbol_FindStruct
	addl	$148,%esp
	movl	%eax,-4(%ebp)

	movl	-4(%ebp),%ebx
	cmpl	$0,%ebx
	movl	$1,%eax
	je	type_GetMemberDeclaration_reltrue_48
	movl	$0,%eax
type_GetMemberDeclaration_reltrue_48	:	
	testl	%eax,%eax
	jnz	type_GetMemberDeclaration_ifbl_47
	jmp	type_GetMemberDeclaration_elsebl_47
type_GetMemberDeclaration_ifbl_47	:	

	movl	$0,%eax
	jmp	type_GetMemberDeclaration_ret
type_GetMemberDeclaration_elsebl_47	:	
type_GetMemberDeclaration_endif_47	:	

	subl	$152,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	-4(%ebp),%eax
	movl	%eax,4(%esp)
	movl	%ebp,%eax
	addl	$16,%eax
	movl	%esp,%ebx
	addl	$8,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	call	symbol_GetMemberDeclInStruct
	addl	$152,%esp
	jmp	type_GetMemberDeclaration_ret
type_GetMemberDeclaration_ret	:	
	movl	%ebp,%esp
	popl	%ebp
	ret	

.globl	type_CountVarexprResolutions
.type	type_CountVarexprResolutions,@function
type_CountVarexprResolutions	:	
	pushl	%ebp
	movl	%esp,%ebp
	subl	$8,%esp

	subl	$4,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	call	syntax_CountChilds
	addl	$4,%esp
	movl	%eax,-4(%ebp)

	subl	$8,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	-4(%ebp),%ebx
	subl	$1,%ebx
	movl	%ebx,%eax
	movl	%eax,4(%esp)
	call	syntax_GetChild
	addl	$8,%esp
	movl	%eax,-8(%ebp)

	movl	%ebp,%eax
	addl	$-8,%eax
	movl	(%eax),%eax
	addl	$8,%eax
	addl	$0,%eax
	movl	(%eax),%eax
	movl	%eax,%ebx
	cmpl	$4,%ebx
	movl	$1,%eax
	je	type_CountVarexprResolutions_reltrue_50
	movl	$0,%eax
type_CountVarexprResolutions_reltrue_50	:	
	testl	%eax,%eax
	jnz	type_CountVarexprResolutions_ifbl_49
	jmp	type_CountVarexprResolutions_elsebl_49
type_CountVarexprResolutions_ifbl_49	:	

	movl	-4(%ebp),%ebx
	subl	$3,%ebx
	movl	%ebx,%eax
	movl	%eax,-4(%ebp)
	jmp	type_CountVarexprResolutions_endif_49
type_CountVarexprResolutions_elsebl_49	:	
type_CountVarexprResolutions_endif_49	:	

	subl	$8,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	$0,4(%esp)
	call	syntax_GetChild
	addl	$8,%esp
	movl	%eax,-8(%ebp)

	movl	%ebp,%eax
	addl	$-8,%eax
	movl	(%eax),%eax
	addl	$8,%eax
	addl	$0,%eax
	movl	(%eax),%eax
	movl	%eax,%ebx
	cmpl	$18,%ebx
	movl	$1,%eax
	je	type_CountVarexprResolutions_reltrue_53
	movl	$0,%eax
type_CountVarexprResolutions_reltrue_53	:	
	testl	%eax,%eax
	jnz	type_CountVarexprResolutions_logexprtrue_52
	movl	%ebp,%eax
	addl	$-8,%eax
	movl	(%eax),%eax
	addl	$8,%eax
	addl	$0,%eax
	movl	(%eax),%eax
	movl	%eax,%ebx
	cmpl	$21,%ebx
	movl	$1,%eax
	je	type_CountVarexprResolutions_reltrue_54
	movl	$0,%eax
type_CountVarexprResolutions_reltrue_54	:	
	testl	%eax,%eax
	jnz	type_CountVarexprResolutions_logexprtrue_52
	movl	$0,%eax
	jmp	type_CountVarexprResolutions_logexprfalse_52
type_CountVarexprResolutions_logexprtrue_52	:	
	movl	$1,%eax
type_CountVarexprResolutions_logexprfalse_52	:	
	testl	%eax,%eax
	jnz	type_CountVarexprResolutions_ifbl_51
	jmp	type_CountVarexprResolutions_elsebl_51
type_CountVarexprResolutions_ifbl_51	:	

	movl	-4(%ebp),%ebx
	subl	$1,%ebx
	movl	%ebx,%eax
	movl	%eax,-4(%ebp)
	jmp	type_CountVarexprResolutions_endif_51
type_CountVarexprResolutions_elsebl_51	:	
type_CountVarexprResolutions_endif_51	:	

	movl	-4(%ebp),%ebx
	addl	$1,%ebx
	movl	%ebx,%eax
	pushl	%eax
	movl	$2,%eax
	movl	%eax,%ebx
	popl	%eax
	movl	$0,%edx
	idivl	%ebx
	jmp	type_CountVarexprResolutions_ret
type_CountVarexprResolutions_ret	:	
	movl	%ebp,%esp
	popl	%ebp
	ret	

.globl	type_ConvertSinglechar
.type	type_ConvertSinglechar,@function
type_ConvertSinglechar	:	
	pushl	%ebp
	movl	%esp,%ebp
	subl	$2,%esp

	pushl	$1
	movl	%ebp,%eax
	addl	$8,%eax
	movl	(%eax),%eax
	popl	%esi
	addl	%esi,%eax
	movb	(%eax),%al
	movb	%al,-1(%ebp)

	movsbl	-1(%ebp),%eax
	movl	%eax,%ebx
	cmpl	$92,%ebx
	movl	$1,%eax
	je	type_ConvertSinglechar_reltrue_56
	movl	$0,%eax
type_ConvertSinglechar_reltrue_56	:	
	testl	%eax,%eax
	jnz	type_ConvertSinglechar_ifbl_55
	jmp	type_ConvertSinglechar_elsebl_55
type_ConvertSinglechar_ifbl_55	:	

	pushl	$2
	movl	%ebp,%eax
	addl	$8,%eax
	movl	(%eax),%eax
	popl	%esi
	addl	%esi,%eax
	movb	(%eax),%al
	movb	%al,-2(%ebp)

	movsbl	-2(%ebp),%eax
	movl	%eax,%ebx
	cmpl	$110,%ebx
	movl	$1,%eax
	je	type_ConvertSinglechar_reltrue_58
	movl	$0,%eax
type_ConvertSinglechar_reltrue_58	:	
	testl	%eax,%eax
	jnz	type_ConvertSinglechar_ifbl_57
	jmp	type_ConvertSinglechar_elsebl_57
type_ConvertSinglechar_ifbl_57	:	

	movl	$10,%eax
	jmp	type_ConvertSinglechar_ret
type_ConvertSinglechar_elsebl_57	:	
type_ConvertSinglechar_endif_57	:	

	movsbl	-2(%ebp),%eax
	movl	%eax,%ebx
	cmpl	$114,%ebx
	movl	$1,%eax
	je	type_ConvertSinglechar_reltrue_60
	movl	$0,%eax
type_ConvertSinglechar_reltrue_60	:	
	testl	%eax,%eax
	jnz	type_ConvertSinglechar_ifbl_59
	jmp	type_ConvertSinglechar_elsebl_59
type_ConvertSinglechar_ifbl_59	:	

	movl	$13,%eax
	jmp	type_ConvertSinglechar_ret
type_ConvertSinglechar_elsebl_59	:	
type_ConvertSinglechar_endif_59	:	

	movsbl	-2(%ebp),%eax
	movl	%eax,%ebx
	cmpl	$116,%ebx
	movl	$1,%eax
	je	type_ConvertSinglechar_reltrue_62
	movl	$0,%eax
type_ConvertSinglechar_reltrue_62	:	
	testl	%eax,%eax
	jnz	type_ConvertSinglechar_ifbl_61
	jmp	type_ConvertSinglechar_elsebl_61
type_ConvertSinglechar_ifbl_61	:	

	movl	$9,%eax
	jmp	type_ConvertSinglechar_ret
type_ConvertSinglechar_elsebl_61	:	
type_ConvertSinglechar_endif_61	:	

	movsbl	-2(%ebp),%eax
	movl	%eax,%ebx
	cmpl	$92,%ebx
	movl	$1,%eax
	je	type_ConvertSinglechar_reltrue_64
	movl	$0,%eax
type_ConvertSinglechar_reltrue_64	:	
	testl	%eax,%eax
	jnz	type_ConvertSinglechar_ifbl_63
	jmp	type_ConvertSinglechar_elsebl_63
type_ConvertSinglechar_ifbl_63	:	

	movl	$92,%eax
	jmp	type_ConvertSinglechar_ret
type_ConvertSinglechar_elsebl_63	:	
type_ConvertSinglechar_endif_63	:	

	movsbl	-2(%ebp),%eax
	movl	%eax,%ebx
	cmpl	$98,%ebx
	movl	$1,%eax
	je	type_ConvertSinglechar_reltrue_66
	movl	$0,%eax
type_ConvertSinglechar_reltrue_66	:	
	testl	%eax,%eax
	jnz	type_ConvertSinglechar_ifbl_65
	jmp	type_ConvertSinglechar_elsebl_65
type_ConvertSinglechar_ifbl_65	:	

	movl	$8,%eax
	jmp	type_ConvertSinglechar_ret
type_ConvertSinglechar_elsebl_65	:	
type_ConvertSinglechar_endif_65	:	

	movsbl	-2(%ebp),%eax
	movl	%eax,%ebx
	cmpl	$39,%ebx
	movl	$1,%eax
	je	type_ConvertSinglechar_reltrue_68
	movl	$0,%eax
type_ConvertSinglechar_reltrue_68	:	
	testl	%eax,%eax
	jnz	type_ConvertSinglechar_ifbl_67
	jmp	type_ConvertSinglechar_elsebl_67
type_ConvertSinglechar_ifbl_67	:	

	movl	$39,%eax
	jmp	type_ConvertSinglechar_ret
type_ConvertSinglechar_elsebl_67	:	
type_ConvertSinglechar_endif_67	:	

	movsbl	-2(%ebp),%eax
	movl	%eax,%ebx
	cmpl	$34,%ebx
	movl	$1,%eax
	je	type_ConvertSinglechar_reltrue_70
	movl	$0,%eax
type_ConvertSinglechar_reltrue_70	:	
	testl	%eax,%eax
	jnz	type_ConvertSinglechar_ifbl_69
	jmp	type_ConvertSinglechar_elsebl_69
type_ConvertSinglechar_ifbl_69	:	

	movl	$34,%eax
	jmp	type_ConvertSinglechar_ret
type_ConvertSinglechar_elsebl_69	:	
type_ConvertSinglechar_endif_69	:	

	movsbl	-2(%ebp),%eax
	movl	%eax,%ebx
	cmpl	$48,%ebx
	movl	$1,%eax
	je	type_ConvertSinglechar_reltrue_72
	movl	$0,%eax
type_ConvertSinglechar_reltrue_72	:	
	testl	%eax,%eax
	jnz	type_ConvertSinglechar_ifbl_71
	jmp	type_ConvertSinglechar_elsebl_71
type_ConvertSinglechar_ifbl_71	:	

	movl	$0,%eax
	jmp	type_ConvertSinglechar_ret
type_ConvertSinglechar_elsebl_71	:	
type_ConvertSinglechar_endif_71	:	

	movsbl	-2(%ebp),%eax
	jmp	type_ConvertSinglechar_ret
type_ConvertSinglechar_elsebl_55	:	
type_ConvertSinglechar_endif_55	:	

	movsbl	-1(%ebp),%eax
	jmp	type_ConvertSinglechar_ret
type_ConvertSinglechar_ret	:	
	movl	%ebp,%esp
	popl	%ebp
	ret	

.section	.data
symtab	:	
.string	"*"
