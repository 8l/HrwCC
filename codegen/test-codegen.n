# gas-assembler code generated by HrwCC

.section .text
	#debug: func-def: ( int argc , char * * argv ) 
.globl main
.type main, @function
main:
	pushl	%ebp
	movl	%esp, %ebp
	subl	$21800, %esp


	#debug: if: argc == 1 
	pushl	8(%ebp)
	popl	%ebx
	cmpl	$1, %ebx
	movl	$1, %eax
	je	main_reltrue_1
	movl	$0, %eax
main_reltrue_1:
	testl	%eax, %eax
	jnz	main_ifbl_0
	jmp	main_elsebl_0
main_ifbl_0:
	#debug: func-call: strcpy ( inputfile , "testdata/main.c" ) 
	subl	$8, %esp
	movl	%ebp, %eax
	addl	$-21792, %eax
	movl	%eax, 0(%esp)
	movl	$symtab+0, 4(%esp)
	call	strcpy
	addl	$8, %esp
	jmp	main_endif_0

main_elsebl_0:

	#debug: func-call: strcpy ( inputfile , argv [ 1 ] ) 
	subl	$8, %esp
	movl	%ebp, %eax
	addl	$-21792, %eax
	movl	%eax, 0(%esp)
	pushl	$1
	movl	%ebp, %eax
	addl	$12, %eax
	movl	(%eax), %eax
	popl	%esi
	imull	$4, %esi
	addl	%esi, %eax
	movl	(%eax), %eax
	movl	%eax, 4(%esp)
	call	strcpy
	addl	$8, %esp
main_endif_0:

	#debug: func-call: printf ( "Compiling %s:\n" , inputfile ) 
	subl	$8, %esp
	movl	$symtab+16, 0(%esp)
	movl	%ebp, %eax
	addl	$-21792, %eax
	movl	%eax, 4(%esp)
	call	printf
	addl	$8, %esp
	#debug: func-call: puts ( "Create preproc..." ) 
	subl	$4, %esp
	movl	$symtab+31, 0(%esp)
	call	puts
	addl	$4, %esp
	#debug: if: preproc_create ( & testpreproc , inputfile ) 
	subl	$8, %esp
	movl	%ebp, %eax
	addl	$-20728, %eax
	movl	%eax, 0(%esp)
	movl	%ebp, %eax
	addl	$-21792, %eax
	movl	%eax, 4(%esp)
	call	preproc_create
	addl	$8, %esp
	testl	%eax, %eax
	jnz	main_ifbl_2
	jmp	main_elsebl_2
main_ifbl_2:
	#debug: return: return - 1 ; 
	pushl	$0
	popl	%ebx
	subl	$1, %ebx
	pushl	%ebx
	popl	%eax
	jmp	main_ret
	jmp	main_endif_2

main_elsebl_2:

main_endif_2:

	#debug: func-call: preproc_addDefine ( & testpreproc , "__HRWCC__" ) 
	subl	$8, %esp
	movl	%ebp, %eax
	addl	$-20728, %eax
	movl	%eax, 0(%esp)
	movl	$symtab+49, 4(%esp)
	call	preproc_addDefine
	addl	$8, %esp
	#debug: func-call: puts ( "Init scanner..." ) 
	subl	$4, %esp
	movl	$symtab+59, 0(%esp)
	call	puts
	addl	$4, %esp
	#debug: func-call: scanner_init ( & testscanner , & testpreproc ) 
	subl	$8, %esp
	movl	%ebp, %eax
	addl	$-20749, %eax
	movl	%eax, 0(%esp)
	movl	%ebp, %eax
	addl	$-20728, %eax
	movl	%eax, 4(%esp)
	call	scanner_init
	addl	$8, %esp
	#debug: func-call: puts ( "Init parser..." ) 
	subl	$4, %esp
	movl	$symtab+75, 0(%esp)
	call	puts
	addl	$4, %esp
	#debug: func-call: parser_init ( & testparser , & testscanner ) 
	subl	$8, %esp
	movl	%ebp, %eax
	addl	$-21345, %eax
	movl	%eax, 0(%esp)
	movl	%ebp, %eax
	addl	$-20749, %eax
	movl	%eax, 4(%esp)
	call	parser_init
	addl	$8, %esp
	#debug: func-call: puts ( "Create symbol table...\n" ) 
	subl	$4, %esp
	movl	$symtab+90, 0(%esp)
	call	puts
	addl	$4, %esp
	#debug: func-call: symbol_CreateSymbolTable ( & testparser , & testsymtable ) 
	subl	$8, %esp
	movl	%ebp, %eax
	addl	$-21345, %eax
	movl	%eax, 0(%esp)
	movl	%ebp, %eax
	addl	$-21361, %eax
	movl	%eax, 4(%esp)
	call	symbol_CreateSymbolTable
	addl	$8, %esp
	#debug: func-call: parser_setSymbolTable ( & testparser , & testsymtable ) 
	subl	$8, %esp
	movl	%ebp, %eax
	addl	$-21345, %eax
	movl	%eax, 0(%esp)
	movl	%ebp, %eax
	addl	$-21361, %eax
	movl	%eax, 4(%esp)
	call	parser_setSymbolTable
	addl	$8, %esp
	#debug: func-call: puts ( "Create code generator...\n" ) 
	subl	$4, %esp
	movl	$symtab+114, 0(%esp)
	call	puts
	addl	$4, %esp
	#debug: assignment: fd = open ( "./output.s" , 64 | 512 | 1 , 6 * 8 * 8 + 6 * 8 + 4 ) ; 
	subl	$12, %esp
	movl	$symtab+140, 0(%esp)
	pushl	$64
	popl	%ebx
	orl	$512, %ebx
	pushl	%ebx
	popl	%ebx
	orl	$1, %ebx
	pushl	%ebx
	popl	%eax
	movl	%eax, 4(%esp)
	pushl	$6
	popl	%ebx
	imull	$8, %ebx
	pushl	%ebx
	popl	%ebx
	imull	$8, %ebx
	pushl	%ebx
	popl	%eax
	pushl	%eax
	pushl	$6
	popl	%ebx
	imull	$8, %ebx
	pushl	%ebx
	popl	%eax
	popl	%ebx
	addl	%eax, %ebx
	pushl	%ebx
	popl	%ebx
	addl	$4, %ebx
	pushl	%ebx
	popl	%eax
	movl	%eax, 8(%esp)
	call	open
	addl	$12, %esp
	movl	%eax, -21800(%ebp)
	#debug: func-call: codegen_CreateCodeGen ( & testcg , fd , & testparser ) 
	subl	$12, %esp
	movl	%ebp, %eax
	addl	$-21537, %eax
	movl	%eax, 0(%esp)
	movl	-21800(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%ebp, %eax
	addl	$-21345, %eax
	movl	%eax, 8(%esp)
	call	codegen_CreateCodeGen
	addl	$12, %esp
	#debug: func-call: parser_setCodegen ( & testparser , & testcg ) 
	subl	$8, %esp
	movl	%ebp, %eax
	addl	$-21345, %eax
	movl	%eax, 0(%esp)
	movl	%ebp, %eax
	addl	$-21537, %eax
	movl	%eax, 4(%esp)
	call	parser_setCodegen
	addl	$8, %esp
	#debug: assignment: testcg . emitdebug = 1 ; 
	movl	%ebp, %eax
	addl	$-21537, %eax
	addl	$12, %eax
	pushl	%eax
	popl	%ebx
	movl	$1, (%ebx)
	#debug: assignment: testcg . enOptFastassign = 1 ; 
	movl	%ebp, %eax
	addl	$-21537, %eax
	addl	$16, %eax
	pushl	%eax
	popl	%ebx
	movl	$1, (%ebx)
	#debug: assignment: tree = syntax_CreateTreeNode ( ) ; 
	subl	$0, %esp
	call	syntax_CreateTreeNode
	addl	$0, %esp
	movl	%eax, -21796(%ebp)
	#debug: func-call: parser_buildSyntaxTree ( & testparser , tree ) 
	subl	$8, %esp
	movl	%ebp, %eax
	addl	$-21345, %eax
	movl	%eax, 0(%esp)
	movl	-21796(%ebp), %eax
	movl	%eax, 4(%esp)
	call	parser_buildSyntaxTree
	addl	$8, %esp
	#debug: func-call: printf ( "\nDetected %d parser errors.\n" , testparser . cnterrors ) 
	subl	$8, %esp
	movl	$symtab+151, 0(%esp)
	movl	%ebp, %eax
	addl	$-21345, %eax
	addl	$12, %eax
	movl	(%eax), %eax
	movl	%eax, 4(%esp)
	call	printf
	addl	$8, %esp
	#debug: func-call: printf ( "Detected %d symbol errors.\n" , testsymtable . cnterrors ) 
	subl	$8, %esp
	movl	$symtab+180, 0(%esp)
	movl	%ebp, %eax
	addl	$-21361, %eax
	addl	$4, %eax
	movl	(%eax), %eax
	movl	%eax, 4(%esp)
	call	printf
	addl	$8, %esp
	#debug: func-call: printf ( "Detected %d codegen errors.\n" , testcg . cnterrors ) 
	subl	$8, %esp
	movl	$symtab+208, 0(%esp)
	movl	%ebp, %eax
	addl	$-21537, %eax
	addl	$4, %eax
	movl	(%eax), %eax
	movl	%eax, 4(%esp)
	call	printf
	addl	$8, %esp
	#debug: func-call: printf ( "Detected %d codegen warnings.\n" , testcg . cntwarnings ) 
	subl	$8, %esp
	movl	$symtab+237, 0(%esp)
	movl	%ebp, %eax
	addl	$-21537, %eax
	addl	$8, %eax
	movl	(%eax), %eax
	movl	%eax, 4(%esp)
	call	printf
	addl	$8, %esp
	#debug: func-call: syntax_FreeSyntaxTree ( tree ) 
	subl	$4, %esp
	movl	-21796(%ebp), %eax
	movl	%eax, 0(%esp)
	call	syntax_FreeSyntaxTree
	addl	$4, %esp
	#debug: func-call: symbol_destroy ( & testsymtable ) 
	subl	$4, %esp
	movl	%ebp, %eax
	addl	$-21361, %eax
	movl	%eax, 0(%esp)
	call	symbol_destroy
	addl	$4, %esp
	#debug: func-call: preproc_destroy ( & testpreproc ) 
	subl	$4, %esp
	movl	%ebp, %eax
	addl	$-20728, %eax
	movl	%eax, 0(%esp)
	call	preproc_destroy
	addl	$4, %esp
	#debug: func-call: close ( fd ) 
	subl	$4, %esp
	movl	-21800(%ebp), %eax
	movl	%eax, 0(%esp)
	call	close
	addl	$4, %esp
	#debug: return: return 0 ; 
	movl	$0, %eax
	jmp	main_ret


main_ret:
	movl	%ebp, %esp
	popl	%ebp
	ret




# The symbol table 

.section .data
symtab:
	.string	"testdata/main.c"
	.string	"Compiling %s:\n"
	.string	"Create preproc..."
	.string	"__HRWCC__"
	.string	"Init scanner..."
	.string	"Init parser..."
	.string	"Create symbol table...\n"
	.string	"Create code generator...\n"
	.string	"./output.s"
	.string	"\nDetected %d parser errors.\n"
	.string	"Detected %d symbol errors.\n"
	.string	"Detected %d codegen errors.\n"
	.string	"Detected %d codegen warnings.\n"

