
.section	.text

.globl	report_error
.type	report_error,@function
report_error	:	
	pushl	%ebp
	movl	%esp,%ebp
	subl	$4,%esp

	movl	%ebp,%eax
	addl	$8,%eax
	movl	(%eax),%eax
	addl	$12,%eax
	pushl	%eax
	movl	%ebp,%eax
	addl	$8,%eax
	movl	(%eax),%eax
	addl	$12,%eax
	movl	(%eax),%eax
	movl	%eax,%ebx
	addl	$1,%ebx
	movl	%ebx,%eax
	popl	%ebx
	movl	%eax,(%ebx)

	movl	%ebp,%eax
	addl	$8,%eax
	movl	(%eax),%eax
	addl	$16,%eax
	movl	(%eax),%eax
	addl	$0,%eax
	movl	(%eax),%eax
	movl	%eax,%ebx
	cmpl	$0,%ebx
	movl	$1,%eax
	jl	report_error_reltrue_1
	movl	$0,%eax
report_error_reltrue_1	:	
	testl	%eax,%eax
	jnz	report_error_ifbl_0
	jmp	report_error_elsebl_0
report_error_ifbl_0	:	

	jmp	report_error_ret
report_error_elsebl_0	:	
report_error_endif_0	:	

	subl	$8,%esp
	movl	%ebp,%eax
	addl	$8,%eax
	movl	(%eax),%eax
	addl	$0,%eax
	movl	(%eax),%eax
	addl	$17,%eax
	movl	(%eax),%eax
	movl	%eax,0(%esp)
	movl	%ebp,%eax
	addl	$8,%eax
	movl	(%eax),%eax
	addl	$16,%eax
	movl	(%eax),%eax
	addl	$12,%eax
	movl	(%eax),%eax
	movl	%eax,4(%esp)
	call	preproc_getFilename
	addl	$8,%esp
	movl	%eax,-4(%ebp)

	subl	$8,%esp
	movl	$symtab+0,0(%esp)
	movl	%ebp,%eax
	addl	$8,%eax
	movl	(%eax),%eax
	addl	$16,%eax
	movl	(%eax),%eax
	addl	$4,%eax
	movl	(%eax),%eax
	movl	%eax,4(%esp)
	call	printf
	addl	$8,%esp

	subl	$8,%esp
	movl	$symtab+19,0(%esp)
	movl	%ebp,%eax
	addl	$8,%eax
	movl	(%eax),%eax
	addl	$16,%eax
	movl	(%eax),%eax
	addl	$8,%eax
	movl	(%eax),%eax
	movl	%eax,4(%esp)
	call	printf
	addl	$8,%esp

	movl	-4(%ebp),%eax
	testl	%eax,%eax
	jnz	report_error_ifbl_2
	jmp	report_error_elsebl_2
report_error_ifbl_2	:	

	subl	$8,%esp
	movl	$symtab+24,0(%esp)
	movl	-4(%ebp),%eax
	movl	%eax,4(%esp)
	call	printf
	addl	$8,%esp
	jmp	report_error_endif_2
report_error_elsebl_2	:	

	subl	$8,%esp
	movl	$symtab+29,0(%esp)
	movl	-4(%ebp),%eax
	movl	%eax,4(%esp)
	call	printf
	addl	$8,%esp
report_error_endif_2	:	

	subl	$8,%esp
	movl	$symtab+50,0(%esp)
	movl	%ebp,%eax
	addl	$8,%eax
	movl	(%eax),%eax
	addl	$16,%eax
	movl	(%eax),%eax
	addl	$16,%eax
	movl	%eax,4(%esp)
	call	printf
	addl	$8,%esp

	subl	$8,%esp
	movl	$symtab+71,0(%esp)
	movl	12(%ebp),%eax
	movl	%eax,4(%esp)
	call	printf
	addl	$8,%esp
report_error_ret	:	
	movl	%ebp,%esp
	popl	%ebp
	ret	

.globl	parse_tracemsg
.type	parse_tracemsg,@function
parse_tracemsg	:	
	pushl	%ebp
	movl	%esp,%ebp
	subl	$4,%esp

	pushl	$0
	movl	%ebp,%eax
	addl	$8,%eax
	movl	(%eax),%eax
	addl	$20,%eax
	popl	%esi
	imull	$144,%esi
	addl	%esi,%eax
	movl	%eax,-4(%ebp)
parse_tracemsg_ret	:	
	movl	%ebp,%esp
	popl	%ebp
	ret	

.globl	eatToken
.type	eatToken,@function
eatToken	:	
	pushl	%ebp
	movl	%esp,%ebp
	subl	$4,%esp

	movl	$0,-4(%ebp)

eatToken_while_3	:	
	pushl	-4(%ebp)
	movl	$4,%ebx
	subl	$1,%ebx
	movl	%ebx,%eax
	popl	%ebx
	cmpl	%eax,%ebx
	movl	$1,%eax
	jl	eatToken_reltrue_4
	movl	$0,%eax
eatToken_reltrue_4	:	
	testl	%eax,%eax
	jz	eatToken_endwhile_3

	pushl	-4(%ebp)
	movl	%ebp,%eax
	addl	$8,%eax
	movl	(%eax),%eax
	addl	$20,%eax
	popl	%esi
	imull	$144,%esi
	addl	%esi,%eax
	pushl	%eax
	movl	-4(%ebp),%ebx
	addl	$1,%ebx
	movl	%ebx,%eax
	pushl	%eax
	movl	%ebp,%eax
	addl	$8,%eax
	movl	(%eax),%eax
	addl	$20,%eax
	popl	%esi
	imull	$144,%esi
	addl	%esi,%eax
	popl	%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx

	movl	-4(%ebp),%ebx
	addl	$1,%ebx
	movl	%ebx,%eax
	movl	%eax,-4(%ebp)
	jmp	eatToken_while_3
eatToken_endwhile_3	:	

	subl	$8,%esp
	movl	%ebp,%eax
	addl	$8,%eax
	movl	(%eax),%eax
	addl	$0,%eax
	movl	(%eax),%eax
	movl	%eax,0(%esp)
	movl	$4,%ebx
	subl	$1,%ebx
	movl	%ebx,%eax
	pushl	%eax
	movl	%ebp,%eax
	addl	$8,%eax
	movl	(%eax),%eax
	addl	$20,%eax
	popl	%esi
	imull	$144,%esi
	addl	%esi,%eax
	movl	%eax,4(%esp)
	call	scanner_getToken
	addl	$8,%esp
eatToken_ret	:	
	movl	%ebp,%esp
	popl	%ebp
	ret	

.globl	addAndEatToken
.type	addAndEatToken,@function
addAndEatToken	:	
	pushl	%ebp
	movl	%esp,%ebp
	subl	$0,%esp

	subl	$8,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	$symtab+75,4(%esp)
	call	parse_tracemsg
	addl	$8,%esp

	subl	$148,%esp
	movl	12(%ebp),%eax
	movl	%eax,0(%esp)
	pushl	$0
	movl	%ebp,%eax
	addl	$8,%eax
	movl	(%eax),%eax
	addl	$20,%eax
	popl	%esi
	imull	$144,%esi
	addl	%esi,%eax
	movl	%esp,%ebx
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	call	syntax_AddChildNode
	addl	$148,%esp

	subl	$4,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	call	eatToken
	addl	$4,%esp
addAndEatToken_ret	:	
	movl	%ebp,%esp
	popl	%ebp
	ret	

.globl	addAndEatSpecificToken
.type	addAndEatSpecificToken,@function
addAndEatSpecificToken	:	
	pushl	%ebp
	movl	%esp,%ebp
	subl	$0,%esp

	movl	%ebp,%eax
	addl	$8,%eax
	movl	(%eax),%eax
	addl	$16,%eax
	movl	(%eax),%eax
	addl	$0,%eax
	movl	(%eax),%eax
	movl	%eax,%ebx
	cmpl	16(%ebp),%ebx
	movl	$1,%eax
	jne	addAndEatSpecificToken_reltrue_6
	movl	$0,%eax
addAndEatSpecificToken_reltrue_6	:	
	testl	%eax,%eax
	jnz	addAndEatSpecificToken_ifbl_5
	jmp	addAndEatSpecificToken_elsebl_5
addAndEatSpecificToken_ifbl_5	:	

	subl	$8,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	20(%ebp),%eax
	movl	%eax,4(%esp)
	call	report_error
	addl	$8,%esp

	movl	$0,%ebx
	subl	$1,%ebx
	movl	%ebx,%eax
	jmp	addAndEatSpecificToken_ret
addAndEatSpecificToken_elsebl_5	:	
addAndEatSpecificToken_endif_5	:	

	subl	$8,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	12(%ebp),%eax
	movl	%eax,4(%esp)
	call	addAndEatToken
	addl	$8,%esp

	movl	$0,%eax
	jmp	addAndEatSpecificToken_ret
addAndEatSpecificToken_ret	:	
	movl	%ebp,%esp
	popl	%ebp
	ret	

.globl	sync_toStrongKeyword
.type	sync_toStrongKeyword,@function
sync_toStrongKeyword	:	
	pushl	%ebp
	movl	%esp,%ebp
	subl	$0,%esp

	subl	$8,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	$symtab+87,4(%esp)
	call	parse_tracemsg
	addl	$8,%esp

	subl	$4,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	call	eatToken
	addl	$4,%esp

sync_toStrongKeyword_while_7	:	
	movl	%ebp,%eax
	addl	$8,%eax
	movl	(%eax),%eax
	addl	$16,%eax
	movl	(%eax),%eax
	addl	$0,%eax
	movl	(%eax),%eax
	movl	%eax,%ebx
	cmpl	$0,%ebx
	movl	$1,%eax
	jne	sync_toStrongKeyword_reltrue_9
	movl	$0,%eax
sync_toStrongKeyword_reltrue_9	:	
	testl	%eax,%eax
	jz	sync_toStrongKeyword_logtermfalse_8
	movl	%ebp,%eax
	addl	$8,%eax
	movl	(%eax),%eax
	addl	$16,%eax
	movl	(%eax),%eax
	addl	$0,%eax
	movl	(%eax),%eax
	movl	%eax,%ebx
	cmpl	$2,%ebx
	movl	$1,%eax
	jne	sync_toStrongKeyword_reltrue_10
	movl	$0,%eax
sync_toStrongKeyword_reltrue_10	:	
	testl	%eax,%eax
	jz	sync_toStrongKeyword_logtermfalse_8
	movl	%ebp,%eax
	addl	$8,%eax
	movl	(%eax),%eax
	addl	$16,%eax
	movl	(%eax),%eax
	addl	$0,%eax
	movl	(%eax),%eax
	movl	%eax,%ebx
	cmpl	$36,%ebx
	movl	$1,%eax
	jne	sync_toStrongKeyword_reltrue_11
	movl	$0,%eax
sync_toStrongKeyword_reltrue_11	:	
	testl	%eax,%eax
	jz	sync_toStrongKeyword_logtermfalse_8
	movl	%ebp,%eax
	addl	$8,%eax
	movl	(%eax),%eax
	addl	$16,%eax
	movl	(%eax),%eax
	addl	$0,%eax
	movl	(%eax),%eax
	movl	%eax,%ebx
	cmpl	$37,%ebx
	movl	$1,%eax
	jne	sync_toStrongKeyword_reltrue_12
	movl	$0,%eax
sync_toStrongKeyword_reltrue_12	:	
	testl	%eax,%eax
	jz	sync_toStrongKeyword_logtermfalse_8
	movl	%ebp,%eax
	addl	$8,%eax
	movl	(%eax),%eax
	addl	$16,%eax
	movl	(%eax),%eax
	addl	$0,%eax
	movl	(%eax),%eax
	movl	%eax,%ebx
	cmpl	$38,%ebx
	movl	$1,%eax
	jne	sync_toStrongKeyword_reltrue_13
	movl	$0,%eax
sync_toStrongKeyword_reltrue_13	:	
	testl	%eax,%eax
	jz	sync_toStrongKeyword_logtermfalse_8
	movl	%ebp,%eax
	addl	$8,%eax
	movl	(%eax),%eax
	addl	$16,%eax
	movl	(%eax),%eax
	addl	$0,%eax
	movl	(%eax),%eax
	movl	%eax,%ebx
	cmpl	$12,%ebx
	movl	$1,%eax
	jne	sync_toStrongKeyword_reltrue_14
	movl	$0,%eax
sync_toStrongKeyword_reltrue_14	:	
	testl	%eax,%eax
	jz	sync_toStrongKeyword_logtermfalse_8
	movl	%ebp,%eax
	addl	$8,%eax
	movl	(%eax),%eax
	addl	$16,%eax
	movl	(%eax),%eax
	addl	$0,%eax
	movl	(%eax),%eax
	movl	%eax,%ebx
	cmpl	$14,%ebx
	movl	$1,%eax
	jne	sync_toStrongKeyword_reltrue_15
	movl	$0,%eax
sync_toStrongKeyword_reltrue_15	:	
	testl	%eax,%eax
	jz	sync_toStrongKeyword_logtermfalse_8
	movl	%ebp,%eax
	addl	$8,%eax
	movl	(%eax),%eax
	addl	$16,%eax
	movl	(%eax),%eax
	addl	$0,%eax
	movl	(%eax),%eax
	movl	%eax,%ebx
	cmpl	$15,%ebx
	movl	$1,%eax
	jne	sync_toStrongKeyword_reltrue_16
	movl	$0,%eax
sync_toStrongKeyword_reltrue_16	:	
	testl	%eax,%eax
	jz	sync_toStrongKeyword_logtermfalse_8
	movl	%ebp,%eax
	addl	$8,%eax
	movl	(%eax),%eax
	addl	$16,%eax
	movl	(%eax),%eax
	addl	$0,%eax
	movl	(%eax),%eax
	movl	%eax,%ebx
	cmpl	$34,%ebx
	movl	$1,%eax
	jne	sync_toStrongKeyword_reltrue_17
	movl	$0,%eax
sync_toStrongKeyword_reltrue_17	:	
	testl	%eax,%eax
	jz	sync_toStrongKeyword_logtermfalse_8
	movl	$1,%eax
	jmp	sync_toStrongKeyword_logtermtrue_8
sync_toStrongKeyword_logtermfalse_8	:	
	movl	$0,%eax
sync_toStrongKeyword_logtermtrue_8	:	
	testl	%eax,%eax
	jz	sync_toStrongKeyword_endwhile_7

	subl	$4,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	call	eatToken
	addl	$4,%esp
	jmp	sync_toStrongKeyword_while_7
sync_toStrongKeyword_endwhile_7	:	

	subl	$8,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	$symtab+108,4(%esp)
	call	parse_tracemsg
	addl	$8,%esp
sync_toStrongKeyword_ret	:	
	movl	%ebp,%esp
	popl	%ebp
	ret	

.globl	parse_dataType
.type	parse_dataType,@function
parse_dataType	:	
	pushl	%ebp
	movl	%esp,%ebp
	subl	$0,%esp

	subl	$8,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	$symtab+115,4(%esp)
	call	parse_tracemsg
	addl	$8,%esp

	movl	%ebp,%eax
	addl	$8,%eax
	movl	(%eax),%eax
	addl	$16,%eax
	movl	(%eax),%eax
	addl	$0,%eax
	movl	(%eax),%eax
	movl	%eax,%ebx
	cmpl	$36,%ebx
	movl	$1,%eax
	je	parse_dataType_reltrue_20
	movl	$0,%eax
parse_dataType_reltrue_20	:	
	testl	%eax,%eax
	jnz	parse_dataType_logexprtrue_19
	movl	%ebp,%eax
	addl	$8,%eax
	movl	(%eax),%eax
	addl	$16,%eax
	movl	(%eax),%eax
	addl	$0,%eax
	movl	(%eax),%eax
	movl	%eax,%ebx
	cmpl	$37,%ebx
	movl	$1,%eax
	je	parse_dataType_reltrue_21
	movl	$0,%eax
parse_dataType_reltrue_21	:	
	testl	%eax,%eax
	jnz	parse_dataType_logexprtrue_19
	movl	%ebp,%eax
	addl	$8,%eax
	movl	(%eax),%eax
	addl	$16,%eax
	movl	(%eax),%eax
	addl	$0,%eax
	movl	(%eax),%eax
	movl	%eax,%ebx
	cmpl	$38,%ebx
	movl	$1,%eax
	je	parse_dataType_reltrue_22
	movl	$0,%eax
parse_dataType_reltrue_22	:	
	testl	%eax,%eax
	jnz	parse_dataType_logexprtrue_19
	movl	%ebp,%eax
	addl	$8,%eax
	movl	(%eax),%eax
	addl	$16,%eax
	movl	(%eax),%eax
	addl	$0,%eax
	movl	(%eax),%eax
	movl	%eax,%ebx
	cmpl	$43,%ebx
	movl	$1,%eax
	je	parse_dataType_reltrue_23
	movl	$0,%eax
parse_dataType_reltrue_23	:	
	testl	%eax,%eax
	jnz	parse_dataType_logexprtrue_19
	movl	$0,%eax
	jmp	parse_dataType_logexprfalse_19
parse_dataType_logexprtrue_19	:	
	movl	$1,%eax
parse_dataType_logexprfalse_19	:	
	testl	%eax,%eax
	jnz	parse_dataType_ifbl_18
	jmp	parse_dataType_elsebl_18
parse_dataType_ifbl_18	:	

	subl	$8,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	12(%ebp),%eax
	movl	%eax,4(%esp)
	call	addAndEatToken
	addl	$8,%esp

parse_dataType_while_24	:	
	movl	%ebp,%eax
	addl	$8,%eax
	movl	(%eax),%eax
	addl	$16,%eax
	movl	(%eax),%eax
	addl	$0,%eax
	movl	(%eax),%eax
	movl	%eax,%ebx
	cmpl	$18,%ebx
	movl	$1,%eax
	je	parse_dataType_reltrue_25
	movl	$0,%eax
parse_dataType_reltrue_25	:	
	testl	%eax,%eax
	jz	parse_dataType_endwhile_24

	subl	$8,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	12(%ebp),%eax
	movl	%eax,4(%esp)
	call	addAndEatToken
	addl	$8,%esp
	jmp	parse_dataType_while_24
parse_dataType_endwhile_24	:	

	movl	$0,%eax
	jmp	parse_dataType_ret
parse_dataType_elsebl_18	:	
parse_dataType_endif_18	:	

	subl	$8,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	$symtab+130,4(%esp)
	call	report_error
	addl	$8,%esp

	movl	$0,%ebx
	subl	$1,%ebx
	movl	%ebx,%eax
	jmp	parse_dataType_ret
parse_dataType_ret	:	
	movl	%ebp,%esp
	popl	%ebp
	ret	

.globl	parse_sizeofExpr
.type	parse_sizeofExpr,@function
parse_sizeofExpr	:	
	pushl	%ebp
	movl	%esp,%ebp
	subl	$4,%esp

	subl	$8,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	$symtab+155,4(%esp)
	call	parse_tracemsg
	addl	$8,%esp

	subl	$16,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	12(%ebp),%eax
	movl	%eax,4(%esp)
	movl	$39,8(%esp)
	movl	$symtab+172,12(%esp)
	call	addAndEatSpecificToken
	addl	$16,%esp
	movl	%eax,%ebx
	cmpl	$0,%ebx
	movl	$1,%eax
	jne	parse_sizeofExpr_reltrue_27
	movl	$0,%eax
parse_sizeofExpr_reltrue_27	:	
	testl	%eax,%eax
	jnz	parse_sizeofExpr_ifbl_26
	jmp	parse_sizeofExpr_elsebl_26
parse_sizeofExpr_ifbl_26	:	

	movl	$0,%ebx
	subl	$1,%ebx
	movl	%ebx,%eax
	jmp	parse_sizeofExpr_ret
parse_sizeofExpr_elsebl_26	:	
parse_sizeofExpr_endif_26	:	

	subl	$16,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	12(%ebp),%eax
	movl	%eax,4(%esp)
	movl	$5,8(%esp)
	movl	$symtab+202,12(%esp)
	call	addAndEatSpecificToken
	addl	$16,%esp
	movl	%eax,%ebx
	cmpl	$0,%ebx
	movl	$1,%eax
	jne	parse_sizeofExpr_reltrue_29
	movl	$0,%eax
parse_sizeofExpr_reltrue_29	:	
	testl	%eax,%eax
	jnz	parse_sizeofExpr_ifbl_28
	jmp	parse_sizeofExpr_elsebl_28
parse_sizeofExpr_ifbl_28	:	

	movl	$0,%ebx
	subl	$1,%ebx
	movl	%ebx,%eax
	jmp	parse_sizeofExpr_ret
parse_sizeofExpr_elsebl_28	:	
parse_sizeofExpr_endif_28	:	

	subl	$0,%esp
	call	syntax_CreateTreeNode
	addl	$0,%esp
	movl	%eax,-4(%ebp)

	subl	$8,%esp
	movl	12(%ebp),%eax
	movl	%eax,0(%esp)
	movl	-4(%ebp),%eax
	movl	%eax,4(%esp)
	call	syntax_AddChildTree
	addl	$8,%esp

	subl	$8,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	-4(%ebp),%eax
	movl	%eax,4(%esp)
	call	parse_dataType
	addl	$8,%esp
	movl	%eax,%ebx
	cmpl	$0,%ebx
	movl	$1,%eax
	jne	parse_sizeofExpr_reltrue_31
	movl	$0,%eax
parse_sizeofExpr_reltrue_31	:	
	testl	%eax,%eax
	jnz	parse_sizeofExpr_ifbl_30
	jmp	parse_sizeofExpr_elsebl_30
parse_sizeofExpr_ifbl_30	:	

	movl	$0,%ebx
	subl	$1,%ebx
	movl	%ebx,%eax
	jmp	parse_sizeofExpr_ret
parse_sizeofExpr_elsebl_30	:	
parse_sizeofExpr_endif_30	:	

	subl	$16,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	12(%ebp),%eax
	movl	%eax,4(%esp)
	movl	$6,8(%esp)
	movl	$symtab+235,12(%esp)
	call	addAndEatSpecificToken
	addl	$16,%esp
	movl	%eax,%ebx
	cmpl	$0,%ebx
	movl	$1,%eax
	jne	parse_sizeofExpr_reltrue_33
	movl	$0,%eax
parse_sizeofExpr_reltrue_33	:	
	testl	%eax,%eax
	jnz	parse_sizeofExpr_ifbl_32
	jmp	parse_sizeofExpr_elsebl_32
parse_sizeofExpr_ifbl_32	:	

	movl	$0,%ebx
	subl	$1,%ebx
	movl	%ebx,%eax
	jmp	parse_sizeofExpr_ret
parse_sizeofExpr_elsebl_32	:	
parse_sizeofExpr_endif_32	:	

	movl	$0,%eax
	jmp	parse_sizeofExpr_ret
parse_sizeofExpr_ret	:	
	movl	%ebp,%esp
	popl	%ebp
	ret	

.globl	parse_typedIdent
.type	parse_typedIdent,@function
parse_typedIdent	:	
	pushl	%ebp
	movl	%esp,%ebp
	subl	$4,%esp

	subl	$8,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	$symtab+254,4(%esp)
	call	parse_tracemsg
	addl	$8,%esp

	subl	$0,%esp
	call	syntax_CreateTreeNode
	addl	$0,%esp
	movl	%eax,-4(%ebp)

	subl	$8,%esp
	movl	12(%ebp),%eax
	movl	%eax,0(%esp)
	movl	-4(%ebp),%eax
	movl	%eax,4(%esp)
	call	syntax_AddChildTree
	addl	$8,%esp

	subl	$8,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	-4(%ebp),%eax
	movl	%eax,4(%esp)
	call	parse_dataType
	addl	$8,%esp
	movl	%eax,%ebx
	cmpl	$0,%ebx
	movl	$1,%eax
	jne	parse_typedIdent_reltrue_35
	movl	$0,%eax
parse_typedIdent_reltrue_35	:	
	testl	%eax,%eax
	jnz	parse_typedIdent_ifbl_34
	jmp	parse_typedIdent_elsebl_34
parse_typedIdent_ifbl_34	:	

	movl	$0,%ebx
	subl	$1,%ebx
	movl	%ebx,%eax
	jmp	parse_typedIdent_ret
parse_typedIdent_elsebl_34	:	
parse_typedIdent_endif_34	:	

	subl	$16,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	12(%ebp),%eax
	movl	%eax,4(%esp)
	movl	$43,8(%esp)
	movl	$symtab+271,12(%esp)
	call	addAndEatSpecificToken
	addl	$16,%esp
	movl	%eax,%ebx
	cmpl	$0,%ebx
	movl	$1,%eax
	jne	parse_typedIdent_reltrue_37
	movl	$0,%eax
parse_typedIdent_reltrue_37	:	
	testl	%eax,%eax
	jnz	parse_typedIdent_ifbl_36
	jmp	parse_typedIdent_elsebl_36
parse_typedIdent_ifbl_36	:	

	movl	$0,%ebx
	subl	$1,%ebx
	movl	%ebx,%eax
	jmp	parse_typedIdent_ret
parse_typedIdent_elsebl_36	:	
parse_typedIdent_endif_36	:	

	movl	$0,%eax
	jmp	parse_typedIdent_ret
parse_typedIdent_ret	:	
	movl	%ebp,%esp
	popl	%ebp
	ret	

.globl	parse_funcCall
.type	parse_funcCall,@function
parse_funcCall	:	
	pushl	%ebp
	movl	%esp,%ebp
	subl	$4,%esp

	subl	$8,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	$symtab+291,4(%esp)
	call	parse_tracemsg
	addl	$8,%esp

	subl	$16,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	12(%ebp),%eax
	movl	%eax,4(%esp)
	movl	$43,8(%esp)
	movl	$symtab+306,12(%esp)
	call	addAndEatSpecificToken
	addl	$16,%esp
	movl	%eax,%ebx
	cmpl	$0,%ebx
	movl	$1,%eax
	jne	parse_funcCall_reltrue_39
	movl	$0,%eax
parse_funcCall_reltrue_39	:	
	testl	%eax,%eax
	jnz	parse_funcCall_ifbl_38
	jmp	parse_funcCall_elsebl_38
parse_funcCall_ifbl_38	:	

	movl	$0,%ebx
	subl	$1,%ebx
	movl	%ebx,%eax
	jmp	parse_funcCall_ret
parse_funcCall_elsebl_38	:	
parse_funcCall_endif_38	:	

	subl	$16,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	12(%ebp),%eax
	movl	%eax,4(%esp)
	movl	$5,8(%esp)
	movl	$symtab+344,12(%esp)
	call	addAndEatSpecificToken
	addl	$16,%esp
	movl	%eax,%ebx
	cmpl	$0,%ebx
	movl	$1,%eax
	jne	parse_funcCall_reltrue_41
	movl	$0,%eax
parse_funcCall_reltrue_41	:	
	testl	%eax,%eax
	jnz	parse_funcCall_ifbl_40
	jmp	parse_funcCall_elsebl_40
parse_funcCall_ifbl_40	:	

	movl	$0,%ebx
	subl	$1,%ebx
	movl	%ebx,%eax
	jmp	parse_funcCall_ret
parse_funcCall_elsebl_40	:	
parse_funcCall_endif_40	:	

	movl	%ebp,%eax
	addl	$8,%eax
	movl	(%eax),%eax
	addl	$16,%eax
	movl	(%eax),%eax
	addl	$0,%eax
	movl	(%eax),%eax
	movl	%eax,%ebx
	cmpl	$6,%ebx
	movl	$1,%eax
	je	parse_funcCall_reltrue_43
	movl	$0,%eax
parse_funcCall_reltrue_43	:	
	testl	%eax,%eax
	jnz	parse_funcCall_ifbl_42
	jmp	parse_funcCall_elsebl_42
parse_funcCall_ifbl_42	:	

	subl	$8,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	12(%ebp),%eax
	movl	%eax,4(%esp)
	call	addAndEatToken
	addl	$8,%esp

	movl	$0,%eax
	jmp	parse_funcCall_ret
parse_funcCall_elsebl_42	:	
parse_funcCall_endif_42	:	

	subl	$0,%esp
	call	syntax_CreateTreeNode
	addl	$0,%esp
	movl	%eax,-4(%ebp)

	subl	$8,%esp
	movl	12(%ebp),%eax
	movl	%eax,0(%esp)
	movl	-4(%ebp),%eax
	movl	%eax,4(%esp)
	call	syntax_AddChildTree
	addl	$8,%esp

	subl	$8,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	-4(%ebp),%eax
	movl	%eax,4(%esp)
	call	parse_logExpr
	addl	$8,%esp
	movl	%eax,%ebx
	cmpl	$0,%ebx
	movl	$1,%eax
	jne	parse_funcCall_reltrue_45
	movl	$0,%eax
parse_funcCall_reltrue_45	:	
	testl	%eax,%eax
	jnz	parse_funcCall_ifbl_44
	jmp	parse_funcCall_elsebl_44
parse_funcCall_ifbl_44	:	

	movl	$0,%ebx
	subl	$1,%ebx
	movl	%ebx,%eax
	jmp	parse_funcCall_ret
parse_funcCall_elsebl_44	:	
parse_funcCall_endif_44	:	

parse_funcCall_while_46	:	
	movl	%ebp,%eax
	addl	$8,%eax
	movl	(%eax),%eax
	addl	$16,%eax
	movl	(%eax),%eax
	addl	$0,%eax
	movl	(%eax),%eax
	movl	%eax,%ebx
	cmpl	$7,%ebx
	movl	$1,%eax
	je	parse_funcCall_reltrue_47
	movl	$0,%eax
parse_funcCall_reltrue_47	:	
	testl	%eax,%eax
	jz	parse_funcCall_endwhile_46

	subl	$8,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	12(%ebp),%eax
	movl	%eax,4(%esp)
	call	addAndEatToken
	addl	$8,%esp

	subl	$0,%esp
	call	syntax_CreateTreeNode
	addl	$0,%esp
	movl	%eax,-4(%ebp)

	subl	$8,%esp
	movl	12(%ebp),%eax
	movl	%eax,0(%esp)
	movl	-4(%ebp),%eax
	movl	%eax,4(%esp)
	call	syntax_AddChildTree
	addl	$8,%esp

	subl	$8,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	-4(%ebp),%eax
	movl	%eax,4(%esp)
	call	parse_logExpr
	addl	$8,%esp
	movl	%eax,%ebx
	cmpl	$0,%ebx
	movl	$1,%eax
	jne	parse_funcCall_reltrue_49
	movl	$0,%eax
parse_funcCall_reltrue_49	:	
	testl	%eax,%eax
	jnz	parse_funcCall_ifbl_48
	jmp	parse_funcCall_elsebl_48
parse_funcCall_ifbl_48	:	

	movl	$0,%ebx
	subl	$1,%ebx
	movl	%ebx,%eax
	jmp	parse_funcCall_ret
parse_funcCall_elsebl_48	:	
parse_funcCall_endif_48	:	
	jmp	parse_funcCall_while_46
parse_funcCall_endwhile_46	:	

	subl	$16,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	12(%ebp),%eax
	movl	%eax,4(%esp)
	movl	$6,8(%esp)
	movl	$symtab+384,12(%esp)
	call	addAndEatSpecificToken
	addl	$16,%esp
	movl	%eax,%ebx
	cmpl	$0,%ebx
	movl	$1,%eax
	jne	parse_funcCall_reltrue_51
	movl	$0,%eax
parse_funcCall_reltrue_51	:	
	testl	%eax,%eax
	jnz	parse_funcCall_ifbl_50
	jmp	parse_funcCall_elsebl_50
parse_funcCall_ifbl_50	:	

	movl	$0,%ebx
	subl	$1,%ebx
	movl	%ebx,%eax
	jmp	parse_funcCall_ret
parse_funcCall_elsebl_50	:	
parse_funcCall_endif_50	:	

	movl	$0,%eax
	jmp	parse_funcCall_ret
parse_funcCall_ret	:	
	movl	%ebp,%esp
	popl	%ebp
	ret	

.globl	parse_variableExpr
.type	parse_variableExpr,@function
parse_variableExpr	:	
	pushl	%ebp
	movl	%esp,%ebp
	subl	$4,%esp

	subl	$8,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	$symtab+417,4(%esp)
	call	parse_tracemsg
	addl	$8,%esp

	movl	%ebp,%eax
	addl	$8,%eax
	movl	(%eax),%eax
	addl	$16,%eax
	movl	(%eax),%eax
	addl	$0,%eax
	movl	(%eax),%eax
	movl	%eax,%ebx
	cmpl	$18,%ebx
	movl	$1,%eax
	je	parse_variableExpr_reltrue_53
	movl	$0,%eax
parse_variableExpr_reltrue_53	:	
	testl	%eax,%eax
	jnz	parse_variableExpr_ifbl_52
	jmp	parse_variableExpr_elsebl_52
parse_variableExpr_ifbl_52	:	

	subl	$8,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	12(%ebp),%eax
	movl	%eax,4(%esp)
	call	addAndEatToken
	addl	$8,%esp
	jmp	parse_variableExpr_endif_52
parse_variableExpr_elsebl_52	:	

	movl	%ebp,%eax
	addl	$8,%eax
	movl	(%eax),%eax
	addl	$16,%eax
	movl	(%eax),%eax
	addl	$0,%eax
	movl	(%eax),%eax
	movl	%eax,%ebx
	cmpl	$21,%ebx
	movl	$1,%eax
	je	parse_variableExpr_reltrue_55
	movl	$0,%eax
parse_variableExpr_reltrue_55	:	
	testl	%eax,%eax
	jnz	parse_variableExpr_ifbl_54
	jmp	parse_variableExpr_elsebl_54
parse_variableExpr_ifbl_54	:	

	subl	$8,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	12(%ebp),%eax
	movl	%eax,4(%esp)
	call	addAndEatToken
	addl	$8,%esp
	jmp	parse_variableExpr_endif_54
parse_variableExpr_elsebl_54	:	
parse_variableExpr_endif_54	:	
parse_variableExpr_endif_52	:	

	subl	$16,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	12(%ebp),%eax
	movl	%eax,4(%esp)
	movl	$43,8(%esp)
	movl	$symtab+436,12(%esp)
	call	addAndEatSpecificToken
	addl	$16,%esp
	movl	%eax,%ebx
	cmpl	$0,%ebx
	movl	$1,%eax
	jne	parse_variableExpr_reltrue_57
	movl	$0,%eax
parse_variableExpr_reltrue_57	:	
	testl	%eax,%eax
	jnz	parse_variableExpr_ifbl_56
	jmp	parse_variableExpr_elsebl_56
parse_variableExpr_ifbl_56	:	

	movl	$0,%ebx
	subl	$1,%ebx
	movl	%ebx,%eax
	jmp	parse_variableExpr_ret
parse_variableExpr_elsebl_56	:	
parse_variableExpr_endif_56	:	

parse_variableExpr_while_58	:	
	movl	%ebp,%eax
	addl	$8,%eax
	movl	(%eax),%eax
	addl	$16,%eax
	movl	(%eax),%eax
	addl	$0,%eax
	movl	(%eax),%eax
	movl	%eax,%ebx
	cmpl	$10,%ebx
	movl	$1,%eax
	je	parse_variableExpr_reltrue_60
	movl	$0,%eax
parse_variableExpr_reltrue_60	:	
	testl	%eax,%eax
	jnz	parse_variableExpr_logexprtrue_59
	movl	%ebp,%eax
	addl	$8,%eax
	movl	(%eax),%eax
	addl	$16,%eax
	movl	(%eax),%eax
	addl	$0,%eax
	movl	(%eax),%eax
	movl	%eax,%ebx
	cmpl	$9,%ebx
	movl	$1,%eax
	je	parse_variableExpr_reltrue_61
	movl	$0,%eax
parse_variableExpr_reltrue_61	:	
	testl	%eax,%eax
	jnz	parse_variableExpr_logexprtrue_59
	movl	$0,%eax
	jmp	parse_variableExpr_logexprfalse_59
parse_variableExpr_logexprtrue_59	:	
	movl	$1,%eax
parse_variableExpr_logexprfalse_59	:	
	testl	%eax,%eax
	jz	parse_variableExpr_endwhile_58

	subl	$8,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	12(%ebp),%eax
	movl	%eax,4(%esp)
	call	addAndEatToken
	addl	$8,%esp

	subl	$16,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	12(%ebp),%eax
	movl	%eax,4(%esp)
	movl	$43,8(%esp)
	movl	$symtab+474,12(%esp)
	call	addAndEatSpecificToken
	addl	$16,%esp
	movl	%eax,%ebx
	cmpl	$0,%ebx
	movl	$1,%eax
	jne	parse_variableExpr_reltrue_63
	movl	$0,%eax
parse_variableExpr_reltrue_63	:	
	testl	%eax,%eax
	jnz	parse_variableExpr_ifbl_62
	jmp	parse_variableExpr_elsebl_62
parse_variableExpr_ifbl_62	:	

	movl	$0,%ebx
	subl	$1,%ebx
	movl	%ebx,%eax
	jmp	parse_variableExpr_ret
parse_variableExpr_elsebl_62	:	
parse_variableExpr_endif_62	:	
	jmp	parse_variableExpr_while_58
parse_variableExpr_endwhile_58	:	

	movl	%ebp,%eax
	addl	$8,%eax
	movl	(%eax),%eax
	addl	$16,%eax
	movl	(%eax),%eax
	addl	$0,%eax
	movl	(%eax),%eax
	movl	%eax,%ebx
	cmpl	$3,%ebx
	movl	$1,%eax
	je	parse_variableExpr_reltrue_65
	movl	$0,%eax
parse_variableExpr_reltrue_65	:	
	testl	%eax,%eax
	jnz	parse_variableExpr_ifbl_64
	jmp	parse_variableExpr_elsebl_64
parse_variableExpr_ifbl_64	:	

	subl	$8,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	12(%ebp),%eax
	movl	%eax,4(%esp)
	call	addAndEatToken
	addl	$8,%esp

	subl	$0,%esp
	call	syntax_CreateTreeNode
	addl	$0,%esp
	movl	%eax,-4(%ebp)

	subl	$8,%esp
	movl	12(%ebp),%eax
	movl	%eax,0(%esp)
	movl	-4(%ebp),%eax
	movl	%eax,4(%esp)
	call	syntax_AddChildTree
	addl	$8,%esp

	subl	$8,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	-4(%ebp),%eax
	movl	%eax,4(%esp)
	call	parse_logExpr
	addl	$8,%esp
	movl	%eax,%ebx
	cmpl	$0,%ebx
	movl	$1,%eax
	jne	parse_variableExpr_reltrue_67
	movl	$0,%eax
parse_variableExpr_reltrue_67	:	
	testl	%eax,%eax
	jnz	parse_variableExpr_ifbl_66
	jmp	parse_variableExpr_elsebl_66
parse_variableExpr_ifbl_66	:	

	movl	$0,%ebx
	subl	$1,%ebx
	movl	%ebx,%eax
	jmp	parse_variableExpr_ret
parse_variableExpr_elsebl_66	:	
parse_variableExpr_endif_66	:	

	subl	$16,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	12(%ebp),%eax
	movl	%eax,4(%esp)
	movl	$4,8(%esp)
	movl	$symtab+524,12(%esp)
	call	addAndEatSpecificToken
	addl	$16,%esp
	movl	%eax,%ebx
	cmpl	$0,%ebx
	movl	$1,%eax
	jne	parse_variableExpr_reltrue_69
	movl	$0,%eax
parse_variableExpr_reltrue_69	:	
	testl	%eax,%eax
	jnz	parse_variableExpr_ifbl_68
	jmp	parse_variableExpr_elsebl_68
parse_variableExpr_ifbl_68	:	

	movl	$0,%ebx
	subl	$1,%ebx
	movl	%ebx,%eax
	jmp	parse_variableExpr_ret
parse_variableExpr_elsebl_68	:	
parse_variableExpr_endif_68	:	
	jmp	parse_variableExpr_endif_64
parse_variableExpr_elsebl_64	:	
parse_variableExpr_endif_64	:	

	movl	$0,%eax
	jmp	parse_variableExpr_ret
parse_variableExpr_ret	:	
	movl	%ebp,%esp
	popl	%ebp
	ret	

.globl	parse_atomicValExpr
.type	parse_atomicValExpr,@function
parse_atomicValExpr	:	
	pushl	%ebp
	movl	%esp,%ebp
	subl	$12,%esp

	subl	$8,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	$symtab+572,4(%esp)
	call	parse_tracemsg
	addl	$8,%esp

	pushl	$1
	movl	%ebp,%eax
	addl	$8,%eax
	movl	(%eax),%eax
	addl	$20,%eax
	popl	%esi
	imull	$144,%esi
	addl	%esi,%eax
	movl	%eax,-12(%ebp)

	movl	%ebp,%eax
	addl	$8,%eax
	movl	(%eax),%eax
	addl	$16,%eax
	movl	(%eax),%eax
	addl	$0,%eax
	movl	(%eax),%eax
	movl	%eax,%ebx
	cmpl	$45,%ebx
	movl	$1,%eax
	je	parse_atomicValExpr_reltrue_71
	movl	$0,%eax
parse_atomicValExpr_reltrue_71	:	
	testl	%eax,%eax
	jnz	parse_atomicValExpr_ifbl_70
	jmp	parse_atomicValExpr_elsebl_70
parse_atomicValExpr_ifbl_70	:	

	subl	$4,%esp
	movl	12(%ebp),%eax
	movl	%eax,0(%esp)
	call	syntax_CountChilds
	addl	$4,%esp
	movl	%eax,-8(%ebp)

	subl	$8,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	12(%ebp),%eax
	movl	%eax,4(%esp)
	call	addAndEatToken
	addl	$8,%esp

	movl	%ebp,%eax
	addl	$8,%eax
	movl	(%eax),%eax
	addl	$4,%eax
	movl	(%eax),%eax
	testl	%eax,%eax
	jnz	parse_atomicValExpr_ifbl_72
	jmp	parse_atomicValExpr_elsebl_72
parse_atomicValExpr_ifbl_72	:	

	subl	$8,%esp
	movl	%ebp,%eax
	addl	$8,%eax
	movl	(%eax),%eax
	addl	$4,%eax
	movl	(%eax),%eax
	movl	%eax,0(%esp)
	subl	$8,%esp
	movl	12(%ebp),%eax
	movl	%eax,0(%esp)
	movl	-8(%ebp),%eax
	movl	%eax,4(%esp)
	call	syntax_GetChild
	addl	$8,%esp
	movl	%eax,4(%esp)
	call	symbol_DefineString
	addl	$8,%esp
	jmp	parse_atomicValExpr_endif_72
parse_atomicValExpr_elsebl_72	:	
parse_atomicValExpr_endif_72	:	

	movl	$0,%eax
	jmp	parse_atomicValExpr_ret
parse_atomicValExpr_elsebl_70	:	
parse_atomicValExpr_endif_70	:	

	movl	%ebp,%eax
	addl	$8,%eax
	movl	(%eax),%eax
	addl	$16,%eax
	movl	(%eax),%eax
	addl	$0,%eax
	movl	(%eax),%eax
	movl	%eax,%ebx
	cmpl	$44,%ebx
	movl	$1,%eax
	je	parse_atomicValExpr_reltrue_75
	movl	$0,%eax
parse_atomicValExpr_reltrue_75	:	
	testl	%eax,%eax
	jnz	parse_atomicValExpr_logexprtrue_74
	movl	%ebp,%eax
	addl	$8,%eax
	movl	(%eax),%eax
	addl	$16,%eax
	movl	(%eax),%eax
	addl	$0,%eax
	movl	(%eax),%eax
	movl	%eax,%ebx
	cmpl	$46,%ebx
	movl	$1,%eax
	je	parse_atomicValExpr_reltrue_76
	movl	$0,%eax
parse_atomicValExpr_reltrue_76	:	
	testl	%eax,%eax
	jnz	parse_atomicValExpr_logexprtrue_74
	movl	$0,%eax
	jmp	parse_atomicValExpr_logexprfalse_74
parse_atomicValExpr_logexprtrue_74	:	
	movl	$1,%eax
parse_atomicValExpr_logexprfalse_74	:	
	testl	%eax,%eax
	jnz	parse_atomicValExpr_ifbl_73
	jmp	parse_atomicValExpr_elsebl_73
parse_atomicValExpr_ifbl_73	:	

	subl	$8,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	12(%ebp),%eax
	movl	%eax,4(%esp)
	call	addAndEatToken
	addl	$8,%esp

	movl	$0,%eax
	jmp	parse_atomicValExpr_ret
parse_atomicValExpr_elsebl_73	:	
parse_atomicValExpr_endif_73	:	

	subl	$0,%esp
	call	syntax_CreateTreeNode
	addl	$0,%esp
	movl	%eax,-4(%ebp)

	subl	$8,%esp
	movl	12(%ebp),%eax
	movl	%eax,0(%esp)
	movl	-4(%ebp),%eax
	movl	%eax,4(%esp)
	call	syntax_AddChildTree
	addl	$8,%esp

	movl	%ebp,%eax
	addl	$8,%eax
	movl	(%eax),%eax
	addl	$16,%eax
	movl	(%eax),%eax
	addl	$0,%eax
	movl	(%eax),%eax
	movl	%eax,%ebx
	cmpl	$39,%ebx
	movl	$1,%eax
	je	parse_atomicValExpr_reltrue_78
	movl	$0,%eax
parse_atomicValExpr_reltrue_78	:	
	testl	%eax,%eax
	jnz	parse_atomicValExpr_ifbl_77
	jmp	parse_atomicValExpr_elsebl_77
parse_atomicValExpr_ifbl_77	:	

	subl	$8,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	-4(%ebp),%eax
	movl	%eax,4(%esp)
	call	parse_sizeofExpr
	addl	$8,%esp
	jmp	parse_atomicValExpr_ret
parse_atomicValExpr_elsebl_77	:	
parse_atomicValExpr_endif_77	:	

	movl	%ebp,%eax
	addl	$8,%eax
	movl	(%eax),%eax
	addl	$16,%eax
	movl	(%eax),%eax
	addl	$0,%eax
	movl	(%eax),%eax
	movl	%eax,%ebx
	cmpl	$43,%ebx
	movl	$1,%eax
	je	parse_atomicValExpr_reltrue_81
	movl	$0,%eax
parse_atomicValExpr_reltrue_81	:	
	testl	%eax,%eax
	jz	parse_atomicValExpr_logtermfalse_80
	movl	%ebp,%eax
	addl	$-12,%eax
	movl	(%eax),%eax
	addl	$0,%eax
	movl	(%eax),%eax
	movl	%eax,%ebx
	cmpl	$5,%ebx
	movl	$1,%eax
	je	parse_atomicValExpr_reltrue_82
	movl	$0,%eax
parse_atomicValExpr_reltrue_82	:	
	testl	%eax,%eax
	jz	parse_atomicValExpr_logtermfalse_80
	movl	$1,%eax
	jmp	parse_atomicValExpr_logtermtrue_80
parse_atomicValExpr_logtermfalse_80	:	
	movl	$0,%eax
parse_atomicValExpr_logtermtrue_80	:	
	testl	%eax,%eax
	jnz	parse_atomicValExpr_ifbl_79
	jmp	parse_atomicValExpr_elsebl_79
parse_atomicValExpr_ifbl_79	:	

	subl	$8,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	-4(%ebp),%eax
	movl	%eax,4(%esp)
	call	parse_funcCall
	addl	$8,%esp
	jmp	parse_atomicValExpr_ret
parse_atomicValExpr_elsebl_79	:	
parse_atomicValExpr_endif_79	:	

	subl	$8,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	-4(%ebp),%eax
	movl	%eax,4(%esp)
	call	parse_variableExpr
	addl	$8,%esp
	jmp	parse_atomicValExpr_ret
parse_atomicValExpr_ret	:	
	movl	%ebp,%esp
	popl	%ebp
	ret	

.globl	parse_arithFactor
.type	parse_arithFactor,@function
parse_arithFactor	:	
	pushl	%ebp
	movl	%esp,%ebp
	subl	$4,%esp

	subl	$8,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	$symtab+592,4(%esp)
	call	parse_tracemsg
	addl	$8,%esp

	movl	%ebp,%eax
	addl	$8,%eax
	movl	(%eax),%eax
	addl	$16,%eax
	movl	(%eax),%eax
	addl	$0,%eax
	movl	(%eax),%eax
	movl	%eax,%ebx
	cmpl	$5,%ebx
	movl	$1,%eax
	je	parse_arithFactor_reltrue_84
	movl	$0,%eax
parse_arithFactor_reltrue_84	:	
	testl	%eax,%eax
	jnz	parse_arithFactor_ifbl_83
	jmp	parse_arithFactor_elsebl_83
parse_arithFactor_ifbl_83	:	

	subl	$8,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	12(%ebp),%eax
	movl	%eax,4(%esp)
	call	addAndEatToken
	addl	$8,%esp

	subl	$0,%esp
	call	syntax_CreateTreeNode
	addl	$0,%esp
	movl	%eax,-4(%ebp)

	subl	$8,%esp
	movl	12(%ebp),%eax
	movl	%eax,0(%esp)
	movl	-4(%ebp),%eax
	movl	%eax,4(%esp)
	call	syntax_AddChildTree
	addl	$8,%esp

	subl	$8,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	-4(%ebp),%eax
	movl	%eax,4(%esp)
	call	parse_logExpr
	addl	$8,%esp
	movl	%eax,%ebx
	cmpl	$0,%ebx
	movl	$1,%eax
	jne	parse_arithFactor_reltrue_86
	movl	$0,%eax
parse_arithFactor_reltrue_86	:	
	testl	%eax,%eax
	jnz	parse_arithFactor_ifbl_85
	jmp	parse_arithFactor_elsebl_85
parse_arithFactor_ifbl_85	:	

	movl	$0,%ebx
	subl	$1,%ebx
	movl	%ebx,%eax
	jmp	parse_arithFactor_ret
parse_arithFactor_elsebl_85	:	
parse_arithFactor_endif_85	:	

	subl	$16,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	12(%ebp),%eax
	movl	%eax,4(%esp)
	movl	$6,8(%esp)
	movl	$symtab+610,12(%esp)
	call	addAndEatSpecificToken
	addl	$16,%esp
	movl	%eax,%ebx
	cmpl	$0,%ebx
	movl	$1,%eax
	jne	parse_arithFactor_reltrue_88
	movl	$0,%eax
parse_arithFactor_reltrue_88	:	
	testl	%eax,%eax
	jnz	parse_arithFactor_ifbl_87
	jmp	parse_arithFactor_elsebl_87
parse_arithFactor_ifbl_87	:	

	movl	$0,%ebx
	subl	$1,%ebx
	movl	%ebx,%eax
	jmp	parse_arithFactor_ret
parse_arithFactor_elsebl_87	:	
parse_arithFactor_endif_87	:	

	movl	$0,%eax
	jmp	parse_arithFactor_ret
parse_arithFactor_elsebl_83	:	
parse_arithFactor_endif_83	:	

	movl	%ebp,%eax
	addl	$8,%eax
	movl	(%eax),%eax
	addl	$16,%eax
	movl	(%eax),%eax
	addl	$0,%eax
	movl	(%eax),%eax
	movl	%eax,%ebx
	cmpl	$32,%ebx
	movl	$1,%eax
	je	parse_arithFactor_reltrue_90
	movl	$0,%eax
parse_arithFactor_reltrue_90	:	
	testl	%eax,%eax
	jnz	parse_arithFactor_ifbl_89
	jmp	parse_arithFactor_elsebl_89
parse_arithFactor_ifbl_89	:	

	subl	$8,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	12(%ebp),%eax
	movl	%eax,4(%esp)
	call	addAndEatToken
	addl	$8,%esp
	jmp	parse_arithFactor_endif_89
parse_arithFactor_elsebl_89	:	
parse_arithFactor_endif_89	:	

	subl	$0,%esp
	call	syntax_CreateTreeNode
	addl	$0,%esp
	movl	%eax,-4(%ebp)

	subl	$8,%esp
	movl	12(%ebp),%eax
	movl	%eax,0(%esp)
	movl	-4(%ebp),%eax
	movl	%eax,4(%esp)
	call	syntax_AddChildTree
	addl	$8,%esp

	subl	$8,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	-4(%ebp),%eax
	movl	%eax,4(%esp)
	call	parse_atomicValExpr
	addl	$8,%esp
	movl	%eax,%ebx
	cmpl	$0,%ebx
	movl	$1,%eax
	jne	parse_arithFactor_reltrue_92
	movl	$0,%eax
parse_arithFactor_reltrue_92	:	
	testl	%eax,%eax
	jnz	parse_arithFactor_ifbl_91
	jmp	parse_arithFactor_elsebl_91
parse_arithFactor_ifbl_91	:	

	movl	$0,%ebx
	subl	$1,%ebx
	movl	%ebx,%eax
	jmp	parse_arithFactor_ret
parse_arithFactor_elsebl_91	:	
parse_arithFactor_endif_91	:	

	movl	$0,%eax
	jmp	parse_arithFactor_ret
parse_arithFactor_ret	:	
	movl	%ebp,%esp
	popl	%ebp
	ret	

.globl	parse_arithTerm
.type	parse_arithTerm,@function
parse_arithTerm	:	
	pushl	%ebp
	movl	%esp,%ebp
	subl	$4,%esp

	subl	$8,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	$symtab+671,4(%esp)
	call	parse_tracemsg
	addl	$8,%esp

	subl	$0,%esp
	call	syntax_CreateTreeNode
	addl	$0,%esp
	movl	%eax,-4(%ebp)

	subl	$8,%esp
	movl	12(%ebp),%eax
	movl	%eax,0(%esp)
	movl	-4(%ebp),%eax
	movl	%eax,4(%esp)
	call	syntax_AddChildTree
	addl	$8,%esp

	subl	$8,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	-4(%ebp),%eax
	movl	%eax,4(%esp)
	call	parse_arithFactor
	addl	$8,%esp
	movl	%eax,%ebx
	cmpl	$0,%ebx
	movl	$1,%eax
	jne	parse_arithTerm_reltrue_94
	movl	$0,%eax
parse_arithTerm_reltrue_94	:	
	testl	%eax,%eax
	jnz	parse_arithTerm_ifbl_93
	jmp	parse_arithTerm_elsebl_93
parse_arithTerm_ifbl_93	:	

	movl	$0,%ebx
	subl	$1,%ebx
	movl	%ebx,%eax
	jmp	parse_arithTerm_ret
parse_arithTerm_elsebl_93	:	
parse_arithTerm_endif_93	:	

parse_arithTerm_while_95	:	
	movl	%ebp,%eax
	addl	$8,%eax
	movl	(%eax),%eax
	addl	$16,%eax
	movl	(%eax),%eax
	addl	$0,%eax
	movl	(%eax),%eax
	movl	%eax,%ebx
	cmpl	$21,%ebx
	movl	$1,%eax
	je	parse_arithTerm_reltrue_97
	movl	$0,%eax
parse_arithTerm_reltrue_97	:	
	testl	%eax,%eax
	jnz	parse_arithTerm_logexprtrue_96
	movl	%ebp,%eax
	addl	$8,%eax
	movl	(%eax),%eax
	addl	$16,%eax
	movl	(%eax),%eax
	addl	$0,%eax
	movl	(%eax),%eax
	movl	%eax,%ebx
	cmpl	$23,%ebx
	movl	$1,%eax
	je	parse_arithTerm_reltrue_98
	movl	$0,%eax
parse_arithTerm_reltrue_98	:	
	testl	%eax,%eax
	jnz	parse_arithTerm_logexprtrue_96
	movl	%ebp,%eax
	addl	$8,%eax
	movl	(%eax),%eax
	addl	$16,%eax
	movl	(%eax),%eax
	addl	$0,%eax
	movl	(%eax),%eax
	movl	%eax,%ebx
	cmpl	$18,%ebx
	movl	$1,%eax
	je	parse_arithTerm_reltrue_99
	movl	$0,%eax
parse_arithTerm_reltrue_99	:	
	testl	%eax,%eax
	jnz	parse_arithTerm_logexprtrue_96
	movl	%ebp,%eax
	addl	$8,%eax
	movl	(%eax),%eax
	addl	$16,%eax
	movl	(%eax),%eax
	addl	$0,%eax
	movl	(%eax),%eax
	movl	%eax,%ebx
	cmpl	$19,%ebx
	movl	$1,%eax
	je	parse_arithTerm_reltrue_100
	movl	$0,%eax
parse_arithTerm_reltrue_100	:	
	testl	%eax,%eax
	jnz	parse_arithTerm_logexprtrue_96
	movl	%ebp,%eax
	addl	$8,%eax
	movl	(%eax),%eax
	addl	$16,%eax
	movl	(%eax),%eax
	addl	$0,%eax
	movl	(%eax),%eax
	movl	%eax,%ebx
	cmpl	$20,%ebx
	movl	$1,%eax
	je	parse_arithTerm_reltrue_101
	movl	$0,%eax
parse_arithTerm_reltrue_101	:	
	testl	%eax,%eax
	jnz	parse_arithTerm_logexprtrue_96
	movl	$0,%eax
	jmp	parse_arithTerm_logexprfalse_96
parse_arithTerm_logexprtrue_96	:	
	movl	$1,%eax
parse_arithTerm_logexprfalse_96	:	
	testl	%eax,%eax
	jz	parse_arithTerm_endwhile_95

	subl	$8,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	12(%ebp),%eax
	movl	%eax,4(%esp)
	call	addAndEatToken
	addl	$8,%esp

	subl	$0,%esp
	call	syntax_CreateTreeNode
	addl	$0,%esp
	movl	%eax,-4(%ebp)

	subl	$8,%esp
	movl	12(%ebp),%eax
	movl	%eax,0(%esp)
	movl	-4(%ebp),%eax
	movl	%eax,4(%esp)
	call	syntax_AddChildTree
	addl	$8,%esp

	subl	$8,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	-4(%ebp),%eax
	movl	%eax,4(%esp)
	call	parse_arithFactor
	addl	$8,%esp
	movl	%eax,%ebx
	cmpl	$0,%ebx
	movl	$1,%eax
	jne	parse_arithTerm_reltrue_103
	movl	$0,%eax
parse_arithTerm_reltrue_103	:	
	testl	%eax,%eax
	jnz	parse_arithTerm_ifbl_102
	jmp	parse_arithTerm_elsebl_102
parse_arithTerm_ifbl_102	:	

	movl	$0,%ebx
	subl	$1,%ebx
	movl	%ebx,%eax
	jmp	parse_arithTerm_ret
parse_arithTerm_elsebl_102	:	
parse_arithTerm_endif_102	:	
	jmp	parse_arithTerm_while_95
parse_arithTerm_endwhile_95	:	

	movl	$0,%eax
	jmp	parse_arithTerm_ret
parse_arithTerm_ret	:	
	movl	%ebp,%esp
	popl	%ebp
	ret	

.globl	parse_arithExpr
.type	parse_arithExpr,@function
parse_arithExpr	:	
	pushl	%ebp
	movl	%esp,%ebp
	subl	$4,%esp

	subl	$8,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	$symtab+687,4(%esp)
	call	parse_tracemsg
	addl	$8,%esp

	movl	%ebp,%eax
	addl	$8,%eax
	movl	(%eax),%eax
	addl	$16,%eax
	movl	(%eax),%eax
	addl	$0,%eax
	movl	(%eax),%eax
	movl	%eax,%ebx
	cmpl	$17,%ebx
	movl	$1,%eax
	je	parse_arithExpr_reltrue_105
	movl	$0,%eax
parse_arithExpr_reltrue_105	:	
	testl	%eax,%eax
	jnz	parse_arithExpr_ifbl_104
	jmp	parse_arithExpr_elsebl_104
parse_arithExpr_ifbl_104	:	

	subl	$8,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	12(%ebp),%eax
	movl	%eax,4(%esp)
	call	addAndEatToken
	addl	$8,%esp
	jmp	parse_arithExpr_endif_104
parse_arithExpr_elsebl_104	:	
parse_arithExpr_endif_104	:	

	subl	$0,%esp
	call	syntax_CreateTreeNode
	addl	$0,%esp
	movl	%eax,-4(%ebp)

	subl	$8,%esp
	movl	12(%ebp),%eax
	movl	%eax,0(%esp)
	movl	-4(%ebp),%eax
	movl	%eax,4(%esp)
	call	syntax_AddChildTree
	addl	$8,%esp

	subl	$8,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	-4(%ebp),%eax
	movl	%eax,4(%esp)
	call	parse_arithTerm
	addl	$8,%esp
	movl	%eax,%ebx
	cmpl	$0,%ebx
	movl	$1,%eax
	jne	parse_arithExpr_reltrue_107
	movl	$0,%eax
parse_arithExpr_reltrue_107	:	
	testl	%eax,%eax
	jnz	parse_arithExpr_ifbl_106
	jmp	parse_arithExpr_elsebl_106
parse_arithExpr_ifbl_106	:	

	movl	$0,%ebx
	subl	$1,%ebx
	movl	%ebx,%eax
	jmp	parse_arithExpr_ret
parse_arithExpr_elsebl_106	:	
parse_arithExpr_endif_106	:	

parse_arithExpr_while_108	:	
	movl	%ebp,%eax
	addl	$8,%eax
	movl	(%eax),%eax
	addl	$16,%eax
	movl	(%eax),%eax
	addl	$0,%eax
	movl	(%eax),%eax
	movl	%eax,%ebx
	cmpl	$16,%ebx
	movl	$1,%eax
	je	parse_arithExpr_reltrue_110
	movl	$0,%eax
parse_arithExpr_reltrue_110	:	
	testl	%eax,%eax
	jnz	parse_arithExpr_logexprtrue_109
	movl	%ebp,%eax
	addl	$8,%eax
	movl	(%eax),%eax
	addl	$16,%eax
	movl	(%eax),%eax
	addl	$0,%eax
	movl	(%eax),%eax
	movl	%eax,%ebx
	cmpl	$17,%ebx
	movl	$1,%eax
	je	parse_arithExpr_reltrue_111
	movl	$0,%eax
parse_arithExpr_reltrue_111	:	
	testl	%eax,%eax
	jnz	parse_arithExpr_logexprtrue_109
	movl	%ebp,%eax
	addl	$8,%eax
	movl	(%eax),%eax
	addl	$16,%eax
	movl	(%eax),%eax
	addl	$0,%eax
	movl	(%eax),%eax
	movl	%eax,%ebx
	cmpl	$22,%ebx
	movl	$1,%eax
	je	parse_arithExpr_reltrue_112
	movl	$0,%eax
parse_arithExpr_reltrue_112	:	
	testl	%eax,%eax
	jnz	parse_arithExpr_logexprtrue_109
	movl	$0,%eax
	jmp	parse_arithExpr_logexprfalse_109
parse_arithExpr_logexprtrue_109	:	
	movl	$1,%eax
parse_arithExpr_logexprfalse_109	:	
	testl	%eax,%eax
	jz	parse_arithExpr_endwhile_108

	subl	$8,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	12(%ebp),%eax
	movl	%eax,4(%esp)
	call	addAndEatToken
	addl	$8,%esp

	subl	$0,%esp
	call	syntax_CreateTreeNode
	addl	$0,%esp
	movl	%eax,-4(%ebp)

	subl	$8,%esp
	movl	12(%ebp),%eax
	movl	%eax,0(%esp)
	movl	-4(%ebp),%eax
	movl	%eax,4(%esp)
	call	syntax_AddChildTree
	addl	$8,%esp

	subl	$8,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	-4(%ebp),%eax
	movl	%eax,4(%esp)
	call	parse_arithTerm
	addl	$8,%esp
	movl	%eax,%ebx
	cmpl	$0,%ebx
	movl	$1,%eax
	jne	parse_arithExpr_reltrue_114
	movl	$0,%eax
parse_arithExpr_reltrue_114	:	
	testl	%eax,%eax
	jnz	parse_arithExpr_ifbl_113
	jmp	parse_arithExpr_elsebl_113
parse_arithExpr_ifbl_113	:	

	movl	$0,%ebx
	subl	$1,%ebx
	movl	%ebx,%eax
	jmp	parse_arithExpr_ret
parse_arithExpr_elsebl_113	:	
parse_arithExpr_endif_113	:	
	jmp	parse_arithExpr_while_108
parse_arithExpr_endwhile_108	:	

	movl	$0,%eax
	jmp	parse_arithExpr_ret
parse_arithExpr_ret	:	
	movl	%ebp,%esp
	popl	%ebp
	ret	

.globl	parse_relExpr
.type	parse_relExpr,@function
parse_relExpr	:	
	pushl	%ebp
	movl	%esp,%ebp
	subl	$4,%esp

	subl	$8,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	$symtab+703,4(%esp)
	call	parse_tracemsg
	addl	$8,%esp

	subl	$0,%esp
	call	syntax_CreateTreeNode
	addl	$0,%esp
	movl	%eax,-4(%ebp)

	subl	$8,%esp
	movl	12(%ebp),%eax
	movl	%eax,0(%esp)
	movl	-4(%ebp),%eax
	movl	%eax,4(%esp)
	call	syntax_AddChildTree
	addl	$8,%esp

	subl	$8,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	-4(%ebp),%eax
	movl	%eax,4(%esp)
	call	parse_arithExpr
	addl	$8,%esp
	movl	%eax,%ebx
	cmpl	$0,%ebx
	movl	$1,%eax
	jne	parse_relExpr_reltrue_116
	movl	$0,%eax
parse_relExpr_reltrue_116	:	
	testl	%eax,%eax
	jnz	parse_relExpr_ifbl_115
	jmp	parse_relExpr_elsebl_115
parse_relExpr_ifbl_115	:	

	movl	$0,%ebx
	subl	$1,%ebx
	movl	%ebx,%eax
	jmp	parse_relExpr_ret
parse_relExpr_elsebl_115	:	
parse_relExpr_endif_115	:	

	movl	%ebp,%eax
	addl	$8,%eax
	movl	(%eax),%eax
	addl	$16,%eax
	movl	(%eax),%eax
	addl	$0,%eax
	movl	(%eax),%eax
	movl	%eax,%ebx
	cmpl	$26,%ebx
	movl	$1,%eax
	je	parse_relExpr_reltrue_119
	movl	$0,%eax
parse_relExpr_reltrue_119	:	
	testl	%eax,%eax
	jnz	parse_relExpr_logexprtrue_118
	movl	%ebp,%eax
	addl	$8,%eax
	movl	(%eax),%eax
	addl	$16,%eax
	movl	(%eax),%eax
	addl	$0,%eax
	movl	(%eax),%eax
	movl	%eax,%ebx
	cmpl	$27,%ebx
	movl	$1,%eax
	je	parse_relExpr_reltrue_120
	movl	$0,%eax
parse_relExpr_reltrue_120	:	
	testl	%eax,%eax
	jnz	parse_relExpr_logexprtrue_118
	movl	%ebp,%eax
	addl	$8,%eax
	movl	(%eax),%eax
	addl	$16,%eax
	movl	(%eax),%eax
	addl	$0,%eax
	movl	(%eax),%eax
	movl	%eax,%ebx
	cmpl	$28,%ebx
	movl	$1,%eax
	je	parse_relExpr_reltrue_121
	movl	$0,%eax
parse_relExpr_reltrue_121	:	
	testl	%eax,%eax
	jnz	parse_relExpr_logexprtrue_118
	movl	%ebp,%eax
	addl	$8,%eax
	movl	(%eax),%eax
	addl	$16,%eax
	movl	(%eax),%eax
	addl	$0,%eax
	movl	(%eax),%eax
	movl	%eax,%ebx
	cmpl	$29,%ebx
	movl	$1,%eax
	je	parse_relExpr_reltrue_122
	movl	$0,%eax
parse_relExpr_reltrue_122	:	
	testl	%eax,%eax
	jnz	parse_relExpr_logexprtrue_118
	movl	%ebp,%eax
	addl	$8,%eax
	movl	(%eax),%eax
	addl	$16,%eax
	movl	(%eax),%eax
	addl	$0,%eax
	movl	(%eax),%eax
	movl	%eax,%ebx
	cmpl	$30,%ebx
	movl	$1,%eax
	je	parse_relExpr_reltrue_123
	movl	$0,%eax
parse_relExpr_reltrue_123	:	
	testl	%eax,%eax
	jnz	parse_relExpr_logexprtrue_118
	movl	%ebp,%eax
	addl	$8,%eax
	movl	(%eax),%eax
	addl	$16,%eax
	movl	(%eax),%eax
	addl	$0,%eax
	movl	(%eax),%eax
	movl	%eax,%ebx
	cmpl	$31,%ebx
	movl	$1,%eax
	je	parse_relExpr_reltrue_124
	movl	$0,%eax
parse_relExpr_reltrue_124	:	
	testl	%eax,%eax
	jnz	parse_relExpr_logexprtrue_118
	movl	$0,%eax
	jmp	parse_relExpr_logexprfalse_118
parse_relExpr_logexprtrue_118	:	
	movl	$1,%eax
parse_relExpr_logexprfalse_118	:	
	testl	%eax,%eax
	jnz	parse_relExpr_ifbl_117
	jmp	parse_relExpr_elsebl_117
parse_relExpr_ifbl_117	:	

	subl	$8,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	12(%ebp),%eax
	movl	%eax,4(%esp)
	call	addAndEatToken
	addl	$8,%esp

	subl	$0,%esp
	call	syntax_CreateTreeNode
	addl	$0,%esp
	movl	%eax,-4(%ebp)

	subl	$8,%esp
	movl	12(%ebp),%eax
	movl	%eax,0(%esp)
	movl	-4(%ebp),%eax
	movl	%eax,4(%esp)
	call	syntax_AddChildTree
	addl	$8,%esp

	subl	$8,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	-4(%ebp),%eax
	movl	%eax,4(%esp)
	call	parse_arithExpr
	addl	$8,%esp
	movl	%eax,%ebx
	cmpl	$0,%ebx
	movl	$1,%eax
	jne	parse_relExpr_reltrue_126
	movl	$0,%eax
parse_relExpr_reltrue_126	:	
	testl	%eax,%eax
	jnz	parse_relExpr_ifbl_125
	jmp	parse_relExpr_elsebl_125
parse_relExpr_ifbl_125	:	

	movl	$0,%ebx
	subl	$1,%ebx
	movl	%ebx,%eax
	jmp	parse_relExpr_ret
parse_relExpr_elsebl_125	:	
parse_relExpr_endif_125	:	
	jmp	parse_relExpr_endif_117
parse_relExpr_elsebl_117	:	
parse_relExpr_endif_117	:	

	movl	$0,%eax
	jmp	parse_relExpr_ret
parse_relExpr_ret	:	
	movl	%ebp,%esp
	popl	%ebp
	ret	

.globl	parse_logFactor
.type	parse_logFactor,@function
parse_logFactor	:	
	pushl	%ebp
	movl	%esp,%ebp
	subl	$4,%esp

	subl	$8,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	$symtab+717,4(%esp)
	call	parse_tracemsg
	addl	$8,%esp

	movl	%ebp,%eax
	addl	$8,%eax
	movl	(%eax),%eax
	addl	$16,%eax
	movl	(%eax),%eax
	addl	$0,%eax
	movl	(%eax),%eax
	movl	%eax,%ebx
	cmpl	$33,%ebx
	movl	$1,%eax
	je	parse_logFactor_reltrue_128
	movl	$0,%eax
parse_logFactor_reltrue_128	:	
	testl	%eax,%eax
	jnz	parse_logFactor_ifbl_127
	jmp	parse_logFactor_elsebl_127
parse_logFactor_ifbl_127	:	

	subl	$8,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	12(%ebp),%eax
	movl	%eax,4(%esp)
	call	addAndEatToken
	addl	$8,%esp
	jmp	parse_logFactor_endif_127
parse_logFactor_elsebl_127	:	
parse_logFactor_endif_127	:	

	subl	$0,%esp
	call	syntax_CreateTreeNode
	addl	$0,%esp
	movl	%eax,-4(%ebp)

	subl	$8,%esp
	movl	12(%ebp),%eax
	movl	%eax,0(%esp)
	movl	-4(%ebp),%eax
	movl	%eax,4(%esp)
	call	syntax_AddChildTree
	addl	$8,%esp

	subl	$8,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	-4(%ebp),%eax
	movl	%eax,4(%esp)
	call	parse_relExpr
	addl	$8,%esp
	movl	%eax,%ebx
	cmpl	$0,%ebx
	movl	$1,%eax
	jne	parse_logFactor_reltrue_130
	movl	$0,%eax
parse_logFactor_reltrue_130	:	
	testl	%eax,%eax
	jnz	parse_logFactor_ifbl_129
	jmp	parse_logFactor_elsebl_129
parse_logFactor_ifbl_129	:	

	movl	$0,%ebx
	subl	$1,%ebx
	movl	%ebx,%eax
	jmp	parse_logFactor_ret
parse_logFactor_elsebl_129	:	
parse_logFactor_endif_129	:	

	movl	$0,%eax
	jmp	parse_logFactor_ret
parse_logFactor_ret	:	
	movl	%ebp,%esp
	popl	%ebp
	ret	

.globl	parse_logTerm
.type	parse_logTerm,@function
parse_logTerm	:	
	pushl	%ebp
	movl	%esp,%ebp
	subl	$4,%esp

	subl	$8,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	$symtab+733,4(%esp)
	call	parse_tracemsg
	addl	$8,%esp

	subl	$0,%esp
	call	syntax_CreateTreeNode
	addl	$0,%esp
	movl	%eax,-4(%ebp)

	subl	$8,%esp
	movl	12(%ebp),%eax
	movl	%eax,0(%esp)
	movl	-4(%ebp),%eax
	movl	%eax,4(%esp)
	call	syntax_AddChildTree
	addl	$8,%esp

	subl	$8,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	-4(%ebp),%eax
	movl	%eax,4(%esp)
	call	parse_logFactor
	addl	$8,%esp
	movl	%eax,%ebx
	cmpl	$0,%ebx
	movl	$1,%eax
	jne	parse_logTerm_reltrue_132
	movl	$0,%eax
parse_logTerm_reltrue_132	:	
	testl	%eax,%eax
	jnz	parse_logTerm_ifbl_131
	jmp	parse_logTerm_elsebl_131
parse_logTerm_ifbl_131	:	

	movl	$0,%ebx
	subl	$1,%ebx
	movl	%ebx,%eax
	jmp	parse_logTerm_ret
parse_logTerm_elsebl_131	:	
parse_logTerm_endif_131	:	

parse_logTerm_while_133	:	
	movl	%ebp,%eax
	addl	$8,%eax
	movl	(%eax),%eax
	addl	$16,%eax
	movl	(%eax),%eax
	addl	$0,%eax
	movl	(%eax),%eax
	movl	%eax,%ebx
	cmpl	$24,%ebx
	movl	$1,%eax
	je	parse_logTerm_reltrue_134
	movl	$0,%eax
parse_logTerm_reltrue_134	:	
	testl	%eax,%eax
	jz	parse_logTerm_endwhile_133

	subl	$8,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	12(%ebp),%eax
	movl	%eax,4(%esp)
	call	addAndEatToken
	addl	$8,%esp

	subl	$0,%esp
	call	syntax_CreateTreeNode
	addl	$0,%esp
	movl	%eax,-4(%ebp)

	subl	$8,%esp
	movl	12(%ebp),%eax
	movl	%eax,0(%esp)
	movl	-4(%ebp),%eax
	movl	%eax,4(%esp)
	call	syntax_AddChildTree
	addl	$8,%esp

	subl	$8,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	-4(%ebp),%eax
	movl	%eax,4(%esp)
	call	parse_logFactor
	addl	$8,%esp
	movl	%eax,%ebx
	cmpl	$0,%ebx
	movl	$1,%eax
	jne	parse_logTerm_reltrue_136
	movl	$0,%eax
parse_logTerm_reltrue_136	:	
	testl	%eax,%eax
	jnz	parse_logTerm_ifbl_135
	jmp	parse_logTerm_elsebl_135
parse_logTerm_ifbl_135	:	

	movl	$0,%ebx
	subl	$1,%ebx
	movl	%ebx,%eax
	jmp	parse_logTerm_ret
parse_logTerm_elsebl_135	:	
parse_logTerm_endif_135	:	
	jmp	parse_logTerm_while_133
parse_logTerm_endwhile_133	:	

	movl	$0,%eax
	jmp	parse_logTerm_ret
parse_logTerm_ret	:	
	movl	%ebp,%esp
	popl	%ebp
	ret	

.globl	parse_logExpr
.type	parse_logExpr,@function
parse_logExpr	:	
	pushl	%ebp
	movl	%esp,%ebp
	subl	$4,%esp

	subl	$8,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	$symtab+747,4(%esp)
	call	parse_tracemsg
	addl	$8,%esp

	subl	$0,%esp
	call	syntax_CreateTreeNode
	addl	$0,%esp
	movl	%eax,-4(%ebp)

	subl	$8,%esp
	movl	12(%ebp),%eax
	movl	%eax,0(%esp)
	movl	-4(%ebp),%eax
	movl	%eax,4(%esp)
	call	syntax_AddChildTree
	addl	$8,%esp

	subl	$8,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	-4(%ebp),%eax
	movl	%eax,4(%esp)
	call	parse_logTerm
	addl	$8,%esp
	movl	%eax,%ebx
	cmpl	$0,%ebx
	movl	$1,%eax
	jne	parse_logExpr_reltrue_138
	movl	$0,%eax
parse_logExpr_reltrue_138	:	
	testl	%eax,%eax
	jnz	parse_logExpr_ifbl_137
	jmp	parse_logExpr_elsebl_137
parse_logExpr_ifbl_137	:	

	movl	$0,%ebx
	subl	$1,%ebx
	movl	%ebx,%eax
	jmp	parse_logExpr_ret
parse_logExpr_elsebl_137	:	
parse_logExpr_endif_137	:	

parse_logExpr_while_139	:	
	movl	%ebp,%eax
	addl	$8,%eax
	movl	(%eax),%eax
	addl	$16,%eax
	movl	(%eax),%eax
	addl	$0,%eax
	movl	(%eax),%eax
	movl	%eax,%ebx
	cmpl	$25,%ebx
	movl	$1,%eax
	je	parse_logExpr_reltrue_140
	movl	$0,%eax
parse_logExpr_reltrue_140	:	
	testl	%eax,%eax
	jz	parse_logExpr_endwhile_139

	subl	$8,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	12(%ebp),%eax
	movl	%eax,4(%esp)
	call	addAndEatToken
	addl	$8,%esp

	subl	$0,%esp
	call	syntax_CreateTreeNode
	addl	$0,%esp
	movl	%eax,-4(%ebp)

	subl	$8,%esp
	movl	12(%ebp),%eax
	movl	%eax,0(%esp)
	movl	-4(%ebp),%eax
	movl	%eax,4(%esp)
	call	syntax_AddChildTree
	addl	$8,%esp

	subl	$8,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	-4(%ebp),%eax
	movl	%eax,4(%esp)
	call	parse_logTerm
	addl	$8,%esp
	movl	%eax,%ebx
	cmpl	$0,%ebx
	movl	$1,%eax
	jne	parse_logExpr_reltrue_142
	movl	$0,%eax
parse_logExpr_reltrue_142	:	
	testl	%eax,%eax
	jnz	parse_logExpr_ifbl_141
	jmp	parse_logExpr_elsebl_141
parse_logExpr_ifbl_141	:	

	movl	$0,%ebx
	subl	$1,%ebx
	movl	%ebx,%eax
	jmp	parse_logExpr_ret
parse_logExpr_elsebl_141	:	
parse_logExpr_endif_141	:	
	jmp	parse_logExpr_while_139
parse_logExpr_endwhile_139	:	

	movl	$0,%eax
	jmp	parse_logExpr_ret
parse_logExpr_ret	:	
	movl	%ebp,%esp
	popl	%ebp
	ret	

.globl	parse_continueStmt
.type	parse_continueStmt,@function
parse_continueStmt	:	
	pushl	%ebp
	movl	%esp,%ebp
	subl	$0,%esp

	subl	$8,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	$symtab+761,4(%esp)
	call	parse_tracemsg
	addl	$8,%esp

	subl	$16,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	12(%ebp),%eax
	movl	%eax,4(%esp)
	movl	$42,8(%esp)
	movl	$symtab+780,12(%esp)
	call	addAndEatSpecificToken
	addl	$16,%esp
	movl	%eax,%ebx
	cmpl	$0,%ebx
	movl	$1,%eax
	jne	parse_continueStmt_reltrue_144
	movl	$0,%eax
parse_continueStmt_reltrue_144	:	
	testl	%eax,%eax
	jnz	parse_continueStmt_ifbl_143
	jmp	parse_continueStmt_elsebl_143
parse_continueStmt_ifbl_143	:	

	movl	$0,%ebx
	subl	$1,%ebx
	movl	%ebx,%eax
	jmp	parse_continueStmt_ret
parse_continueStmt_elsebl_143	:	
parse_continueStmt_endif_143	:	

	movl	%ebp,%eax
	addl	$8,%eax
	movl	(%eax),%eax
	addl	$8,%eax
	movl	(%eax),%eax
	testl	%eax,%eax
	jnz	parse_continueStmt_ifbl_145
	jmp	parse_continueStmt_elsebl_145
parse_continueStmt_ifbl_145	:	

	subl	$8,%esp
	movl	%ebp,%eax
	addl	$8,%eax
	movl	(%eax),%eax
	addl	$8,%eax
	movl	(%eax),%eax
	movl	%eax,0(%esp)
	movl	12(%ebp),%eax
	movl	%eax,4(%esp)
	call	codegen_EmitContinue
	addl	$8,%esp
	jmp	parse_continueStmt_endif_145
parse_continueStmt_elsebl_145	:	
parse_continueStmt_endif_145	:	

	subl	$16,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	12(%ebp),%eax
	movl	%eax,4(%esp)
	movl	$8,8(%esp)
	movl	$symtab+806,12(%esp)
	call	addAndEatSpecificToken
	addl	$16,%esp
	movl	%eax,%ebx
	cmpl	$0,%ebx
	movl	$1,%eax
	jne	parse_continueStmt_reltrue_147
	movl	$0,%eax
parse_continueStmt_reltrue_147	:	
	testl	%eax,%eax
	jnz	parse_continueStmt_ifbl_146
	jmp	parse_continueStmt_elsebl_146
parse_continueStmt_ifbl_146	:	

	movl	$0,%eax
	jmp	parse_continueStmt_ret
parse_continueStmt_elsebl_146	:	
parse_continueStmt_endif_146	:	

	movl	$0,%eax
	jmp	parse_continueStmt_ret
parse_continueStmt_ret	:	
	movl	%ebp,%esp
	popl	%ebp
	ret	

.globl	parse_breakStmt
.type	parse_breakStmt,@function
parse_breakStmt	:	
	pushl	%ebp
	movl	%esp,%ebp
	subl	$0,%esp

	subl	$8,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	$symtab+840,4(%esp)
	call	parse_tracemsg
	addl	$8,%esp

	subl	$16,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	12(%ebp),%eax
	movl	%eax,4(%esp)
	movl	$41,8(%esp)
	movl	$symtab+856,12(%esp)
	call	addAndEatSpecificToken
	addl	$16,%esp
	movl	%eax,%ebx
	cmpl	$0,%ebx
	movl	$1,%eax
	jne	parse_breakStmt_reltrue_149
	movl	$0,%eax
parse_breakStmt_reltrue_149	:	
	testl	%eax,%eax
	jnz	parse_breakStmt_ifbl_148
	jmp	parse_breakStmt_elsebl_148
parse_breakStmt_ifbl_148	:	

	movl	$0,%ebx
	subl	$1,%ebx
	movl	%ebx,%eax
	jmp	parse_breakStmt_ret
parse_breakStmt_elsebl_148	:	
parse_breakStmt_endif_148	:	

	movl	%ebp,%eax
	addl	$8,%eax
	movl	(%eax),%eax
	addl	$8,%eax
	movl	(%eax),%eax
	testl	%eax,%eax
	jnz	parse_breakStmt_ifbl_150
	jmp	parse_breakStmt_elsebl_150
parse_breakStmt_ifbl_150	:	

	subl	$8,%esp
	movl	%ebp,%eax
	addl	$8,%eax
	movl	(%eax),%eax
	addl	$8,%eax
	movl	(%eax),%eax
	movl	%eax,0(%esp)
	movl	12(%ebp),%eax
	movl	%eax,4(%esp)
	call	codegen_EmitBreak
	addl	$8,%esp
	jmp	parse_breakStmt_endif_150
parse_breakStmt_elsebl_150	:	
parse_breakStmt_endif_150	:	

	subl	$16,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	12(%ebp),%eax
	movl	%eax,4(%esp)
	movl	$8,8(%esp)
	movl	$symtab+879,12(%esp)
	call	addAndEatSpecificToken
	addl	$16,%esp
	movl	%eax,%ebx
	cmpl	$0,%ebx
	movl	$1,%eax
	jne	parse_breakStmt_reltrue_152
	movl	$0,%eax
parse_breakStmt_reltrue_152	:	
	testl	%eax,%eax
	jnz	parse_breakStmt_ifbl_151
	jmp	parse_breakStmt_elsebl_151
parse_breakStmt_ifbl_151	:	

	movl	$0,%eax
	jmp	parse_breakStmt_ret
parse_breakStmt_elsebl_151	:	
parse_breakStmt_endif_151	:	

	movl	$0,%eax
	jmp	parse_breakStmt_ret
parse_breakStmt_ret	:	
	movl	%ebp,%esp
	popl	%ebp
	ret	

.globl	parse_returnStmt
.type	parse_returnStmt,@function
parse_returnStmt	:	
	pushl	%ebp
	movl	%esp,%ebp
	subl	$4,%esp

	subl	$8,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	$symtab+910,4(%esp)
	call	parse_tracemsg
	addl	$8,%esp

	subl	$16,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	12(%ebp),%eax
	movl	%eax,4(%esp)
	movl	$15,8(%esp)
	movl	$symtab+927,12(%esp)
	call	addAndEatSpecificToken
	addl	$16,%esp
	movl	%eax,%ebx
	cmpl	$0,%ebx
	movl	$1,%eax
	jne	parse_returnStmt_reltrue_154
	movl	$0,%eax
parse_returnStmt_reltrue_154	:	
	testl	%eax,%eax
	jnz	parse_returnStmt_ifbl_153
	jmp	parse_returnStmt_elsebl_153
parse_returnStmt_ifbl_153	:	

	movl	$0,%ebx
	subl	$1,%ebx
	movl	%ebx,%eax
	jmp	parse_returnStmt_ret
parse_returnStmt_elsebl_153	:	
parse_returnStmt_endif_153	:	

	movl	%ebp,%eax
	addl	$8,%eax
	movl	(%eax),%eax
	addl	$16,%eax
	movl	(%eax),%eax
	addl	$0,%eax
	movl	(%eax),%eax
	movl	%eax,%ebx
	cmpl	$8,%ebx
	movl	$1,%eax
	jne	parse_returnStmt_reltrue_156
	movl	$0,%eax
parse_returnStmt_reltrue_156	:	
	testl	%eax,%eax
	jnz	parse_returnStmt_ifbl_155
	jmp	parse_returnStmt_elsebl_155
parse_returnStmt_ifbl_155	:	

	subl	$0,%esp
	call	syntax_CreateTreeNode
	addl	$0,%esp
	movl	%eax,-4(%ebp)

	subl	$8,%esp
	movl	12(%ebp),%eax
	movl	%eax,0(%esp)
	movl	-4(%ebp),%eax
	movl	%eax,4(%esp)
	call	syntax_AddChildTree
	addl	$8,%esp

	subl	$8,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	-4(%ebp),%eax
	movl	%eax,4(%esp)
	call	parse_logExpr
	addl	$8,%esp
	movl	%eax,%ebx
	cmpl	$0,%ebx
	movl	$1,%eax
	jne	parse_returnStmt_reltrue_158
	movl	$0,%eax
parse_returnStmt_reltrue_158	:	
	testl	%eax,%eax
	jnz	parse_returnStmt_ifbl_157
	jmp	parse_returnStmt_elsebl_157
parse_returnStmt_ifbl_157	:	

	movl	$0,%ebx
	subl	$1,%ebx
	movl	%ebx,%eax
	jmp	parse_returnStmt_ret
parse_returnStmt_elsebl_157	:	
parse_returnStmt_endif_157	:	
	jmp	parse_returnStmt_endif_155
parse_returnStmt_elsebl_155	:	
parse_returnStmt_endif_155	:	

	subl	$16,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	12(%ebp),%eax
	movl	%eax,4(%esp)
	movl	$8,8(%esp)
	movl	$symtab+951,12(%esp)
	call	addAndEatSpecificToken
	addl	$16,%esp
	movl	%eax,%ebx
	cmpl	$0,%ebx
	movl	$1,%eax
	jne	parse_returnStmt_reltrue_160
	movl	$0,%eax
parse_returnStmt_reltrue_160	:	
	testl	%eax,%eax
	jnz	parse_returnStmt_ifbl_159
	jmp	parse_returnStmt_elsebl_159
parse_returnStmt_ifbl_159	:	

	movl	$0,%eax
	jmp	parse_returnStmt_ret
parse_returnStmt_elsebl_159	:	
parse_returnStmt_endif_159	:	

	movl	%ebp,%eax
	addl	$8,%eax
	movl	(%eax),%eax
	addl	$8,%eax
	movl	(%eax),%eax
	testl	%eax,%eax
	jnz	parse_returnStmt_ifbl_161
	jmp	parse_returnStmt_elsebl_161
parse_returnStmt_ifbl_161	:	

	subl	$8,%esp
	movl	%ebp,%eax
	addl	$8,%eax
	movl	(%eax),%eax
	addl	$8,%eax
	movl	(%eax),%eax
	movl	%eax,0(%esp)
	movl	12(%ebp),%eax
	movl	%eax,4(%esp)
	call	codegen_EmitReturn
	addl	$8,%esp
	jmp	parse_returnStmt_endif_161
parse_returnStmt_elsebl_161	:	
parse_returnStmt_endif_161	:	

	movl	$0,%eax
	jmp	parse_returnStmt_ret
parse_returnStmt_ret	:	
	movl	%ebp,%esp
	popl	%ebp
	ret	

.globl	parse_stmtBlock
.type	parse_stmtBlock,@function
parse_stmtBlock	:	
	pushl	%ebp
	movl	%esp,%ebp
	subl	$4,%esp

	subl	$8,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	$symtab+990,4(%esp)
	call	parse_tracemsg
	addl	$8,%esp

	movl	%ebp,%eax
	addl	$8,%eax
	movl	(%eax),%eax
	addl	$16,%eax
	movl	(%eax),%eax
	addl	$0,%eax
	movl	(%eax),%eax
	movl	%eax,%ebx
	cmpl	$1,%ebx
	movl	$1,%eax
	je	parse_stmtBlock_reltrue_163
	movl	$0,%eax
parse_stmtBlock_reltrue_163	:	
	testl	%eax,%eax
	jnz	parse_stmtBlock_ifbl_162
	jmp	parse_stmtBlock_elsebl_162
parse_stmtBlock_ifbl_162	:	

	subl	$8,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	12(%ebp),%eax
	movl	%eax,4(%esp)
	call	addAndEatToken
	addl	$8,%esp

parse_stmtBlock_while_164	:	
	movl	%ebp,%eax
	addl	$8,%eax
	movl	(%eax),%eax
	addl	$16,%eax
	movl	(%eax),%eax
	addl	$0,%eax
	movl	(%eax),%eax
	movl	%eax,%ebx
	cmpl	$2,%ebx
	movl	$1,%eax
	jne	parse_stmtBlock_reltrue_165
	movl	$0,%eax
parse_stmtBlock_reltrue_165	:	
	testl	%eax,%eax
	jz	parse_stmtBlock_endwhile_164

	subl	$0,%esp
	call	syntax_CreateTreeNode
	addl	$0,%esp
	movl	%eax,-4(%ebp)

	subl	$8,%esp
	movl	12(%ebp),%eax
	movl	%eax,0(%esp)
	movl	-4(%ebp),%eax
	movl	%eax,4(%esp)
	call	syntax_AddChildTree
	addl	$8,%esp

	subl	$8,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	-4(%ebp),%eax
	movl	%eax,4(%esp)
	call	parse_statement
	addl	$8,%esp
	movl	%eax,%ebx
	cmpl	$0,%ebx
	movl	$1,%eax
	jne	parse_stmtBlock_reltrue_167
	movl	$0,%eax
parse_stmtBlock_reltrue_167	:	
	testl	%eax,%eax
	jnz	parse_stmtBlock_ifbl_166
	jmp	parse_stmtBlock_elsebl_166
parse_stmtBlock_ifbl_166	:	

	subl	$4,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	call	sync_toStrongKeyword
	addl	$4,%esp

	movl	%ebp,%eax
	addl	$8,%eax
	movl	(%eax),%eax
	addl	$16,%eax
	movl	(%eax),%eax
	addl	$0,%eax
	movl	(%eax),%eax
	movl	%eax,%ebx
	cmpl	$2,%ebx
	movl	$1,%eax
	jne	parse_stmtBlock_reltrue_170
	movl	$0,%eax
parse_stmtBlock_reltrue_170	:	
	testl	%eax,%eax
	jz	parse_stmtBlock_logtermfalse_169
	movl	%ebp,%eax
	addl	$8,%eax
	movl	(%eax),%eax
	addl	$16,%eax
	movl	(%eax),%eax
	addl	$0,%eax
	movl	(%eax),%eax
	movl	%eax,%ebx
	cmpl	$12,%ebx
	movl	$1,%eax
	jne	parse_stmtBlock_reltrue_171
	movl	$0,%eax
parse_stmtBlock_reltrue_171	:	
	testl	%eax,%eax
	jz	parse_stmtBlock_logtermfalse_169
	movl	%ebp,%eax
	addl	$8,%eax
	movl	(%eax),%eax
	addl	$16,%eax
	movl	(%eax),%eax
	addl	$0,%eax
	movl	(%eax),%eax
	movl	%eax,%ebx
	cmpl	$14,%ebx
	movl	$1,%eax
	jne	parse_stmtBlock_reltrue_172
	movl	$0,%eax
parse_stmtBlock_reltrue_172	:	
	testl	%eax,%eax
	jz	parse_stmtBlock_logtermfalse_169
	movl	%ebp,%eax
	addl	$8,%eax
	movl	(%eax),%eax
	addl	$16,%eax
	movl	(%eax),%eax
	addl	$0,%eax
	movl	(%eax),%eax
	movl	%eax,%ebx
	cmpl	$15,%ebx
	movl	$1,%eax
	jne	parse_stmtBlock_reltrue_173
	movl	$0,%eax
parse_stmtBlock_reltrue_173	:	
	testl	%eax,%eax
	jz	parse_stmtBlock_logtermfalse_169
	movl	$1,%eax
	jmp	parse_stmtBlock_logtermtrue_169
parse_stmtBlock_logtermfalse_169	:	
	movl	$0,%eax
parse_stmtBlock_logtermtrue_169	:	
	testl	%eax,%eax
	jnz	parse_stmtBlock_ifbl_168
	jmp	parse_stmtBlock_elsebl_168
parse_stmtBlock_ifbl_168	:	

	movl	$0,%ebx
	subl	$1,%ebx
	movl	%ebx,%eax
	jmp	parse_stmtBlock_ret
parse_stmtBlock_elsebl_168	:	
parse_stmtBlock_endif_168	:	
	jmp	parse_stmtBlock_endif_166
parse_stmtBlock_elsebl_166	:	
parse_stmtBlock_endif_166	:	
	jmp	parse_stmtBlock_while_164
parse_stmtBlock_endwhile_164	:	

	subl	$16,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	12(%ebp),%eax
	movl	%eax,4(%esp)
	movl	$2,8(%esp)
	movl	$symtab+1006,12(%esp)
	call	addAndEatSpecificToken
	addl	$16,%esp
	movl	%eax,%ebx
	cmpl	$0,%ebx
	movl	$1,%eax
	jne	parse_stmtBlock_reltrue_175
	movl	$0,%eax
parse_stmtBlock_reltrue_175	:	
	testl	%eax,%eax
	jnz	parse_stmtBlock_ifbl_174
	jmp	parse_stmtBlock_elsebl_174
parse_stmtBlock_ifbl_174	:	

	movl	$0,%ebx
	subl	$1,%ebx
	movl	%ebx,%eax
	jmp	parse_stmtBlock_ret
parse_stmtBlock_elsebl_174	:	
parse_stmtBlock_endif_174	:	

	movl	$0,%eax
	jmp	parse_stmtBlock_ret
parse_stmtBlock_elsebl_162	:	
parse_stmtBlock_endif_162	:	

	subl	$0,%esp
	call	syntax_CreateTreeNode
	addl	$0,%esp
	movl	%eax,-4(%ebp)

	subl	$8,%esp
	movl	12(%ebp),%eax
	movl	%eax,0(%esp)
	movl	-4(%ebp),%eax
	movl	%eax,4(%esp)
	call	syntax_AddChildTree
	addl	$8,%esp

	subl	$8,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	-4(%ebp),%eax
	movl	%eax,4(%esp)
	call	parse_statement
	addl	$8,%esp
	jmp	parse_stmtBlock_ret
parse_stmtBlock_ret	:	
	movl	%ebp,%esp
	popl	%ebp
	ret	

.globl	parse_whileStmt
.type	parse_whileStmt,@function
parse_whileStmt	:	
	pushl	%ebp
	movl	%esp,%ebp
	subl	$12,%esp

	subl	$8,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	$symtab+1051,4(%esp)
	call	parse_tracemsg
	addl	$8,%esp

	subl	$16,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	12(%ebp),%eax
	movl	%eax,4(%esp)
	movl	$14,8(%esp)
	movl	$symtab+1067,12(%esp)
	call	addAndEatSpecificToken
	addl	$16,%esp
	movl	%eax,%ebx
	cmpl	$0,%ebx
	movl	$1,%eax
	jne	parse_whileStmt_reltrue_177
	movl	$0,%eax
parse_whileStmt_reltrue_177	:	
	testl	%eax,%eax
	jnz	parse_whileStmt_ifbl_176
	jmp	parse_whileStmt_elsebl_176
parse_whileStmt_ifbl_176	:	

	movl	$0,%ebx
	subl	$1,%ebx
	movl	%ebx,%eax
	jmp	parse_whileStmt_ret
parse_whileStmt_elsebl_176	:	
parse_whileStmt_endif_176	:	

	subl	$16,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	12(%ebp),%eax
	movl	%eax,4(%esp)
	movl	$5,8(%esp)
	movl	$symtab+1090,12(%esp)
	call	addAndEatSpecificToken
	addl	$16,%esp
	movl	%eax,%ebx
	cmpl	$0,%ebx
	movl	$1,%eax
	jne	parse_whileStmt_reltrue_179
	movl	$0,%eax
parse_whileStmt_reltrue_179	:	
	testl	%eax,%eax
	jnz	parse_whileStmt_ifbl_178
	jmp	parse_whileStmt_elsebl_178
parse_whileStmt_ifbl_178	:	

	movl	$0,%ebx
	subl	$1,%ebx
	movl	%ebx,%eax
	jmp	parse_whileStmt_ret
parse_whileStmt_elsebl_178	:	
parse_whileStmt_endif_178	:	

	subl	$0,%esp
	call	syntax_CreateTreeNode
	addl	$0,%esp
	movl	%eax,-4(%ebp)

	subl	$8,%esp
	movl	12(%ebp),%eax
	movl	%eax,0(%esp)
	movl	-4(%ebp),%eax
	movl	%eax,4(%esp)
	call	syntax_AddChildTree
	addl	$8,%esp

	subl	$8,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	-4(%ebp),%eax
	movl	%eax,4(%esp)
	call	parse_logExpr
	addl	$8,%esp
	movl	%eax,%ebx
	cmpl	$0,%ebx
	movl	$1,%eax
	jne	parse_whileStmt_reltrue_181
	movl	$0,%eax
parse_whileStmt_reltrue_181	:	
	testl	%eax,%eax
	jnz	parse_whileStmt_ifbl_180
	jmp	parse_whileStmt_elsebl_180
parse_whileStmt_ifbl_180	:	

	movl	$0,%ebx
	subl	$1,%ebx
	movl	%ebx,%eax
	jmp	parse_whileStmt_ret
parse_whileStmt_elsebl_180	:	
parse_whileStmt_endif_180	:	

	subl	$16,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	12(%ebp),%eax
	movl	%eax,4(%esp)
	movl	$6,8(%esp)
	movl	$symtab+1121,12(%esp)
	call	addAndEatSpecificToken
	addl	$16,%esp
	movl	%eax,%ebx
	cmpl	$0,%ebx
	movl	$1,%eax
	jne	parse_whileStmt_reltrue_183
	movl	$0,%eax
parse_whileStmt_reltrue_183	:	
	testl	%eax,%eax
	jnz	parse_whileStmt_ifbl_182
	jmp	parse_whileStmt_elsebl_182
parse_whileStmt_ifbl_182	:	

	movl	$0,%ebx
	subl	$1,%ebx
	movl	%ebx,%eax
	jmp	parse_whileStmt_ret
parse_whileStmt_elsebl_182	:	
parse_whileStmt_endif_182	:	

	movl	%ebp,%eax
	addl	$8,%eax
	movl	(%eax),%eax
	addl	$8,%eax
	movl	(%eax),%eax
	testl	%eax,%eax
	jnz	parse_whileStmt_ifbl_184
	jmp	parse_whileStmt_elsebl_184
parse_whileStmt_ifbl_184	:	

	movl	%ebp,%eax
	addl	$8,%eax
	movl	(%eax),%eax
	addl	$8,%eax
	movl	(%eax),%eax
	addl	$28,%eax
	movl	(%eax),%eax
	movl	%eax,-12(%ebp)

	subl	$12,%esp
	movl	%ebp,%eax
	addl	$8,%eax
	movl	(%eax),%eax
	addl	$8,%eax
	movl	(%eax),%eax
	movl	%eax,0(%esp)
	movl	12(%ebp),%eax
	movl	%eax,4(%esp)
	movl	%ebp,%eax
	addl	$-8,%eax
	movl	%eax,8(%esp)
	call	codegen_EmitBeginWhile
	addl	$12,%esp

	movl	%ebp,%eax
	addl	$8,%eax
	movl	(%eax),%eax
	addl	$8,%eax
	movl	(%eax),%eax
	addl	$28,%eax
	pushl	%eax
	movl	-8(%ebp),%eax
	popl	%ebx
	movl	%eax,(%ebx)
	jmp	parse_whileStmt_endif_184
parse_whileStmt_elsebl_184	:	
parse_whileStmt_endif_184	:	

	subl	$0,%esp
	call	syntax_CreateTreeNode
	addl	$0,%esp
	movl	%eax,-4(%ebp)

	subl	$8,%esp
	movl	12(%ebp),%eax
	movl	%eax,0(%esp)
	movl	-4(%ebp),%eax
	movl	%eax,4(%esp)
	call	syntax_AddChildTree
	addl	$8,%esp

	subl	$8,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	-4(%ebp),%eax
	movl	%eax,4(%esp)
	call	parse_stmtBlock
	addl	$8,%esp
	movl	%eax,%ebx
	cmpl	$0,%ebx
	movl	$1,%eax
	jne	parse_whileStmt_reltrue_186
	movl	$0,%eax
parse_whileStmt_reltrue_186	:	
	testl	%eax,%eax
	jnz	parse_whileStmt_ifbl_185
	jmp	parse_whileStmt_elsebl_185
parse_whileStmt_ifbl_185	:	

	movl	$0,%ebx
	subl	$1,%ebx
	movl	%ebx,%eax
	jmp	parse_whileStmt_ret
parse_whileStmt_elsebl_185	:	
parse_whileStmt_endif_185	:	

	movl	%ebp,%eax
	addl	$8,%eax
	movl	(%eax),%eax
	addl	$8,%eax
	movl	(%eax),%eax
	testl	%eax,%eax
	jnz	parse_whileStmt_ifbl_187
	jmp	parse_whileStmt_elsebl_187
parse_whileStmt_ifbl_187	:	

	movl	%ebp,%eax
	addl	$8,%eax
	movl	(%eax),%eax
	addl	$8,%eax
	movl	(%eax),%eax
	addl	$28,%eax
	pushl	%eax
	movl	-12(%ebp),%eax
	popl	%ebx
	movl	%eax,(%ebx)

	subl	$12,%esp
	movl	%ebp,%eax
	addl	$8,%eax
	movl	(%eax),%eax
	addl	$8,%eax
	movl	(%eax),%eax
	movl	%eax,0(%esp)
	movl	12(%ebp),%eax
	movl	%eax,4(%esp)
	movl	-8(%ebp),%eax
	movl	%eax,8(%esp)
	call	codegen_EmitEndWhile
	addl	$12,%esp
	jmp	parse_whileStmt_endif_187
parse_whileStmt_elsebl_187	:	
parse_whileStmt_endif_187	:	

	movl	$0,%eax
	jmp	parse_whileStmt_ret
parse_whileStmt_ret	:	
	movl	%ebp,%esp
	popl	%ebp
	ret	

.globl	parse_ifStmt
.type	parse_ifStmt,@function
parse_ifStmt	:	
	pushl	%ebp
	movl	%esp,%ebp
	subl	$8,%esp

	subl	$8,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	$symtab+1163,4(%esp)
	call	parse_tracemsg
	addl	$8,%esp

	subl	$16,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	12(%ebp),%eax
	movl	%eax,4(%esp)
	movl	$12,8(%esp)
	movl	$symtab+1176,12(%esp)
	call	addAndEatSpecificToken
	addl	$16,%esp
	movl	%eax,%ebx
	cmpl	$0,%ebx
	movl	$1,%eax
	jne	parse_ifStmt_reltrue_189
	movl	$0,%eax
parse_ifStmt_reltrue_189	:	
	testl	%eax,%eax
	jnz	parse_ifStmt_ifbl_188
	jmp	parse_ifStmt_elsebl_188
parse_ifStmt_ifbl_188	:	

	movl	$0,%ebx
	subl	$1,%ebx
	movl	%ebx,%eax
	jmp	parse_ifStmt_ret
parse_ifStmt_elsebl_188	:	
parse_ifStmt_endif_188	:	

	subl	$16,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	12(%ebp),%eax
	movl	%eax,4(%esp)
	movl	$5,8(%esp)
	movl	$symtab+1196,12(%esp)
	call	addAndEatSpecificToken
	addl	$16,%esp
	movl	%eax,%ebx
	cmpl	$0,%ebx
	movl	$1,%eax
	jne	parse_ifStmt_reltrue_191
	movl	$0,%eax
parse_ifStmt_reltrue_191	:	
	testl	%eax,%eax
	jnz	parse_ifStmt_ifbl_190
	jmp	parse_ifStmt_elsebl_190
parse_ifStmt_ifbl_190	:	

	movl	$0,%ebx
	subl	$1,%ebx
	movl	%ebx,%eax
	jmp	parse_ifStmt_ret
parse_ifStmt_elsebl_190	:	
parse_ifStmt_endif_190	:	

	subl	$0,%esp
	call	syntax_CreateTreeNode
	addl	$0,%esp
	movl	%eax,-4(%ebp)

	subl	$8,%esp
	movl	12(%ebp),%eax
	movl	%eax,0(%esp)
	movl	-4(%ebp),%eax
	movl	%eax,4(%esp)
	call	syntax_AddChildTree
	addl	$8,%esp

	subl	$8,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	-4(%ebp),%eax
	movl	%eax,4(%esp)
	call	parse_logExpr
	addl	$8,%esp
	movl	%eax,%ebx
	cmpl	$0,%ebx
	movl	$1,%eax
	jne	parse_ifStmt_reltrue_193
	movl	$0,%eax
parse_ifStmt_reltrue_193	:	
	testl	%eax,%eax
	jnz	parse_ifStmt_ifbl_192
	jmp	parse_ifStmt_elsebl_192
parse_ifStmt_ifbl_192	:	

	movl	$0,%ebx
	subl	$1,%ebx
	movl	%ebx,%eax
	jmp	parse_ifStmt_ret
parse_ifStmt_elsebl_192	:	
parse_ifStmt_endif_192	:	

	subl	$16,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	12(%ebp),%eax
	movl	%eax,4(%esp)
	movl	$6,8(%esp)
	movl	$symtab+1224,12(%esp)
	call	addAndEatSpecificToken
	addl	$16,%esp
	movl	%eax,%ebx
	cmpl	$0,%ebx
	movl	$1,%eax
	jne	parse_ifStmt_reltrue_195
	movl	$0,%eax
parse_ifStmt_reltrue_195	:	
	testl	%eax,%eax
	jnz	parse_ifStmt_ifbl_194
	jmp	parse_ifStmt_elsebl_194
parse_ifStmt_ifbl_194	:	

	movl	$0,%ebx
	subl	$1,%ebx
	movl	%ebx,%eax
	jmp	parse_ifStmt_ret
parse_ifStmt_elsebl_194	:	
parse_ifStmt_endif_194	:	

	movl	%ebp,%eax
	addl	$8,%eax
	movl	(%eax),%eax
	addl	$8,%eax
	movl	(%eax),%eax
	testl	%eax,%eax
	jnz	parse_ifStmt_ifbl_196
	jmp	parse_ifStmt_elsebl_196
parse_ifStmt_ifbl_196	:	

	subl	$12,%esp
	movl	%ebp,%eax
	addl	$8,%eax
	movl	(%eax),%eax
	addl	$8,%eax
	movl	(%eax),%eax
	movl	%eax,0(%esp)
	movl	12(%ebp),%eax
	movl	%eax,4(%esp)
	movl	%ebp,%eax
	addl	$-8,%eax
	movl	%eax,8(%esp)
	call	codegen_EmitBeginIf
	addl	$12,%esp
	jmp	parse_ifStmt_endif_196
parse_ifStmt_elsebl_196	:	
parse_ifStmt_endif_196	:	

	subl	$0,%esp
	call	syntax_CreateTreeNode
	addl	$0,%esp
	movl	%eax,-4(%ebp)

	subl	$8,%esp
	movl	12(%ebp),%eax
	movl	%eax,0(%esp)
	movl	-4(%ebp),%eax
	movl	%eax,4(%esp)
	call	syntax_AddChildTree
	addl	$8,%esp

	subl	$8,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	-4(%ebp),%eax
	movl	%eax,4(%esp)
	call	parse_stmtBlock
	addl	$8,%esp
	movl	%eax,%ebx
	cmpl	$0,%ebx
	movl	$1,%eax
	jne	parse_ifStmt_reltrue_198
	movl	$0,%eax
parse_ifStmt_reltrue_198	:	
	testl	%eax,%eax
	jnz	parse_ifStmt_ifbl_197
	jmp	parse_ifStmt_elsebl_197
parse_ifStmt_ifbl_197	:	

	movl	$0,%ebx
	subl	$1,%ebx
	movl	%ebx,%eax
	jmp	parse_ifStmt_ret
parse_ifStmt_elsebl_197	:	
parse_ifStmt_endif_197	:	

	movl	%ebp,%eax
	addl	$8,%eax
	movl	(%eax),%eax
	addl	$8,%eax
	movl	(%eax),%eax
	testl	%eax,%eax
	jnz	parse_ifStmt_ifbl_199
	jmp	parse_ifStmt_elsebl_199
parse_ifStmt_ifbl_199	:	

	subl	$12,%esp
	movl	%ebp,%eax
	addl	$8,%eax
	movl	(%eax),%eax
	addl	$8,%eax
	movl	(%eax),%eax
	movl	%eax,0(%esp)
	movl	12(%ebp),%eax
	movl	%eax,4(%esp)
	movl	-8(%ebp),%eax
	movl	%eax,8(%esp)
	call	codegen_EmitElseIf
	addl	$12,%esp
	jmp	parse_ifStmt_endif_199
parse_ifStmt_elsebl_199	:	
parse_ifStmt_endif_199	:	

	movl	%ebp,%eax
	addl	$8,%eax
	movl	(%eax),%eax
	addl	$16,%eax
	movl	(%eax),%eax
	addl	$0,%eax
	movl	(%eax),%eax
	movl	%eax,%ebx
	cmpl	$13,%ebx
	movl	$1,%eax
	je	parse_ifStmt_reltrue_201
	movl	$0,%eax
parse_ifStmt_reltrue_201	:	
	testl	%eax,%eax
	jnz	parse_ifStmt_ifbl_200
	jmp	parse_ifStmt_elsebl_200
parse_ifStmt_ifbl_200	:	

	subl	$8,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	12(%ebp),%eax
	movl	%eax,4(%esp)
	call	addAndEatToken
	addl	$8,%esp

	subl	$0,%esp
	call	syntax_CreateTreeNode
	addl	$0,%esp
	movl	%eax,-4(%ebp)

	subl	$8,%esp
	movl	12(%ebp),%eax
	movl	%eax,0(%esp)
	movl	-4(%ebp),%eax
	movl	%eax,4(%esp)
	call	syntax_AddChildTree
	addl	$8,%esp

	subl	$8,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	-4(%ebp),%eax
	movl	%eax,4(%esp)
	call	parse_stmtBlock
	addl	$8,%esp
	movl	%eax,%ebx
	cmpl	$0,%ebx
	movl	$1,%eax
	jne	parse_ifStmt_reltrue_203
	movl	$0,%eax
parse_ifStmt_reltrue_203	:	
	testl	%eax,%eax
	jnz	parse_ifStmt_ifbl_202
	jmp	parse_ifStmt_elsebl_202
parse_ifStmt_ifbl_202	:	

	movl	$0,%ebx
	subl	$1,%ebx
	movl	%ebx,%eax
	jmp	parse_ifStmt_ret
parse_ifStmt_elsebl_202	:	
parse_ifStmt_endif_202	:	
	jmp	parse_ifStmt_endif_200
parse_ifStmt_elsebl_200	:	
parse_ifStmt_endif_200	:	

	movl	%ebp,%eax
	addl	$8,%eax
	movl	(%eax),%eax
	addl	$8,%eax
	movl	(%eax),%eax
	testl	%eax,%eax
	jnz	parse_ifStmt_ifbl_204
	jmp	parse_ifStmt_elsebl_204
parse_ifStmt_ifbl_204	:	

	subl	$12,%esp
	movl	%ebp,%eax
	addl	$8,%eax
	movl	(%eax),%eax
	addl	$8,%eax
	movl	(%eax),%eax
	movl	%eax,0(%esp)
	movl	12(%ebp),%eax
	movl	%eax,4(%esp)
	movl	-8(%ebp),%eax
	movl	%eax,8(%esp)
	call	codegen_EmitEndIf
	addl	$12,%esp
	jmp	parse_ifStmt_endif_204
parse_ifStmt_elsebl_204	:	
parse_ifStmt_endif_204	:	

	movl	$0,%eax
	jmp	parse_ifStmt_ret
parse_ifStmt_ret	:	
	movl	%ebp,%esp
	popl	%ebp
	ret	

.globl	parse_assignStmt
.type	parse_assignStmt,@function
parse_assignStmt	:	
	pushl	%ebp
	movl	%esp,%ebp
	subl	$4,%esp

	subl	$8,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	$symtab+1263,4(%esp)
	call	parse_tracemsg
	addl	$8,%esp

	subl	$0,%esp
	call	syntax_CreateTreeNode
	addl	$0,%esp
	movl	%eax,-4(%ebp)

	subl	$8,%esp
	movl	12(%ebp),%eax
	movl	%eax,0(%esp)
	movl	-4(%ebp),%eax
	movl	%eax,4(%esp)
	call	syntax_AddChildTree
	addl	$8,%esp

	subl	$8,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	-4(%ebp),%eax
	movl	%eax,4(%esp)
	call	parse_variableExpr
	addl	$8,%esp
	movl	%eax,%ebx
	cmpl	$0,%ebx
	movl	$1,%eax
	jne	parse_assignStmt_reltrue_206
	movl	$0,%eax
parse_assignStmt_reltrue_206	:	
	testl	%eax,%eax
	jnz	parse_assignStmt_ifbl_205
	jmp	parse_assignStmt_elsebl_205
parse_assignStmt_ifbl_205	:	

	movl	$0,%ebx
	subl	$1,%ebx
	movl	%ebx,%eax
	jmp	parse_assignStmt_ret
parse_assignStmt_elsebl_205	:	
parse_assignStmt_endif_205	:	

	subl	$16,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	12(%ebp),%eax
	movl	%eax,4(%esp)
	movl	$11,8(%esp)
	movl	$symtab+1280,12(%esp)
	call	addAndEatSpecificToken
	addl	$16,%esp
	movl	%eax,%ebx
	cmpl	$0,%ebx
	movl	$1,%eax
	jne	parse_assignStmt_reltrue_208
	movl	$0,%eax
parse_assignStmt_reltrue_208	:	
	testl	%eax,%eax
	jnz	parse_assignStmt_ifbl_207
	jmp	parse_assignStmt_elsebl_207
parse_assignStmt_ifbl_207	:	

	movl	$0,%ebx
	subl	$1,%ebx
	movl	%ebx,%eax
	jmp	parse_assignStmt_ret
parse_assignStmt_elsebl_207	:	
parse_assignStmt_endif_207	:	

	subl	$0,%esp
	call	syntax_CreateTreeNode
	addl	$0,%esp
	movl	%eax,-4(%ebp)

	subl	$8,%esp
	movl	12(%ebp),%eax
	movl	%eax,0(%esp)
	movl	-4(%ebp),%eax
	movl	%eax,4(%esp)
	call	syntax_AddChildTree
	addl	$8,%esp

	subl	$8,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	-4(%ebp),%eax
	movl	%eax,4(%esp)
	call	parse_logExpr
	addl	$8,%esp
	movl	%eax,%ebx
	cmpl	$0,%ebx
	movl	$1,%eax
	jne	parse_assignStmt_reltrue_210
	movl	$0,%eax
parse_assignStmt_reltrue_210	:	
	testl	%eax,%eax
	jnz	parse_assignStmt_ifbl_209
	jmp	parse_assignStmt_elsebl_209
parse_assignStmt_ifbl_209	:	

	movl	$0,%ebx
	subl	$1,%ebx
	movl	%ebx,%eax
	jmp	parse_assignStmt_ret
parse_assignStmt_elsebl_209	:	
parse_assignStmt_endif_209	:	

	subl	$16,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	12(%ebp),%eax
	movl	%eax,4(%esp)
	movl	$8,8(%esp)
	movl	$symtab+1339,12(%esp)
	call	addAndEatSpecificToken
	addl	$16,%esp
	movl	%eax,%ebx
	cmpl	$0,%ebx
	movl	$1,%eax
	jne	parse_assignStmt_reltrue_212
	movl	$0,%eax
parse_assignStmt_reltrue_212	:	
	testl	%eax,%eax
	jnz	parse_assignStmt_ifbl_211
	jmp	parse_assignStmt_elsebl_211
parse_assignStmt_ifbl_211	:	

	movl	$0,%eax
	jmp	parse_assignStmt_ret
parse_assignStmt_elsebl_211	:	
parse_assignStmt_endif_211	:	

	movl	$0,%eax
	jmp	parse_assignStmt_ret
parse_assignStmt_ret	:	
	movl	%ebp,%esp
	popl	%ebp
	ret	

.globl	parse_funcCallStmt
.type	parse_funcCallStmt,@function
parse_funcCallStmt	:	
	pushl	%ebp
	movl	%esp,%ebp
	subl	$164,%esp

	subl	$8,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	$symtab+1376,4(%esp)
	call	parse_tracemsg
	addl	$8,%esp

	subl	$0,%esp
	call	syntax_CreateTreeNode
	addl	$0,%esp
	movl	%eax,-4(%ebp)

	subl	$8,%esp
	movl	12(%ebp),%eax
	movl	%eax,0(%esp)
	movl	-4(%ebp),%eax
	movl	%eax,4(%esp)
	call	syntax_AddChildTree
	addl	$8,%esp

	subl	$8,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	-4(%ebp),%eax
	movl	%eax,4(%esp)
	call	parse_funcCall
	addl	$8,%esp
	movl	%eax,%ebx
	cmpl	$0,%ebx
	movl	$1,%eax
	jne	parse_funcCallStmt_reltrue_214
	movl	$0,%eax
parse_funcCallStmt_reltrue_214	:	
	testl	%eax,%eax
	jnz	parse_funcCallStmt_ifbl_213
	jmp	parse_funcCallStmt_elsebl_213
parse_funcCallStmt_ifbl_213	:	

	movl	$0,%ebx
	subl	$1,%ebx
	movl	%ebx,%eax
	jmp	parse_funcCallStmt_ret
parse_funcCallStmt_elsebl_213	:	
parse_funcCallStmt_endif_213	:	

	subl	$16,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	12(%ebp),%eax
	movl	%eax,4(%esp)
	movl	$8,8(%esp)
	movl	$symtab+1395,12(%esp)
	call	addAndEatSpecificToken
	addl	$16,%esp
	movl	%eax,%ebx
	cmpl	$0,%ebx
	movl	$1,%eax
	jne	parse_funcCallStmt_reltrue_216
	movl	$0,%eax
parse_funcCallStmt_reltrue_216	:	
	testl	%eax,%eax
	jnz	parse_funcCallStmt_ifbl_215
	jmp	parse_funcCallStmt_elsebl_215
parse_funcCallStmt_ifbl_215	:	

	movl	$0,%eax
	jmp	parse_funcCallStmt_ret
parse_funcCallStmt_elsebl_215	:	
parse_funcCallStmt_endif_215	:	

	movl	%ebp,%eax
	addl	$8,%eax
	movl	(%eax),%eax
	addl	$8,%eax
	movl	(%eax),%eax
	testl	%eax,%eax
	jnz	parse_funcCallStmt_ifbl_217
	jmp	parse_funcCallStmt_elsebl_217
parse_funcCallStmt_ifbl_217	:	

	subl	$12,%esp
	movl	%ebp,%eax
	addl	$8,%eax
	movl	(%eax),%eax
	addl	$8,%eax
	movl	(%eax),%eax
	movl	%eax,0(%esp)
	movl	-4(%ebp),%eax
	movl	%eax,4(%esp)
	movl	%ebp,%eax
	addl	$-164,%eax
	movl	%eax,8(%esp)
	call	codegen_EmitFuncCallExpr
	addl	$12,%esp
	jmp	parse_funcCallStmt_endif_217
parse_funcCallStmt_elsebl_217	:	
parse_funcCallStmt_endif_217	:	

	movl	$0,%eax
	jmp	parse_funcCallStmt_ret
parse_funcCallStmt_ret	:	
	movl	%ebp,%esp
	popl	%ebp
	ret	

.globl	parse_statement
.type	parse_statement,@function
parse_statement	:	
	pushl	%ebp
	movl	%esp,%ebp
	subl	$12,%esp

	subl	$8,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	$symtab+1435,4(%esp)
	call	parse_tracemsg
	addl	$8,%esp

	pushl	$1
	movl	%ebp,%eax
	addl	$8,%eax
	movl	(%eax),%eax
	addl	$20,%eax
	popl	%esi
	imull	$144,%esi
	addl	%esi,%eax
	movl	%eax,-12(%ebp)

	subl	$0,%esp
	call	syntax_CreateTreeNode
	addl	$0,%esp
	movl	%eax,-4(%ebp)

	subl	$8,%esp
	movl	12(%ebp),%eax
	movl	%eax,0(%esp)
	movl	-4(%ebp),%eax
	movl	%eax,4(%esp)
	call	syntax_AddChildTree
	addl	$8,%esp

	movl	%ebp,%eax
	addl	$8,%eax
	movl	(%eax),%eax
	addl	$16,%eax
	movl	(%eax),%eax
	addl	$0,%eax
	movl	(%eax),%eax
	movl	%eax,%ebx
	cmpl	$36,%ebx
	movl	$1,%eax
	je	parse_statement_reltrue_220
	movl	$0,%eax
parse_statement_reltrue_220	:	
	testl	%eax,%eax
	jnz	parse_statement_logexprtrue_219
	movl	%ebp,%eax
	addl	$8,%eax
	movl	(%eax),%eax
	addl	$16,%eax
	movl	(%eax),%eax
	addl	$0,%eax
	movl	(%eax),%eax
	movl	%eax,%ebx
	cmpl	$37,%ebx
	movl	$1,%eax
	je	parse_statement_reltrue_221
	movl	$0,%eax
parse_statement_reltrue_221	:	
	testl	%eax,%eax
	jnz	parse_statement_logexprtrue_219
	movl	%ebp,%eax
	addl	$8,%eax
	movl	(%eax),%eax
	addl	$16,%eax
	movl	(%eax),%eax
	addl	$0,%eax
	movl	(%eax),%eax
	movl	%eax,%ebx
	cmpl	$38,%ebx
	movl	$1,%eax
	je	parse_statement_reltrue_222
	movl	$0,%eax
parse_statement_reltrue_222	:	
	testl	%eax,%eax
	jnz	parse_statement_logexprtrue_219
	movl	$0,%eax
	jmp	parse_statement_logexprfalse_219
parse_statement_logexprtrue_219	:	
	movl	$1,%eax
parse_statement_logexprfalse_219	:	
	testl	%eax,%eax
	jnz	parse_statement_ifbl_218
	jmp	parse_statement_elsebl_218
parse_statement_ifbl_218	:	

	subl	$8,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	$symtab+1451,4(%esp)
	call	report_error
	addl	$8,%esp

	movl	$0,%ebx
	subl	$1,%ebx
	movl	%ebx,%eax
	jmp	parse_statement_ret
parse_statement_elsebl_218	:	
parse_statement_endif_218	:	

	movl	%ebp,%eax
	addl	$8,%eax
	movl	(%eax),%eax
	addl	$16,%eax
	movl	(%eax),%eax
	addl	$0,%eax
	movl	(%eax),%eax
	movl	%eax,%ebx
	cmpl	$0,%ebx
	movl	$1,%eax
	je	parse_statement_reltrue_225
	movl	$0,%eax
parse_statement_reltrue_225	:	
	testl	%eax,%eax
	jnz	parse_statement_logexprtrue_224
	movl	%ebp,%eax
	addl	$8,%eax
	movl	(%eax),%eax
	addl	$16,%eax
	movl	(%eax),%eax
	addl	$0,%eax
	movl	(%eax),%eax
	movl	%eax,%ebx
	cmpl	$34,%ebx
	movl	$1,%eax
	je	parse_statement_reltrue_226
	movl	$0,%eax
parse_statement_reltrue_226	:	
	testl	%eax,%eax
	jnz	parse_statement_logexprtrue_224
	movl	$0,%eax
	jmp	parse_statement_logexprfalse_224
parse_statement_logexprtrue_224	:	
	movl	$1,%eax
parse_statement_logexprfalse_224	:	
	testl	%eax,%eax
	jnz	parse_statement_ifbl_223
	jmp	parse_statement_elsebl_223
parse_statement_ifbl_223	:	

	subl	$8,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	$symtab+1501,4(%esp)
	call	report_error
	addl	$8,%esp

	movl	$0,%ebx
	subl	$1,%ebx
	movl	%ebx,%eax
	jmp	parse_statement_ret
parse_statement_elsebl_223	:	
parse_statement_endif_223	:	

	movl	%ebp,%eax
	addl	$8,%eax
	movl	(%eax),%eax
	addl	$16,%eax
	movl	(%eax),%eax
	addl	$0,%eax
	movl	(%eax),%eax
	movl	%eax,%ebx
	cmpl	$8,%ebx
	movl	$1,%eax
	je	parse_statement_reltrue_228
	movl	$0,%eax
parse_statement_reltrue_228	:	
	testl	%eax,%eax
	jnz	parse_statement_ifbl_227
	jmp	parse_statement_elsebl_227
parse_statement_ifbl_227	:	

	subl	$8,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	$symtab+1528,4(%esp)
	call	report_error
	addl	$8,%esp

	subl	$4,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	call	eatToken
	addl	$4,%esp

	movl	$0,%eax
	jmp	parse_statement_ret
parse_statement_elsebl_227	:	
parse_statement_endif_227	:	

	movl	%ebp,%eax
	addl	$8,%eax
	movl	(%eax),%eax
	addl	$16,%eax
	movl	(%eax),%eax
	addl	$0,%eax
	movl	(%eax),%eax
	movl	%eax,%ebx
	cmpl	$13,%ebx
	movl	$1,%eax
	je	parse_statement_reltrue_230
	movl	$0,%eax
parse_statement_reltrue_230	:	
	testl	%eax,%eax
	jnz	parse_statement_ifbl_229
	jmp	parse_statement_elsebl_229
parse_statement_ifbl_229	:	

	subl	$8,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	$symtab+1560,4(%esp)
	call	report_error
	addl	$8,%esp

	movl	$0,%ebx
	subl	$1,%ebx
	movl	%ebx,%eax
	jmp	parse_statement_ret
parse_statement_elsebl_229	:	
parse_statement_endif_229	:	

	movl	%ebp,%eax
	addl	$8,%eax
	movl	(%eax),%eax
	addl	$16,%eax
	movl	(%eax),%eax
	addl	$0,%eax
	movl	(%eax),%eax
	movl	%eax,%ebx
	cmpl	$12,%ebx
	movl	$1,%eax
	je	parse_statement_reltrue_232
	movl	$0,%eax
parse_statement_reltrue_232	:	
	testl	%eax,%eax
	jnz	parse_statement_ifbl_231
	jmp	parse_statement_elsebl_231
parse_statement_ifbl_231	:	

	subl	$8,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	-4(%ebp),%eax
	movl	%eax,4(%esp)
	call	parse_ifStmt
	addl	$8,%esp
	jmp	parse_statement_ret
parse_statement_elsebl_231	:	
parse_statement_endif_231	:	

	movl	%ebp,%eax
	addl	$8,%eax
	movl	(%eax),%eax
	addl	$16,%eax
	movl	(%eax),%eax
	addl	$0,%eax
	movl	(%eax),%eax
	movl	%eax,%ebx
	cmpl	$14,%ebx
	movl	$1,%eax
	je	parse_statement_reltrue_234
	movl	$0,%eax
parse_statement_reltrue_234	:	
	testl	%eax,%eax
	jnz	parse_statement_ifbl_233
	jmp	parse_statement_elsebl_233
parse_statement_ifbl_233	:	

	subl	$8,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	-4(%ebp),%eax
	movl	%eax,4(%esp)
	call	parse_whileStmt
	addl	$8,%esp
	jmp	parse_statement_ret
parse_statement_elsebl_233	:	
parse_statement_endif_233	:	

	movl	%ebp,%eax
	addl	$8,%eax
	movl	(%eax),%eax
	addl	$16,%eax
	movl	(%eax),%eax
	addl	$0,%eax
	movl	(%eax),%eax
	movl	%eax,%ebx
	cmpl	$15,%ebx
	movl	$1,%eax
	je	parse_statement_reltrue_236
	movl	$0,%eax
parse_statement_reltrue_236	:	
	testl	%eax,%eax
	jnz	parse_statement_ifbl_235
	jmp	parse_statement_elsebl_235
parse_statement_ifbl_235	:	

	subl	$8,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	-4(%ebp),%eax
	movl	%eax,4(%esp)
	call	parse_returnStmt
	addl	$8,%esp
	jmp	parse_statement_ret
parse_statement_elsebl_235	:	
parse_statement_endif_235	:	

	movl	%ebp,%eax
	addl	$8,%eax
	movl	(%eax),%eax
	addl	$16,%eax
	movl	(%eax),%eax
	addl	$0,%eax
	movl	(%eax),%eax
	movl	%eax,%ebx
	cmpl	$41,%ebx
	movl	$1,%eax
	je	parse_statement_reltrue_238
	movl	$0,%eax
parse_statement_reltrue_238	:	
	testl	%eax,%eax
	jnz	parse_statement_ifbl_237
	jmp	parse_statement_elsebl_237
parse_statement_ifbl_237	:	

	subl	$8,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	-4(%ebp),%eax
	movl	%eax,4(%esp)
	call	parse_breakStmt
	addl	$8,%esp
	jmp	parse_statement_ret
parse_statement_elsebl_237	:	
parse_statement_endif_237	:	

	movl	%ebp,%eax
	addl	$8,%eax
	movl	(%eax),%eax
	addl	$16,%eax
	movl	(%eax),%eax
	addl	$0,%eax
	movl	(%eax),%eax
	movl	%eax,%ebx
	cmpl	$42,%ebx
	movl	$1,%eax
	je	parse_statement_reltrue_240
	movl	$0,%eax
parse_statement_reltrue_240	:	
	testl	%eax,%eax
	jnz	parse_statement_ifbl_239
	jmp	parse_statement_elsebl_239
parse_statement_ifbl_239	:	

	subl	$8,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	-4(%ebp),%eax
	movl	%eax,4(%esp)
	call	parse_continueStmt
	addl	$8,%esp
	jmp	parse_statement_ret
parse_statement_elsebl_239	:	
parse_statement_endif_239	:	

	movl	%ebp,%eax
	addl	$8,%eax
	movl	(%eax),%eax
	addl	$16,%eax
	movl	(%eax),%eax
	addl	$0,%eax
	movl	(%eax),%eax
	movl	%eax,%ebx
	cmpl	$43,%ebx
	movl	$1,%eax
	je	parse_statement_reltrue_243
	movl	$0,%eax
parse_statement_reltrue_243	:	
	testl	%eax,%eax
	jz	parse_statement_logtermfalse_242
	movl	%ebp,%eax
	addl	$-12,%eax
	movl	(%eax),%eax
	addl	$0,%eax
	movl	(%eax),%eax
	movl	%eax,%ebx
	cmpl	$5,%ebx
	movl	$1,%eax
	je	parse_statement_reltrue_244
	movl	$0,%eax
parse_statement_reltrue_244	:	
	testl	%eax,%eax
	jz	parse_statement_logtermfalse_242
	movl	$1,%eax
	jmp	parse_statement_logtermtrue_242
parse_statement_logtermfalse_242	:	
	movl	$0,%eax
parse_statement_logtermtrue_242	:	
	testl	%eax,%eax
	jnz	parse_statement_ifbl_241
	jmp	parse_statement_elsebl_241
parse_statement_ifbl_241	:	

	subl	$8,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	-4(%ebp),%eax
	movl	%eax,4(%esp)
	call	parse_funcCallStmt
	addl	$8,%esp
	jmp	parse_statement_ret
parse_statement_elsebl_241	:	
parse_statement_endif_241	:	

	subl	$8,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	-4(%ebp),%eax
	movl	%eax,4(%esp)
	call	parse_assignStmt
	addl	$8,%esp
	movl	%eax,-8(%ebp)

	movl	-8(%ebp),%ebx
	cmpl	$0,%ebx
	movl	$1,%eax
	jge	parse_statement_reltrue_247
	movl	$0,%eax
parse_statement_reltrue_247	:	
	testl	%eax,%eax
	jz	parse_statement_logtermfalse_246
	movl	%ebp,%eax
	addl	$8,%eax
	movl	(%eax),%eax
	addl	$8,%eax
	movl	(%eax),%eax
	testl	%eax,%eax
	jz	parse_statement_logtermfalse_246
	movl	$1,%eax
	jmp	parse_statement_logtermtrue_246
parse_statement_logtermfalse_246	:	
	movl	$0,%eax
parse_statement_logtermtrue_246	:	
	testl	%eax,%eax
	jnz	parse_statement_ifbl_245
	jmp	parse_statement_elsebl_245
parse_statement_ifbl_245	:	

	subl	$8,%esp
	movl	%ebp,%eax
	addl	$8,%eax
	movl	(%eax),%eax
	addl	$8,%eax
	movl	(%eax),%eax
	movl	%eax,0(%esp)
	movl	-4(%ebp),%eax
	movl	%eax,4(%esp)
	call	codegen_EmitAssign
	addl	$8,%esp
	jmp	parse_statement_endif_245
parse_statement_elsebl_245	:	
parse_statement_endif_245	:	

	movl	-8(%ebp),%eax
	jmp	parse_statement_ret
parse_statement_ret	:	
	movl	%ebp,%esp
	popl	%ebp
	ret	

.globl	parse_varDecl
.type	parse_varDecl,@function
parse_varDecl	:	
	pushl	%ebp
	movl	%esp,%ebp
	subl	$148,%esp

	subl	$8,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	$symtab+1586,4(%esp)
	call	parse_tracemsg
	addl	$8,%esp

	subl	$0,%esp
	call	syntax_CreateTreeNode
	addl	$0,%esp
	movl	%eax,-4(%ebp)

	subl	$8,%esp
	movl	12(%ebp),%eax
	movl	%eax,0(%esp)
	movl	-4(%ebp),%eax
	movl	%eax,4(%esp)
	call	syntax_AddChildTree
	addl	$8,%esp

	subl	$8,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	-4(%ebp),%eax
	movl	%eax,4(%esp)
	call	parse_typedIdent
	addl	$8,%esp
	movl	%eax,%ebx
	cmpl	$0,%ebx
	movl	$1,%eax
	jne	parse_varDecl_reltrue_249
	movl	$0,%eax
parse_varDecl_reltrue_249	:	
	testl	%eax,%eax
	jnz	parse_varDecl_ifbl_248
	jmp	parse_varDecl_elsebl_248
parse_varDecl_ifbl_248	:	

	movl	$0,%ebx
	subl	$1,%ebx
	movl	%ebx,%eax
	jmp	parse_varDecl_ret
parse_varDecl_elsebl_248	:	
parse_varDecl_endif_248	:	

	movl	%ebp,%eax
	addl	$8,%eax
	movl	(%eax),%eax
	addl	$16,%eax
	movl	(%eax),%eax
	addl	$0,%eax
	movl	(%eax),%eax
	movl	%eax,%ebx
	cmpl	$3,%ebx
	movl	$1,%eax
	je	parse_varDecl_reltrue_251
	movl	$0,%eax
parse_varDecl_reltrue_251	:	
	testl	%eax,%eax
	jnz	parse_varDecl_ifbl_250
	jmp	parse_varDecl_elsebl_250
parse_varDecl_ifbl_250	:	

	subl	$8,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	12(%ebp),%eax
	movl	%eax,4(%esp)
	call	addAndEatToken
	addl	$8,%esp

	subl	$16,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	12(%ebp),%eax
	movl	%eax,4(%esp)
	movl	$44,8(%esp)
	movl	$symtab+1600,12(%esp)
	call	addAndEatSpecificToken
	addl	$16,%esp
	movl	%eax,%ebx
	cmpl	$0,%ebx
	movl	$1,%eax
	jne	parse_varDecl_reltrue_253
	movl	$0,%eax
parse_varDecl_reltrue_253	:	
	testl	%eax,%eax
	jnz	parse_varDecl_ifbl_252
	jmp	parse_varDecl_elsebl_252
parse_varDecl_ifbl_252	:	

	movl	$0,%ebx
	subl	$1,%ebx
	movl	%ebx,%eax
	jmp	parse_varDecl_ret
parse_varDecl_elsebl_252	:	
parse_varDecl_endif_252	:	

	subl	$16,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	12(%ebp),%eax
	movl	%eax,4(%esp)
	movl	$4,8(%esp)
	movl	$symtab+1647,12(%esp)
	call	addAndEatSpecificToken
	addl	$16,%esp
	movl	%eax,%ebx
	cmpl	$0,%ebx
	movl	$1,%eax
	jne	parse_varDecl_reltrue_255
	movl	$0,%eax
parse_varDecl_reltrue_255	:	
	testl	%eax,%eax
	jnz	parse_varDecl_ifbl_254
	jmp	parse_varDecl_elsebl_254
parse_varDecl_ifbl_254	:	

	movl	$0,%ebx
	subl	$1,%ebx
	movl	%ebx,%eax
	jmp	parse_varDecl_ret
parse_varDecl_elsebl_254	:	
parse_varDecl_endif_254	:	
	jmp	parse_varDecl_endif_250
parse_varDecl_elsebl_250	:	
parse_varDecl_endif_250	:	

	subl	$16,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	12(%ebp),%eax
	movl	%eax,4(%esp)
	movl	$8,8(%esp)
	movl	$symtab+1699,12(%esp)
	call	addAndEatSpecificToken
	addl	$16,%esp
	movl	%eax,%ebx
	cmpl	$0,%ebx
	movl	$1,%eax
	jne	parse_varDecl_reltrue_257
	movl	$0,%eax
parse_varDecl_reltrue_257	:	
	testl	%eax,%eax
	jnz	parse_varDecl_ifbl_256
	jmp	parse_varDecl_elsebl_256
parse_varDecl_ifbl_256	:	

	subl	$8,%esp
	movl	%ebp,%eax
	addl	$-148,%eax
	addl	$16,%eax
	movl	%eax,0(%esp)
	movl	$symtab+1752,4(%esp)
	call	strcpy
	addl	$8,%esp

	movl	%ebp,%eax
	addl	$-148,%eax
	addl	$0,%eax
	movl	%eax,%ebx
	movl	$8,(%ebx)

	subl	$148,%esp
	movl	12(%ebp),%eax
	movl	%eax,0(%esp)
	movl	%ebp,%eax
	addl	$-148,%eax
	movl	%esp,%ebx
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	call	syntax_AddChildNode
	addl	$148,%esp
	jmp	parse_varDecl_endif_256
parse_varDecl_elsebl_256	:	
parse_varDecl_endif_256	:	

	movl	$0,%eax
	jmp	parse_varDecl_ret
parse_varDecl_ret	:	
	movl	%ebp,%esp
	popl	%ebp
	ret	

.globl	parse_funcBody
.type	parse_funcBody,@function
parse_funcBody	:	
	pushl	%ebp
	movl	%esp,%ebp
	subl	$8,%esp

	pushl	$1
	movl	%ebp,%eax
	addl	$8,%eax
	movl	(%eax),%eax
	addl	$20,%eax
	popl	%esi
	imull	$144,%esi
	addl	%esi,%eax
	movl	%eax,-8(%ebp)

	subl	$8,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	$symtab+1754,4(%esp)
	call	parse_tracemsg
	addl	$8,%esp

	subl	$16,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	12(%ebp),%eax
	movl	%eax,4(%esp)
	movl	$1,8(%esp)
	movl	$symtab+1769,12(%esp)
	call	addAndEatSpecificToken
	addl	$16,%esp
	movl	%eax,%ebx
	cmpl	$0,%ebx
	movl	$1,%eax
	jne	parse_funcBody_reltrue_259
	movl	$0,%eax
parse_funcBody_reltrue_259	:	
	testl	%eax,%eax
	jnz	parse_funcBody_ifbl_258
	jmp	parse_funcBody_elsebl_258
parse_funcBody_ifbl_258	:	

	movl	$0,%ebx
	subl	$1,%ebx
	movl	%ebx,%eax
	jmp	parse_funcBody_ret
parse_funcBody_elsebl_258	:	
parse_funcBody_endif_258	:	

parse_funcBody_while_260	:	
	movl	%ebp,%eax
	addl	$8,%eax
	movl	(%eax),%eax
	addl	$16,%eax
	movl	(%eax),%eax
	addl	$0,%eax
	movl	(%eax),%eax
	movl	%eax,%ebx
	cmpl	$36,%ebx
	movl	$1,%eax
	je	parse_funcBody_reltrue_262
	movl	$0,%eax
parse_funcBody_reltrue_262	:	
	testl	%eax,%eax
	jnz	parse_funcBody_logexprtrue_261
	movl	%ebp,%eax
	addl	$8,%eax
	movl	(%eax),%eax
	addl	$16,%eax
	movl	(%eax),%eax
	addl	$0,%eax
	movl	(%eax),%eax
	movl	%eax,%ebx
	cmpl	$37,%ebx
	movl	$1,%eax
	je	parse_funcBody_reltrue_263
	movl	$0,%eax
parse_funcBody_reltrue_263	:	
	testl	%eax,%eax
	jnz	parse_funcBody_logexprtrue_261
	movl	%ebp,%eax
	addl	$8,%eax
	movl	(%eax),%eax
	addl	$16,%eax
	movl	(%eax),%eax
	addl	$0,%eax
	movl	(%eax),%eax
	movl	%eax,%ebx
	cmpl	$38,%ebx
	movl	$1,%eax
	je	parse_funcBody_reltrue_264
	movl	$0,%eax
parse_funcBody_reltrue_264	:	
	testl	%eax,%eax
	jnz	parse_funcBody_logexprtrue_261
	movl	%ebp,%eax
	addl	$8,%eax
	movl	(%eax),%eax
	addl	$16,%eax
	movl	(%eax),%eax
	addl	$0,%eax
	movl	(%eax),%eax
	movl	%eax,%ebx
	cmpl	$43,%ebx
	movl	$1,%eax
	je	parse_funcBody_reltrue_266
	movl	$0,%eax
parse_funcBody_reltrue_266	:	
	testl	%eax,%eax
	jz	parse_funcBody_logtermfalse_265
	movl	%ebp,%eax
	addl	$-8,%eax
	movl	(%eax),%eax
	addl	$0,%eax
	movl	(%eax),%eax
	movl	%eax,%ebx
	cmpl	$18,%ebx
	movl	$1,%eax
	je	parse_funcBody_reltrue_268
	movl	$0,%eax
parse_funcBody_reltrue_268	:	
	testl	%eax,%eax
	jnz	parse_funcBody_logexprtrue_267
	movl	%ebp,%eax
	addl	$-8,%eax
	movl	(%eax),%eax
	addl	$0,%eax
	movl	(%eax),%eax
	movl	%eax,%ebx
	cmpl	$43,%ebx
	movl	$1,%eax
	je	parse_funcBody_reltrue_269
	movl	$0,%eax
parse_funcBody_reltrue_269	:	
	testl	%eax,%eax
	jnz	parse_funcBody_logexprtrue_267
	movl	$0,%eax
	jmp	parse_funcBody_logexprfalse_267
parse_funcBody_logexprtrue_267	:	
	movl	$1,%eax
parse_funcBody_logexprfalse_267	:	
	testl	%eax,%eax
	jz	parse_funcBody_logtermfalse_265
	movl	$1,%eax
	jmp	parse_funcBody_logtermtrue_265
parse_funcBody_logtermfalse_265	:	
	movl	$0,%eax
parse_funcBody_logtermtrue_265	:	
	testl	%eax,%eax
	jnz	parse_funcBody_logexprtrue_261
	movl	$0,%eax
	jmp	parse_funcBody_logexprfalse_261
parse_funcBody_logexprtrue_261	:	
	movl	$1,%eax
parse_funcBody_logexprfalse_261	:	
	testl	%eax,%eax
	jz	parse_funcBody_endwhile_260

	subl	$0,%esp
	call	syntax_CreateTreeNode
	addl	$0,%esp
	movl	%eax,-4(%ebp)

	subl	$8,%esp
	movl	12(%ebp),%eax
	movl	%eax,0(%esp)
	movl	-4(%ebp),%eax
	movl	%eax,4(%esp)
	call	syntax_AddChildTree
	addl	$8,%esp

	subl	$8,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	-4(%ebp),%eax
	movl	%eax,4(%esp)
	call	parse_varDecl
	addl	$8,%esp
	movl	%eax,%ebx
	cmpl	$0,%ebx
	movl	$1,%eax
	jne	parse_funcBody_reltrue_271
	movl	$0,%eax
parse_funcBody_reltrue_271	:	
	testl	%eax,%eax
	jnz	parse_funcBody_ifbl_270
	jmp	parse_funcBody_elsebl_270
parse_funcBody_ifbl_270	:	

	subl	$4,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	call	sync_toStrongKeyword
	addl	$4,%esp

	movl	%ebp,%eax
	addl	$8,%eax
	movl	(%eax),%eax
	addl	$16,%eax
	movl	(%eax),%eax
	addl	$0,%eax
	movl	(%eax),%eax
	movl	%eax,%ebx
	cmpl	$2,%ebx
	movl	$1,%eax
	jne	parse_funcBody_reltrue_274
	movl	$0,%eax
parse_funcBody_reltrue_274	:	
	testl	%eax,%eax
	jz	parse_funcBody_logtermfalse_273
	movl	%ebp,%eax
	addl	$8,%eax
	movl	(%eax),%eax
	addl	$16,%eax
	movl	(%eax),%eax
	addl	$0,%eax
	movl	(%eax),%eax
	movl	%eax,%ebx
	cmpl	$36,%ebx
	movl	$1,%eax
	jne	parse_funcBody_reltrue_275
	movl	$0,%eax
parse_funcBody_reltrue_275	:	
	testl	%eax,%eax
	jz	parse_funcBody_logtermfalse_273
	movl	%ebp,%eax
	addl	$8,%eax
	movl	(%eax),%eax
	addl	$16,%eax
	movl	(%eax),%eax
	addl	$0,%eax
	movl	(%eax),%eax
	movl	%eax,%ebx
	cmpl	$37,%ebx
	movl	$1,%eax
	jne	parse_funcBody_reltrue_276
	movl	$0,%eax
parse_funcBody_reltrue_276	:	
	testl	%eax,%eax
	jz	parse_funcBody_logtermfalse_273
	movl	%ebp,%eax
	addl	$8,%eax
	movl	(%eax),%eax
	addl	$16,%eax
	movl	(%eax),%eax
	addl	$0,%eax
	movl	(%eax),%eax
	movl	%eax,%ebx
	cmpl	$38,%ebx
	movl	$1,%eax
	jne	parse_funcBody_reltrue_277
	movl	$0,%eax
parse_funcBody_reltrue_277	:	
	testl	%eax,%eax
	jz	parse_funcBody_logtermfalse_273
	movl	%ebp,%eax
	addl	$8,%eax
	movl	(%eax),%eax
	addl	$16,%eax
	movl	(%eax),%eax
	addl	$0,%eax
	movl	(%eax),%eax
	movl	%eax,%ebx
	cmpl	$12,%ebx
	movl	$1,%eax
	jne	parse_funcBody_reltrue_278
	movl	$0,%eax
parse_funcBody_reltrue_278	:	
	testl	%eax,%eax
	jz	parse_funcBody_logtermfalse_273
	movl	%ebp,%eax
	addl	$8,%eax
	movl	(%eax),%eax
	addl	$16,%eax
	movl	(%eax),%eax
	addl	$0,%eax
	movl	(%eax),%eax
	movl	%eax,%ebx
	cmpl	$14,%ebx
	movl	$1,%eax
	jne	parse_funcBody_reltrue_279
	movl	$0,%eax
parse_funcBody_reltrue_279	:	
	testl	%eax,%eax
	jz	parse_funcBody_logtermfalse_273
	movl	%ebp,%eax
	addl	$8,%eax
	movl	(%eax),%eax
	addl	$16,%eax
	movl	(%eax),%eax
	addl	$0,%eax
	movl	(%eax),%eax
	movl	%eax,%ebx
	cmpl	$15,%ebx
	movl	$1,%eax
	jne	parse_funcBody_reltrue_280
	movl	$0,%eax
parse_funcBody_reltrue_280	:	
	testl	%eax,%eax
	jz	parse_funcBody_logtermfalse_273
	movl	$1,%eax
	jmp	parse_funcBody_logtermtrue_273
parse_funcBody_logtermfalse_273	:	
	movl	$0,%eax
parse_funcBody_logtermtrue_273	:	
	testl	%eax,%eax
	jnz	parse_funcBody_ifbl_272
	jmp	parse_funcBody_elsebl_272
parse_funcBody_ifbl_272	:	

	movl	$0,%ebx
	subl	$1,%ebx
	movl	%ebx,%eax
	jmp	parse_funcBody_ret
parse_funcBody_elsebl_272	:	
parse_funcBody_endif_272	:	
	jmp	parse_funcBody_endif_270
parse_funcBody_elsebl_270	:	

	movl	%ebp,%eax
	addl	$8,%eax
	movl	(%eax),%eax
	addl	$4,%eax
	movl	(%eax),%eax
	testl	%eax,%eax
	jnz	parse_funcBody_ifbl_281
	jmp	parse_funcBody_elsebl_281
parse_funcBody_ifbl_281	:	

	subl	$8,%esp
	movl	%ebp,%eax
	addl	$8,%eax
	movl	(%eax),%eax
	addl	$4,%eax
	movl	(%eax),%eax
	movl	%eax,0(%esp)
	movl	-4(%ebp),%eax
	movl	%eax,4(%esp)
	call	symbol_DefineLocalVariable
	addl	$8,%esp
	jmp	parse_funcBody_endif_281
parse_funcBody_elsebl_281	:	
parse_funcBody_endif_281	:	
parse_funcBody_endif_270	:	
	jmp	parse_funcBody_while_260
parse_funcBody_endwhile_260	:	

	movl	%ebp,%eax
	addl	$8,%eax
	movl	(%eax),%eax
	addl	$8,%eax
	movl	(%eax),%eax
	testl	%eax,%eax
	jnz	parse_funcBody_ifbl_282
	jmp	parse_funcBody_elsebl_282
parse_funcBody_ifbl_282	:	

	subl	$4,%esp
	movl	%ebp,%eax
	addl	$8,%eax
	movl	(%eax),%eax
	addl	$8,%eax
	movl	(%eax),%eax
	movl	%eax,0(%esp)
	call	codegen_EmitBeginFunction
	addl	$4,%esp
	jmp	parse_funcBody_endif_282
parse_funcBody_elsebl_282	:	
parse_funcBody_endif_282	:	

parse_funcBody_while_283	:	
	movl	%ebp,%eax
	addl	$8,%eax
	movl	(%eax),%eax
	addl	$16,%eax
	movl	(%eax),%eax
	addl	$0,%eax
	movl	(%eax),%eax
	movl	%eax,%ebx
	cmpl	$2,%ebx
	movl	$1,%eax
	jne	parse_funcBody_reltrue_284
	movl	$0,%eax
parse_funcBody_reltrue_284	:	
	testl	%eax,%eax
	jz	parse_funcBody_endwhile_283

	subl	$0,%esp
	call	syntax_CreateTreeNode
	addl	$0,%esp
	movl	%eax,-4(%ebp)

	subl	$8,%esp
	movl	12(%ebp),%eax
	movl	%eax,0(%esp)
	movl	-4(%ebp),%eax
	movl	%eax,4(%esp)
	call	syntax_AddChildTree
	addl	$8,%esp

	subl	$8,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	-4(%ebp),%eax
	movl	%eax,4(%esp)
	call	parse_statement
	addl	$8,%esp
	movl	%eax,%ebx
	cmpl	$0,%ebx
	movl	$1,%eax
	jne	parse_funcBody_reltrue_286
	movl	$0,%eax
parse_funcBody_reltrue_286	:	
	testl	%eax,%eax
	jnz	parse_funcBody_ifbl_285
	jmp	parse_funcBody_elsebl_285
parse_funcBody_ifbl_285	:	

	subl	$4,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	call	sync_toStrongKeyword
	addl	$4,%esp

	movl	%ebp,%eax
	addl	$8,%eax
	movl	(%eax),%eax
	addl	$16,%eax
	movl	(%eax),%eax
	addl	$0,%eax
	movl	(%eax),%eax
	movl	%eax,%ebx
	cmpl	$2,%ebx
	movl	$1,%eax
	jne	parse_funcBody_reltrue_289
	movl	$0,%eax
parse_funcBody_reltrue_289	:	
	testl	%eax,%eax
	jz	parse_funcBody_logtermfalse_288
	movl	%ebp,%eax
	addl	$8,%eax
	movl	(%eax),%eax
	addl	$16,%eax
	movl	(%eax),%eax
	addl	$0,%eax
	movl	(%eax),%eax
	movl	%eax,%ebx
	cmpl	$36,%ebx
	movl	$1,%eax
	jne	parse_funcBody_reltrue_290
	movl	$0,%eax
parse_funcBody_reltrue_290	:	
	testl	%eax,%eax
	jz	parse_funcBody_logtermfalse_288
	movl	%ebp,%eax
	addl	$8,%eax
	movl	(%eax),%eax
	addl	$16,%eax
	movl	(%eax),%eax
	addl	$0,%eax
	movl	(%eax),%eax
	movl	%eax,%ebx
	cmpl	$37,%ebx
	movl	$1,%eax
	jne	parse_funcBody_reltrue_291
	movl	$0,%eax
parse_funcBody_reltrue_291	:	
	testl	%eax,%eax
	jz	parse_funcBody_logtermfalse_288
	movl	%ebp,%eax
	addl	$8,%eax
	movl	(%eax),%eax
	addl	$16,%eax
	movl	(%eax),%eax
	addl	$0,%eax
	movl	(%eax),%eax
	movl	%eax,%ebx
	cmpl	$38,%ebx
	movl	$1,%eax
	jne	parse_funcBody_reltrue_292
	movl	$0,%eax
parse_funcBody_reltrue_292	:	
	testl	%eax,%eax
	jz	parse_funcBody_logtermfalse_288
	movl	%ebp,%eax
	addl	$8,%eax
	movl	(%eax),%eax
	addl	$16,%eax
	movl	(%eax),%eax
	addl	$0,%eax
	movl	(%eax),%eax
	movl	%eax,%ebx
	cmpl	$12,%ebx
	movl	$1,%eax
	jne	parse_funcBody_reltrue_293
	movl	$0,%eax
parse_funcBody_reltrue_293	:	
	testl	%eax,%eax
	jz	parse_funcBody_logtermfalse_288
	movl	%ebp,%eax
	addl	$8,%eax
	movl	(%eax),%eax
	addl	$16,%eax
	movl	(%eax),%eax
	addl	$0,%eax
	movl	(%eax),%eax
	movl	%eax,%ebx
	cmpl	$14,%ebx
	movl	$1,%eax
	jne	parse_funcBody_reltrue_294
	movl	$0,%eax
parse_funcBody_reltrue_294	:	
	testl	%eax,%eax
	jz	parse_funcBody_logtermfalse_288
	movl	%ebp,%eax
	addl	$8,%eax
	movl	(%eax),%eax
	addl	$16,%eax
	movl	(%eax),%eax
	addl	$0,%eax
	movl	(%eax),%eax
	movl	%eax,%ebx
	cmpl	$15,%ebx
	movl	$1,%eax
	jne	parse_funcBody_reltrue_295
	movl	$0,%eax
parse_funcBody_reltrue_295	:	
	testl	%eax,%eax
	jz	parse_funcBody_logtermfalse_288
	movl	$1,%eax
	jmp	parse_funcBody_logtermtrue_288
parse_funcBody_logtermfalse_288	:	
	movl	$0,%eax
parse_funcBody_logtermtrue_288	:	
	testl	%eax,%eax
	jnz	parse_funcBody_ifbl_287
	jmp	parse_funcBody_elsebl_287
parse_funcBody_ifbl_287	:	

	movl	$0,%ebx
	subl	$1,%ebx
	movl	%ebx,%eax
	jmp	parse_funcBody_ret
parse_funcBody_elsebl_287	:	
parse_funcBody_endif_287	:	
	jmp	parse_funcBody_endif_285
parse_funcBody_elsebl_285	:	
parse_funcBody_endif_285	:	
	jmp	parse_funcBody_while_283
parse_funcBody_endwhile_283	:	

	subl	$8,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	12(%ebp),%eax
	movl	%eax,4(%esp)
	call	addAndEatToken
	addl	$8,%esp

	movl	%ebp,%eax
	addl	$8,%eax
	movl	(%eax),%eax
	addl	$8,%eax
	movl	(%eax),%eax
	testl	%eax,%eax
	jnz	parse_funcBody_ifbl_296
	jmp	parse_funcBody_elsebl_296
parse_funcBody_ifbl_296	:	

	subl	$4,%esp
	movl	%ebp,%eax
	addl	$8,%eax
	movl	(%eax),%eax
	addl	$8,%eax
	movl	(%eax),%eax
	movl	%eax,0(%esp)
	call	codegen_EmitEndFunction
	addl	$4,%esp
	jmp	parse_funcBody_endif_296
parse_funcBody_elsebl_296	:	
parse_funcBody_endif_296	:	

	movl	$0,%eax
	jmp	parse_funcBody_ret
parse_funcBody_ret	:	
	movl	%ebp,%esp
	popl	%ebp
	ret	

.globl	parse_argListDef
.type	parse_argListDef,@function
parse_argListDef	:	
	pushl	%ebp
	movl	%esp,%ebp
	subl	$8,%esp

	subl	$8,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	$symtab+1804,4(%esp)
	call	parse_tracemsg
	addl	$8,%esp

	subl	$16,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	12(%ebp),%eax
	movl	%eax,4(%esp)
	movl	$5,8(%esp)
	movl	$symtab+1821,12(%esp)
	call	addAndEatSpecificToken
	addl	$16,%esp
	movl	%eax,%ebx
	cmpl	$0,%ebx
	movl	$1,%eax
	jne	parse_argListDef_reltrue_298
	movl	$0,%eax
parse_argListDef_reltrue_298	:	
	testl	%eax,%eax
	jnz	parse_argListDef_ifbl_297
	jmp	parse_argListDef_elsebl_297
parse_argListDef_ifbl_297	:	

	movl	$0,%ebx
	subl	$1,%ebx
	movl	%ebx,%eax
	jmp	parse_argListDef_ret
parse_argListDef_elsebl_297	:	
parse_argListDef_endif_297	:	

	movl	%ebp,%eax
	addl	$8,%eax
	movl	(%eax),%eax
	addl	$16,%eax
	movl	(%eax),%eax
	addl	$0,%eax
	movl	(%eax),%eax
	movl	%eax,%ebx
	cmpl	$6,%ebx
	movl	$1,%eax
	jne	parse_argListDef_reltrue_300
	movl	$0,%eax
parse_argListDef_reltrue_300	:	
	testl	%eax,%eax
	jnz	parse_argListDef_ifbl_299
	jmp	parse_argListDef_elsebl_299
parse_argListDef_ifbl_299	:	

	subl	$0,%esp
	call	syntax_CreateTreeNode
	addl	$0,%esp
	movl	%eax,-8(%ebp)

	subl	$8,%esp
	movl	12(%ebp),%eax
	movl	%eax,0(%esp)
	movl	-8(%ebp),%eax
	movl	%eax,4(%esp)
	call	syntax_AddChildTree
	addl	$8,%esp

	subl	$0,%esp
	call	syntax_CreateTreeNode
	addl	$0,%esp
	movl	%eax,-4(%ebp)

	subl	$8,%esp
	movl	-8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	-4(%ebp),%eax
	movl	%eax,4(%esp)
	call	syntax_AddChildTree
	addl	$8,%esp

	subl	$8,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	-4(%ebp),%eax
	movl	%eax,4(%esp)
	call	parse_typedIdent
	addl	$8,%esp
	movl	%eax,%ebx
	cmpl	$0,%ebx
	movl	$1,%eax
	jne	parse_argListDef_reltrue_302
	movl	$0,%eax
parse_argListDef_reltrue_302	:	
	testl	%eax,%eax
	jnz	parse_argListDef_ifbl_301
	jmp	parse_argListDef_elsebl_301
parse_argListDef_ifbl_301	:	

	movl	$0,%ebx
	subl	$1,%ebx
	movl	%ebx,%eax
	jmp	parse_argListDef_ret
parse_argListDef_elsebl_301	:	
parse_argListDef_endif_301	:	

parse_argListDef_while_303	:	
	movl	%ebp,%eax
	addl	$8,%eax
	movl	(%eax),%eax
	addl	$16,%eax
	movl	(%eax),%eax
	addl	$0,%eax
	movl	(%eax),%eax
	movl	%eax,%ebx
	cmpl	$7,%ebx
	movl	$1,%eax
	je	parse_argListDef_reltrue_304
	movl	$0,%eax
parse_argListDef_reltrue_304	:	
	testl	%eax,%eax
	jz	parse_argListDef_endwhile_303

	subl	$8,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	12(%ebp),%eax
	movl	%eax,4(%esp)
	call	addAndEatToken
	addl	$8,%esp

	subl	$0,%esp
	call	syntax_CreateTreeNode
	addl	$0,%esp
	movl	%eax,-8(%ebp)

	subl	$8,%esp
	movl	12(%ebp),%eax
	movl	%eax,0(%esp)
	movl	-8(%ebp),%eax
	movl	%eax,4(%esp)
	call	syntax_AddChildTree
	addl	$8,%esp

	subl	$0,%esp
	call	syntax_CreateTreeNode
	addl	$0,%esp
	movl	%eax,-4(%ebp)

	subl	$8,%esp
	movl	-8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	-4(%ebp),%eax
	movl	%eax,4(%esp)
	call	syntax_AddChildTree
	addl	$8,%esp

	subl	$8,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	-4(%ebp),%eax
	movl	%eax,4(%esp)
	call	parse_typedIdent
	addl	$8,%esp
	movl	%eax,%ebx
	cmpl	$0,%ebx
	movl	$1,%eax
	jne	parse_argListDef_reltrue_306
	movl	$0,%eax
parse_argListDef_reltrue_306	:	
	testl	%eax,%eax
	jnz	parse_argListDef_ifbl_305
	jmp	parse_argListDef_elsebl_305
parse_argListDef_ifbl_305	:	

	movl	$0,%ebx
	subl	$1,%ebx
	movl	%ebx,%eax
	jmp	parse_argListDef_ret
parse_argListDef_elsebl_305	:	
parse_argListDef_endif_305	:	
	jmp	parse_argListDef_while_303
parse_argListDef_endwhile_303	:	
	jmp	parse_argListDef_endif_299
parse_argListDef_elsebl_299	:	
parse_argListDef_endif_299	:	

	subl	$16,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	12(%ebp),%eax
	movl	%eax,4(%esp)
	movl	$6,8(%esp)
	movl	$symtab+1867,12(%esp)
	call	addAndEatSpecificToken
	addl	$16,%esp
	movl	%eax,%ebx
	cmpl	$0,%ebx
	movl	$1,%eax
	jne	parse_argListDef_reltrue_308
	movl	$0,%eax
parse_argListDef_reltrue_308	:	
	testl	%eax,%eax
	jnz	parse_argListDef_ifbl_307
	jmp	parse_argListDef_elsebl_307
parse_argListDef_ifbl_307	:	

	movl	$0,%ebx
	subl	$1,%ebx
	movl	%ebx,%eax
	jmp	parse_argListDef_ret
parse_argListDef_elsebl_307	:	
parse_argListDef_endif_307	:	

	movl	$0,%eax
	jmp	parse_argListDef_ret
parse_argListDef_ret	:	
	movl	%ebp,%esp
	popl	%ebp
	ret	

.globl	parse_varfuncDefdec
.type	parse_varfuncDefdec,@function
parse_varfuncDefdec	:	
	pushl	%ebp
	movl	%esp,%ebp
	subl	$296,%esp

	subl	$8,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	$symtab+1913,4(%esp)
	call	parse_tracemsg
	addl	$8,%esp

	subl	$0,%esp
	call	syntax_CreateTreeNode
	addl	$0,%esp
	movl	%eax,-4(%ebp)

	subl	$8,%esp
	movl	12(%ebp),%eax
	movl	%eax,0(%esp)
	movl	-4(%ebp),%eax
	movl	%eax,4(%esp)
	call	syntax_AddChildTree
	addl	$8,%esp

	subl	$8,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	-4(%ebp),%eax
	movl	%eax,4(%esp)
	call	parse_typedIdent
	addl	$8,%esp
	movl	%eax,%ebx
	cmpl	$0,%ebx
	movl	$1,%eax
	jne	parse_varfuncDefdec_reltrue_310
	movl	$0,%eax
parse_varfuncDefdec_reltrue_310	:	
	testl	%eax,%eax
	jnz	parse_varfuncDefdec_ifbl_309
	jmp	parse_varfuncDefdec_elsebl_309
parse_varfuncDefdec_ifbl_309	:	

	movl	$0,%ebx
	subl	$1,%ebx
	movl	%ebx,%eax
	jmp	parse_varfuncDefdec_ret
parse_varfuncDefdec_elsebl_309	:	
parse_varfuncDefdec_endif_309	:	

	subl	$8,%esp
	movl	12(%ebp),%eax
	movl	%eax,0(%esp)
	movl	$0,4(%esp)
	call	syntax_GetChild
	addl	$8,%esp
	movl	%eax,-8(%ebp)

	subl	$8,%esp
	movl	-8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	$1,4(%esp)
	call	syntax_GetChild
	addl	$8,%esp
	movl	%eax,-8(%ebp)

	movl	%ebp,%eax
	addl	$-296,%eax
	pushl	%eax
	movl	%ebp,%eax
	addl	$-8,%eax
	movl	(%eax),%eax
	addl	$8,%eax
	popl	%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx

	movl	%ebp,%eax
	addl	$8,%eax
	movl	(%eax),%eax
	addl	$16,%eax
	movl	(%eax),%eax
	addl	$0,%eax
	movl	(%eax),%eax
	movl	%eax,%ebx
	cmpl	$8,%ebx
	movl	$1,%eax
	je	parse_varfuncDefdec_reltrue_312
	movl	$0,%eax
parse_varfuncDefdec_reltrue_312	:	
	testl	%eax,%eax
	jnz	parse_varfuncDefdec_ifbl_311
	jmp	parse_varfuncDefdec_elsebl_311
parse_varfuncDefdec_ifbl_311	:	

	subl	$8,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	12(%ebp),%eax
	movl	%eax,4(%esp)
	call	addAndEatToken
	addl	$8,%esp

	movl	%ebp,%eax
	addl	$8,%eax
	movl	(%eax),%eax
	addl	$4,%eax
	movl	(%eax),%eax
	testl	%eax,%eax
	jnz	parse_varfuncDefdec_ifbl_313
	jmp	parse_varfuncDefdec_elsebl_313
parse_varfuncDefdec_ifbl_313	:	

	subl	$8,%esp
	movl	%ebp,%eax
	addl	$8,%eax
	movl	(%eax),%eax
	addl	$4,%eax
	movl	(%eax),%eax
	movl	%eax,0(%esp)
	movl	12(%ebp),%eax
	movl	%eax,4(%esp)
	call	symbol_DefineGlobalVariable
	addl	$8,%esp
	jmp	parse_varfuncDefdec_endif_313
parse_varfuncDefdec_elsebl_313	:	
parse_varfuncDefdec_endif_313	:	
	jmp	parse_varfuncDefdec_endif_311
parse_varfuncDefdec_elsebl_311	:	

	movl	%ebp,%eax
	addl	$8,%eax
	movl	(%eax),%eax
	addl	$16,%eax
	movl	(%eax),%eax
	addl	$0,%eax
	movl	(%eax),%eax
	movl	%eax,%ebx
	cmpl	$3,%ebx
	movl	$1,%eax
	je	parse_varfuncDefdec_reltrue_315
	movl	$0,%eax
parse_varfuncDefdec_reltrue_315	:	
	testl	%eax,%eax
	jnz	parse_varfuncDefdec_ifbl_314
	jmp	parse_varfuncDefdec_elsebl_314
parse_varfuncDefdec_ifbl_314	:	

	subl	$8,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	12(%ebp),%eax
	movl	%eax,4(%esp)
	call	addAndEatToken
	addl	$8,%esp

	subl	$16,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	12(%ebp),%eax
	movl	%eax,4(%esp)
	movl	$44,8(%esp)
	movl	$symtab+1933,12(%esp)
	call	addAndEatSpecificToken
	addl	$16,%esp
	movl	%eax,%ebx
	cmpl	$0,%ebx
	movl	$1,%eax
	jne	parse_varfuncDefdec_reltrue_317
	movl	$0,%eax
parse_varfuncDefdec_reltrue_317	:	
	testl	%eax,%eax
	jnz	parse_varfuncDefdec_ifbl_316
	jmp	parse_varfuncDefdec_elsebl_316
parse_varfuncDefdec_ifbl_316	:	

	movl	$0,%ebx
	subl	$1,%ebx
	movl	%ebx,%eax
	jmp	parse_varfuncDefdec_ret
parse_varfuncDefdec_elsebl_316	:	
parse_varfuncDefdec_endif_316	:	

	subl	$16,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	12(%ebp),%eax
	movl	%eax,4(%esp)
	movl	$4,8(%esp)
	movl	$symtab+1972,12(%esp)
	call	addAndEatSpecificToken
	addl	$16,%esp
	movl	%eax,%ebx
	cmpl	$0,%ebx
	movl	$1,%eax
	jne	parse_varfuncDefdec_reltrue_319
	movl	$0,%eax
parse_varfuncDefdec_reltrue_319	:	
	testl	%eax,%eax
	jnz	parse_varfuncDefdec_ifbl_318
	jmp	parse_varfuncDefdec_elsebl_318
parse_varfuncDefdec_ifbl_318	:	

	movl	$0,%ebx
	subl	$1,%ebx
	movl	%ebx,%eax
	jmp	parse_varfuncDefdec_ret
parse_varfuncDefdec_elsebl_318	:	
parse_varfuncDefdec_endif_318	:	

	subl	$16,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	12(%ebp),%eax
	movl	%eax,4(%esp)
	movl	$8,8(%esp)
	movl	$symtab+2019,12(%esp)
	call	addAndEatSpecificToken
	addl	$16,%esp
	movl	%eax,%ebx
	cmpl	$0,%ebx
	movl	$1,%eax
	jne	parse_varfuncDefdec_reltrue_321
	movl	$0,%eax
parse_varfuncDefdec_reltrue_321	:	
	testl	%eax,%eax
	jnz	parse_varfuncDefdec_ifbl_320
	jmp	parse_varfuncDefdec_elsebl_320
parse_varfuncDefdec_ifbl_320	:	

	subl	$8,%esp
	movl	%ebp,%eax
	addl	$-152,%eax
	addl	$16,%eax
	movl	%eax,0(%esp)
	movl	$symtab+1752,4(%esp)
	call	strcpy
	addl	$8,%esp

	movl	%ebp,%eax
	addl	$-152,%eax
	addl	$0,%eax
	movl	%eax,%ebx
	movl	$8,(%ebx)

	subl	$148,%esp
	movl	12(%ebp),%eax
	movl	%eax,0(%esp)
	movl	%ebp,%eax
	addl	$-152,%eax
	movl	%esp,%ebx
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	call	syntax_AddChildNode
	addl	$148,%esp
	jmp	parse_varfuncDefdec_endif_320
parse_varfuncDefdec_elsebl_320	:	
parse_varfuncDefdec_endif_320	:	

	movl	%ebp,%eax
	addl	$8,%eax
	movl	(%eax),%eax
	addl	$4,%eax
	movl	(%eax),%eax
	testl	%eax,%eax
	jnz	parse_varfuncDefdec_ifbl_322
	jmp	parse_varfuncDefdec_elsebl_322
parse_varfuncDefdec_ifbl_322	:	

	subl	$8,%esp
	movl	%ebp,%eax
	addl	$8,%eax
	movl	(%eax),%eax
	addl	$4,%eax
	movl	(%eax),%eax
	movl	%eax,0(%esp)
	movl	12(%ebp),%eax
	movl	%eax,4(%esp)
	call	symbol_DefineGlobalVariable
	addl	$8,%esp
	jmp	parse_varfuncDefdec_endif_322
parse_varfuncDefdec_elsebl_322	:	
parse_varfuncDefdec_endif_322	:	
	jmp	parse_varfuncDefdec_endif_314
parse_varfuncDefdec_elsebl_314	:	

	subl	$0,%esp
	call	syntax_CreateTreeNode
	addl	$0,%esp
	movl	%eax,-4(%ebp)

	subl	$8,%esp
	movl	12(%ebp),%eax
	movl	%eax,0(%esp)
	movl	-4(%ebp),%eax
	movl	%eax,4(%esp)
	call	syntax_AddChildTree
	addl	$8,%esp

	subl	$8,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	-4(%ebp),%eax
	movl	%eax,4(%esp)
	call	parse_argListDef
	addl	$8,%esp
	movl	%eax,%ebx
	cmpl	$0,%ebx
	movl	$1,%eax
	jne	parse_varfuncDefdec_reltrue_324
	movl	$0,%eax
parse_varfuncDefdec_reltrue_324	:	
	testl	%eax,%eax
	jnz	parse_varfuncDefdec_ifbl_323
	jmp	parse_varfuncDefdec_elsebl_323
parse_varfuncDefdec_ifbl_323	:	

	movl	$0,%ebx
	subl	$1,%ebx
	movl	%ebx,%eax
	jmp	parse_varfuncDefdec_ret
parse_varfuncDefdec_elsebl_323	:	
parse_varfuncDefdec_endif_323	:	

	movl	%ebp,%eax
	addl	$8,%eax
	movl	(%eax),%eax
	addl	$16,%eax
	movl	(%eax),%eax
	addl	$0,%eax
	movl	(%eax),%eax
	movl	%eax,%ebx
	cmpl	$8,%ebx
	movl	$1,%eax
	je	parse_varfuncDefdec_reltrue_326
	movl	$0,%eax
parse_varfuncDefdec_reltrue_326	:	
	testl	%eax,%eax
	jnz	parse_varfuncDefdec_ifbl_325
	jmp	parse_varfuncDefdec_elsebl_325
parse_varfuncDefdec_ifbl_325	:	

	subl	$8,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	12(%ebp),%eax
	movl	%eax,4(%esp)
	call	addAndEatToken
	addl	$8,%esp

	movl	%ebp,%eax
	addl	$8,%eax
	movl	(%eax),%eax
	addl	$4,%eax
	movl	(%eax),%eax
	testl	%eax,%eax
	jnz	parse_varfuncDefdec_ifbl_327
	jmp	parse_varfuncDefdec_elsebl_327
parse_varfuncDefdec_ifbl_327	:	

	subl	$8,%esp
	movl	%ebp,%eax
	addl	$8,%eax
	movl	(%eax),%eax
	addl	$4,%eax
	movl	(%eax),%eax
	movl	%eax,0(%esp)
	movl	12(%ebp),%eax
	movl	%eax,4(%esp)
	call	symbol_DeclareFunction
	addl	$8,%esp
	jmp	parse_varfuncDefdec_endif_327
parse_varfuncDefdec_elsebl_327	:	
parse_varfuncDefdec_endif_327	:	
	jmp	parse_varfuncDefdec_endif_325
parse_varfuncDefdec_elsebl_325	:	

	subl	$0,%esp
	call	syntax_CreateTreeNode
	addl	$0,%esp
	movl	%eax,-4(%ebp)

	subl	$8,%esp
	movl	12(%ebp),%eax
	movl	%eax,0(%esp)
	movl	-4(%ebp),%eax
	movl	%eax,4(%esp)
	call	syntax_AddChildTree
	addl	$8,%esp

	movl	%ebp,%eax
	addl	$8,%eax
	movl	(%eax),%eax
	addl	$4,%eax
	movl	(%eax),%eax
	testl	%eax,%eax
	jnz	parse_varfuncDefdec_ifbl_328
	jmp	parse_varfuncDefdec_elsebl_328
parse_varfuncDefdec_ifbl_328	:	

	subl	$8,%esp
	movl	%ebp,%eax
	addl	$8,%eax
	movl	(%eax),%eax
	addl	$4,%eax
	movl	(%eax),%eax
	movl	%eax,0(%esp)
	movl	12(%ebp),%eax
	movl	%eax,4(%esp)
	call	symbol_DefineFunction
	addl	$8,%esp
	jmp	parse_varfuncDefdec_endif_328
parse_varfuncDefdec_elsebl_328	:	
parse_varfuncDefdec_endif_328	:	

	movl	%ebp,%eax
	addl	$8,%eax
	movl	(%eax),%eax
	addl	$8,%eax
	movl	(%eax),%eax
	testl	%eax,%eax
	jnz	parse_varfuncDefdec_ifbl_329
	jmp	parse_varfuncDefdec_elsebl_329
parse_varfuncDefdec_ifbl_329	:	

	movl	%ebp,%eax
	addl	$8,%eax
	movl	(%eax),%eax
	addl	$8,%eax
	movl	(%eax),%eax
	addl	$32,%eax
	pushl	%eax
	movl	%ebp,%eax
	addl	$-296,%eax
	popl	%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	jmp	parse_varfuncDefdec_endif_329
parse_varfuncDefdec_elsebl_329	:	
parse_varfuncDefdec_endif_329	:	

	subl	$8,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	-4(%ebp),%eax
	movl	%eax,4(%esp)
	call	parse_funcBody
	addl	$8,%esp
	movl	%eax,%ebx
	cmpl	$0,%ebx
	movl	$1,%eax
	jne	parse_varfuncDefdec_reltrue_331
	movl	$0,%eax
parse_varfuncDefdec_reltrue_331	:	
	testl	%eax,%eax
	jnz	parse_varfuncDefdec_ifbl_330
	jmp	parse_varfuncDefdec_elsebl_330
parse_varfuncDefdec_ifbl_330	:	

	movl	%ebp,%eax
	addl	$8,%eax
	movl	(%eax),%eax
	addl	$4,%eax
	movl	(%eax),%eax
	testl	%eax,%eax
	jnz	parse_varfuncDefdec_ifbl_332
	jmp	parse_varfuncDefdec_elsebl_332
parse_varfuncDefdec_ifbl_332	:	

	subl	$4,%esp
	movl	%ebp,%eax
	addl	$8,%eax
	movl	(%eax),%eax
	addl	$4,%eax
	movl	(%eax),%eax
	movl	%eax,0(%esp)
	call	symbol_ClearNonGlobalVariables
	addl	$4,%esp
	jmp	parse_varfuncDefdec_endif_332
parse_varfuncDefdec_elsebl_332	:	
parse_varfuncDefdec_endif_332	:	

	movl	$0,%ebx
	subl	$1,%ebx
	movl	%ebx,%eax
	jmp	parse_varfuncDefdec_ret
parse_varfuncDefdec_elsebl_330	:	
parse_varfuncDefdec_endif_330	:	

	movl	%ebp,%eax
	addl	$8,%eax
	movl	(%eax),%eax
	addl	$4,%eax
	movl	(%eax),%eax
	testl	%eax,%eax
	jnz	parse_varfuncDefdec_ifbl_333
	jmp	parse_varfuncDefdec_elsebl_333
parse_varfuncDefdec_ifbl_333	:	

	subl	$4,%esp
	movl	%ebp,%eax
	addl	$8,%eax
	movl	(%eax),%eax
	addl	$4,%eax
	movl	(%eax),%eax
	movl	%eax,0(%esp)
	call	symbol_ClearNonGlobalVariables
	addl	$4,%esp
	jmp	parse_varfuncDefdec_endif_333
parse_varfuncDefdec_elsebl_333	:	
parse_varfuncDefdec_endif_333	:	
parse_varfuncDefdec_endif_325	:	
parse_varfuncDefdec_endif_314	:	
parse_varfuncDefdec_endif_311	:	

	movl	$0,%eax
	jmp	parse_varfuncDefdec_ret
parse_varfuncDefdec_ret	:	
	movl	%ebp,%esp
	popl	%ebp
	ret	

.globl	parse_structDef
.type	parse_structDef,@function
parse_structDef	:	
	pushl	%ebp
	movl	%esp,%ebp
	subl	$148,%esp

	subl	$8,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	$symtab+2066,4(%esp)
	call	parse_tracemsg
	addl	$8,%esp

	subl	$16,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	12(%ebp),%eax
	movl	%eax,4(%esp)
	movl	$34,8(%esp)
	movl	$symtab+2082,12(%esp)
	call	addAndEatSpecificToken
	addl	$16,%esp
	movl	%eax,%ebx
	cmpl	$0,%ebx
	movl	$1,%eax
	jne	parse_structDef_reltrue_335
	movl	$0,%eax
parse_structDef_reltrue_335	:	
	testl	%eax,%eax
	jnz	parse_structDef_ifbl_334
	jmp	parse_structDef_elsebl_334
parse_structDef_ifbl_334	:	

	movl	$0,%ebx
	subl	$1,%ebx
	movl	%ebx,%eax
	jmp	parse_structDef_ret
parse_structDef_elsebl_334	:	
parse_structDef_endif_334	:	

	subl	$16,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	12(%ebp),%eax
	movl	%eax,4(%esp)
	movl	$43,8(%esp)
	movl	$symtab+2119,12(%esp)
	call	addAndEatSpecificToken
	addl	$16,%esp
	movl	%eax,%ebx
	cmpl	$0,%ebx
	movl	$1,%eax
	jne	parse_structDef_reltrue_337
	movl	$0,%eax
parse_structDef_reltrue_337	:	
	testl	%eax,%eax
	jnz	parse_structDef_ifbl_336
	jmp	parse_structDef_elsebl_336
parse_structDef_ifbl_336	:	

	movl	$0,%ebx
	subl	$1,%ebx
	movl	%ebx,%eax
	jmp	parse_structDef_ret
parse_structDef_elsebl_336	:	
parse_structDef_endif_336	:	

	subl	$16,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	12(%ebp),%eax
	movl	%eax,4(%esp)
	movl	$1,8(%esp)
	movl	$symtab+2161,12(%esp)
	call	addAndEatSpecificToken
	addl	$16,%esp
	movl	%eax,%ebx
	cmpl	$0,%ebx
	movl	$1,%eax
	jne	parse_structDef_reltrue_339
	movl	$0,%eax
parse_structDef_reltrue_339	:	
	testl	%eax,%eax
	jnz	parse_structDef_ifbl_338
	jmp	parse_structDef_elsebl_338
parse_structDef_ifbl_338	:	

	movl	$0,%ebx
	subl	$1,%ebx
	movl	%ebx,%eax
	jmp	parse_structDef_ret
parse_structDef_elsebl_338	:	
parse_structDef_endif_338	:	

	subl	$0,%esp
	call	syntax_CreateTreeNode
	addl	$0,%esp
	movl	%eax,-4(%ebp)

	subl	$8,%esp
	movl	12(%ebp),%eax
	movl	%eax,0(%esp)
	movl	-4(%ebp),%eax
	movl	%eax,4(%esp)
	call	syntax_AddChildTree
	addl	$8,%esp

	subl	$8,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	-4(%ebp),%eax
	movl	%eax,4(%esp)
	call	parse_varDecl
	addl	$8,%esp
	movl	%eax,%ebx
	cmpl	$0,%ebx
	movl	$1,%eax
	jne	parse_structDef_reltrue_341
	movl	$0,%eax
parse_structDef_reltrue_341	:	
	testl	%eax,%eax
	jnz	parse_structDef_ifbl_340
	jmp	parse_structDef_elsebl_340
parse_structDef_ifbl_340	:	

	subl	$4,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	call	sync_toStrongKeyword
	addl	$4,%esp

	movl	%ebp,%eax
	addl	$8,%eax
	movl	(%eax),%eax
	addl	$16,%eax
	movl	(%eax),%eax
	addl	$0,%eax
	movl	(%eax),%eax
	movl	%eax,%ebx
	cmpl	$43,%ebx
	movl	$1,%eax
	jne	parse_structDef_reltrue_344
	movl	$0,%eax
parse_structDef_reltrue_344	:	
	testl	%eax,%eax
	jz	parse_structDef_logtermfalse_343
	movl	%ebp,%eax
	addl	$8,%eax
	movl	(%eax),%eax
	addl	$16,%eax
	movl	(%eax),%eax
	addl	$0,%eax
	movl	(%eax),%eax
	movl	%eax,%ebx
	cmpl	$36,%ebx
	movl	$1,%eax
	jne	parse_structDef_reltrue_345
	movl	$0,%eax
parse_structDef_reltrue_345	:	
	testl	%eax,%eax
	jz	parse_structDef_logtermfalse_343
	movl	%ebp,%eax
	addl	$8,%eax
	movl	(%eax),%eax
	addl	$16,%eax
	movl	(%eax),%eax
	addl	$0,%eax
	movl	(%eax),%eax
	movl	%eax,%ebx
	cmpl	$37,%ebx
	movl	$1,%eax
	jne	parse_structDef_reltrue_346
	movl	$0,%eax
parse_structDef_reltrue_346	:	
	testl	%eax,%eax
	jz	parse_structDef_logtermfalse_343
	movl	%ebp,%eax
	addl	$8,%eax
	movl	(%eax),%eax
	addl	$16,%eax
	movl	(%eax),%eax
	addl	$0,%eax
	movl	(%eax),%eax
	movl	%eax,%ebx
	cmpl	$38,%ebx
	movl	$1,%eax
	jne	parse_structDef_reltrue_347
	movl	$0,%eax
parse_structDef_reltrue_347	:	
	testl	%eax,%eax
	jz	parse_structDef_logtermfalse_343
	movl	%ebp,%eax
	addl	$8,%eax
	movl	(%eax),%eax
	addl	$16,%eax
	movl	(%eax),%eax
	addl	$0,%eax
	movl	(%eax),%eax
	movl	%eax,%ebx
	cmpl	$2,%ebx
	movl	$1,%eax
	jne	parse_structDef_reltrue_348
	movl	$0,%eax
parse_structDef_reltrue_348	:	
	testl	%eax,%eax
	jz	parse_structDef_logtermfalse_343
	movl	%ebp,%eax
	addl	$8,%eax
	movl	(%eax),%eax
	addl	$16,%eax
	movl	(%eax),%eax
	addl	$0,%eax
	movl	(%eax),%eax
	movl	%eax,%ebx
	cmpl	$0,%ebx
	movl	$1,%eax
	jne	parse_structDef_reltrue_349
	movl	$0,%eax
parse_structDef_reltrue_349	:	
	testl	%eax,%eax
	jz	parse_structDef_logtermfalse_343
	movl	$1,%eax
	jmp	parse_structDef_logtermtrue_343
parse_structDef_logtermfalse_343	:	
	movl	$0,%eax
parse_structDef_logtermtrue_343	:	
	testl	%eax,%eax
	jnz	parse_structDef_ifbl_342
	jmp	parse_structDef_elsebl_342
parse_structDef_ifbl_342	:	

	movl	$0,%ebx
	subl	$1,%ebx
	movl	%ebx,%eax
	jmp	parse_structDef_ret
parse_structDef_elsebl_342	:	
parse_structDef_endif_342	:	
	jmp	parse_structDef_endif_340
parse_structDef_elsebl_340	:	
parse_structDef_endif_340	:	

parse_structDef_while_350	:	
	movl	%ebp,%eax
	addl	$8,%eax
	movl	(%eax),%eax
	addl	$16,%eax
	movl	(%eax),%eax
	addl	$0,%eax
	movl	(%eax),%eax
	movl	%eax,%ebx
	cmpl	$2,%ebx
	movl	$1,%eax
	jne	parse_structDef_reltrue_351
	movl	$0,%eax
parse_structDef_reltrue_351	:	
	testl	%eax,%eax
	jz	parse_structDef_endwhile_350

	subl	$0,%esp
	call	syntax_CreateTreeNode
	addl	$0,%esp
	movl	%eax,-4(%ebp)

	subl	$8,%esp
	movl	12(%ebp),%eax
	movl	%eax,0(%esp)
	movl	-4(%ebp),%eax
	movl	%eax,4(%esp)
	call	syntax_AddChildTree
	addl	$8,%esp

	subl	$8,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	-4(%ebp),%eax
	movl	%eax,4(%esp)
	call	parse_varDecl
	addl	$8,%esp
	movl	%eax,%ebx
	cmpl	$0,%ebx
	movl	$1,%eax
	jne	parse_structDef_reltrue_353
	movl	$0,%eax
parse_structDef_reltrue_353	:	
	testl	%eax,%eax
	jnz	parse_structDef_ifbl_352
	jmp	parse_structDef_elsebl_352
parse_structDef_ifbl_352	:	

	subl	$4,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	call	sync_toStrongKeyword
	addl	$4,%esp

	movl	%ebp,%eax
	addl	$8,%eax
	movl	(%eax),%eax
	addl	$16,%eax
	movl	(%eax),%eax
	addl	$0,%eax
	movl	(%eax),%eax
	movl	%eax,%ebx
	cmpl	$43,%ebx
	movl	$1,%eax
	jne	parse_structDef_reltrue_356
	movl	$0,%eax
parse_structDef_reltrue_356	:	
	testl	%eax,%eax
	jz	parse_structDef_logtermfalse_355
	movl	%ebp,%eax
	addl	$8,%eax
	movl	(%eax),%eax
	addl	$16,%eax
	movl	(%eax),%eax
	addl	$0,%eax
	movl	(%eax),%eax
	movl	%eax,%ebx
	cmpl	$36,%ebx
	movl	$1,%eax
	jne	parse_structDef_reltrue_357
	movl	$0,%eax
parse_structDef_reltrue_357	:	
	testl	%eax,%eax
	jz	parse_structDef_logtermfalse_355
	movl	%ebp,%eax
	addl	$8,%eax
	movl	(%eax),%eax
	addl	$16,%eax
	movl	(%eax),%eax
	addl	$0,%eax
	movl	(%eax),%eax
	movl	%eax,%ebx
	cmpl	$37,%ebx
	movl	$1,%eax
	jne	parse_structDef_reltrue_358
	movl	$0,%eax
parse_structDef_reltrue_358	:	
	testl	%eax,%eax
	jz	parse_structDef_logtermfalse_355
	movl	%ebp,%eax
	addl	$8,%eax
	movl	(%eax),%eax
	addl	$16,%eax
	movl	(%eax),%eax
	addl	$0,%eax
	movl	(%eax),%eax
	movl	%eax,%ebx
	cmpl	$38,%ebx
	movl	$1,%eax
	jne	parse_structDef_reltrue_359
	movl	$0,%eax
parse_structDef_reltrue_359	:	
	testl	%eax,%eax
	jz	parse_structDef_logtermfalse_355
	movl	%ebp,%eax
	addl	$8,%eax
	movl	(%eax),%eax
	addl	$16,%eax
	movl	(%eax),%eax
	addl	$0,%eax
	movl	(%eax),%eax
	movl	%eax,%ebx
	cmpl	$2,%ebx
	movl	$1,%eax
	jne	parse_structDef_reltrue_360
	movl	$0,%eax
parse_structDef_reltrue_360	:	
	testl	%eax,%eax
	jz	parse_structDef_logtermfalse_355
	movl	%ebp,%eax
	addl	$8,%eax
	movl	(%eax),%eax
	addl	$16,%eax
	movl	(%eax),%eax
	addl	$0,%eax
	movl	(%eax),%eax
	movl	%eax,%ebx
	cmpl	$0,%ebx
	movl	$1,%eax
	jne	parse_structDef_reltrue_361
	movl	$0,%eax
parse_structDef_reltrue_361	:	
	testl	%eax,%eax
	jz	parse_structDef_logtermfalse_355
	movl	$1,%eax
	jmp	parse_structDef_logtermtrue_355
parse_structDef_logtermfalse_355	:	
	movl	$0,%eax
parse_structDef_logtermtrue_355	:	
	testl	%eax,%eax
	jnz	parse_structDef_ifbl_354
	jmp	parse_structDef_elsebl_354
parse_structDef_ifbl_354	:	

	movl	$0,%ebx
	subl	$1,%ebx
	movl	%ebx,%eax
	jmp	parse_structDef_ret
parse_structDef_elsebl_354	:	
parse_structDef_endif_354	:	
	jmp	parse_structDef_endif_352
parse_structDef_elsebl_352	:	
parse_structDef_endif_352	:	
	jmp	parse_structDef_while_350
parse_structDef_endwhile_350	:	

	subl	$16,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	12(%ebp),%eax
	movl	%eax,4(%esp)
	movl	$2,8(%esp)
	movl	$symtab+2196,12(%esp)
	call	addAndEatSpecificToken
	addl	$16,%esp
	movl	%eax,%ebx
	cmpl	$0,%ebx
	movl	$1,%eax
	jne	parse_structDef_reltrue_363
	movl	$0,%eax
parse_structDef_reltrue_363	:	
	testl	%eax,%eax
	jnz	parse_structDef_ifbl_362
	jmp	parse_structDef_elsebl_362
parse_structDef_ifbl_362	:	

	movl	$0,%ebx
	subl	$1,%ebx
	movl	%ebx,%eax
	jmp	parse_structDef_ret
parse_structDef_elsebl_362	:	
parse_structDef_endif_362	:	

	subl	$16,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	12(%ebp),%eax
	movl	%eax,4(%esp)
	movl	$8,8(%esp)
	movl	$symtab+2243,12(%esp)
	call	addAndEatSpecificToken
	addl	$16,%esp
	movl	%eax,%ebx
	cmpl	$0,%ebx
	movl	$1,%eax
	jne	parse_structDef_reltrue_365
	movl	$0,%eax
parse_structDef_reltrue_365	:	
	testl	%eax,%eax
	jnz	parse_structDef_ifbl_364
	jmp	parse_structDef_elsebl_364
parse_structDef_ifbl_364	:	

	subl	$8,%esp
	movl	%ebp,%eax
	addl	$-148,%eax
	addl	$16,%eax
	movl	%eax,0(%esp)
	movl	$symtab+1752,4(%esp)
	call	strcpy
	addl	$8,%esp

	movl	%ebp,%eax
	addl	$-148,%eax
	addl	$0,%eax
	movl	%eax,%ebx
	movl	$8,(%ebx)

	subl	$148,%esp
	movl	12(%ebp),%eax
	movl	%eax,0(%esp)
	movl	%ebp,%eax
	addl	$-148,%eax
	movl	%esp,%ebx
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	movl	(%eax),%ecx
	movl	%ecx,(%ebx)
	addl	$4,%eax
	addl	$4,%ebx
	call	syntax_AddChildNode
	addl	$148,%esp
	jmp	parse_structDef_endif_364
parse_structDef_elsebl_364	:	
parse_structDef_endif_364	:	

	movl	%ebp,%eax
	addl	$8,%eax
	movl	(%eax),%eax
	addl	$4,%eax
	movl	(%eax),%eax
	testl	%eax,%eax
	jnz	parse_structDef_ifbl_366
	jmp	parse_structDef_elsebl_366
parse_structDef_ifbl_366	:	

	subl	$8,%esp
	movl	%ebp,%eax
	addl	$8,%eax
	movl	(%eax),%eax
	addl	$4,%eax
	movl	(%eax),%eax
	movl	%eax,0(%esp)
	movl	12(%ebp),%eax
	movl	%eax,4(%esp)
	call	symbol_DefineStruct
	addl	$8,%esp
	jmp	parse_structDef_endif_366
parse_structDef_elsebl_366	:	
parse_structDef_endif_366	:	

	movl	$0,%eax
	jmp	parse_structDef_ret
parse_structDef_ret	:	
	movl	%ebp,%esp
	popl	%ebp
	ret	

.globl	parse_program
.type	parse_program,@function
parse_program	:	
	pushl	%ebp
	movl	%esp,%ebp
	subl	$4,%esp

	subl	$8,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	$symtab+2287,4(%esp)
	call	parse_tracemsg
	addl	$8,%esp

	movl	%ebp,%eax
	addl	$8,%eax
	movl	(%eax),%eax
	addl	$8,%eax
	movl	(%eax),%eax
	testl	%eax,%eax
	jnz	parse_program_ifbl_367
	jmp	parse_program_elsebl_367
parse_program_ifbl_367	:	

	subl	$4,%esp
	movl	%ebp,%eax
	addl	$8,%eax
	movl	(%eax),%eax
	addl	$8,%eax
	movl	(%eax),%eax
	movl	%eax,0(%esp)
	call	codegen_EmitProgrammStart
	addl	$4,%esp
	jmp	parse_program_endif_367
parse_program_elsebl_367	:	
parse_program_endif_367	:	

parse_program_while_368	:	
	movl	%ebp,%eax
	addl	$8,%eax
	movl	(%eax),%eax
	addl	$16,%eax
	movl	(%eax),%eax
	addl	$0,%eax
	movl	(%eax),%eax
	movl	%eax,%ebx
	cmpl	$0,%ebx
	movl	$1,%eax
	jg	parse_program_reltrue_369
	movl	$0,%eax
parse_program_reltrue_369	:	
	testl	%eax,%eax
	jz	parse_program_endwhile_368

	subl	$0,%esp
	call	syntax_CreateTreeNode
	addl	$0,%esp
	movl	%eax,-4(%ebp)

	subl	$8,%esp
	movl	12(%ebp),%eax
	movl	%eax,0(%esp)
	movl	-4(%ebp),%eax
	movl	%eax,4(%esp)
	call	syntax_AddChildTree
	addl	$8,%esp

	movl	%ebp,%eax
	addl	$8,%eax
	movl	(%eax),%eax
	addl	$16,%eax
	movl	(%eax),%eax
	addl	$0,%eax
	movl	(%eax),%eax
	movl	%eax,%ebx
	cmpl	$34,%ebx
	movl	$1,%eax
	je	parse_program_reltrue_371
	movl	$0,%eax
parse_program_reltrue_371	:	
	testl	%eax,%eax
	jnz	parse_program_ifbl_370
	jmp	parse_program_elsebl_370
parse_program_ifbl_370	:	

	subl	$8,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	-4(%ebp),%eax
	movl	%eax,4(%esp)
	call	parse_structDef
	addl	$8,%esp
	movl	%eax,%ebx
	cmpl	$0,%ebx
	movl	$1,%eax
	jne	parse_program_reltrue_373
	movl	$0,%eax
parse_program_reltrue_373	:	
	testl	%eax,%eax
	jnz	parse_program_ifbl_372
	jmp	parse_program_elsebl_372
parse_program_ifbl_372	:	

parse_program_while_374	:	
	movl	%ebp,%eax
	addl	$8,%eax
	movl	(%eax),%eax
	addl	$16,%eax
	movl	(%eax),%eax
	addl	$0,%eax
	movl	(%eax),%eax
	movl	%eax,%ebx
	cmpl	$34,%ebx
	movl	$1,%eax
	jne	parse_program_reltrue_376
	movl	$0,%eax
parse_program_reltrue_376	:	
	testl	%eax,%eax
	jz	parse_program_logtermfalse_375
	movl	%ebp,%eax
	addl	$8,%eax
	movl	(%eax),%eax
	addl	$16,%eax
	movl	(%eax),%eax
	addl	$0,%eax
	movl	(%eax),%eax
	movl	%eax,%ebx
	cmpl	$43,%ebx
	movl	$1,%eax
	jne	parse_program_reltrue_377
	movl	$0,%eax
parse_program_reltrue_377	:	
	testl	%eax,%eax
	jz	parse_program_logtermfalse_375
	movl	%ebp,%eax
	addl	$8,%eax
	movl	(%eax),%eax
	addl	$16,%eax
	movl	(%eax),%eax
	addl	$0,%eax
	movl	(%eax),%eax
	movl	%eax,%ebx
	cmpl	$36,%ebx
	movl	$1,%eax
	jne	parse_program_reltrue_378
	movl	$0,%eax
parse_program_reltrue_378	:	
	testl	%eax,%eax
	jz	parse_program_logtermfalse_375
	movl	%ebp,%eax
	addl	$8,%eax
	movl	(%eax),%eax
	addl	$16,%eax
	movl	(%eax),%eax
	addl	$0,%eax
	movl	(%eax),%eax
	movl	%eax,%ebx
	cmpl	$37,%ebx
	movl	$1,%eax
	jne	parse_program_reltrue_379
	movl	$0,%eax
parse_program_reltrue_379	:	
	testl	%eax,%eax
	jz	parse_program_logtermfalse_375
	movl	%ebp,%eax
	addl	$8,%eax
	movl	(%eax),%eax
	addl	$16,%eax
	movl	(%eax),%eax
	addl	$0,%eax
	movl	(%eax),%eax
	movl	%eax,%ebx
	cmpl	$38,%ebx
	movl	$1,%eax
	jne	parse_program_reltrue_380
	movl	$0,%eax
parse_program_reltrue_380	:	
	testl	%eax,%eax
	jz	parse_program_logtermfalse_375
	movl	%ebp,%eax
	addl	$8,%eax
	movl	(%eax),%eax
	addl	$16,%eax
	movl	(%eax),%eax
	addl	$0,%eax
	movl	(%eax),%eax
	movl	%eax,%ebx
	cmpl	$0,%ebx
	movl	$1,%eax
	jne	parse_program_reltrue_381
	movl	$0,%eax
parse_program_reltrue_381	:	
	testl	%eax,%eax
	jz	parse_program_logtermfalse_375
	movl	$1,%eax
	jmp	parse_program_logtermtrue_375
parse_program_logtermfalse_375	:	
	movl	$0,%eax
parse_program_logtermtrue_375	:	
	testl	%eax,%eax
	jz	parse_program_endwhile_374

	subl	$4,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	call	sync_toStrongKeyword
	addl	$4,%esp
	jmp	parse_program_while_374
parse_program_endwhile_374	:	
	jmp	parse_program_endif_372
parse_program_elsebl_372	:	
parse_program_endif_372	:	
	jmp	parse_program_endif_370
parse_program_elsebl_370	:	

	subl	$8,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	-4(%ebp),%eax
	movl	%eax,4(%esp)
	call	parse_varfuncDefdec
	addl	$8,%esp
	movl	%eax,%ebx
	cmpl	$0,%ebx
	movl	$1,%eax
	jne	parse_program_reltrue_383
	movl	$0,%eax
parse_program_reltrue_383	:	
	testl	%eax,%eax
	jnz	parse_program_ifbl_382
	jmp	parse_program_elsebl_382
parse_program_ifbl_382	:	

parse_program_while_384	:	
	movl	%ebp,%eax
	addl	$8,%eax
	movl	(%eax),%eax
	addl	$16,%eax
	movl	(%eax),%eax
	addl	$0,%eax
	movl	(%eax),%eax
	movl	%eax,%ebx
	cmpl	$34,%ebx
	movl	$1,%eax
	jne	parse_program_reltrue_386
	movl	$0,%eax
parse_program_reltrue_386	:	
	testl	%eax,%eax
	jz	parse_program_logtermfalse_385
	movl	%ebp,%eax
	addl	$8,%eax
	movl	(%eax),%eax
	addl	$16,%eax
	movl	(%eax),%eax
	addl	$0,%eax
	movl	(%eax),%eax
	movl	%eax,%ebx
	cmpl	$43,%ebx
	movl	$1,%eax
	jne	parse_program_reltrue_387
	movl	$0,%eax
parse_program_reltrue_387	:	
	testl	%eax,%eax
	jz	parse_program_logtermfalse_385
	movl	%ebp,%eax
	addl	$8,%eax
	movl	(%eax),%eax
	addl	$16,%eax
	movl	(%eax),%eax
	addl	$0,%eax
	movl	(%eax),%eax
	movl	%eax,%ebx
	cmpl	$36,%ebx
	movl	$1,%eax
	jne	parse_program_reltrue_388
	movl	$0,%eax
parse_program_reltrue_388	:	
	testl	%eax,%eax
	jz	parse_program_logtermfalse_385
	movl	%ebp,%eax
	addl	$8,%eax
	movl	(%eax),%eax
	addl	$16,%eax
	movl	(%eax),%eax
	addl	$0,%eax
	movl	(%eax),%eax
	movl	%eax,%ebx
	cmpl	$37,%ebx
	movl	$1,%eax
	jne	parse_program_reltrue_389
	movl	$0,%eax
parse_program_reltrue_389	:	
	testl	%eax,%eax
	jz	parse_program_logtermfalse_385
	movl	%ebp,%eax
	addl	$8,%eax
	movl	(%eax),%eax
	addl	$16,%eax
	movl	(%eax),%eax
	addl	$0,%eax
	movl	(%eax),%eax
	movl	%eax,%ebx
	cmpl	$38,%ebx
	movl	$1,%eax
	jne	parse_program_reltrue_390
	movl	$0,%eax
parse_program_reltrue_390	:	
	testl	%eax,%eax
	jz	parse_program_logtermfalse_385
	movl	%ebp,%eax
	addl	$8,%eax
	movl	(%eax),%eax
	addl	$16,%eax
	movl	(%eax),%eax
	addl	$0,%eax
	movl	(%eax),%eax
	movl	%eax,%ebx
	cmpl	$0,%ebx
	movl	$1,%eax
	jne	parse_program_reltrue_391
	movl	$0,%eax
parse_program_reltrue_391	:	
	testl	%eax,%eax
	jz	parse_program_logtermfalse_385
	movl	$1,%eax
	jmp	parse_program_logtermtrue_385
parse_program_logtermfalse_385	:	
	movl	$0,%eax
parse_program_logtermtrue_385	:	
	testl	%eax,%eax
	jz	parse_program_endwhile_384

	subl	$4,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	call	sync_toStrongKeyword
	addl	$4,%esp
	jmp	parse_program_while_384
parse_program_endwhile_384	:	
	jmp	parse_program_endif_382
parse_program_elsebl_382	:	
parse_program_endif_382	:	
parse_program_endif_370	:	
	jmp	parse_program_while_368
parse_program_endwhile_368	:	

	subl	$8,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	12(%ebp),%eax
	movl	%eax,4(%esp)
	call	addAndEatToken
	addl	$8,%esp

	movl	%ebp,%eax
	addl	$8,%eax
	movl	(%eax),%eax
	addl	$8,%eax
	movl	(%eax),%eax
	testl	%eax,%eax
	jnz	parse_program_ifbl_392
	jmp	parse_program_elsebl_392
parse_program_ifbl_392	:	

	subl	$4,%esp
	movl	%ebp,%eax
	addl	$8,%eax
	movl	(%eax),%eax
	addl	$8,%eax
	movl	(%eax),%eax
	movl	%eax,0(%esp)
	call	codegen_EmitSymboltable
	addl	$4,%esp
	jmp	parse_program_endif_392
parse_program_elsebl_392	:	
parse_program_endif_392	:	

	movl	$0,%eax
	jmp	parse_program_ret
parse_program_ret	:	
	movl	%ebp,%esp
	popl	%ebp
	ret	

.globl	parser_setSymbolTable
.type	parser_setSymbolTable,@function
parser_setSymbolTable	:	
	pushl	%ebp
	movl	%esp,%ebp
	subl	$0,%esp

	movl	%ebp,%eax
	addl	$8,%eax
	movl	(%eax),%eax
	addl	$4,%eax
	pushl	%eax
	movl	12(%ebp),%eax
	popl	%ebx
	movl	%eax,(%ebx)
parser_setSymbolTable_ret	:	
	movl	%ebp,%esp
	popl	%ebp
	ret	

.globl	parser_setCodegen
.type	parser_setCodegen,@function
parser_setCodegen	:	
	pushl	%ebp
	movl	%esp,%ebp
	subl	$0,%esp

	movl	%ebp,%eax
	addl	$8,%eax
	movl	(%eax),%eax
	addl	$8,%eax
	pushl	%eax
	movl	12(%ebp),%eax
	popl	%ebx
	movl	%eax,(%ebx)
parser_setCodegen_ret	:	
	movl	%ebp,%esp
	popl	%ebp
	ret	

.globl	parser_init
.type	parser_init,@function
parser_init	:	
	pushl	%ebp
	movl	%esp,%ebp
	subl	$4,%esp

	movl	%ebp,%eax
	addl	$8,%eax
	movl	(%eax),%eax
	addl	$0,%eax
	pushl	%eax
	movl	12(%ebp),%eax
	popl	%ebx
	movl	%eax,(%ebx)

	movl	%ebp,%eax
	addl	$8,%eax
	movl	(%eax),%eax
	addl	$12,%eax
	movl	%eax,%ebx
	movl	$0,(%ebx)

	movl	%ebp,%eax
	addl	$8,%eax
	movl	(%eax),%eax
	addl	$4,%eax
	movl	%eax,%ebx
	movl	$0,(%ebx)

	movl	%ebp,%eax
	addl	$8,%eax
	movl	(%eax),%eax
	addl	$8,%eax
	movl	%eax,%ebx
	movl	$0,(%ebx)

	movl	%ebp,%eax
	addl	$8,%eax
	movl	(%eax),%eax
	addl	$16,%eax
	pushl	%eax
	pushl	$0
	movl	%ebp,%eax
	addl	$8,%eax
	movl	(%eax),%eax
	addl	$20,%eax
	popl	%esi
	imull	$144,%esi
	addl	%esi,%eax
	popl	%ebx
	movl	%eax,(%ebx)

	movl	$0,-4(%ebp)

parser_init_while_393	:	
	movl	-4(%ebp),%ebx
	cmpl	$4,%ebx
	movl	$1,%eax
	jl	parser_init_reltrue_394
	movl	$0,%eax
parser_init_reltrue_394	:	
	testl	%eax,%eax
	jz	parser_init_endwhile_393

	subl	$8,%esp
	movl	%ebp,%eax
	addl	$8,%eax
	movl	(%eax),%eax
	addl	$0,%eax
	movl	(%eax),%eax
	movl	%eax,0(%esp)
	pushl	-4(%ebp)
	movl	%ebp,%eax
	addl	$8,%eax
	movl	(%eax),%eax
	addl	$20,%eax
	popl	%esi
	imull	$144,%esi
	addl	%esi,%eax
	movl	%eax,4(%esp)
	call	scanner_getToken
	addl	$8,%esp

	movl	-4(%ebp),%ebx
	addl	$1,%ebx
	movl	%ebx,%eax
	movl	%eax,-4(%ebp)
	jmp	parser_init_while_393
parser_init_endwhile_393	:	

	movl	$0,%eax
	jmp	parser_init_ret
parser_init_ret	:	
	movl	%ebp,%esp
	popl	%ebp
	ret	

.globl	parser_buildSyntaxTree
.type	parser_buildSyntaxTree,@function
parser_buildSyntaxTree	:	
	pushl	%ebp
	movl	%esp,%ebp
	subl	$0,%esp

	subl	$8,%esp
	movl	8(%ebp),%eax
	movl	%eax,0(%esp)
	movl	12(%ebp),%eax
	movl	%eax,4(%esp)
	call	parse_program
	addl	$8,%esp
	jmp	parser_buildSyntaxTree_ret
parser_buildSyntaxTree_ret	:	
	movl	%ebp,%esp
	popl	%ebp
	ret	

.section	.data
symtab	:	
.string	"PARSER_ERROR: %d, "
.string	"%d, "
.string	"%s:\n"
.string	"[ERR filename] (%p)\n"
.string	"\tToken is '%s' ::   "
.string	"%s\n"
.string	"ADD AND EAT"
.string	"sync_toStrongKeyword"
.string	"synced"
.string	"parse_dataType"
.string	"Expected data type here."
.string	"parse_sizeofExpr"
.string	"Expected 'sizeof' token here."
.string	"Expected '(' token after sizeof."
.string	"Missing ')' token."
.string	"parse_typedIdent"
.string	"Missing identifier."
.string	"parse_funcCall"
.string	"Expected identifier of function here."
.string	"Expected '(' after function-identifier."
.string	"Missing ')' after function call."
.string	"parse_variableExpr"
.string	"Expected identifier of variable here."
.string	"Expected identifier of variable as selector here."
.string	"Missing ']' token to terminate array selection."
.string	"parse_atomicValExpr"
.string	"parse_arithFactor"
.string	"Missing ')' token to terminate nested arithmetic expression."
.string	"parse_arithTerm"
.string	"parse_arithExpr"
.string	"parse_relExpr"
.string	"parse_logFactor"
.string	"parse_logTerm"
.string	"parse_logExpr"
.string	"parse_continueStmt"
.string	"Missing 'continue' token."
.string	"Missing semikolon after continue."
.string	"parse_breakStmt"
.string	"Missing 'break' token."
.string	"Missing semikolon after break."
.string	"parse_returnStmt"
.string	"Missing 'return' token."
.string	"Missing semikolon in return statement."
.string	"parse_stmtBlock"
.string	"Missing '}' for terminating statement block."
.string	"parse_whileStmt"
.string	"Missing 'while' token."
.string	"Missing '(' token after while."
.string	"Expected ')' token after while-condition."
.string	"parse_ifStmt"
.string	"Missing 'if' token."
.string	"Missing '(' token after if."
.string	"Expected ')' token after if-condition."
.string	"parse_assignStmt"
.string	"Missing '=' token after variable-expression of assignment."
.string	"Expected ';' token after assignment."
.string	"parse_funcCallStmt"
.string	"Expected ';' token after function call."
.string	"parse_statement"
.string	"No variable declaration allowed after statements."
.string	"Expected a statement here."
.string	"Do not expected semikolon here."
.string	"Else detected without if."
.string	"parse_varDecl"
.string	"Expected number token in array size specifier."
.string	"Missing ']' token terminating array size specifier."
.string	"Expected semicolon token after variable declaration."
.string	";"
.string	"parse_funcBody"
.string	"Missing '{' to init function body."
.string	"parse_argListDef"
.string	"Missing '(' to init argument list definition."
.string	"Missing ')' to init argument list definition."
.string	"parse_varfuncDefdec"
.string	"Missing number in array specification."
.string	"Expected ']' token for terminating array size."
.string	"Expected semicolon after variable declaration."
.string	"parse_structDef"
.string	"Missing struct in struct definition."
.string	"Missing identifier for struct definition."
.string	"Missing '{' token for struct body."
.string	"Missing '}' token for terminating struct body."
.string	"Expected semicolon token after struct body."
.string	"parse_program"
