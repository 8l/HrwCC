# gas-assembler code generated by HrwCC

.section .text
	#debug: func-def: ( ) 
.globl test_syntaxTree
.type test_syntaxTree, @function
test_syntaxTree:
	pushl	%ebp
	movl	%esp, %ebp
	subl	$876, %esp


	#debug: func-call: puts ( "== Test the syntax-tree ==\n" ) 
	subl	$4, %esp
	movl	$symtab+0, 0(%esp)
	call	puts
	addl	$4, %esp
	#debug: func-call: puts ( "\nCreate root" ) 
	subl	$4, %esp
	movl	$symtab+28, 0(%esp)
	call	puts
	addl	$4, %esp
	#debug: assignment: root = syntax_CreateTreeNode ( ) ; 
	subl	$0, %esp
	call	syntax_CreateTreeNode
	addl	$0, %esp
	movl	%eax, -588(%ebp)
	#debug: assignment: t1 . type = 1 ; 
	movl	%ebp, %eax
	addl	$-144, %eax
	addl	$0, %eax
	pushl	%eax
	popl	%ebx
	movl	$1, (%ebx)
	#debug: assignment: t2 . type = 2 ; 
	movl	%ebp, %eax
	addl	$-288, %eax
	addl	$0, %eax
	pushl	%eax
	popl	%ebx
	movl	$2, (%ebx)
	#debug: assignment: t3 . type = 3 ; 
	movl	%ebp, %eax
	addl	$-432, %eax
	addl	$0, %eax
	pushl	%eax
	popl	%ebx
	movl	$3, (%ebx)
	#debug: assignment: t4 . type = 4 ; 
	movl	%ebp, %eax
	addl	$-576, %eax
	addl	$0, %eax
	pushl	%eax
	popl	%ebx
	movl	$4, (%ebx)
	#debug: func-call: puts ( "\nAdd child-tokens 1, 2, 3, 4" ) 
	subl	$4, %esp
	movl	$symtab+41, 0(%esp)
	call	puts
	addl	$4, %esp
	#debug: func-call: syntax_AddChildNode ( root , t1 ) 
	subl	$148, %esp
	movl	-588(%ebp), %eax
	movl	%eax, 0(%esp)
	movl	%ebp, %eax
	addl	$-144, %eax
	movl	%esp, %ebx
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	call	syntax_AddChildNode
	addl	$148, %esp
	#debug: func-call: syntax_AddChildNode ( root , t2 ) 
	subl	$148, %esp
	movl	-588(%ebp), %eax
	movl	%eax, 0(%esp)
	movl	%ebp, %eax
	addl	$-288, %eax
	movl	%esp, %ebx
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	call	syntax_AddChildNode
	addl	$148, %esp
	#debug: func-call: syntax_AddChildNode ( root , t3 ) 
	subl	$148, %esp
	movl	-588(%ebp), %eax
	movl	%eax, 0(%esp)
	movl	%ebp, %eax
	addl	$-432, %eax
	movl	%esp, %ebx
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	call	syntax_AddChildNode
	addl	$148, %esp
	#debug: func-call: syntax_AddChildNode ( root , t4 ) 
	subl	$148, %esp
	movl	-588(%ebp), %eax
	movl	%eax, 0(%esp)
	movl	%ebp, %eax
	addl	$-576, %eax
	movl	%esp, %ebx
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	call	syntax_AddChildNode
	addl	$148, %esp
	#debug: func-call: printf ( "\nCnt of children: %d\n" , syntax_CountChilds ( root ) ) 
	subl	$8, %esp
	movl	$symtab+70, 0(%esp)
	subl	$4, %esp
	movl	-588(%ebp), %eax
	movl	%eax, 0(%esp)
	call	syntax_CountChilds
	addl	$4, %esp
	movl	%eax, 4(%esp)
	call	printf
	addl	$8, %esp
	#debug: assignment: subtree = syntax_GetChild ( root , 0 ) ; 
	subl	$8, %esp
	movl	-588(%ebp), %eax
	movl	%eax, 0(%esp)
	movl	$0, 4(%esp)
	call	syntax_GetChild
	addl	$8, %esp
	movl	%eax, -580(%ebp)
	#debug: func-call: printf ( "Child 1: %d\n" , subtree -> tok . type ) 
	subl	$8, %esp
	movl	$symtab+92, 0(%esp)
	movl	%ebp, %eax
	addl	$-580, %eax
	movl	(%eax), %eax
	addl	$8, %eax
	addl	$0, %eax
	movl	(%eax), %eax
	movl	%eax, 4(%esp)
	call	printf
	addl	$8, %esp
	#debug: assignment: subtree = syntax_GetChild ( root , 1 ) ; 
	subl	$8, %esp
	movl	-588(%ebp), %eax
	movl	%eax, 0(%esp)
	movl	$1, 4(%esp)
	call	syntax_GetChild
	addl	$8, %esp
	movl	%eax, -580(%ebp)
	#debug: func-call: printf ( "Child 2: %d\n" , subtree -> tok . type ) 
	subl	$8, %esp
	movl	$symtab+105, 0(%esp)
	movl	%ebp, %eax
	addl	$-580, %eax
	movl	(%eax), %eax
	addl	$8, %eax
	addl	$0, %eax
	movl	(%eax), %eax
	movl	%eax, 4(%esp)
	call	printf
	addl	$8, %esp
	#debug: assignment: subtree = syntax_GetChild ( root , 2 ) ; 
	subl	$8, %esp
	movl	-588(%ebp), %eax
	movl	%eax, 0(%esp)
	movl	$2, 4(%esp)
	call	syntax_GetChild
	addl	$8, %esp
	movl	%eax, -580(%ebp)
	#debug: func-call: printf ( "Child 3: %d\n" , subtree -> tok . type ) 
	subl	$8, %esp
	movl	$symtab+118, 0(%esp)
	movl	%ebp, %eax
	addl	$-580, %eax
	movl	(%eax), %eax
	addl	$8, %eax
	addl	$0, %eax
	movl	(%eax), %eax
	movl	%eax, 4(%esp)
	call	printf
	addl	$8, %esp
	#debug: assignment: subtree = syntax_GetChild ( root , 3 ) ; 
	subl	$8, %esp
	movl	-588(%ebp), %eax
	movl	%eax, 0(%esp)
	movl	$3, 4(%esp)
	call	syntax_GetChild
	addl	$8, %esp
	movl	%eax, -580(%ebp)
	#debug: func-call: printf ( "Child 4: %d\n" , subtree -> tok . type ) 
	subl	$8, %esp
	movl	$symtab+131, 0(%esp)
	movl	%ebp, %eax
	addl	$-580, %eax
	movl	(%eax), %eax
	addl	$8, %eax
	addl	$0, %eax
	movl	(%eax), %eax
	movl	%eax, 4(%esp)
	call	printf
	addl	$8, %esp
	#debug: func-call: puts ( "\nAdd a sub-tree" ) 
	subl	$4, %esp
	movl	$symtab+144, 0(%esp)
	call	puts
	addl	$4, %esp
	#debug: assignment: subtree = syntax_CreateTreeNode ( ) ; 
	subl	$0, %esp
	call	syntax_CreateTreeNode
	addl	$0, %esp
	movl	%eax, -580(%ebp)
	#debug: func-call: syntax_AddChildTree ( root , subtree ) 
	subl	$8, %esp
	movl	-588(%ebp), %eax
	movl	%eax, 0(%esp)
	movl	-580(%ebp), %eax
	movl	%eax, 4(%esp)
	call	syntax_AddChildTree
	addl	$8, %esp
	#debug: func-call: printf ( "Cnt children 5: %d\n" , syntax_CountChilds ( syntax_GetChild ( root , 4 ) ) ) 
	subl	$8, %esp
	movl	$symtab+160, 0(%esp)
	subl	$4, %esp
	subl	$8, %esp
	movl	-588(%ebp), %eax
	movl	%eax, 0(%esp)
	movl	$4, 4(%esp)
	call	syntax_GetChild
	addl	$8, %esp
	movl	%eax, 0(%esp)
	call	syntax_CountChilds
	addl	$4, %esp
	movl	%eax, 4(%esp)
	call	printf
	addl	$8, %esp
	#debug: func-call: puts ( "\nAdd two child-tokens to sub-tree 51, 52" ) 
	subl	$4, %esp
	movl	$symtab+180, 0(%esp)
	call	puts
	addl	$4, %esp
	#debug: assignment: st1 . type = 51 ; 
	movl	%ebp, %eax
	addl	$-732, %eax
	addl	$0, %eax
	pushl	%eax
	popl	%ebx
	movl	$51, (%ebx)
	#debug: assignment: st2 . type = 52 ; 
	movl	%ebp, %eax
	addl	$-876, %eax
	addl	$0, %eax
	pushl	%eax
	popl	%ebx
	movl	$52, (%ebx)
	#debug: func-call: syntax_AddChildNode ( subtree , st1 ) 
	subl	$148, %esp
	movl	-580(%ebp), %eax
	movl	%eax, 0(%esp)
	movl	%ebp, %eax
	addl	$-732, %eax
	movl	%esp, %ebx
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	call	syntax_AddChildNode
	addl	$148, %esp
	#debug: func-call: syntax_AddChildNode ( subtree , st2 ) 
	subl	$148, %esp
	movl	-580(%ebp), %eax
	movl	%eax, 0(%esp)
	movl	%ebp, %eax
	addl	$-876, %eax
	movl	%esp, %ebx
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	call	syntax_AddChildNode
	addl	$148, %esp
	#debug: func-call: printf ( "\nCnt of children: %d\n" , syntax_CountChilds ( root ) ) 
	subl	$8, %esp
	movl	$symtab+70, 0(%esp)
	subl	$4, %esp
	movl	-588(%ebp), %eax
	movl	%eax, 0(%esp)
	call	syntax_CountChilds
	addl	$4, %esp
	movl	%eax, 4(%esp)
	call	printf
	addl	$8, %esp
	#debug: assignment: subtree = syntax_GetChild ( root , 0 ) ; 
	subl	$8, %esp
	movl	-588(%ebp), %eax
	movl	%eax, 0(%esp)
	movl	$0, 4(%esp)
	call	syntax_GetChild
	addl	$8, %esp
	movl	%eax, -580(%ebp)
	#debug: func-call: printf ( "Child 1: %d\n" , subtree -> tok . type ) 
	subl	$8, %esp
	movl	$symtab+92, 0(%esp)
	movl	%ebp, %eax
	addl	$-580, %eax
	movl	(%eax), %eax
	addl	$8, %eax
	addl	$0, %eax
	movl	(%eax), %eax
	movl	%eax, 4(%esp)
	call	printf
	addl	$8, %esp
	#debug: assignment: subtree = syntax_GetChild ( root , 1 ) ; 
	subl	$8, %esp
	movl	-588(%ebp), %eax
	movl	%eax, 0(%esp)
	movl	$1, 4(%esp)
	call	syntax_GetChild
	addl	$8, %esp
	movl	%eax, -580(%ebp)
	#debug: func-call: printf ( "Child 2: %d\n" , subtree -> tok . type ) 
	subl	$8, %esp
	movl	$symtab+105, 0(%esp)
	movl	%ebp, %eax
	addl	$-580, %eax
	movl	(%eax), %eax
	addl	$8, %eax
	addl	$0, %eax
	movl	(%eax), %eax
	movl	%eax, 4(%esp)
	call	printf
	addl	$8, %esp
	#debug: assignment: subtree = syntax_GetChild ( root , 2 ) ; 
	subl	$8, %esp
	movl	-588(%ebp), %eax
	movl	%eax, 0(%esp)
	movl	$2, 4(%esp)
	call	syntax_GetChild
	addl	$8, %esp
	movl	%eax, -580(%ebp)
	#debug: func-call: printf ( "Child 3: %d\n" , subtree -> tok . type ) 
	subl	$8, %esp
	movl	$symtab+118, 0(%esp)
	movl	%ebp, %eax
	addl	$-580, %eax
	movl	(%eax), %eax
	addl	$8, %eax
	addl	$0, %eax
	movl	(%eax), %eax
	movl	%eax, 4(%esp)
	call	printf
	addl	$8, %esp
	#debug: assignment: subtree = syntax_GetChild ( root , 3 ) ; 
	subl	$8, %esp
	movl	-588(%ebp), %eax
	movl	%eax, 0(%esp)
	movl	$3, 4(%esp)
	call	syntax_GetChild
	addl	$8, %esp
	movl	%eax, -580(%ebp)
	#debug: func-call: printf ( "Child 4: %d\n" , subtree -> tok . type ) 
	subl	$8, %esp
	movl	$symtab+131, 0(%esp)
	movl	%ebp, %eax
	addl	$-580, %eax
	movl	(%eax), %eax
	addl	$8, %eax
	addl	$0, %eax
	movl	(%eax), %eax
	movl	%eax, 4(%esp)
	call	printf
	addl	$8, %esp
	#debug: func-call: printf ( "Cnt children 5: %d\n" , syntax_CountChilds ( syntax_GetChild ( root , 4 ) ) ) 
	subl	$8, %esp
	movl	$symtab+160, 0(%esp)
	subl	$4, %esp
	subl	$8, %esp
	movl	-588(%ebp), %eax
	movl	%eax, 0(%esp)
	movl	$4, 4(%esp)
	call	syntax_GetChild
	addl	$8, %esp
	movl	%eax, 0(%esp)
	call	syntax_CountChilds
	addl	$4, %esp
	movl	%eax, 4(%esp)
	call	printf
	addl	$8, %esp
	#debug: assignment: subtree = syntax_GetChild ( root , 4 ) ; 
	subl	$8, %esp
	movl	-588(%ebp), %eax
	movl	%eax, 0(%esp)
	movl	$4, 4(%esp)
	call	syntax_GetChild
	addl	$8, %esp
	movl	%eax, -580(%ebp)
	#debug: assignment: subsubtree = syntax_GetChild ( subtree , 0 ) ; 
	subl	$8, %esp
	movl	-580(%ebp), %eax
	movl	%eax, 0(%esp)
	movl	$0, 4(%esp)
	call	syntax_GetChild
	addl	$8, %esp
	movl	%eax, -584(%ebp)
	#debug: func-call: printf ( "Child 1: %d\n" , subsubtree -> tok . type ) 
	subl	$8, %esp
	movl	$symtab+92, 0(%esp)
	movl	%ebp, %eax
	addl	$-584, %eax
	movl	(%eax), %eax
	addl	$8, %eax
	addl	$0, %eax
	movl	(%eax), %eax
	movl	%eax, 4(%esp)
	call	printf
	addl	$8, %esp
	#debug: assignment: subsubtree = syntax_GetChild ( subtree , 1 ) ; 
	subl	$8, %esp
	movl	-580(%ebp), %eax
	movl	%eax, 0(%esp)
	movl	$1, 4(%esp)
	call	syntax_GetChild
	addl	$8, %esp
	movl	%eax, -584(%ebp)
	#debug: func-call: printf ( "Child 2: %d\n" , subsubtree -> tok . type ) 
	subl	$8, %esp
	movl	$symtab+105, 0(%esp)
	movl	%ebp, %eax
	addl	$-584, %eax
	movl	(%eax), %eax
	addl	$8, %eax
	addl	$0, %eax
	movl	(%eax), %eax
	movl	%eax, 4(%esp)
	call	printf
	addl	$8, %esp
	#debug: func-call: syntax_FreeSyntaxTree ( root ) 
	subl	$4, %esp
	movl	-588(%ebp), %eax
	movl	%eax, 0(%esp)
	call	syntax_FreeSyntaxTree
	addl	$4, %esp


test_syntaxTree_ret:
	movl	%ebp, %esp
	popl	%ebp
	ret




	#debug: func-def: ( ) 
.globl test_Parser
.type test_Parser, @function
test_Parser:
	pushl	%ebp
	movl	%esp, %ebp
	subl	$21349, %esp


	#debug: func-call: puts ( "\n\n== Test parser ==" ) 
	subl	$4, %esp
	movl	$symtab+221, 0(%esp)
	call	puts
	addl	$4, %esp
	#debug: func-call: puts ( "Create preproc..." ) 
	subl	$4, %esp
	movl	$symtab+241, 0(%esp)
	call	puts
	addl	$4, %esp
	#debug: func-call: preproc_create ( & testpreproc , "input.c" ) 
	subl	$8, %esp
	movl	%ebp, %eax
	addl	$-20728, %eax
	movl	%eax, 0(%esp)
	movl	$symtab+259, 4(%esp)
	call	preproc_create
	addl	$8, %esp
	#debug: func-call: puts ( "Init scanner..." ) 
	subl	$4, %esp
	movl	$symtab+267, 0(%esp)
	call	puts
	addl	$4, %esp
	#debug: func-call: scanner_init ( & testscanner , & testpreproc ) 
	subl	$8, %esp
	movl	%ebp, %eax
	addl	$-20749, %eax
	movl	%eax, 0(%esp)
	movl	%ebp, %eax
	addl	$-20728, %eax
	movl	%eax, 4(%esp)
	call	scanner_init
	addl	$8, %esp
	#debug: func-call: puts ( "Init parser...\n" ) 
	subl	$4, %esp
	movl	$symtab+283, 0(%esp)
	call	puts
	addl	$4, %esp
	#debug: func-call: parser_init ( & testparser , & testscanner ) 
	subl	$8, %esp
	movl	%ebp, %eax
	addl	$-21345, %eax
	movl	%eax, 0(%esp)
	movl	%ebp, %eax
	addl	$-20749, %eax
	movl	%eax, 4(%esp)
	call	parser_init
	addl	$8, %esp
	#debug: assignment: tree = syntax_CreateTreeNode ( ) ; 
	subl	$0, %esp
	call	syntax_CreateTreeNode
	addl	$0, %esp
	movl	%eax, -21349(%ebp)
	#debug: func-call: parser_buildSyntaxTree ( & testparser , tree ) 
	subl	$8, %esp
	movl	%ebp, %eax
	addl	$-21345, %eax
	movl	%eax, 0(%esp)
	movl	-21349(%ebp), %eax
	movl	%eax, 4(%esp)
	call	parser_buildSyntaxTree
	addl	$8, %esp
	#debug: func-call: printf ( "Compiled with %d parser errors.\n" , testparser . cnterrors ) 
	subl	$8, %esp
	movl	$symtab+299, 0(%esp)
	movl	%ebp, %eax
	addl	$-21345, %eax
	addl	$12, %eax
	movl	(%eax), %eax
	movl	%eax, 4(%esp)
	call	printf
	addl	$8, %esp
	#debug: func-call: syntax_printTree ( tree ) 
	subl	$4, %esp
	movl	-21349(%ebp), %eax
	movl	%eax, 0(%esp)
	call	syntax_printTree
	addl	$4, %esp
	#debug: func-call: syntax_FreeSyntaxTree ( tree ) 
	subl	$4, %esp
	movl	-21349(%ebp), %eax
	movl	%eax, 0(%esp)
	call	syntax_FreeSyntaxTree
	addl	$4, %esp
	#debug: func-call: preproc_destroy ( & testpreproc ) 
	subl	$4, %esp
	movl	%ebp, %eax
	addl	$-20728, %eax
	movl	%eax, 0(%esp)
	call	preproc_destroy
	addl	$4, %esp


test_Parser_ret:
	movl	%ebp, %esp
	popl	%ebp
	ret




	#debug: func-def: ( ) 
.globl main
.type main, @function
main:
	pushl	%ebp
	movl	%esp, %ebp
	subl	$0, %esp


	#debug: func-call: test_Parser ( ) 
	subl	$0, %esp
	call	test_Parser
	addl	$0, %esp
	#debug: return: return 0 ; 
	movl	$0, %eax
	jmp	main_ret


main_ret:
	movl	%ebp, %esp
	popl	%ebp
	ret




# The symbol table 

.section .data
symtab:
	.string	"== Test the syntax-tree ==\n"
	.string	"\nCreate root"
	.string	"\nAdd child-tokens 1, 2, 3, 4"
	.string	"\nCnt of children: %d\n"
	.string	"Child 1: %d\n"
	.string	"Child 2: %d\n"
	.string	"Child 3: %d\n"
	.string	"Child 4: %d\n"
	.string	"\nAdd a sub-tree"
	.string	"Cnt children 5: %d\n"
	.string	"\nAdd two child-tokens to sub-tree 51, 52"
	.string	"\n\n== Test parser =="
	.string	"Create preproc..."
	.string	"input.c"
	.string	"Init scanner..."
	.string	"Init parser...\n"
	.string	"Compiled with %d parser errors.\n"

