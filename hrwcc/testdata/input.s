# gas-assembler code generated by HrwCC

.section .text
.globl test
.type test, @function
test:
	pushl	%ebp
	movl	%esp, %ebp
	subl	$0, %esp


	subl	$16, %esp
	movl	$symtab+0, 0(%esp)
	movl	%ebp, %eax
	addl	$8, %eax
	addl	$13, %eax
	movl	(%eax), %eax
	movl	%eax, 4(%esp)
	movl	$0, 8(%esp)
	movl	$0, 12(%esp)
	call	printf
	addl	$16, %esp


test_ret:
	movl	%ebp, %esp
	popl	%ebp
	ret




.globl main
.type main, @function
main:
	pushl	%ebp
	movl	%esp, %ebp
	subl	$50, %esp


	movl	%ebp, %eax
	addl	$-25, %eax
	addl	$13, %eax
	pushl	%eax
	popl	%ebx
	movl	$10, (%ebx)
	subl	$25, %esp
	movl	%ebp, %eax
	addl	$-25, %eax
	movl	%esp, %ebx
	addl	$0, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movb	(%eax), %cl
	movb	%cl, (%ebx)
	addl	$1, %eax
	addl	$1, %ebx
	call	test
	addl	$25, %esp
	jmp	main_ret


main_ret:
	movl	%ebp, %esp
	popl	%ebp
	ret




# The symbol table 

.section .data
symtab:
	.string	"Val: %d, %d, %d\n"

