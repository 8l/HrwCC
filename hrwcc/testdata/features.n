# gas-assembler code generated by HrwCC

.section .text
.globl failed
.type failed, @function
failed:
	pushl	%ebp
	movl	%esp, %ebp
	subl	$0, %esp


	subl	$4, %esp
	movl	$symtab+0, 0(%esp)
	call	puts
	addl	$4, %esp
	movl	$0, %eax
	jmp	failed_ret


failed_ret:
	movl	%ebp, %esp
	popl	%ebp
	ret




.globl ok
.type ok, @function
ok:
	pushl	%ebp
	movl	%esp, %ebp
	subl	$0, %esp


	subl	$4, %esp
	movl	$symtab+8, 0(%esp)
	call	puts
	addl	$4, %esp
	movl	$0, %eax
	jmp	ok_ret


ok_ret:
	movl	%ebp, %esp
	popl	%ebp
	ret




.globl testBytedata
.type testBytedata, @function
testBytedata:
	pushl	%ebp
	movl	%esp, %ebp
	subl	$2, %esp


	subl	$4, %esp
	movl	$symtab+11, 0(%esp)
	call	puts
	addl	$4, %esp
	subl	$4, %esp
	movl	$symtab+12, 0(%esp)
	call	puts
	addl	$4, %esp
	pushl	$0
	popl	%ebx
	subl	$4, %ebx
	pushl	%ebx
	popl	%eax
	movb	%al, -1(%ebp)
	subl	$4, %esp
	movl	$symtab+28, 0(%esp)
	call	puts
	addl	$4, %esp
	movsbl	-1(%ebp), %eax
	pushl	%eax
	popl	%ebx
	subl	$124, %ebx
	pushl	%ebx
	popl	%eax
	movb	%al, -2(%ebp)
	subl	$4, %esp
	movl	$symtab+35, 0(%esp)
	call	puts
	addl	$4, %esp
	subl	$8, %esp
	movl	$symtab+45, 0(%esp)
	movb	-2(%ebp), %ah
	movsbl	%ah, %eax
	movl	%eax, 4(%esp)
	call	printf
	addl	$8, %esp
	subl	$8, %esp
	movl	$symtab+52, 0(%esp)
	movl	$0, 4(%esp)
	call	printf
	addl	$8, %esp
	movsbl	-2(%ebp), %eax
	pushl	%eax
	pushl	$0
	popl	%ebx
	subl	$128, %ebx
	pushl	%ebx
	popl	%eax
	popl	%ebx
	cmpl	%eax, %ebx
	movl	$1, %eax
	je	testBytedata_reltrue_1
	movl	$0, %eax
testBytedata_reltrue_1:
	testl	%eax, %eax
	jnz	testBytedata_ifbl_0
	jmp	testBytedata_elsebl_0
testBytedata_ifbl_0:
	subl	$0, %esp
	call	ok
	addl	$0, %esp
	jmp	testBytedata_endif_0

testBytedata_elsebl_0:

	subl	$0, %esp
	call	failed
	addl	$0, %esp
testBytedata_endif_0:

	movsbl	-1(%ebp), %eax
	pushl	%eax
	popl	%ebx
	subl	$125, %ebx
	pushl	%ebx
	popl	%eax
	movb	%al, -2(%ebp)
	subl	$4, %esp
	movl	$symtab+58, 0(%esp)
	call	puts
	addl	$4, %esp
	subl	$8, %esp
	movl	$symtab+45, 0(%esp)
	movb	-2(%ebp), %ah
	movsbl	%ah, %eax
	movl	%eax, 4(%esp)
	call	printf
	addl	$8, %esp
	subl	$8, %esp
	movl	$symtab+52, 0(%esp)
	movl	$0, 4(%esp)
	call	printf
	addl	$8, %esp
	movsbl	-2(%ebp), %eax
	pushl	%eax
	popl	%ebx
	cmpl	$127, %ebx
	movl	$1, %eax
	je	testBytedata_reltrue_3
	movl	$0, %eax
testBytedata_reltrue_3:
	testl	%eax, %eax
	jnz	testBytedata_ifbl_2
	jmp	testBytedata_elsebl_2
testBytedata_ifbl_2:
	subl	$0, %esp
	call	ok
	addl	$0, %esp
	jmp	testBytedata_endif_2

testBytedata_elsebl_2:

	subl	$0, %esp
	call	failed
	addl	$0, %esp
testBytedata_endif_2:

	movsbl	-1(%ebp), %eax
	pushl	%eax
	popl	%ebx
	addl	$6, %ebx
	pushl	%ebx
	popl	%eax
	movb	%al, -2(%ebp)
	subl	$4, %esp
	movl	$symtab+68, 0(%esp)
	call	puts
	addl	$4, %esp
	subl	$8, %esp
	movl	$symtab+45, 0(%esp)
	movb	-2(%ebp), %ah
	movsbl	%ah, %eax
	movl	%eax, 4(%esp)
	call	printf
	addl	$8, %esp
	subl	$8, %esp
	movl	$symtab+52, 0(%esp)
	movl	$0, 4(%esp)
	call	printf
	addl	$8, %esp
	movsbl	-2(%ebp), %eax
	pushl	%eax
	popl	%ebx
	cmpl	$2, %ebx
	movl	$1, %eax
	je	testBytedata_reltrue_5
	movl	$0, %eax
testBytedata_reltrue_5:
	testl	%eax, %eax
	jnz	testBytedata_ifbl_4
	jmp	testBytedata_elsebl_4
testBytedata_ifbl_4:
	subl	$0, %esp
	call	ok
	addl	$0, %esp
	jmp	testBytedata_endif_4

testBytedata_elsebl_4:

	subl	$0, %esp
	call	failed
	addl	$0, %esp
testBytedata_endif_4:



testBytedata_ret:
	movl	%ebp, %esp
	popl	%ebp
	ret




.globl testExpressions
.type testExpressions, @function
testExpressions:
	pushl	%ebp
	movl	%esp, %ebp
	subl	$4, %esp


	subl	$4, %esp
	movl	$symtab+11, 0(%esp)
	call	puts
	addl	$4, %esp
	subl	$4, %esp
	movl	$symtab+76, 0(%esp)
	call	puts
	addl	$4, %esp
	subl	$8, %esp
	movl	$symtab+94, 0(%esp)
	movl	$1, %eax
	testl	%eax, %eax
	jz	testExpressions_logtermfalse_6
	movl	$0, %eax
	testl	%eax, %eax
	jz	testExpressions_logtermfalse_6
	subl	$0, %esp
	call	failed
	addl	$0, %esp
	testl	%eax, %eax
	jz	testExpressions_logtermfalse_6
	movl	$1, %eax
	jmp	testExpressions_logtermtrue_6
testExpressions_logtermfalse_6:
	movl	$0, %eax
testExpressions_logtermtrue_6:
	movl	%eax, 4(%esp)
	call	printf
	addl	$8, %esp
	subl	$8, %esp
	movl	$symtab+52, 0(%esp)
	movl	$0, 4(%esp)
	call	printf
	addl	$8, %esp
	movl	$1, %eax
	testl	%eax, %eax
	jz	testExpressions_logtermfalse_9
	movl	$0, %eax
	testl	%eax, %eax
	jz	testExpressions_logtermfalse_9
	subl	$0, %esp
	call	failed
	addl	$0, %esp
	testl	%eax, %eax
	jz	testExpressions_logtermfalse_9
	movl	$1, %eax
	jmp	testExpressions_logtermtrue_9
testExpressions_logtermfalse_9:
	movl	$0, %eax
testExpressions_logtermtrue_9:
	pushl	%eax
	popl	%ebx
	cmpl	$0, %ebx
	movl	$1, %eax
	je	testExpressions_reltrue_8
	movl	$0, %eax
testExpressions_reltrue_8:
	testl	%eax, %eax
	jnz	testExpressions_ifbl_7
	jmp	testExpressions_elsebl_7
testExpressions_ifbl_7:
	subl	$0, %esp
	call	ok
	addl	$0, %esp
	jmp	testExpressions_endif_7

testExpressions_elsebl_7:

	subl	$0, %esp
	call	failed
	addl	$0, %esp
testExpressions_endif_7:

	subl	$8, %esp
	movl	$symtab+118, 0(%esp)
	movl	$1, %eax
	testl	%eax, %eax
	jz	testExpressions_logtermfalse_10
	movl	$1, %eax
	testl	%eax, %eax
	jz	testExpressions_logtermfalse_10
	movl	$1, %eax
	jmp	testExpressions_logtermtrue_10
testExpressions_logtermfalse_10:
	movl	$0, %eax
testExpressions_logtermtrue_10:
	movl	%eax, 4(%esp)
	call	printf
	addl	$8, %esp
	subl	$8, %esp
	movl	$symtab+52, 0(%esp)
	movl	$0, 4(%esp)
	call	printf
	addl	$8, %esp
	movl	$1, %eax
	testl	%eax, %eax
	jz	testExpressions_logtermfalse_13
	movl	$1, %eax
	testl	%eax, %eax
	jz	testExpressions_logtermfalse_13
	movl	$1, %eax
	jmp	testExpressions_logtermtrue_13
testExpressions_logtermfalse_13:
	movl	$0, %eax
testExpressions_logtermtrue_13:
	pushl	%eax
	popl	%ebx
	cmpl	$1, %ebx
	movl	$1, %eax
	je	testExpressions_reltrue_12
	movl	$0, %eax
testExpressions_reltrue_12:
	testl	%eax, %eax
	jnz	testExpressions_ifbl_11
	jmp	testExpressions_elsebl_11
testExpressions_ifbl_11:
	subl	$0, %esp
	call	ok
	addl	$0, %esp
	jmp	testExpressions_endif_11

testExpressions_elsebl_11:

	subl	$0, %esp
	call	failed
	addl	$0, %esp
testExpressions_endif_11:

	subl	$8, %esp
	movl	$symtab+130, 0(%esp)
	movl	$0, %eax
	testl	%eax, %eax
	jnz	testExpressions_logexprtrue_14
	movl	$0, %eax
	testl	%eax, %eax
	jnz	testExpressions_logexprtrue_14
	movl	$0, %eax
	jmp	testExpressions_logexprfalse_14
testExpressions_logexprtrue_14:
	movl	$1, %eax
testExpressions_logexprfalse_14:
	movl	%eax, 4(%esp)
	call	printf
	addl	$8, %esp
	subl	$8, %esp
	movl	$symtab+52, 0(%esp)
	movl	$0, 4(%esp)
	call	printf
	addl	$8, %esp
	movl	$0, %eax
	testl	%eax, %eax
	jnz	testExpressions_logexprtrue_17
	movl	$0, %eax
	testl	%eax, %eax
	jnz	testExpressions_logexprtrue_17
	movl	$0, %eax
	jmp	testExpressions_logexprfalse_17
testExpressions_logexprtrue_17:
	movl	$1, %eax
testExpressions_logexprfalse_17:
	pushl	%eax
	popl	%ebx
	cmpl	$0, %ebx
	movl	$1, %eax
	je	testExpressions_reltrue_16
	movl	$0, %eax
testExpressions_reltrue_16:
	testl	%eax, %eax
	jnz	testExpressions_ifbl_15
	jmp	testExpressions_elsebl_15
testExpressions_ifbl_15:
	subl	$0, %esp
	call	ok
	addl	$0, %esp
	jmp	testExpressions_endif_15

testExpressions_elsebl_15:

	subl	$0, %esp
	call	failed
	addl	$0, %esp
testExpressions_endif_15:

	subl	$8, %esp
	movl	$symtab+142, 0(%esp)
	movl	$1, %eax
	testl	%eax, %eax
	jnz	testExpressions_logexprtrue_18
	movl	$1, %eax
	testl	%eax, %eax
	jnz	testExpressions_logexprtrue_18
	subl	$0, %esp
	call	failed
	addl	$0, %esp
	testl	%eax, %eax
	jnz	testExpressions_logexprtrue_18
	movl	$0, %eax
	jmp	testExpressions_logexprfalse_18
testExpressions_logexprtrue_18:
	movl	$1, %eax
testExpressions_logexprfalse_18:
	movl	%eax, 4(%esp)
	call	printf
	addl	$8, %esp
	subl	$8, %esp
	movl	$symtab+52, 0(%esp)
	movl	$0, 4(%esp)
	call	printf
	addl	$8, %esp
	movl	$1, %eax
	testl	%eax, %eax
	jnz	testExpressions_logexprtrue_21
	movl	$1, %eax
	testl	%eax, %eax
	jnz	testExpressions_logexprtrue_21
	subl	$0, %esp
	call	failed
	addl	$0, %esp
	testl	%eax, %eax
	jnz	testExpressions_logexprtrue_21
	movl	$0, %eax
	jmp	testExpressions_logexprfalse_21
testExpressions_logexprtrue_21:
	movl	$1, %eax
testExpressions_logexprfalse_21:
	pushl	%eax
	popl	%ebx
	cmpl	$1, %ebx
	movl	$1, %eax
	je	testExpressions_reltrue_20
	movl	$0, %eax
testExpressions_reltrue_20:
	testl	%eax, %eax
	jnz	testExpressions_ifbl_19
	jmp	testExpressions_elsebl_19
testExpressions_ifbl_19:
	subl	$0, %esp
	call	ok
	addl	$0, %esp
	jmp	testExpressions_endif_19

testExpressions_elsebl_19:

	subl	$0, %esp
	call	failed
	addl	$0, %esp
testExpressions_endif_19:

	subl	$8, %esp
	movl	$symtab+166, 0(%esp)
	movl	$1, %eax
	testl	%eax, %eax
	movl	$1, %eax
	jz	testExpressions_logfactfalse_22
	movl	$0, %eax
testExpressions_logfactfalse_22:
	movl	%eax, 4(%esp)
	call	printf
	addl	$8, %esp
	subl	$8, %esp
	movl	$symtab+52, 0(%esp)
	movl	$0, 4(%esp)
	call	printf
	addl	$8, %esp
	movl	$1, %eax
	testl	%eax, %eax
	movl	$1, %eax
	jz	testExpressions_logfactfalse_25
	movl	$0, %eax
testExpressions_logfactfalse_25:
	pushl	%eax
	popl	%ebx
	cmpl	$0, %ebx
	movl	$1, %eax
	je	testExpressions_reltrue_24
	movl	$0, %eax
testExpressions_reltrue_24:
	testl	%eax, %eax
	jnz	testExpressions_ifbl_23
	jmp	testExpressions_elsebl_23
testExpressions_ifbl_23:
	subl	$0, %esp
	call	ok
	addl	$0, %esp
	jmp	testExpressions_endif_23

testExpressions_elsebl_23:

	subl	$0, %esp
	call	failed
	addl	$0, %esp
testExpressions_endif_23:

	subl	$8, %esp
	movl	$symtab+175, 0(%esp)
	movl	$0, %eax
	testl	%eax, %eax
	movl	$1, %eax
	jz	testExpressions_logfactfalse_26
	movl	$0, %eax
testExpressions_logfactfalse_26:
	movl	%eax, 4(%esp)
	call	printf
	addl	$8, %esp
	subl	$8, %esp
	movl	$symtab+52, 0(%esp)
	movl	$0, 4(%esp)
	call	printf
	addl	$8, %esp
	movl	$0, %eax
	testl	%eax, %eax
	movl	$1, %eax
	jz	testExpressions_logfactfalse_29
	movl	$0, %eax
testExpressions_logfactfalse_29:
	pushl	%eax
	popl	%ebx
	cmpl	$1, %ebx
	movl	$1, %eax
	je	testExpressions_reltrue_28
	movl	$0, %eax
testExpressions_reltrue_28:
	testl	%eax, %eax
	jnz	testExpressions_ifbl_27
	jmp	testExpressions_elsebl_27
testExpressions_ifbl_27:
	subl	$0, %esp
	call	ok
	addl	$0, %esp
	jmp	testExpressions_endif_27

testExpressions_elsebl_27:

	subl	$0, %esp
	call	failed
	addl	$0, %esp
testExpressions_endif_27:

	subl	$8, %esp
	movl	$symtab+184, 0(%esp)
	pushl	$0
	popl	%ebx
	cmpl	$0, %ebx
	movl	$1, %eax
	je	testExpressions_reltrue_30
	movl	$0, %eax
testExpressions_reltrue_30:
	movl	%eax, 4(%esp)
	call	printf
	addl	$8, %esp
	subl	$8, %esp
	movl	$symtab+52, 0(%esp)
	movl	$0, 4(%esp)
	call	printf
	addl	$8, %esp
	pushl	$0
	popl	%ebx
	cmpl	$0, %ebx
	movl	$1, %eax
	je	testExpressions_reltrue_33
	movl	$0, %eax
testExpressions_reltrue_33:
	pushl	%eax
	popl	%ebx
	cmpl	$1, %ebx
	movl	$1, %eax
	je	testExpressions_reltrue_32
	movl	$0, %eax
testExpressions_reltrue_32:
	testl	%eax, %eax
	jnz	testExpressions_ifbl_31
	jmp	testExpressions_elsebl_31
testExpressions_ifbl_31:
	subl	$0, %esp
	call	ok
	addl	$0, %esp
	jmp	testExpressions_endif_31

testExpressions_elsebl_31:

	subl	$0, %esp
	call	failed
	addl	$0, %esp
testExpressions_endif_31:

	subl	$8, %esp
	movl	$symtab+196, 0(%esp)
	pushl	$0
	popl	%ebx
	cmpl	$1, %ebx
	movl	$1, %eax
	je	testExpressions_reltrue_34
	movl	$0, %eax
testExpressions_reltrue_34:
	movl	%eax, 4(%esp)
	call	printf
	addl	$8, %esp
	subl	$8, %esp
	movl	$symtab+52, 0(%esp)
	movl	$0, 4(%esp)
	call	printf
	addl	$8, %esp
	pushl	$0
	popl	%ebx
	cmpl	$1, %ebx
	movl	$1, %eax
	je	testExpressions_reltrue_37
	movl	$0, %eax
testExpressions_reltrue_37:
	pushl	%eax
	popl	%ebx
	cmpl	$0, %ebx
	movl	$1, %eax
	je	testExpressions_reltrue_36
	movl	$0, %eax
testExpressions_reltrue_36:
	testl	%eax, %eax
	jnz	testExpressions_ifbl_35
	jmp	testExpressions_elsebl_35
testExpressions_ifbl_35:
	subl	$0, %esp
	call	ok
	addl	$0, %esp
	jmp	testExpressions_endif_35

testExpressions_elsebl_35:

	subl	$0, %esp
	call	failed
	addl	$0, %esp
testExpressions_endif_35:

	subl	$8, %esp
	movl	$symtab+208, 0(%esp)
	pushl	$0
	popl	%ebx
	cmpl	$0, %ebx
	movl	$1, %eax
	jne	testExpressions_reltrue_38
	movl	$0, %eax
testExpressions_reltrue_38:
	movl	%eax, 4(%esp)
	call	printf
	addl	$8, %esp
	subl	$8, %esp
	movl	$symtab+52, 0(%esp)
	movl	$0, 4(%esp)
	call	printf
	addl	$8, %esp
	pushl	$0
	popl	%ebx
	cmpl	$0, %ebx
	movl	$1, %eax
	jne	testExpressions_reltrue_41
	movl	$0, %eax
testExpressions_reltrue_41:
	pushl	%eax
	popl	%ebx
	cmpl	$0, %ebx
	movl	$1, %eax
	je	testExpressions_reltrue_40
	movl	$0, %eax
testExpressions_reltrue_40:
	testl	%eax, %eax
	jnz	testExpressions_ifbl_39
	jmp	testExpressions_elsebl_39
testExpressions_ifbl_39:
	subl	$0, %esp
	call	ok
	addl	$0, %esp
	jmp	testExpressions_endif_39

testExpressions_elsebl_39:

	subl	$0, %esp
	call	failed
	addl	$0, %esp
testExpressions_endif_39:

	subl	$8, %esp
	movl	$symtab+220, 0(%esp)
	pushl	$0
	popl	%ebx
	cmpl	$1, %ebx
	movl	$1, %eax
	jne	testExpressions_reltrue_42
	movl	$0, %eax
testExpressions_reltrue_42:
	movl	%eax, 4(%esp)
	call	printf
	addl	$8, %esp
	subl	$8, %esp
	movl	$symtab+52, 0(%esp)
	movl	$0, 4(%esp)
	call	printf
	addl	$8, %esp
	pushl	$0
	popl	%ebx
	cmpl	$1, %ebx
	movl	$1, %eax
	jne	testExpressions_reltrue_45
	movl	$0, %eax
testExpressions_reltrue_45:
	pushl	%eax
	popl	%ebx
	cmpl	$1, %ebx
	movl	$1, %eax
	je	testExpressions_reltrue_44
	movl	$0, %eax
testExpressions_reltrue_44:
	testl	%eax, %eax
	jnz	testExpressions_ifbl_43
	jmp	testExpressions_elsebl_43
testExpressions_ifbl_43:
	subl	$0, %esp
	call	ok
	addl	$0, %esp
	jmp	testExpressions_endif_43

testExpressions_elsebl_43:

	subl	$0, %esp
	call	failed
	addl	$0, %esp
testExpressions_endif_43:

	subl	$8, %esp
	movl	$symtab+232, 0(%esp)
	pushl	$0
	popl	%ebx
	cmpl	$1, %ebx
	movl	$1, %eax
	jle	testExpressions_reltrue_46
	movl	$0, %eax
testExpressions_reltrue_46:
	movl	%eax, 4(%esp)
	call	printf
	addl	$8, %esp
	subl	$8, %esp
	movl	$symtab+52, 0(%esp)
	movl	$0, 4(%esp)
	call	printf
	addl	$8, %esp
	pushl	$0
	popl	%ebx
	cmpl	$1, %ebx
	movl	$1, %eax
	jle	testExpressions_reltrue_49
	movl	$0, %eax
testExpressions_reltrue_49:
	pushl	%eax
	popl	%ebx
	cmpl	$1, %ebx
	movl	$1, %eax
	je	testExpressions_reltrue_48
	movl	$0, %eax
testExpressions_reltrue_48:
	testl	%eax, %eax
	jnz	testExpressions_ifbl_47
	jmp	testExpressions_elsebl_47
testExpressions_ifbl_47:
	subl	$0, %esp
	call	ok
	addl	$0, %esp
	jmp	testExpressions_endif_47

testExpressions_elsebl_47:

	subl	$0, %esp
	call	failed
	addl	$0, %esp
testExpressions_endif_47:

	subl	$8, %esp
	movl	$symtab+244, 0(%esp)
	pushl	$1
	popl	%ebx
	cmpl	$0, %ebx
	movl	$1, %eax
	jle	testExpressions_reltrue_50
	movl	$0, %eax
testExpressions_reltrue_50:
	movl	%eax, 4(%esp)
	call	printf
	addl	$8, %esp
	subl	$8, %esp
	movl	$symtab+52, 0(%esp)
	movl	$0, 4(%esp)
	call	printf
	addl	$8, %esp
	pushl	$1
	popl	%ebx
	cmpl	$0, %ebx
	movl	$1, %eax
	jle	testExpressions_reltrue_53
	movl	$0, %eax
testExpressions_reltrue_53:
	pushl	%eax
	popl	%ebx
	cmpl	$0, %ebx
	movl	$1, %eax
	je	testExpressions_reltrue_52
	movl	$0, %eax
testExpressions_reltrue_52:
	testl	%eax, %eax
	jnz	testExpressions_ifbl_51
	jmp	testExpressions_elsebl_51
testExpressions_ifbl_51:
	subl	$0, %esp
	call	ok
	addl	$0, %esp
	jmp	testExpressions_endif_51

testExpressions_elsebl_51:

	subl	$0, %esp
	call	failed
	addl	$0, %esp
testExpressions_endif_51:

	subl	$8, %esp
	movl	$symtab+256, 0(%esp)
	pushl	$0
	popl	%ebx
	cmpl	$1, %ebx
	movl	$1, %eax
	jge	testExpressions_reltrue_54
	movl	$0, %eax
testExpressions_reltrue_54:
	movl	%eax, 4(%esp)
	call	printf
	addl	$8, %esp
	subl	$8, %esp
	movl	$symtab+52, 0(%esp)
	movl	$0, 4(%esp)
	call	printf
	addl	$8, %esp
	pushl	$0
	popl	%ebx
	cmpl	$1, %ebx
	movl	$1, %eax
	jge	testExpressions_reltrue_57
	movl	$0, %eax
testExpressions_reltrue_57:
	pushl	%eax
	popl	%ebx
	cmpl	$0, %ebx
	movl	$1, %eax
	je	testExpressions_reltrue_56
	movl	$0, %eax
testExpressions_reltrue_56:
	testl	%eax, %eax
	jnz	testExpressions_ifbl_55
	jmp	testExpressions_elsebl_55
testExpressions_ifbl_55:
	subl	$0, %esp
	call	ok
	addl	$0, %esp
	jmp	testExpressions_endif_55

testExpressions_elsebl_55:

	subl	$0, %esp
	call	failed
	addl	$0, %esp
testExpressions_endif_55:

	subl	$8, %esp
	movl	$symtab+268, 0(%esp)
	pushl	$1
	popl	%ebx
	cmpl	$0, %ebx
	movl	$1, %eax
	jge	testExpressions_reltrue_58
	movl	$0, %eax
testExpressions_reltrue_58:
	movl	%eax, 4(%esp)
	call	printf
	addl	$8, %esp
	subl	$8, %esp
	movl	$symtab+52, 0(%esp)
	movl	$0, 4(%esp)
	call	printf
	addl	$8, %esp
	pushl	$1
	popl	%ebx
	cmpl	$0, %ebx
	movl	$1, %eax
	jge	testExpressions_reltrue_61
	movl	$0, %eax
testExpressions_reltrue_61:
	pushl	%eax
	popl	%ebx
	cmpl	$1, %ebx
	movl	$1, %eax
	je	testExpressions_reltrue_60
	movl	$0, %eax
testExpressions_reltrue_60:
	testl	%eax, %eax
	jnz	testExpressions_ifbl_59
	jmp	testExpressions_elsebl_59
testExpressions_ifbl_59:
	subl	$0, %esp
	call	ok
	addl	$0, %esp
	jmp	testExpressions_endif_59

testExpressions_elsebl_59:

	subl	$0, %esp
	call	failed
	addl	$0, %esp
testExpressions_endif_59:

	subl	$8, %esp
	movl	$symtab+280, 0(%esp)
	pushl	$0
	popl	%ebx
	cmpl	$1, %ebx
	movl	$1, %eax
	jl	testExpressions_reltrue_62
	movl	$0, %eax
testExpressions_reltrue_62:
	movl	%eax, 4(%esp)
	call	printf
	addl	$8, %esp
	subl	$8, %esp
	movl	$symtab+52, 0(%esp)
	movl	$0, 4(%esp)
	call	printf
	addl	$8, %esp
	pushl	$0
	popl	%ebx
	cmpl	$1, %ebx
	movl	$1, %eax
	jl	testExpressions_reltrue_65
	movl	$0, %eax
testExpressions_reltrue_65:
	pushl	%eax
	popl	%ebx
	cmpl	$1, %ebx
	movl	$1, %eax
	je	testExpressions_reltrue_64
	movl	$0, %eax
testExpressions_reltrue_64:
	testl	%eax, %eax
	jnz	testExpressions_ifbl_63
	jmp	testExpressions_elsebl_63
testExpressions_ifbl_63:
	subl	$0, %esp
	call	ok
	addl	$0, %esp
	jmp	testExpressions_endif_63

testExpressions_elsebl_63:

	subl	$0, %esp
	call	failed
	addl	$0, %esp
testExpressions_endif_63:

	subl	$8, %esp
	movl	$symtab+291, 0(%esp)
	pushl	$1
	popl	%ebx
	cmpl	$0, %ebx
	movl	$1, %eax
	jl	testExpressions_reltrue_66
	movl	$0, %eax
testExpressions_reltrue_66:
	movl	%eax, 4(%esp)
	call	printf
	addl	$8, %esp
	subl	$8, %esp
	movl	$symtab+52, 0(%esp)
	movl	$0, 4(%esp)
	call	printf
	addl	$8, %esp
	pushl	$1
	popl	%ebx
	cmpl	$0, %ebx
	movl	$1, %eax
	jl	testExpressions_reltrue_69
	movl	$0, %eax
testExpressions_reltrue_69:
	pushl	%eax
	popl	%ebx
	cmpl	$0, %ebx
	movl	$1, %eax
	je	testExpressions_reltrue_68
	movl	$0, %eax
testExpressions_reltrue_68:
	testl	%eax, %eax
	jnz	testExpressions_ifbl_67
	jmp	testExpressions_elsebl_67
testExpressions_ifbl_67:
	subl	$0, %esp
	call	ok
	addl	$0, %esp
	jmp	testExpressions_endif_67

testExpressions_elsebl_67:

	subl	$0, %esp
	call	failed
	addl	$0, %esp
testExpressions_endif_67:

	subl	$8, %esp
	movl	$symtab+302, 0(%esp)
	pushl	$0
	popl	%ebx
	cmpl	$1, %ebx
	movl	$1, %eax
	jg	testExpressions_reltrue_70
	movl	$0, %eax
testExpressions_reltrue_70:
	movl	%eax, 4(%esp)
	call	printf
	addl	$8, %esp
	subl	$8, %esp
	movl	$symtab+52, 0(%esp)
	movl	$0, 4(%esp)
	call	printf
	addl	$8, %esp
	pushl	$0
	popl	%ebx
	cmpl	$1, %ebx
	movl	$1, %eax
	jg	testExpressions_reltrue_73
	movl	$0, %eax
testExpressions_reltrue_73:
	pushl	%eax
	popl	%ebx
	cmpl	$0, %ebx
	movl	$1, %eax
	je	testExpressions_reltrue_72
	movl	$0, %eax
testExpressions_reltrue_72:
	testl	%eax, %eax
	jnz	testExpressions_ifbl_71
	jmp	testExpressions_elsebl_71
testExpressions_ifbl_71:
	subl	$0, %esp
	call	ok
	addl	$0, %esp
	jmp	testExpressions_endif_71

testExpressions_elsebl_71:

	subl	$0, %esp
	call	failed
	addl	$0, %esp
testExpressions_endif_71:

	subl	$8, %esp
	movl	$symtab+313, 0(%esp)
	pushl	$1
	popl	%ebx
	cmpl	$0, %ebx
	movl	$1, %eax
	jg	testExpressions_reltrue_74
	movl	$0, %eax
testExpressions_reltrue_74:
	movl	%eax, 4(%esp)
	call	printf
	addl	$8, %esp
	subl	$8, %esp
	movl	$symtab+52, 0(%esp)
	movl	$0, 4(%esp)
	call	printf
	addl	$8, %esp
	pushl	$1
	popl	%ebx
	cmpl	$0, %ebx
	movl	$1, %eax
	jg	testExpressions_reltrue_77
	movl	$0, %eax
testExpressions_reltrue_77:
	pushl	%eax
	popl	%ebx
	cmpl	$1, %ebx
	movl	$1, %eax
	je	testExpressions_reltrue_76
	movl	$0, %eax
testExpressions_reltrue_76:
	testl	%eax, %eax
	jnz	testExpressions_ifbl_75
	jmp	testExpressions_elsebl_75
testExpressions_ifbl_75:
	subl	$0, %esp
	call	ok
	addl	$0, %esp
	jmp	testExpressions_endif_75

testExpressions_elsebl_75:

	subl	$0, %esp
	call	failed
	addl	$0, %esp
testExpressions_endif_75:

	subl	$8, %esp
	movl	$symtab+324, 0(%esp)
	pushl	$1
	popl	%ebx
	addl	$3, %ebx
	pushl	%ebx
	popl	%eax
	movl	%eax, 4(%esp)
	call	printf
	addl	$8, %esp
	subl	$8, %esp
	movl	$symtab+52, 0(%esp)
	movl	$0, 4(%esp)
	call	printf
	addl	$8, %esp
	pushl	$1
	popl	%ebx
	addl	$3, %ebx
	pushl	%ebx
	popl	%eax
	pushl	%eax
	popl	%ebx
	cmpl	$4, %ebx
	movl	$1, %eax
	je	testExpressions_reltrue_79
	movl	$0, %eax
testExpressions_reltrue_79:
	testl	%eax, %eax
	jnz	testExpressions_ifbl_78
	jmp	testExpressions_elsebl_78
testExpressions_ifbl_78:
	subl	$0, %esp
	call	ok
	addl	$0, %esp
	jmp	testExpressions_endif_78

testExpressions_elsebl_78:

	subl	$0, %esp
	call	failed
	addl	$0, %esp
testExpressions_endif_78:

	subl	$8, %esp
	movl	$symtab+335, 0(%esp)
	pushl	$1
	popl	%ebx
	subl	$3, %ebx
	pushl	%ebx
	popl	%eax
	movl	%eax, 4(%esp)
	call	printf
	addl	$8, %esp
	subl	$8, %esp
	movl	$symtab+52, 0(%esp)
	movl	$0, 4(%esp)
	call	printf
	addl	$8, %esp
	pushl	$1
	popl	%ebx
	subl	$3, %ebx
	pushl	%ebx
	popl	%eax
	pushl	%eax
	pushl	$0
	popl	%ebx
	subl	$2, %ebx
	pushl	%ebx
	popl	%eax
	popl	%ebx
	cmpl	%eax, %ebx
	movl	$1, %eax
	je	testExpressions_reltrue_81
	movl	$0, %eax
testExpressions_reltrue_81:
	testl	%eax, %eax
	jnz	testExpressions_ifbl_80
	jmp	testExpressions_elsebl_80
testExpressions_ifbl_80:
	subl	$0, %esp
	call	ok
	addl	$0, %esp
	jmp	testExpressions_endif_80

testExpressions_elsebl_80:

	subl	$0, %esp
	call	failed
	addl	$0, %esp
testExpressions_endif_80:

	subl	$8, %esp
	movl	$symtab+346, 0(%esp)
	pushl	$6
	popl	%ebx
	andl	$4, %ebx
	pushl	%ebx
	popl	%eax
	movl	%eax, 4(%esp)
	call	printf
	addl	$8, %esp
	subl	$8, %esp
	movl	$symtab+52, 0(%esp)
	movl	$0, 4(%esp)
	call	printf
	addl	$8, %esp
	pushl	$6
	popl	%ebx
	andl	$4, %ebx
	pushl	%ebx
	popl	%eax
	pushl	%eax
	popl	%ebx
	cmpl	$4, %ebx
	movl	$1, %eax
	je	testExpressions_reltrue_83
	movl	$0, %eax
testExpressions_reltrue_83:
	testl	%eax, %eax
	jnz	testExpressions_ifbl_82
	jmp	testExpressions_elsebl_82
testExpressions_ifbl_82:
	subl	$0, %esp
	call	ok
	addl	$0, %esp
	jmp	testExpressions_endif_82

testExpressions_elsebl_82:

	subl	$0, %esp
	call	failed
	addl	$0, %esp
testExpressions_endif_82:

	subl	$8, %esp
	movl	$symtab+357, 0(%esp)
	pushl	$6
	popl	%ebx
	xorl	$4, %ebx
	pushl	%ebx
	popl	%eax
	movl	%eax, 4(%esp)
	call	printf
	addl	$8, %esp
	subl	$8, %esp
	movl	$symtab+52, 0(%esp)
	movl	$0, 4(%esp)
	call	printf
	addl	$8, %esp
	pushl	$6
	popl	%ebx
	xorl	$4, %ebx
	pushl	%ebx
	popl	%eax
	pushl	%eax
	popl	%ebx
	cmpl	$2, %ebx
	movl	$1, %eax
	je	testExpressions_reltrue_85
	movl	$0, %eax
testExpressions_reltrue_85:
	testl	%eax, %eax
	jnz	testExpressions_ifbl_84
	jmp	testExpressions_elsebl_84
testExpressions_ifbl_84:
	subl	$0, %esp
	call	ok
	addl	$0, %esp
	jmp	testExpressions_endif_84

testExpressions_elsebl_84:

	subl	$0, %esp
	call	failed
	addl	$0, %esp
testExpressions_endif_84:

	subl	$8, %esp
	movl	$symtab+368, 0(%esp)
	pushl	$6
	popl	%ebx
	imull	$4, %ebx
	pushl	%ebx
	popl	%eax
	movl	%eax, 4(%esp)
	call	printf
	addl	$8, %esp
	subl	$8, %esp
	movl	$symtab+52, 0(%esp)
	movl	$0, 4(%esp)
	call	printf
	addl	$8, %esp
	pushl	$6
	popl	%ebx
	imull	$4, %ebx
	pushl	%ebx
	popl	%eax
	pushl	%eax
	popl	%ebx
	cmpl	$24, %ebx
	movl	$1, %eax
	je	testExpressions_reltrue_87
	movl	$0, %eax
testExpressions_reltrue_87:
	testl	%eax, %eax
	jnz	testExpressions_ifbl_86
	jmp	testExpressions_elsebl_86
testExpressions_ifbl_86:
	subl	$0, %esp
	call	ok
	addl	$0, %esp
	jmp	testExpressions_endif_86

testExpressions_elsebl_86:

	subl	$0, %esp
	call	failed
	addl	$0, %esp
testExpressions_endif_86:

	subl	$8, %esp
	movl	$symtab+379, 0(%esp)
	pushl	$6
	movl	$4, %eax
	movl	%eax, %ebx
	popl	%eax
	movl	$0, %edx
	idivl	%ebx
	pushl	%eax
	popl	%eax
	movl	%eax, 4(%esp)
	call	printf
	addl	$8, %esp
	subl	$8, %esp
	movl	$symtab+52, 0(%esp)
	movl	$0, 4(%esp)
	call	printf
	addl	$8, %esp
	pushl	$6
	movl	$4, %eax
	movl	%eax, %ebx
	popl	%eax
	movl	$0, %edx
	idivl	%ebx
	pushl	%eax
	popl	%eax
	pushl	%eax
	popl	%ebx
	cmpl	$1, %ebx
	movl	$1, %eax
	je	testExpressions_reltrue_89
	movl	$0, %eax
testExpressions_reltrue_89:
	testl	%eax, %eax
	jnz	testExpressions_ifbl_88
	jmp	testExpressions_elsebl_88
testExpressions_ifbl_88:
	subl	$0, %esp
	call	ok
	addl	$0, %esp
	jmp	testExpressions_endif_88

testExpressions_elsebl_88:

	subl	$0, %esp
	call	failed
	addl	$0, %esp
testExpressions_endif_88:

	subl	$8, %esp
	movl	$symtab+390, 0(%esp)
	pushl	$6
	movl	$4, %eax
	movl	%eax, %ebx
	popl	%eax
	movl	$0, %edx
	idivl	%ebx
	pushl	%edx
	popl	%eax
	movl	%eax, 4(%esp)
	call	printf
	addl	$8, %esp
	subl	$8, %esp
	movl	$symtab+52, 0(%esp)
	movl	$0, 4(%esp)
	call	printf
	addl	$8, %esp
	pushl	$6
	movl	$4, %eax
	movl	%eax, %ebx
	popl	%eax
	movl	$0, %edx
	idivl	%ebx
	pushl	%edx
	popl	%eax
	pushl	%eax
	popl	%ebx
	cmpl	$2, %ebx
	movl	$1, %eax
	je	testExpressions_reltrue_91
	movl	$0, %eax
testExpressions_reltrue_91:
	testl	%eax, %eax
	jnz	testExpressions_ifbl_90
	jmp	testExpressions_elsebl_90
testExpressions_ifbl_90:
	subl	$0, %esp
	call	ok
	addl	$0, %esp
	jmp	testExpressions_endif_90

testExpressions_elsebl_90:

	subl	$0, %esp
	call	failed
	addl	$0, %esp
testExpressions_endif_90:

	subl	$8, %esp
	movl	$symtab+401, 0(%esp)
	movl	$7, %eax
	notl	%eax
	movl	%eax, 4(%esp)
	call	printf
	addl	$8, %esp
	subl	$8, %esp
	movl	$symtab+52, 0(%esp)
	movl	$0, 4(%esp)
	call	printf
	addl	$8, %esp
	movl	$7, %eax
	notl	%eax
	pushl	%eax
	pushl	$0
	popl	%ebx
	subl	$8, %ebx
	pushl	%ebx
	popl	%eax
	popl	%ebx
	cmpl	%eax, %ebx
	movl	$1, %eax
	je	testExpressions_reltrue_93
	movl	$0, %eax
testExpressions_reltrue_93:
	testl	%eax, %eax
	jnz	testExpressions_ifbl_92
	jmp	testExpressions_elsebl_92
testExpressions_ifbl_92:
	subl	$0, %esp
	call	ok
	addl	$0, %esp
	jmp	testExpressions_endif_92

testExpressions_elsebl_92:

	subl	$0, %esp
	call	failed
	addl	$0, %esp
testExpressions_endif_92:

	subl	$8, %esp
	movl	$symtab+409, 0(%esp)
	pushl	$0
	popl	%ebx
	subl	$7, %ebx
	pushl	%ebx
	popl	%eax
	movl	%eax, 4(%esp)
	call	printf
	addl	$8, %esp
	subl	$8, %esp
	movl	$symtab+52, 0(%esp)
	movl	$0, 4(%esp)
	call	printf
	addl	$8, %esp
	pushl	$0
	popl	%ebx
	subl	$7, %ebx
	pushl	%ebx
	popl	%eax
	pushl	%eax
	pushl	$0
	popl	%ebx
	subl	$7, %ebx
	pushl	%ebx
	popl	%eax
	popl	%ebx
	cmpl	%eax, %ebx
	movl	$1, %eax
	je	testExpressions_reltrue_95
	movl	$0, %eax
testExpressions_reltrue_95:
	testl	%eax, %eax
	jnz	testExpressions_ifbl_94
	jmp	testExpressions_elsebl_94
testExpressions_ifbl_94:
	subl	$0, %esp
	call	ok
	addl	$0, %esp
	jmp	testExpressions_endif_94

testExpressions_elsebl_94:

	subl	$0, %esp
	call	failed
	addl	$0, %esp
testExpressions_endif_94:

	subl	$8, %esp
	movl	$symtab+417, 0(%esp)
	pushl	$0
	popl	%ebx
	subl	$1, %ebx
	pushl	%ebx
	pushl	$2
	popl	%ebx
	addl	$4, %ebx
	pushl	%ebx
	popl	%eax
	pushl	%eax
	popl	%ebx
	imull	$6, %ebx
	pushl	%ebx
	popl	%eax
	popl	%ebx
	addl	%eax, %ebx
	pushl	%ebx
	popl	%ebx
	addl	$2, %ebx
	pushl	%ebx
	popl	%eax
	movl	%eax, 4(%esp)
	call	printf
	addl	$8, %esp
	subl	$8, %esp
	movl	$symtab+52, 0(%esp)
	movl	$0, 4(%esp)
	call	printf
	addl	$8, %esp
	pushl	$0
	popl	%ebx
	subl	$1, %ebx
	pushl	%ebx
	pushl	$2
	popl	%ebx
	addl	$4, %ebx
	pushl	%ebx
	popl	%eax
	pushl	%eax
	popl	%ebx
	imull	$6, %ebx
	pushl	%ebx
	popl	%eax
	popl	%ebx
	addl	%eax, %ebx
	pushl	%ebx
	popl	%ebx
	addl	$2, %ebx
	pushl	%ebx
	popl	%eax
	pushl	%eax
	popl	%ebx
	cmpl	$37, %ebx
	movl	$1, %eax
	je	testExpressions_reltrue_97
	movl	$0, %eax
testExpressions_reltrue_97:
	testl	%eax, %eax
	jnz	testExpressions_ifbl_96
	jmp	testExpressions_elsebl_96
testExpressions_ifbl_96:
	subl	$0, %esp
	call	ok
	addl	$0, %esp
	jmp	testExpressions_endif_96

testExpressions_elsebl_96:

	subl	$0, %esp
	call	failed
	addl	$0, %esp
testExpressions_endif_96:

	subl	$8, %esp
	movl	$symtab+439, 0(%esp)
	movl	$1, %eax
	testl	%eax, %eax
	jnz	testExpressions_logexprtrue_98
	movl	$0, %eax
	testl	%eax, %eax
	jz	testExpressions_logtermfalse_99
	subl	$0, %esp
	call	failed
	addl	$0, %esp
	testl	%eax, %eax
	jz	testExpressions_logtermfalse_99
	movl	$1, %eax
	jmp	testExpressions_logtermtrue_99
testExpressions_logtermfalse_99:
	movl	$0, %eax
testExpressions_logtermtrue_99:
	testl	%eax, %eax
	jnz	testExpressions_logexprtrue_98
	movl	$0, %eax
	jmp	testExpressions_logexprfalse_98
testExpressions_logexprtrue_98:
	movl	$1, %eax
testExpressions_logexprfalse_98:
	movl	%eax, 4(%esp)
	call	printf
	addl	$8, %esp
	subl	$8, %esp
	movl	$symtab+52, 0(%esp)
	movl	$0, 4(%esp)
	call	printf
	addl	$8, %esp
	movl	$1, %eax
	testl	%eax, %eax
	jnz	testExpressions_logexprtrue_102
	movl	$0, %eax
	testl	%eax, %eax
	jz	testExpressions_logtermfalse_103
	subl	$0, %esp
	call	failed
	addl	$0, %esp
	testl	%eax, %eax
	jz	testExpressions_logtermfalse_103
	movl	$1, %eax
	jmp	testExpressions_logtermtrue_103
testExpressions_logtermfalse_103:
	movl	$0, %eax
testExpressions_logtermtrue_103:
	testl	%eax, %eax
	jnz	testExpressions_logexprtrue_102
	movl	$0, %eax
	jmp	testExpressions_logexprfalse_102
testExpressions_logexprtrue_102:
	movl	$1, %eax
testExpressions_logexprfalse_102:
	pushl	%eax
	popl	%ebx
	cmpl	$1, %ebx
	movl	$1, %eax
	je	testExpressions_reltrue_101
	movl	$0, %eax
testExpressions_reltrue_101:
	testl	%eax, %eax
	jnz	testExpressions_ifbl_100
	jmp	testExpressions_elsebl_100
testExpressions_ifbl_100:
	subl	$0, %esp
	call	ok
	addl	$0, %esp
	jmp	testExpressions_endif_100

testExpressions_elsebl_100:

	subl	$0, %esp
	call	failed
	addl	$0, %esp
testExpressions_endif_100:

	subl	$8, %esp
	movl	$symtab+464, 0(%esp)
	movl	$0, %eax
	testl	%eax, %eax
	jz	testExpressions_logtermfalse_105
	subl	$0, %esp
	call	failed
	addl	$0, %esp
	testl	%eax, %eax
	jz	testExpressions_logtermfalse_105
	movl	$1, %eax
	jmp	testExpressions_logtermtrue_105
testExpressions_logtermfalse_105:
	movl	$0, %eax
testExpressions_logtermtrue_105:
	testl	%eax, %eax
	jnz	testExpressions_logexprtrue_104
	movl	$1, %eax
	testl	%eax, %eax
	jnz	testExpressions_logexprtrue_104
	movl	$0, %eax
	jmp	testExpressions_logexprfalse_104
testExpressions_logexprtrue_104:
	movl	$1, %eax
testExpressions_logexprfalse_104:
	movl	%eax, 4(%esp)
	call	printf
	addl	$8, %esp
	subl	$8, %esp
	movl	$symtab+52, 0(%esp)
	movl	$0, 4(%esp)
	call	printf
	addl	$8, %esp
	movl	$0, %eax
	testl	%eax, %eax
	jz	testExpressions_logtermfalse_109
	subl	$0, %esp
	call	failed
	addl	$0, %esp
	testl	%eax, %eax
	jz	testExpressions_logtermfalse_109
	movl	$1, %eax
	jmp	testExpressions_logtermtrue_109
testExpressions_logtermfalse_109:
	movl	$0, %eax
testExpressions_logtermtrue_109:
	testl	%eax, %eax
	jnz	testExpressions_logexprtrue_108
	movl	$1, %eax
	testl	%eax, %eax
	jnz	testExpressions_logexprtrue_108
	movl	$0, %eax
	jmp	testExpressions_logexprfalse_108
testExpressions_logexprtrue_108:
	movl	$1, %eax
testExpressions_logexprfalse_108:
	pushl	%eax
	popl	%ebx
	cmpl	$1, %ebx
	movl	$1, %eax
	je	testExpressions_reltrue_107
	movl	$0, %eax
testExpressions_reltrue_107:
	testl	%eax, %eax
	jnz	testExpressions_ifbl_106
	jmp	testExpressions_elsebl_106
testExpressions_ifbl_106:
	subl	$0, %esp
	call	ok
	addl	$0, %esp
	jmp	testExpressions_endif_106

testExpressions_elsebl_106:

	subl	$0, %esp
	call	failed
	addl	$0, %esp
testExpressions_endif_106:



testExpressions_ret:
	movl	%ebp, %esp
	popl	%ebp
	ret




.globl testStatements
.type testStatements, @function
testStatements:
	pushl	%ebp
	movl	%esp, %ebp
	subl	$8, %esp


	subl	$4, %esp
	movl	$symtab+11, 0(%esp)
	call	puts
	addl	$4, %esp
	subl	$4, %esp
	movl	$symtab+489, 0(%esp)
	call	puts
	addl	$4, %esp
	movl	$1, %eax
	testl	%eax, %eax
	jnz	testStatements_ifbl_110
	jmp	testStatements_elsebl_110
testStatements_ifbl_110:
	subl	$0, %esp
	call	ok
	addl	$0, %esp
	jmp	testStatements_endif_110

testStatements_elsebl_110:

	subl	$0, %esp
	call	failed
	addl	$0, %esp
testStatements_endif_110:

	movl	$0, %eax
	testl	%eax, %eax
	jnz	testStatements_ifbl_111
	jmp	testStatements_elsebl_111
testStatements_ifbl_111:
	subl	$0, %esp
	call	failed
	addl	$0, %esp
	jmp	testStatements_endif_111

testStatements_elsebl_111:

	subl	$0, %esp
	call	ok
	addl	$0, %esp
testStatements_endif_111:

	movl	$3, -8(%ebp)
	movl	$0, -4(%ebp)
testStatements_while_112:
	pushl	-4(%ebp)
	popl	%ebx
	cmpl	-8(%ebp), %ebx
	movl	$1, %eax
	jl	testStatements_reltrue_113
	movl	$0, %eax
testStatements_reltrue_113:
	testl	%eax, %eax
	jz	testStatements_endwhile_112

	pushl	-4(%ebp)
	popl	%ebx
	addl	$1, %ebx
	pushl	%ebx
	popl	%eax
	movl	%eax, -4(%ebp)
	jmp	testStatements_while_112
testStatements_endwhile_112:

	pushl	-4(%ebp)
	popl	%ebx
	cmpl	-8(%ebp), %ebx
	movl	$1, %eax
	je	testStatements_reltrue_115
	movl	$0, %eax
testStatements_reltrue_115:
	testl	%eax, %eax
	jnz	testStatements_ifbl_114
	jmp	testStatements_elsebl_114
testStatements_ifbl_114:
	subl	$0, %esp
	call	ok
	addl	$0, %esp
	jmp	testStatements_endif_114

testStatements_elsebl_114:

	subl	$0, %esp
	call	failed
	addl	$0, %esp
testStatements_endif_114:

	movl	$3, -8(%ebp)
	movl	$0, -4(%ebp)
testStatements_while_116:
	movl	$1, %eax
	testl	%eax, %eax
	jz	testStatements_endwhile_116

	pushl	-4(%ebp)
	popl	%ebx
	cmpl	-8(%ebp), %ebx
	movl	$1, %eax
	je	testStatements_reltrue_118
	movl	$0, %eax
testStatements_reltrue_118:
	testl	%eax, %eax
	jnz	testStatements_ifbl_117
	jmp	testStatements_elsebl_117
testStatements_ifbl_117:
	jmp	testStatements_endwhile_116
	jmp	testStatements_endif_117

testStatements_elsebl_117:

testStatements_endif_117:

	pushl	-4(%ebp)
	popl	%ebx
	addl	$1, %ebx
	pushl	%ebx
	popl	%eax
	movl	%eax, -4(%ebp)
	jmp	testStatements_while_116
testStatements_endwhile_116:

	pushl	-4(%ebp)
	popl	%ebx
	cmpl	-8(%ebp), %ebx
	movl	$1, %eax
	je	testStatements_reltrue_120
	movl	$0, %eax
testStatements_reltrue_120:
	testl	%eax, %eax
	jnz	testStatements_ifbl_119
	jmp	testStatements_elsebl_119
testStatements_ifbl_119:
	subl	$0, %esp
	call	ok
	addl	$0, %esp
	jmp	testStatements_endif_119

testStatements_elsebl_119:

	subl	$0, %esp
	call	failed
	addl	$0, %esp
testStatements_endif_119:

	movl	$3, -8(%ebp)
	movl	$0, -4(%ebp)
testStatements_while_121:
	movl	$1, %eax
	testl	%eax, %eax
	jz	testStatements_endwhile_121

	pushl	-4(%ebp)
	popl	%ebx
	addl	$1, %ebx
	pushl	%ebx
	popl	%eax
	movl	%eax, -4(%ebp)
	pushl	-4(%ebp)
	popl	%ebx
	cmpl	-8(%ebp), %ebx
	movl	$1, %eax
	jl	testStatements_reltrue_123
	movl	$0, %eax
testStatements_reltrue_123:
	testl	%eax, %eax
	jnz	testStatements_ifbl_122
	jmp	testStatements_elsebl_122
testStatements_ifbl_122:
	jmp	testStatements_while_121
	jmp	testStatements_endif_122

testStatements_elsebl_122:

testStatements_endif_122:

	jmp	testStatements_endwhile_121
	jmp	testStatements_while_121
testStatements_endwhile_121:

	pushl	-4(%ebp)
	popl	%ebx
	cmpl	-8(%ebp), %ebx
	movl	$1, %eax
	je	testStatements_reltrue_125
	movl	$0, %eax
testStatements_reltrue_125:
	testl	%eax, %eax
	jnz	testStatements_ifbl_124
	jmp	testStatements_elsebl_124
testStatements_ifbl_124:
	subl	$0, %esp
	call	ok
	addl	$0, %esp
	jmp	testStatements_endif_124

testStatements_elsebl_124:

	subl	$0, %esp
	call	failed
	addl	$0, %esp
testStatements_endif_124:

	movl	$1, %eax
	testl	%eax, %eax
	jnz	testStatements_ifbl_126
	jmp	testStatements_elsebl_126
testStatements_ifbl_126:
	jmp	testStatements_ret
	jmp	testStatements_endif_126

testStatements_elsebl_126:

testStatements_endif_126:

	subl	$0, %esp
	call	failed
	addl	$0, %esp


testStatements_ret:
	movl	%ebp, %esp
	popl	%ebp
	ret




.globl testVariables
.type testVariables, @function
testVariables:
	pushl	%ebp
	movl	%esp, %ebp
	subl	$88, %esp


	subl	$4, %esp
	movl	$symtab+11, 0(%esp)
	call	puts
	addl	$4, %esp
	subl	$4, %esp
	movl	$symtab+527, 0(%esp)
	call	puts
	addl	$4, %esp
	subl	$8, %esp
	movl	$symtab+553, 0(%esp)
	movl	$4, 4(%esp)
	call	printf
	addl	$8, %esp
	subl	$8, %esp
	movl	$symtab+52, 0(%esp)
	movl	$0, 4(%esp)
	call	printf
	addl	$8, %esp
	pushl	$4
	popl	%ebx
	cmpl	$4, %ebx
	movl	$1, %eax
	je	testVariables_reltrue_128
	movl	$0, %eax
testVariables_reltrue_128:
	testl	%eax, %eax
	jnz	testVariables_ifbl_127
	jmp	testVariables_elsebl_127
testVariables_ifbl_127:
	subl	$0, %esp
	call	ok
	addl	$0, %esp
	jmp	testVariables_endif_127

testVariables_elsebl_127:

	subl	$0, %esp
	call	failed
	addl	$0, %esp
testVariables_endif_127:

	subl	$8, %esp
	movl	$symtab+570, 0(%esp)
	movl	$1, 4(%esp)
	call	printf
	addl	$8, %esp
	subl	$8, %esp
	movl	$symtab+52, 0(%esp)
	movl	$0, 4(%esp)
	call	printf
	addl	$8, %esp
	pushl	$1
	popl	%ebx
	cmpl	$1, %ebx
	movl	$1, %eax
	je	testVariables_reltrue_130
	movl	$0, %eax
testVariables_reltrue_130:
	testl	%eax, %eax
	jnz	testVariables_ifbl_129
	jmp	testVariables_elsebl_129
testVariables_ifbl_129:
	subl	$0, %esp
	call	ok
	addl	$0, %esp
	jmp	testVariables_endif_129

testVariables_elsebl_129:

	subl	$0, %esp
	call	failed
	addl	$0, %esp
testVariables_endif_129:

	subl	$8, %esp
	movl	$symtab+588, 0(%esp)
	movl	$4, 4(%esp)
	call	printf
	addl	$8, %esp
	subl	$8, %esp
	movl	$symtab+52, 0(%esp)
	movl	$0, 4(%esp)
	call	printf
	addl	$8, %esp
	pushl	$4
	popl	%ebx
	cmpl	$4, %ebx
	movl	$1, %eax
	je	testVariables_reltrue_132
	movl	$0, %eax
testVariables_reltrue_132:
	testl	%eax, %eax
	jnz	testVariables_ifbl_131
	jmp	testVariables_elsebl_131
testVariables_ifbl_131:
	subl	$0, %esp
	call	ok
	addl	$0, %esp
	jmp	testVariables_endif_131

testVariables_elsebl_131:

	subl	$0, %esp
	call	failed
	addl	$0, %esp
testVariables_endif_131:

	movb	$97, -1(%ebp)
	movb	-1(%ebp), %ah
	movsbl	%ah, %eax
	movl	%eax, symtab+523
	movl	symtab+523, %eax
	movb	%al, -1(%ebp)
	subl	$8, %esp
	movl	$symtab+607, 0(%esp)
	movb	-1(%ebp), %ah
	movsbl	%ah, %eax
	movl	%eax, 4(%esp)
	call	printf
	addl	$8, %esp
	subl	$8, %esp
	movl	$symtab+52, 0(%esp)
	movl	$0, 4(%esp)
	call	printf
	addl	$8, %esp
	movsbl	-1(%ebp), %eax
	pushl	%eax
	popl	%ebx
	cmpl	$97, %ebx
	movl	$1, %eax
	je	testVariables_reltrue_134
	movl	$0, %eax
testVariables_reltrue_134:
	testl	%eax, %eax
	jnz	testVariables_ifbl_133
	jmp	testVariables_elsebl_133
testVariables_ifbl_133:
	subl	$0, %esp
	call	ok
	addl	$0, %esp
	jmp	testVariables_endif_133

testVariables_elsebl_133:

	subl	$0, %esp
	call	failed
	addl	$0, %esp
testVariables_endif_133:

	movl	$5, symtab+523
	movb	$2, -1(%ebp)
	movl	$symtab, %eax
	addl	$523, %eax
	movl	%eax, -5(%ebp)
	subl	$8, %esp
	movl	$symtab+615, 0(%esp)
	movl	%ebp, %eax
	addl	$-5, %eax
	movl	(%eax), %eax
	movl	(%eax), %eax
	pushl	%eax
	popl	%ebx
	cmpl	symtab+523, %ebx
	movl	$1, %eax
	je	testVariables_reltrue_135
	movl	$0, %eax
testVariables_reltrue_135:
	movl	%eax, 4(%esp)
	call	printf
	addl	$8, %esp
	subl	$8, %esp
	movl	$symtab+52, 0(%esp)
	movl	$0, 4(%esp)
	call	printf
	addl	$8, %esp
	movl	%ebp, %eax
	addl	$-5, %eax
	movl	(%eax), %eax
	movl	(%eax), %eax
	pushl	%eax
	popl	%ebx
	cmpl	symtab+523, %ebx
	movl	$1, %eax
	je	testVariables_reltrue_138
	movl	$0, %eax
testVariables_reltrue_138:
	pushl	%eax
	popl	%ebx
	cmpl	$1, %ebx
	movl	$1, %eax
	je	testVariables_reltrue_137
	movl	$0, %eax
testVariables_reltrue_137:
	testl	%eax, %eax
	jnz	testVariables_ifbl_136
	jmp	testVariables_elsebl_136
testVariables_ifbl_136:
	subl	$0, %esp
	call	ok
	addl	$0, %esp
	jmp	testVariables_endif_136

testVariables_elsebl_136:

	subl	$0, %esp
	call	failed
	addl	$0, %esp
testVariables_endif_136:

	subl	$8, %esp
	movl	$symtab+630, 0(%esp)
	pushl	-5(%ebp)
	movl	$symtab, %eax
	addl	$523, %eax
	popl	%ebx
	cmpl	%eax, %ebx
	movl	$1, %eax
	je	testVariables_reltrue_139
	movl	$0, %eax
testVariables_reltrue_139:
	movl	%eax, 4(%esp)
	call	printf
	addl	$8, %esp
	subl	$8, %esp
	movl	$symtab+52, 0(%esp)
	movl	$0, 4(%esp)
	call	printf
	addl	$8, %esp
	pushl	-5(%ebp)
	movl	$symtab, %eax
	addl	$523, %eax
	popl	%ebx
	cmpl	%eax, %ebx
	movl	$1, %eax
	je	testVariables_reltrue_142
	movl	$0, %eax
testVariables_reltrue_142:
	pushl	%eax
	popl	%ebx
	cmpl	$1, %ebx
	movl	$1, %eax
	je	testVariables_reltrue_141
	movl	$0, %eax
testVariables_reltrue_141:
	testl	%eax, %eax
	jnz	testVariables_ifbl_140
	jmp	testVariables_elsebl_140
testVariables_ifbl_140:
	subl	$0, %esp
	call	ok
	addl	$0, %esp
	jmp	testVariables_endif_140

testVariables_elsebl_140:

	subl	$0, %esp
	call	failed
	addl	$0, %esp
testVariables_endif_140:

	movl	%ebp, %eax
	addl	$-5, %eax
	movl	(%eax), %eax
	pushl	%eax
	movb	-1(%ebp), %ah
	popl	%ebx
	movsbl	%ah, %eax
	movl	%eax, (%ebx)
	subl	$8, %esp
	movl	$symtab+645, 0(%esp)
	movl	%ebp, %eax
	addl	$-5, %eax
	movl	(%eax), %eax
	movl	(%eax), %eax
	pushl	%eax
	movsbl	-1(%ebp), %eax
	popl	%ebx
	cmpl	%eax, %ebx
	movl	$1, %eax
	je	testVariables_reltrue_143
	movl	$0, %eax
testVariables_reltrue_143:
	movl	%eax, 4(%esp)
	call	printf
	addl	$8, %esp
	subl	$8, %esp
	movl	$symtab+52, 0(%esp)
	movl	$0, 4(%esp)
	call	printf
	addl	$8, %esp
	movl	%ebp, %eax
	addl	$-5, %eax
	movl	(%eax), %eax
	movl	(%eax), %eax
	pushl	%eax
	movsbl	-1(%ebp), %eax
	popl	%ebx
	cmpl	%eax, %ebx
	movl	$1, %eax
	je	testVariables_reltrue_146
	movl	$0, %eax
testVariables_reltrue_146:
	pushl	%eax
	popl	%ebx
	cmpl	$1, %ebx
	movl	$1, %eax
	je	testVariables_reltrue_145
	movl	$0, %eax
testVariables_reltrue_145:
	testl	%eax, %eax
	jnz	testVariables_ifbl_144
	jmp	testVariables_elsebl_144
testVariables_ifbl_144:
	subl	$0, %esp
	call	ok
	addl	$0, %esp
	jmp	testVariables_endif_144

testVariables_elsebl_144:

	subl	$0, %esp
	call	failed
	addl	$0, %esp
testVariables_endif_144:

	movl	%ebp, %eax
	addl	$-45, %eax
	movl	%eax, -5(%ebp)
	pushl	$2
	movl	%ebp, %eax
	addl	$-5, %eax
	movl	(%eax), %eax
	popl	%esi
	imull	$4, %esi
	addl	%esi, %eax
	pushl	%eax
	popl	%ebx
	movl	$6, (%ebx)
	subl	$8, %esp
	movl	$symtab+660, 0(%esp)
	pushl	$2
	movl	%ebp, %eax
	addl	$-45, %eax
	popl	%esi
	imull	$4, %esi
	addl	%esi, %eax
	movl	(%eax), %eax
	pushl	%eax
	popl	%ebx
	cmpl	$6, %ebx
	movl	$1, %eax
	je	testVariables_reltrue_147
	movl	$0, %eax
testVariables_reltrue_147:
	movl	%eax, 4(%esp)
	call	printf
	addl	$8, %esp
	subl	$8, %esp
	movl	$symtab+52, 0(%esp)
	movl	$0, 4(%esp)
	call	printf
	addl	$8, %esp
	pushl	$2
	movl	%ebp, %eax
	addl	$-45, %eax
	popl	%esi
	imull	$4, %esi
	addl	%esi, %eax
	movl	(%eax), %eax
	pushl	%eax
	popl	%ebx
	cmpl	$6, %ebx
	movl	$1, %eax
	je	testVariables_reltrue_150
	movl	$0, %eax
testVariables_reltrue_150:
	pushl	%eax
	popl	%ebx
	cmpl	$1, %ebx
	movl	$1, %eax
	je	testVariables_reltrue_149
	movl	$0, %eax
testVariables_reltrue_149:
	testl	%eax, %eax
	jnz	testVariables_ifbl_148
	jmp	testVariables_elsebl_148
testVariables_ifbl_148:
	subl	$0, %esp
	call	ok
	addl	$0, %esp
	jmp	testVariables_endif_148

testVariables_elsebl_148:

	subl	$0, %esp
	call	failed
	addl	$0, %esp
testVariables_endif_148:

	subl	$8, %esp
	movl	$symtab+678, 0(%esp)
	pushl	$2
	movl	%ebp, %eax
	addl	$-45, %eax
	popl	%esi
	imull	$4, %esi
	addl	%esi, %eax
	pushl	%eax
	pushl	-5(%ebp)
	popl	%ebx
	movl	$4, %esi
	imull	$2, %esi
	addl	%esi, %ebx
	pushl	%ebx
	popl	%eax
	popl	%ebx
	cmpl	%eax, %ebx
	movl	$1, %eax
	je	testVariables_reltrue_151
	movl	$0, %eax
testVariables_reltrue_151:
	movl	%eax, 4(%esp)
	call	printf
	addl	$8, %esp
	subl	$8, %esp
	movl	$symtab+52, 0(%esp)
	movl	$0, 4(%esp)
	call	printf
	addl	$8, %esp
	pushl	$2
	movl	%ebp, %eax
	addl	$-45, %eax
	popl	%esi
	imull	$4, %esi
	addl	%esi, %eax
	pushl	%eax
	pushl	-5(%ebp)
	popl	%ebx
	movl	$4, %esi
	imull	$2, %esi
	addl	%esi, %ebx
	pushl	%ebx
	popl	%eax
	popl	%ebx
	cmpl	%eax, %ebx
	movl	$1, %eax
	je	testVariables_reltrue_154
	movl	$0, %eax
testVariables_reltrue_154:
	pushl	%eax
	popl	%ebx
	cmpl	$1, %ebx
	movl	$1, %eax
	je	testVariables_reltrue_153
	movl	$0, %eax
testVariables_reltrue_153:
	testl	%eax, %eax
	jnz	testVariables_ifbl_152
	jmp	testVariables_elsebl_152
testVariables_ifbl_152:
	subl	$0, %esp
	call	ok
	addl	$0, %esp
	jmp	testVariables_endif_152

testVariables_elsebl_152:

	subl	$0, %esp
	call	failed
	addl	$0, %esp
testVariables_endif_152:

	subl	$8, %esp
	movl	$symtab+701, 0(%esp)
	pushl	$2
	movl	%ebp, %eax
	addl	$-5, %eax
	movl	(%eax), %eax
	popl	%esi
	imull	$4, %esi
	addl	%esi, %eax
	pushl	%eax
	pushl	-5(%ebp)
	popl	%ebx
	movl	$4, %esi
	imull	$2, %esi
	addl	%esi, %ebx
	pushl	%ebx
	popl	%eax
	popl	%ebx
	cmpl	%eax, %ebx
	movl	$1, %eax
	je	testVariables_reltrue_155
	movl	$0, %eax
testVariables_reltrue_155:
	movl	%eax, 4(%esp)
	call	printf
	addl	$8, %esp
	subl	$8, %esp
	movl	$symtab+52, 0(%esp)
	movl	$0, 4(%esp)
	call	printf
	addl	$8, %esp
	pushl	$2
	movl	%ebp, %eax
	addl	$-5, %eax
	movl	(%eax), %eax
	popl	%esi
	imull	$4, %esi
	addl	%esi, %eax
	pushl	%eax
	pushl	-5(%ebp)
	popl	%ebx
	movl	$4, %esi
	imull	$2, %esi
	addl	%esi, %ebx
	pushl	%ebx
	popl	%eax
	popl	%ebx
	cmpl	%eax, %ebx
	movl	$1, %eax
	je	testVariables_reltrue_158
	movl	$0, %eax
testVariables_reltrue_158:
	pushl	%eax
	popl	%ebx
	cmpl	$1, %ebx
	movl	$1, %eax
	je	testVariables_reltrue_157
	movl	$0, %eax
testVariables_reltrue_157:
	testl	%eax, %eax
	jnz	testVariables_ifbl_156
	jmp	testVariables_elsebl_156
testVariables_ifbl_156:
	subl	$0, %esp
	call	ok
	addl	$0, %esp
	jmp	testVariables_endif_156

testVariables_elsebl_156:

	subl	$0, %esp
	call	failed
	addl	$0, %esp
testVariables_endif_156:

	movl	%ebp, %eax
	addl	$-88, %eax
	addl	$13, %eax
	pushl	%eax
	movl	$symtab, %eax
	addl	$506, %eax
	popl	%ebx
	movl	%eax, (%ebx)
	movl	$symtab, %eax
	addl	$506, %eax
	addl	$9, %eax
	pushl	%eax
	movl	%ebp, %eax
	addl	$-58, %eax
	popl	%ebx
	movl	%eax, (%ebx)
	movl	%ebp, %eax
	addl	$-58, %eax
	addl	$0, %eax
	movl	%eax, -5(%ebp)
	subl	$8, %esp
	movl	$symtab+722, 0(%esp)
	movl	%ebp, %eax
	addl	$-88, %eax
	addl	$13, %eax
	movl	(%eax), %eax
	addl	$9, %eax
	movl	(%eax), %eax
	pushl	%eax
	movl	%ebp, %eax
	addl	$-58, %eax
	popl	%ebx
	cmpl	%eax, %ebx
	movl	$1, %eax
	je	testVariables_reltrue_159
	movl	$0, %eax
testVariables_reltrue_159:
	movl	%eax, 4(%esp)
	call	printf
	addl	$8, %esp
	subl	$8, %esp
	movl	$symtab+52, 0(%esp)
	movl	$0, 4(%esp)
	call	printf
	addl	$8, %esp
	movl	%ebp, %eax
	addl	$-88, %eax
	addl	$13, %eax
	movl	(%eax), %eax
	addl	$9, %eax
	movl	(%eax), %eax
	pushl	%eax
	movl	%ebp, %eax
	addl	$-58, %eax
	popl	%ebx
	cmpl	%eax, %ebx
	movl	$1, %eax
	je	testVariables_reltrue_162
	movl	$0, %eax
testVariables_reltrue_162:
	pushl	%eax
	popl	%ebx
	cmpl	$1, %ebx
	movl	$1, %eax
	je	testVariables_reltrue_161
	movl	$0, %eax
testVariables_reltrue_161:
	testl	%eax, %eax
	jnz	testVariables_ifbl_160
	jmp	testVariables_elsebl_160
testVariables_ifbl_160:
	subl	$0, %esp
	call	ok
	addl	$0, %esp
	jmp	testVariables_endif_160

testVariables_elsebl_160:

	subl	$0, %esp
	call	failed
	addl	$0, %esp
testVariables_endif_160:

	pushl	$1
	movl	%ebp, %eax
	addl	$-5, %eax
	movl	(%eax), %eax
	popl	%esi
	imull	$4, %esi
	addl	%esi, %eax
	pushl	%eax
	popl	%ebx
	movl	$97, (%ebx)
	subl	$8, %esp
	movl	$symtab+744, 0(%esp)
	pushl	$1
	movl	%ebp, %eax
	addl	$-88, %eax
	addl	$13, %eax
	movl	(%eax), %eax
	addl	$9, %eax
	movl	(%eax), %eax
	addl	$0, %eax
	popl	%esi
	imull	$4, %esi
	addl	%esi, %eax
	movl	(%eax), %eax
	pushl	%eax
	popl	%ebx
	cmpl	$97, %ebx
	movl	$1, %eax
	je	testVariables_reltrue_163
	movl	$0, %eax
testVariables_reltrue_163:
	movl	%eax, 4(%esp)
	call	printf
	addl	$8, %esp
	subl	$8, %esp
	movl	$symtab+52, 0(%esp)
	movl	$0, 4(%esp)
	call	printf
	addl	$8, %esp
	pushl	$1
	movl	%ebp, %eax
	addl	$-88, %eax
	addl	$13, %eax
	movl	(%eax), %eax
	addl	$9, %eax
	movl	(%eax), %eax
	addl	$0, %eax
	popl	%esi
	imull	$4, %esi
	addl	%esi, %eax
	movl	(%eax), %eax
	pushl	%eax
	popl	%ebx
	cmpl	$97, %ebx
	movl	$1, %eax
	je	testVariables_reltrue_166
	movl	$0, %eax
testVariables_reltrue_166:
	pushl	%eax
	popl	%ebx
	cmpl	$1, %ebx
	movl	$1, %eax
	je	testVariables_reltrue_165
	movl	$0, %eax
testVariables_reltrue_165:
	testl	%eax, %eax
	jnz	testVariables_ifbl_164
	jmp	testVariables_elsebl_164
testVariables_ifbl_164:
	subl	$0, %esp
	call	ok
	addl	$0, %esp
	jmp	testVariables_endif_164

testVariables_elsebl_164:

	subl	$0, %esp
	call	failed
	addl	$0, %esp
testVariables_endif_164:

	movl	%ebp, %eax
	addl	$-71, %eax
	pushl	%eax
	movl	%ebp, %eax
	addl	$-58, %eax
	popl	%ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movb	(%eax), %cl
	movb	%cl, (%ebx)
	addl	$1, %eax
	addl	$1, %ebx
	subl	$8, %esp
	movl	$symtab+772, 0(%esp)
	pushl	$1
	movl	%ebp, %eax
	addl	$-71, %eax
	addl	$0, %eax
	popl	%esi
	imull	$4, %esi
	addl	%esi, %eax
	movl	(%eax), %eax
	pushl	%eax
	popl	%ebx
	cmpl	$97, %ebx
	movl	$1, %eax
	je	testVariables_reltrue_167
	movl	$0, %eax
testVariables_reltrue_167:
	movl	%eax, 4(%esp)
	call	printf
	addl	$8, %esp
	subl	$8, %esp
	movl	$symtab+52, 0(%esp)
	movl	$0, 4(%esp)
	call	printf
	addl	$8, %esp
	pushl	$1
	movl	%ebp, %eax
	addl	$-71, %eax
	addl	$0, %eax
	popl	%esi
	imull	$4, %esi
	addl	%esi, %eax
	movl	(%eax), %eax
	pushl	%eax
	popl	%ebx
	cmpl	$97, %ebx
	movl	$1, %eax
	je	testVariables_reltrue_170
	movl	$0, %eax
testVariables_reltrue_170:
	pushl	%eax
	popl	%ebx
	cmpl	$1, %ebx
	movl	$1, %eax
	je	testVariables_reltrue_169
	movl	$0, %eax
testVariables_reltrue_169:
	testl	%eax, %eax
	jnz	testVariables_ifbl_168
	jmp	testVariables_elsebl_168
testVariables_ifbl_168:
	subl	$0, %esp
	call	ok
	addl	$0, %esp
	jmp	testVariables_endif_168

testVariables_elsebl_168:

	subl	$0, %esp
	call	failed
	addl	$0, %esp
testVariables_endif_168:



testVariables_ret:
	movl	%ebp, %esp
	popl	%ebp
	ret




.globl testFunc1
.type testFunc1, @function
testFunc1:
	pushl	%ebp
	movl	%esp, %ebp
	subl	$0, %esp


	movl	$1, 8(%ebp)
	movl	%ebp, %eax
	addl	$12, %eax
	movl	(%eax), %eax
	pushl	%eax
	popl	%ebx
	movl	$2, (%ebx)
	movl	%ebp, %eax
	addl	$16, %eax
	addl	$8, %eax
	pushl	%eax
	popl	%ebx
	movb	$3, (%ebx)
	movl	%ebp, %eax
	addl	$29, %eax
	movl	(%eax), %eax
	addl	$8, %eax
	pushl	%eax
	popl	%ebx
	movb	$4, (%ebx)
	movl	$5, %eax
	jmp	testFunc1_ret


testFunc1_ret:
	movl	%ebp, %esp
	popl	%ebp
	ret




.globl testFunc2
.type testFunc2, @function
testFunc2:
	pushl	%ebp
	movl	%esp, %ebp
	subl	$0, %esp


	pushl	$2
	movl	%ebp, %eax
	addl	$8, %eax
	movl	(%eax), %eax
	popl	%esi
	imull	$4, %esi
	addl	%esi, %eax
	pushl	%eax
	popl	%ebx
	movl	$7, (%ebx)


testFunc2_ret:
	movl	%ebp, %esp
	popl	%ebp
	ret




.globl testFunctions
.type testFunctions, @function
testFunctions:
	pushl	%ebp
	movl	%esp, %ebp
	subl	$62, %esp


	subl	$4, %esp
	movl	$symtab+11, 0(%esp)
	call	puts
	addl	$4, %esp
	subl	$4, %esp
	movl	$symtab+791, 0(%esp)
	call	puts
	addl	$4, %esp
	movl	$0, -4(%ebp)
	movl	$0, -8(%ebp)
	movl	%ebp, %eax
	addl	$-21, %eax
	addl	$8, %eax
	pushl	%eax
	popl	%ebx
	movb	$0, (%ebx)
	movl	%ebp, %eax
	addl	$-34, %eax
	addl	$8, %eax
	pushl	%eax
	popl	%ebx
	movb	$0, (%ebx)
	subl	$25, %esp
	movl	-4(%ebp), %eax
	movl	%eax, 0(%esp)
	movl	%ebp, %eax
	addl	$-8, %eax
	movl	%eax, 4(%esp)
	movl	%ebp, %eax
	addl	$-21, %eax
	movl	%esp, %ebx
	addl	$8, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movl	(%eax), %ecx
	movl	%ecx, (%ebx)
	addl	$4, %eax
	addl	$4, %ebx
	movb	(%eax), %cl
	movb	%cl, (%ebx)
	addl	$1, %eax
	addl	$1, %ebx
	movl	%ebp, %eax
	addl	$-34, %eax
	movl	%eax, 21(%esp)
	call	testFunc1
	addl	$25, %esp
	movl	%eax, -38(%ebp)
	subl	$8, %esp
	movl	$symtab+812, 0(%esp)
	movl	-38(%ebp), %eax
	movl	%eax, 4(%esp)
	call	printf
	addl	$8, %esp
	subl	$8, %esp
	movl	$symtab+52, 0(%esp)
	movl	$0, 4(%esp)
	call	printf
	addl	$8, %esp
	pushl	-38(%ebp)
	popl	%ebx
	cmpl	$5, %ebx
	movl	$1, %eax
	je	testFunctions_reltrue_172
	movl	$0, %eax
testFunctions_reltrue_172:
	testl	%eax, %eax
	jnz	testFunctions_ifbl_171
	jmp	testFunctions_elsebl_171
testFunctions_ifbl_171:
	subl	$0, %esp
	call	ok
	addl	$0, %esp
	jmp	testFunctions_endif_171

testFunctions_elsebl_171:

	subl	$0, %esp
	call	failed
	addl	$0, %esp
testFunctions_endif_171:

	subl	$8, %esp
	movl	$symtab+820, 0(%esp)
	movl	-4(%ebp), %eax
	movl	%eax, 4(%esp)
	call	printf
	addl	$8, %esp
	subl	$8, %esp
	movl	$symtab+52, 0(%esp)
	movl	$0, 4(%esp)
	call	printf
	addl	$8, %esp
	pushl	-4(%ebp)
	popl	%ebx
	cmpl	$0, %ebx
	movl	$1, %eax
	je	testFunctions_reltrue_174
	movl	$0, %eax
testFunctions_reltrue_174:
	testl	%eax, %eax
	jnz	testFunctions_ifbl_173
	jmp	testFunctions_elsebl_173
testFunctions_ifbl_173:
	subl	$0, %esp
	call	ok
	addl	$0, %esp
	jmp	testFunctions_endif_173

testFunctions_elsebl_173:

	subl	$0, %esp
	call	failed
	addl	$0, %esp
testFunctions_endif_173:

	subl	$8, %esp
	movl	$symtab+826, 0(%esp)
	movl	-8(%ebp), %eax
	movl	%eax, 4(%esp)
	call	printf
	addl	$8, %esp
	subl	$8, %esp
	movl	$symtab+52, 0(%esp)
	movl	$0, 4(%esp)
	call	printf
	addl	$8, %esp
	pushl	-8(%ebp)
	popl	%ebx
	cmpl	$2, %ebx
	movl	$1, %eax
	je	testFunctions_reltrue_176
	movl	$0, %eax
testFunctions_reltrue_176:
	testl	%eax, %eax
	jnz	testFunctions_ifbl_175
	jmp	testFunctions_elsebl_175
testFunctions_ifbl_175:
	subl	$0, %esp
	call	ok
	addl	$0, %esp
	jmp	testFunctions_endif_175

testFunctions_elsebl_175:

	subl	$0, %esp
	call	failed
	addl	$0, %esp
testFunctions_endif_175:

	subl	$8, %esp
	movl	$symtab+832, 0(%esp)
	movl	%ebp, %eax
	addl	$-21, %eax
	addl	$8, %eax
	movb	(%eax), %al
	movsbl	%al, %eax
	movl	%eax, 4(%esp)
	call	printf
	addl	$8, %esp
	subl	$8, %esp
	movl	$symtab+52, 0(%esp)
	movl	$0, 4(%esp)
	call	printf
	addl	$8, %esp
	movl	%ebp, %eax
	addl	$-21, %eax
	addl	$8, %eax
	movb	(%eax), %al
	movsbl	%al, %eax
	pushl	%eax
	popl	%ebx
	cmpl	$0, %ebx
	movl	$1, %eax
	je	testFunctions_reltrue_178
	movl	$0, %eax
testFunctions_reltrue_178:
	testl	%eax, %eax
	jnz	testFunctions_ifbl_177
	jmp	testFunctions_elsebl_177
testFunctions_ifbl_177:
	subl	$0, %esp
	call	ok
	addl	$0, %esp
	jmp	testFunctions_endif_177

testFunctions_elsebl_177:

	subl	$0, %esp
	call	failed
	addl	$0, %esp
testFunctions_endif_177:

	subl	$8, %esp
	movl	$symtab+841, 0(%esp)
	movl	%ebp, %eax
	addl	$-34, %eax
	addl	$8, %eax
	movb	(%eax), %al
	movsbl	%al, %eax
	movl	%eax, 4(%esp)
	call	printf
	addl	$8, %esp
	subl	$8, %esp
	movl	$symtab+52, 0(%esp)
	movl	$0, 4(%esp)
	call	printf
	addl	$8, %esp
	movl	%ebp, %eax
	addl	$-34, %eax
	addl	$8, %eax
	movb	(%eax), %al
	movsbl	%al, %eax
	pushl	%eax
	popl	%ebx
	cmpl	$4, %ebx
	movl	$1, %eax
	je	testFunctions_reltrue_180
	movl	$0, %eax
testFunctions_reltrue_180:
	testl	%eax, %eax
	jnz	testFunctions_ifbl_179
	jmp	testFunctions_elsebl_179
testFunctions_ifbl_179:
	subl	$0, %esp
	call	ok
	addl	$0, %esp
	jmp	testFunctions_endif_179

testFunctions_elsebl_179:

	subl	$0, %esp
	call	failed
	addl	$0, %esp
testFunctions_endif_179:

	subl	$4, %esp
	movl	%ebp, %eax
	addl	$-62, %eax
	movl	%eax, 0(%esp)
	call	testFunc2
	addl	$4, %esp
	subl	$8, %esp
	movl	$symtab+850, 0(%esp)
	pushl	$2
	movl	%ebp, %eax
	addl	$-62, %eax
	popl	%esi
	imull	$4, %esi
	addl	%esi, %eax
	movl	(%eax), %eax
	movl	%eax, 4(%esp)
	call	printf
	addl	$8, %esp
	subl	$8, %esp
	movl	$symtab+52, 0(%esp)
	movl	$0, 4(%esp)
	call	printf
	addl	$8, %esp
	pushl	$2
	movl	%ebp, %eax
	addl	$-62, %eax
	popl	%esi
	imull	$4, %esi
	addl	%esi, %eax
	movl	(%eax), %eax
	pushl	%eax
	popl	%ebx
	cmpl	$7, %ebx
	movl	$1, %eax
	je	testFunctions_reltrue_182
	movl	$0, %eax
testFunctions_reltrue_182:
	testl	%eax, %eax
	jnz	testFunctions_ifbl_181
	jmp	testFunctions_elsebl_181
testFunctions_ifbl_181:
	subl	$0, %esp
	call	ok
	addl	$0, %esp
	jmp	testFunctions_endif_181

testFunctions_elsebl_181:

	subl	$0, %esp
	call	failed
	addl	$0, %esp
testFunctions_endif_181:



testFunctions_ret:
	movl	%ebp, %esp
	popl	%ebp
	ret




.globl main
.type main, @function
main:
	pushl	%ebp
	movl	%esp, %ebp
	subl	$0, %esp


	subl	$4, %esp
	movl	$symtab+861, 0(%esp)
	call	puts
	addl	$4, %esp
	subl	$0, %esp
	call	testStatements
	addl	$0, %esp
	subl	$0, %esp
	call	testExpressions
	addl	$0, %esp
	subl	$0, %esp
	call	testVariables
	addl	$0, %esp
	subl	$0, %esp
	call	testFunctions
	addl	$0, %esp
	subl	$0, %esp
	call	testBytedata
	addl	$0, %esp
	subl	$4, %esp
	movl	$symtab+11, 0(%esp)
	call	puts
	addl	$4, %esp
	movl	$1, %eax
	jmp	main_ret


main_ret:
	movl	%ebp, %esp
	popl	%ebp
	ret




# The symbol table 

.section .data
symtab:
	.string	"FAILED!"
	.string	"OK"
	.string	""
	.string	"Test byte data:"
	.string	"b = -4"
	.string	"c = b-124"
	.string	"c : %d"
	.string	"\t\t-->"
	.string	"c = b-125"
	.string	"c = b+6"
	.string	"Test expressions:"
	.string	"1 && 0 && failed() : %d"
	.string	"1 && 1 : %d"
	.string	"0 || 0 : %d"
	.string	"1 || 1 || failed() : %d"
	.string	"! 1 : %d"
	.string	"! 0 : %d"
	.string	"0 == 0 : %d"
	.string	"0 == 1 : %d"
	.string	"0 != 0 : %d"
	.string	"0 != 1 : %d"
	.string	"0 <= 1 : %d"
	.string	"1 <= 0 : %d"
	.string	"0 >= 1 : %d"
	.string	"1 >= 0 : %d"
	.string	"0 < 1 : %d"
	.string	"1 < 0 : %d"
	.string	"0 > 1 : %d"
	.string	"1 > 0 : %d"
	.string	"1 + 3 : %d"
	.string	"1 - 3 : %d"
	.string	"6 & 4 : %d"
	.string	"6 ^ 4 : %d"
	.string	"6 * 4 : %d"
	.string	"6 / 4 : %d"
	.string	"6 % 4 : %d"
	.string	"~7 : %d"
	.string	"-7 : %d"
	.string	"-1 + (2+4)*6 + 2 : %d"
	.string	" 1 || 0 && failed() : %d"
	.string	" 0 && failed() || 1 : %d"
	.string	"Test statements:"
	.rept 17
		.byte 0
	.endr
	.long 0
	.string	"Test variable expression:"
	.string	"sizeof(int) : %d"
	.string	"sizeof(char) : %d"
	.string	"sizeof(void*) : %d"
	.string	"c1 : %d"
	.string	"*pi1 == i1: %d"
	.string	"pi1 == &i1: %d"
	.string	"*pi1 == c1: %d"
	.string	"iarr1[2] == 6: %d"
	.string	"&iarr1[2] == pi1+2: %d"
	.string	"&pi1[2] == pi1+2: %d"
	.string	"s2.next->c == &f1: %d"
	.string	"s2.next->c->a[1] == 'a': %d"
	.string	"f2.a[1] == 'a': %d"
	.string	"Test function calls:"
	.string	"ret: %d"
	.string	"a: %d"
	.string	"b: %d"
	.string	"f1.b: %d"
	.string	"f2.b: %d"
	.string	"arr[2]: %d"
	.string	"\\ Features /"

